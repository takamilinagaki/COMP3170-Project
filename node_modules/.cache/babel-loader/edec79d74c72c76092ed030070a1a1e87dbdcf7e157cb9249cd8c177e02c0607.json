{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { KeyCodes, css, initializeComponentRef } from '../../Utilities';\nimport { Autofill } from '../../Autofill';\nimport * as stylesImport from './BaseExtendedPicker.scss';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nvar styles = stylesImport;\nvar BaseExtendedPicker = /** @class */function (_super) {\n  __extends(BaseExtendedPicker, _super);\n  function BaseExtendedPicker(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n    _this.floatingPicker = React.createRef();\n    _this.selectedItemsList = React.createRef();\n    _this.root = React.createRef();\n    _this.input = React.createRef();\n    _this.onSelectionChange = function () {\n      _this.forceUpdate();\n    };\n    _this.onInputChange = function (value, composing) {\n      // We don't want to update the picker's suggestions when the input is still being composed\n      if (!composing) {\n        _this.setState({\n          queryString: value\n        });\n        if (_this.floatingPicker.current) {\n          _this.floatingPicker.current.onQueryStringChanged(value);\n        }\n      }\n    };\n    _this.onInputFocus = function (ev) {\n      if (_this.selectedItemsList.current) {\n        _this.selectedItemsList.current.unselectAll();\n      }\n      if (_this.props.inputProps && _this.props.inputProps.onFocus) {\n        _this.props.inputProps.onFocus(ev);\n      }\n    };\n    _this.onInputClick = function (ev) {\n      if (_this.selectedItemsList.current) {\n        _this.selectedItemsList.current.unselectAll();\n      }\n      if (_this.floatingPicker.current && _this.inputElement) {\n        // Update the value if the input value is empty or is different than the current inputText from the floatingPicker\n        var shoudUpdateValue = _this.inputElement.value === '' || _this.inputElement.value !== _this.floatingPicker.current.inputText;\n        _this.floatingPicker.current.showPicker(shoudUpdateValue);\n      }\n    };\n    // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n    // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n    _this.onBackspace = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which !== KeyCodes.backspace) {\n        return;\n      }\n      if (_this.selectedItemsList.current && _this.items.length) {\n        if (_this.input.current && !_this.input.current.isValueSelected && _this.input.current.inputElement === ev.currentTarget.ownerDocument.activeElement && _this.input.current.cursorLocation === 0) {\n          if (_this.floatingPicker.current) {\n            _this.floatingPicker.current.hidePicker();\n          }\n          ev.preventDefault();\n          _this.selectedItemsList.current.removeItemAt(_this.items.length - 1);\n          _this._onSelectedItemsChanged();\n        } else if (_this.selectedItemsList.current.hasSelectedItems()) {\n          if (_this.floatingPicker.current) {\n            _this.floatingPicker.current.hidePicker();\n          }\n          ev.preventDefault();\n          _this.selectedItemsList.current.removeSelectedItems();\n          _this._onSelectedItemsChanged();\n        }\n      }\n    };\n    _this.onCopy = function (ev) {\n      if (_this.selectedItemsList.current) {\n        // Pass it down into the selected items list\n        _this.selectedItemsList.current.onCopy(ev);\n      }\n    };\n    _this.onPaste = function (ev) {\n      if (_this.props.onPaste) {\n        var inputText = ev.clipboardData.getData('Text');\n        ev.preventDefault();\n        _this.props.onPaste(inputText);\n      }\n    };\n    _this._onSuggestionSelected = function (item) {\n      var currentRenderedQueryString = _this.props.currentRenderedQueryString;\n      var queryString = _this.state.queryString;\n      if (currentRenderedQueryString === undefined || currentRenderedQueryString === queryString) {\n        var processedItem = _this.props.onItemSelected ? _this.props.onItemSelected(item) : item;\n        if (processedItem === null) {\n          return;\n        }\n        var processedItemObject = processedItem;\n        var processedItemPromiseLike = processedItem;\n        var newItem_1;\n        if (processedItemPromiseLike && processedItemPromiseLike.then) {\n          processedItemPromiseLike.then(function (resolvedProcessedItem) {\n            newItem_1 = resolvedProcessedItem;\n            _this._addProcessedItem(newItem_1);\n          });\n        } else {\n          newItem_1 = processedItemObject;\n          _this._addProcessedItem(newItem_1);\n        }\n      }\n    };\n    _this._onSelectedItemsChanged = function () {\n      _this.focus();\n    };\n    /**\n     * The floating picker is the source of truth for if the menu has been opened or not.\n     *\n     * Because this isn't tracked inside the state of this component, we need to\n     * force an update here to keep the rendered output that depends on the picker being open\n     * in sync with the state\n     *\n     * Called when the suggestions is shown or closed\n     */\n    _this._onSuggestionsShownOrHidden = function () {\n      _this.forceUpdate();\n    };\n    initializeComponentRef(_this);\n    _this.selection = new Selection({\n      onSelectionChanged: function () {\n        return _this.onSelectionChange();\n      }\n    });\n    _this.state = {\n      queryString: ''\n    };\n    return _this;\n  }\n  Object.defineProperty(BaseExtendedPicker.prototype, \"items\", {\n    get: function () {\n      var _a, _b, _c, _d;\n      return (_d = (_c = (_a = this.props.selectedItems) !== null && _a !== void 0 ? _a : (_b = this.selectedItemsList.current) === null || _b === void 0 ? void 0 : _b.items) !== null && _c !== void 0 ? _c : this.props.defaultSelectedItems) !== null && _d !== void 0 ? _d : null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BaseExtendedPicker.prototype.componentDidMount = function () {\n    this.forceUpdate();\n  };\n  BaseExtendedPicker.prototype.focus = function () {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  };\n  BaseExtendedPicker.prototype.clearInput = function () {\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n  };\n  Object.defineProperty(BaseExtendedPicker.prototype, \"inputElement\", {\n    get: function () {\n      return this.input.current && this.input.current.inputElement;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BaseExtendedPicker.prototype, \"highlightedItems\", {\n    get: function () {\n      return this.selectedItemsList.current ? this.selectedItemsList.current.highlightedItems() : [];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BaseExtendedPicker.prototype.render = function () {\n    var _a = this.props,\n      className = _a.className,\n      inputProps = _a.inputProps,\n      disabled = _a.disabled,\n      focusZoneProps = _a.focusZoneProps;\n    var activeDescendant = this.floatingPicker.current && this.floatingPicker.current.currentSelectedSuggestionIndex !== -1 ? 'sug-' + this.floatingPicker.current.currentSelectedSuggestionIndex : undefined;\n    var isExpanded = this.floatingPicker.current ? this.floatingPicker.current.isSuggestionsShown : false;\n    return React.createElement(\"div\", {\n      ref: this.root,\n      className: css('ms-BasePicker ms-BaseExtendedPicker', className ? className : ''),\n      onKeyDown: this.onBackspace,\n      onCopy: this.onCopy\n    }, React.createElement(FocusZone, __assign({\n      direction: FocusZoneDirection.bidirectional\n    }, focusZoneProps), React.createElement(SelectionZone, {\n      selection: this.selection,\n      selectionMode: SelectionMode.multiple\n    }, React.createElement(\"div\", {\n      className: css('ms-BasePicker-text', styles.pickerText),\n      role: 'list'\n    }, this.props.headerComponent, this.renderSelectedItemsList(), this.canAddItems() && React.createElement(Autofill, __assign({}, inputProps, {\n      className: css('ms-BasePicker-input', styles.pickerInput),\n      ref: this.input,\n      onFocus: this.onInputFocus,\n      onClick: this.onInputClick,\n      onInputValueChange: this.onInputChange,\n      \"aria-activedescendant\": activeDescendant,\n      \"aria-owns\": isExpanded ? 'suggestion-list' : undefined,\n      \"aria-expanded\": isExpanded,\n      \"aria-haspopup\": \"true\",\n      role: \"combobox\",\n      disabled: disabled,\n      onPaste: this.onPaste\n    }))))), this.renderFloatingPicker());\n  };\n  Object.defineProperty(BaseExtendedPicker.prototype, \"floatingPickerProps\", {\n    get: function () {\n      return this.props.floatingPickerProps;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BaseExtendedPicker.prototype, \"selectedItemsListProps\", {\n    get: function () {\n      return this.props.selectedItemsListProps;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BaseExtendedPicker.prototype.canAddItems = function () {\n    var itemLimit = this.props.itemLimit;\n    return itemLimit === undefined || this.items.length < itemLimit;\n  };\n  BaseExtendedPicker.prototype.renderFloatingPicker = function () {\n    var FloatingPicker = this.props.onRenderFloatingPicker;\n    return React.createElement(FloatingPicker, __assign({\n      componentRef: this.floatingPicker,\n      onChange: this._onSuggestionSelected,\n      onSuggestionsHidden: this._onSuggestionsShownOrHidden,\n      onSuggestionsShown: this._onSuggestionsShownOrHidden,\n      inputElement: this.input.current ? this.input.current.inputElement : undefined,\n      selectedItems: this.items,\n      suggestionItems: this.props.suggestionItems ? this.props.suggestionItems : undefined\n    }, this.floatingPickerProps));\n  };\n  BaseExtendedPicker.prototype.renderSelectedItemsList = function () {\n    var SelectedItems = this.props.onRenderSelectedItems;\n    return React.createElement(SelectedItems, __assign({\n      componentRef: this.selectedItemsList,\n      selection: this.selection,\n      selectedItems: this.props.selectedItems ? this.props.selectedItems : undefined,\n      onItemsDeleted: this.props.selectedItems ? this.props.onItemsRemoved : undefined\n    }, this.selectedItemsListProps));\n  };\n  BaseExtendedPicker.prototype._addProcessedItem = function (newItem) {\n    // If this is a controlled component, call the on item selected callback\n    // Otherwise add it to the selectedItemsList\n    if (this.props.onItemAdded) {\n      this.props.onItemAdded(newItem);\n    }\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.addItems([newItem]);\n    }\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n    if (this.floatingPicker.current) {\n      this.floatingPicker.current.hidePicker();\n    }\n    this.focus();\n  };\n  return BaseExtendedPicker;\n}(React.Component);\nexport { BaseExtendedPicker };","map":{"version":3,"names":["React","KeyCodes","css","initializeComponentRef","Autofill","stylesImport","FocusZone","FocusZoneDirection","Selection","SelectionMode","SelectionZone","styles","BaseExtendedPicker","_super","__extends","basePickerProps","_this","call","floatingPicker","createRef","selectedItemsList","root","input","onSelectionChange","forceUpdate","onInputChange","value","composing","setState","queryString","current","onQueryStringChanged","onInputFocus","ev","unselectAll","props","inputProps","onFocus","onInputClick","inputElement","shoudUpdateValue","inputText","showPicker","onBackspace","which","backspace","items","length","isValueSelected","currentTarget","ownerDocument","activeElement","cursorLocation","hidePicker","preventDefault","removeItemAt","_onSelectedItemsChanged","hasSelectedItems","removeSelectedItems","onCopy","onPaste","clipboardData","getData","_onSuggestionSelected","item","currentRenderedQueryString","state","undefined","processedItem","onItemSelected","processedItemObject","processedItemPromiseLike","newItem_1","then","resolvedProcessedItem","_addProcessedItem","focus","_onSuggestionsShownOrHidden","selection","onSelectionChanged","Object","defineProperty","prototype","get","_d","_c","_a","selectedItems","_b","defaultSelectedItems","componentDidMount","clearInput","clear","highlightedItems","render","className","disabled","focusZoneProps","activeDescendant","currentSelectedSuggestionIndex","isExpanded","isSuggestionsShown","createElement","ref","onKeyDown","__assign","direction","bidirectional","selectionMode","multiple","pickerText","role","headerComponent","renderSelectedItemsList","canAddItems","pickerInput","onClick","onInputValueChange","renderFloatingPicker","floatingPickerProps","selectedItemsListProps","itemLimit","FloatingPicker","onRenderFloatingPicker","componentRef","onChange","onSuggestionsHidden","onSuggestionsShown","suggestionItems","SelectedItems","onRenderSelectedItems","onItemsDeleted","onItemsRemoved","newItem","onItemAdded","addItems","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/ExtendedPicker/BaseExtendedPicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KeyCodes, css, initializeComponentRef } from '../../Utilities';\nimport { Autofill } from '../../Autofill';\nimport * as stylesImport from './BaseExtendedPicker.scss';\nimport { BaseFloatingPicker } from '../../FloatingPicker';\nimport { BaseSelectedItemsList } from '../../SelectedItemsList';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nimport type { IInputProps } from '../../Pickers';\nimport type { IBaseExtendedPickerProps, IBaseExtendedPicker } from './BaseExtendedPicker.types';\nimport type { IBaseFloatingPickerProps } from '../../FloatingPicker';\nimport type { IBaseSelectedItemsListProps } from '../../SelectedItemsList';\n\nconst styles: any = stylesImport;\n\nexport interface IBaseExtendedPickerState<T> {\n  queryString: string | null;\n}\n\nexport class BaseExtendedPicker<T, P extends IBaseExtendedPickerProps<T>>\n  extends React.Component<P, IBaseExtendedPickerState<T>>\n  implements IBaseExtendedPicker<T>\n{\n  public floatingPicker = React.createRef<BaseFloatingPicker<T, IBaseFloatingPickerProps<T>>>();\n  public selectedItemsList = React.createRef<BaseSelectedItemsList<T, IBaseSelectedItemsListProps<T>>>();\n\n  protected root = React.createRef<HTMLDivElement>();\n  protected input = React.createRef<Autofill>();\n  protected selection: Selection;\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    initializeComponentRef(this);\n    this.selection = new Selection({ onSelectionChanged: () => this.onSelectionChange() });\n\n    this.state = {\n      queryString: '',\n    };\n  }\n\n  public get items(): any {\n    return this.props.selectedItems ?? this.selectedItemsList.current?.items ?? this.props.defaultSelectedItems ?? null;\n  }\n\n  public componentDidMount(): void {\n    this.forceUpdate();\n  }\n\n  public focus(): void {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  }\n\n  public clearInput(): void {\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n  }\n\n  public get inputElement(): HTMLInputElement | null {\n    return this.input.current && this.input.current.inputElement;\n  }\n\n  public get highlightedItems(): T[] {\n    return this.selectedItemsList.current ? this.selectedItemsList.current.highlightedItems() : [];\n  }\n\n  public render(): JSX.Element {\n    const { className, inputProps, disabled, focusZoneProps } = this.props;\n    const activeDescendant =\n      this.floatingPicker.current && this.floatingPicker.current.currentSelectedSuggestionIndex !== -1\n        ? 'sug-' + this.floatingPicker.current.currentSelectedSuggestionIndex\n        : undefined;\n    const isExpanded = this.floatingPicker.current ? this.floatingPicker.current.isSuggestionsShown : false;\n\n    return (\n      <div\n        ref={this.root}\n        className={css('ms-BasePicker ms-BaseExtendedPicker', className ? className : '')}\n        onKeyDown={this.onBackspace}\n        onCopy={this.onCopy}\n      >\n        <FocusZone direction={FocusZoneDirection.bidirectional} {...focusZoneProps}>\n          <SelectionZone selection={this.selection} selectionMode={SelectionMode.multiple}>\n            <div className={css('ms-BasePicker-text', styles.pickerText)} role={'list'}>\n              {this.props.headerComponent}\n              {this.renderSelectedItemsList()}\n              {this.canAddItems() && (\n                <Autofill\n                  {...(inputProps as IInputProps)}\n                  className={css('ms-BasePicker-input', styles.pickerInput)}\n                  ref={this.input}\n                  onFocus={this.onInputFocus}\n                  onClick={this.onInputClick}\n                  onInputValueChange={this.onInputChange}\n                  aria-activedescendant={activeDescendant}\n                  aria-owns={isExpanded ? 'suggestion-list' : undefined}\n                  aria-expanded={isExpanded}\n                  aria-haspopup=\"true\"\n                  role=\"combobox\"\n                  disabled={disabled}\n                  onPaste={this.onPaste}\n                />\n              )}\n            </div>\n          </SelectionZone>\n        </FocusZone>\n        {this.renderFloatingPicker()}\n      </div>\n    );\n  }\n  protected get floatingPickerProps(): IBaseFloatingPickerProps<T> {\n    return this.props.floatingPickerProps;\n  }\n\n  protected get selectedItemsListProps(): IBaseSelectedItemsListProps<T> {\n    return this.props.selectedItemsListProps;\n  }\n\n  protected onSelectionChange = (): void => {\n    this.forceUpdate();\n  };\n\n  protected canAddItems(): boolean {\n    const { itemLimit } = this.props;\n    return itemLimit === undefined || this.items.length < itemLimit;\n  }\n\n  protected renderFloatingPicker(): JSX.Element {\n    const FloatingPicker: React.ComponentType<IBaseFloatingPickerProps<T>> = this.props.onRenderFloatingPicker;\n    return (\n      <FloatingPicker\n        componentRef={this.floatingPicker}\n        onChange={this._onSuggestionSelected}\n        onSuggestionsHidden={this._onSuggestionsShownOrHidden}\n        onSuggestionsShown={this._onSuggestionsShownOrHidden}\n        inputElement={this.input.current ? this.input.current.inputElement : undefined}\n        selectedItems={this.items}\n        suggestionItems={this.props.suggestionItems ? this.props.suggestionItems : undefined}\n        {...this.floatingPickerProps}\n      />\n    );\n  }\n\n  protected renderSelectedItemsList(): JSX.Element {\n    const SelectedItems: React.ComponentType<IBaseSelectedItemsListProps<T>> = this.props.onRenderSelectedItems;\n    return (\n      <SelectedItems\n        componentRef={this.selectedItemsList}\n        selection={this.selection}\n        selectedItems={this.props.selectedItems ? this.props.selectedItems : undefined}\n        onItemsDeleted={this.props.selectedItems ? this.props.onItemsRemoved : undefined}\n        {...this.selectedItemsListProps}\n      />\n    );\n  }\n\n  protected onInputChange = (value: string, composing?: boolean): void => {\n    // We don't want to update the picker's suggestions when the input is still being composed\n    if (!composing) {\n      this.setState({ queryString: value });\n      if (this.floatingPicker.current) {\n        this.floatingPicker.current.onQueryStringChanged(value);\n      }\n    }\n  };\n\n  protected onInputFocus = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.unselectAll();\n    }\n\n    if (this.props.inputProps && this.props.inputProps.onFocus) {\n      this.props.inputProps.onFocus(ev as React.FocusEvent<HTMLInputElement>);\n    }\n  };\n\n  protected onInputClick = (ev: React.MouseEvent<HTMLInputElement | Autofill>): void => {\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.unselectAll();\n    }\n\n    if (this.floatingPicker.current && this.inputElement) {\n      // Update the value if the input value is empty or is different than the current inputText from the floatingPicker\n      const shoudUpdateValue =\n        this.inputElement.value === '' || this.inputElement.value !== this.floatingPicker.current.inputText;\n      this.floatingPicker.current.showPicker(shoudUpdateValue);\n    }\n  };\n\n  // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n  protected onBackspace = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which !== KeyCodes.backspace) {\n      return;\n    }\n\n    if (this.selectedItemsList.current && this.items.length) {\n      if (\n        this.input.current &&\n        !this.input.current.isValueSelected &&\n        this.input.current.inputElement === ev.currentTarget.ownerDocument.activeElement &&\n        (this.input.current as Autofill).cursorLocation === 0\n      ) {\n        if (this.floatingPicker.current) {\n          this.floatingPicker.current.hidePicker();\n        }\n        ev.preventDefault();\n        this.selectedItemsList.current.removeItemAt(this.items.length - 1);\n        this._onSelectedItemsChanged();\n      } else if (this.selectedItemsList.current.hasSelectedItems()) {\n        if (this.floatingPicker.current) {\n          this.floatingPicker.current.hidePicker();\n        }\n        ev.preventDefault();\n        this.selectedItemsList.current.removeSelectedItems();\n        this._onSelectedItemsChanged();\n      }\n    }\n  };\n\n  protected onCopy = (ev: React.ClipboardEvent<HTMLElement>): void => {\n    if (this.selectedItemsList.current) {\n      // Pass it down into the selected items list\n      this.selectedItemsList.current.onCopy(ev);\n    }\n  };\n\n  protected onPaste = (ev: React.ClipboardEvent<Autofill | HTMLInputElement>): void => {\n    if (this.props.onPaste) {\n      const inputText = ev.clipboardData.getData('Text');\n      ev.preventDefault();\n      this.props.onPaste(inputText);\n    }\n  };\n\n  protected _onSuggestionSelected = (item: T): void => {\n    const currentRenderedQueryString = this.props.currentRenderedQueryString;\n    const queryString = this.state.queryString;\n    if (currentRenderedQueryString === undefined || currentRenderedQueryString === queryString) {\n      const processedItem: T | PromiseLike<T> | null = this.props.onItemSelected\n        ? (this.props.onItemSelected as any)(item)\n        : item;\n\n      if (processedItem === null) {\n        return;\n      }\n\n      const processedItemObject: T = processedItem as T;\n      const processedItemPromiseLike: PromiseLike<T> = processedItem as PromiseLike<T>;\n\n      let newItem: T;\n      if (processedItemPromiseLike && processedItemPromiseLike.then) {\n        processedItemPromiseLike.then((resolvedProcessedItem: T) => {\n          newItem = resolvedProcessedItem;\n          this._addProcessedItem(newItem);\n        });\n      } else {\n        newItem = processedItemObject;\n        this._addProcessedItem(newItem);\n      }\n    }\n  };\n\n  protected _onSelectedItemsChanged = (): void => {\n    this.focus();\n  };\n\n  /**\n   * The floating picker is the source of truth for if the menu has been opened or not.\n   *\n   * Because this isn't tracked inside the state of this component, we need to\n   * force an update here to keep the rendered output that depends on the picker being open\n   * in sync with the state\n   *\n   * Called when the suggestions is shown or closed\n   */\n  private _onSuggestionsShownOrHidden = () => {\n    this.forceUpdate();\n  };\n\n  private _addProcessedItem(newItem: T) {\n    // If this is a controlled component, call the on item selected callback\n    // Otherwise add it to the selectedItemsList\n    if (this.props.onItemAdded) {\n      this.props.onItemAdded(newItem);\n    }\n\n    if (this.selectedItemsList.current) {\n      this.selectedItemsList.current.addItems([newItem]);\n    }\n\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n\n    if (this.floatingPicker.current) {\n      this.floatingPicker.current.hidePicker();\n    }\n\n    this.focus();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}