{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, memoizeFunction } from '../../../Utilities';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Shimmer}\n */\nexport var ShimmerElementsGroupBase = function (props) {\n  var styles = props.styles,\n    _a = props.width,\n    width = _a === void 0 ? 'auto' : _a,\n    shimmerElements = props.shimmerElements,\n    _b = props.rowHeight,\n    rowHeight = _b === void 0 ? findMaxElementHeight(shimmerElements || []) : _b,\n    _c = props.flexWrap,\n    flexWrap = _c === void 0 ? false : _c,\n    theme = props.theme,\n    backgroundColor = props.backgroundColor;\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    flexWrap: flexWrap\n  });\n  return React.createElement(\"div\", {\n    style: {\n      width: width\n    },\n    className: classNames.root\n  }, getRenderedElements(shimmerElements, backgroundColor, rowHeight));\n};\nfunction getRenderedElements(shimmerElements, backgroundColor, rowHeight) {\n  var renderedElements = shimmerElements ? shimmerElements.map(\n  // false positive\n  // eslint-disable-next-line array-callback-return\n  function (element, index) {\n    var type = element.type,\n      filteredElem = __rest(element, [\"type\"]);\n    var verticalAlign = filteredElem.verticalAlign,\n      height = filteredElem.height;\n    var styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n    switch (element.type) {\n      case ShimmerElementType.circle:\n        return React.createElement(ShimmerCircle, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n      case ShimmerElementType.gap:\n        return React.createElement(ShimmerGap, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n      case ShimmerElementType.line:\n        return React.createElement(ShimmerLine, __assign({\n          key: index\n        }, filteredElem, {\n          styles: styles\n        }));\n    }\n  }) : React.createElement(ShimmerLine, {\n    height: ShimmerElementsDefaultHeights.line\n  });\n  return renderedElements;\n}\nvar getElementStyles = memoizeFunction(function (verticalAlign, elementType, elementHeight, backgroundColor, rowHeight) {\n  var dif = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n  var borderStyle;\n  if (!verticalAlign || verticalAlign === 'center') {\n    borderStyle = {\n      borderBottomWidth: \"\".concat(dif ? Math.floor(dif / 2) : 0, \"px\"),\n      borderTopWidth: \"\".concat(dif ? Math.ceil(dif / 2) : 0, \"px\")\n    };\n  } else if (verticalAlign && verticalAlign === 'top') {\n    borderStyle = {\n      borderBottomWidth: \"\".concat(dif, \"px\"),\n      borderTopWidth: \"0px\"\n    };\n  } else if (verticalAlign && verticalAlign === 'bottom') {\n    borderStyle = {\n      borderBottomWidth: \"0px\",\n      borderTopWidth: \"\".concat(dif, \"px\")\n    };\n  }\n  if (backgroundColor) {\n    switch (elementType) {\n      case ShimmerElementType.circle:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor\n          }),\n          svg: {\n            fill: backgroundColor\n          }\n        };\n      case ShimmerElementType.gap:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor,\n            backgroundColor: backgroundColor\n          })\n        };\n      case ShimmerElementType.line:\n        return {\n          root: __assign(__assign({}, borderStyle), {\n            borderColor: backgroundColor\n          }),\n          topLeftCorner: {\n            fill: backgroundColor\n          },\n          topRightCorner: {\n            fill: backgroundColor\n          },\n          bottomLeftCorner: {\n            fill: backgroundColor\n          },\n          bottomRightCorner: {\n            fill: backgroundColor\n          }\n        };\n    }\n  }\n  return {\n    root: borderStyle\n  };\n});\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\nfunction findMaxElementHeight(shimmerElements) {\n  var shimmerElementsDefaulted = shimmerElements.map(function (element) {\n    switch (element.type) {\n      case ShimmerElementType.circle:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.circle;\n        }\n        break;\n      case ShimmerElementType.line:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.line;\n        }\n        break;\n      case ShimmerElementType.gap:\n        if (!element.height) {\n          element.height = ShimmerElementsDefaultHeights.gap;\n        }\n        break;\n    }\n    return element;\n  });\n  var rowHeight = shimmerElementsDefaulted.reduce(function (acc, next) {\n    return next.height ? next.height > acc ? next.height : acc : acc;\n  }, 0);\n  return rowHeight;\n}","map":{"version":3,"names":["React","classNamesFunction","memoizeFunction","ShimmerElementType","ShimmerElementsDefaultHeights","ShimmerLine","ShimmerGap","ShimmerCircle","getClassNames","ShimmerElementsGroupBase","props","styles","_a","width","shimmerElements","_b","rowHeight","findMaxElementHeight","_c","flexWrap","theme","backgroundColor","classNames","createElement","style","className","root","getRenderedElements","renderedElements","map","element","index","type","filteredElem","__rest","verticalAlign","height","getElementStyles","circle","__assign","key","gap","line","elementType","elementHeight","dif","borderStyle","borderBottomWidth","concat","Math","floor","borderTopWidth","ceil","borderColor","svg","fill","topLeftCorner","topRightCorner","bottomLeftCorner","bottomRightCorner","shimmerElementsDefaulted","reduce","acc","next"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/Shimmer/src/components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, memoizeFunction } from '../../../Utilities';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nimport type { IRawStyle } from '../../../Styling';\nimport type {\n  IShimmerElementsGroupProps,\n  IShimmerElementsGroupStyleProps,\n  IShimmerElementsGroupStyles,\n} from './ShimmerElementsGroup.types';\nimport type { IShimmerElement } from '../Shimmer.types';\nimport type { IShimmerLineStyles } from '../ShimmerLine/ShimmerLine.types';\nimport type { IShimmerGapStyles } from '../ShimmerGap/ShimmerGap.types';\nimport type { IShimmerCircleStyles } from '../ShimmerCircle/ShimmerCircle.types';\n\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\n\n/**\n * {@docCategory Shimmer}\n */\nexport const ShimmerElementsGroupBase: React.FunctionComponent<IShimmerElementsGroupProps> = props => {\n  const {\n    styles,\n    width = 'auto',\n    shimmerElements,\n    rowHeight = findMaxElementHeight(shimmerElements || []),\n    flexWrap = false,\n    theme,\n    backgroundColor,\n  } = props;\n\n  const classNames = getClassNames(styles!, {\n    theme: theme!,\n    flexWrap,\n  });\n\n  return (\n    <div style={{ width }} className={classNames.root}>\n      {getRenderedElements(shimmerElements, backgroundColor, rowHeight)}\n    </div>\n  );\n};\n\nfunction getRenderedElements(\n  shimmerElements?: IShimmerElement[],\n  backgroundColor?: string,\n  rowHeight?: number,\n): React.ReactNode {\n  const renderedElements: React.ReactNode = shimmerElements ? (\n    shimmerElements.map(\n      // false positive\n      // eslint-disable-next-line array-callback-return\n      (element: IShimmerElement, index: number): JSX.Element => {\n        const { type, ...filteredElem } = element;\n        const { verticalAlign, height } = filteredElem;\n        const styles = getElementStyles(verticalAlign, type, height, backgroundColor, rowHeight);\n\n        switch (element.type) {\n          case ShimmerElementType.circle:\n            return <ShimmerCircle key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.gap:\n            return <ShimmerGap key={index} {...filteredElem} styles={styles} />;\n          case ShimmerElementType.line:\n            return <ShimmerLine key={index} {...filteredElem} styles={styles} />;\n        }\n      },\n    )\n  ) : (\n    <ShimmerLine height={ShimmerElementsDefaultHeights.line} />\n  );\n\n  return renderedElements;\n}\n\nconst getElementStyles = memoizeFunction(\n  (\n    verticalAlign: 'center' | 'bottom' | 'top' | undefined,\n    elementType: ShimmerElementType,\n    elementHeight: number | undefined,\n    backgroundColor?: string,\n    rowHeight?: number,\n  ): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\n    const dif: number = rowHeight && elementHeight ? rowHeight - elementHeight : 0;\n\n    let borderStyle: IRawStyle | undefined;\n\n    if (!verticalAlign || verticalAlign === 'center') {\n      borderStyle = {\n        borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\n        borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'top') {\n      borderStyle = {\n        borderBottomWidth: `${dif}px`,\n        borderTopWidth: `0px`,\n      };\n    } else if (verticalAlign && verticalAlign === 'bottom') {\n      borderStyle = {\n        borderBottomWidth: `0px`,\n        borderTopWidth: `${dif}px`,\n      };\n    }\n\n    if (backgroundColor) {\n      switch (elementType) {\n        case ShimmerElementType.circle:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            svg: { fill: backgroundColor },\n          };\n        case ShimmerElementType.gap:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor, backgroundColor },\n          };\n        case ShimmerElementType.line:\n          return {\n            root: { ...borderStyle, borderColor: backgroundColor },\n            topLeftCorner: { fill: backgroundColor },\n            topRightCorner: { fill: backgroundColor },\n            bottomLeftCorner: { fill: backgroundColor },\n            bottomRightCorner: { fill: backgroundColor },\n          };\n      }\n    }\n\n    return {\n      root: borderStyle,\n    };\n  },\n);\n\n/**\n * User should not worry to provide which of the elements is the highest so we do the calculation for him.\n * Plus if user forgot to specify the height we assign their defaults.\n */\nfunction findMaxElementHeight(shimmerElements: IShimmerElement[]): number {\n  const shimmerElementsDefaulted: IShimmerElement[] = shimmerElements.map(\n    (element: IShimmerElement): IShimmerElement => {\n      switch (element.type) {\n        case ShimmerElementType.circle:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.circle;\n          }\n          break;\n        case ShimmerElementType.line:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.line;\n          }\n          break;\n        case ShimmerElementType.gap:\n          if (!element.height) {\n            element.height = ShimmerElementsDefaultHeights.gap;\n          }\n          break;\n      }\n      return element;\n    },\n  );\n\n  const rowHeight = shimmerElementsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\n    return next.height ? (next.height > acc ? next.height : acc) : acc;\n  }, 0);\n\n  return rowHeight;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}