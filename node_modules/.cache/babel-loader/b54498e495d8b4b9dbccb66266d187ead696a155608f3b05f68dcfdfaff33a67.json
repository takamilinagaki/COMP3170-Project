{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, warnDeprecations, warn } from '../../Utilities';\nimport { TextField } from '../../TextField';\nimport { TooltipHost } from '../../Tooltip';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\nimport { ColorSlider } from './ColorSlider/ColorSlider';\nimport { MAX_COLOR_ALPHA, MAX_COLOR_RGB, MAX_HEX_LENGTH, MAX_RGBA_LENGTH, MIN_HEX_LENGTH, MIN_RGBA_LENGTH, HEX_REGEX, RGBA_REGEX } from '../../utilities/color/consts';\n// These imports are separated to help with bundling\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { getColorFromRGBA } from '../../utilities/color/getColorFromRGBA';\nimport { clamp } from '../../utilities/color/clamp';\nimport { updateA } from '../../utilities/color/updateA';\nimport { updateT } from '../../utilities/color/updateT';\nimport { updateH } from '../../utilities/color/updateH';\nimport { correctRGB } from '../../utilities/color/correctRGB';\nimport { correctHex } from '../../utilities/color/correctHex';\nimport { ColorRectangleBase } from './ColorRectangle/ColorRectangle.base';\nvar getClassNames = classNamesFunction();\nvar allColorComponents = ['hex', 'r', 'g', 'b', 'a', 't'];\nvar errorKeys = {\n  hex: 'hexError',\n  r: 'redError',\n  g: 'greenError',\n  b: 'blueError',\n  a: 'alphaError',\n  t: 'transparencyError'\n};\n/**\n * {@docCategory ColorPicker}\n */\nvar ColorPickerBase = /** @class */function (_super) {\n  __extends(ColorPickerBase, _super);\n  function ColorPickerBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._onSVChanged = function (ev, color) {\n      _this._updateColor(ev, color);\n    };\n    _this._onHChanged = function (ev, h) {\n      _this._updateColor(ev, updateH(_this.state.color, h));\n    };\n    /** Callback for when the alpha/transparency slider changes */\n    _this._onATChanged = function (ev, value) {\n      var updater = _this.props.alphaType === 'transparency' ? updateT : updateA;\n      _this._updateColor(ev, updater(_this.state.color, Math.round(value)));\n    };\n    _this._onBlur = function (event) {\n      var _a;\n      var _b = _this.state,\n        color = _b.color,\n        editingColor = _b.editingColor;\n      if (!editingColor) {\n        return;\n      }\n      // If there was an intermediate incorrect value (such as too large or empty), correct it.\n      var value = editingColor.value,\n        component = editingColor.component;\n      var isHex = component === 'hex';\n      var isAlpha = component === 'a';\n      var isTransparency = component === 't';\n      var minLength = isHex ? MIN_HEX_LENGTH : MIN_RGBA_LENGTH;\n      if (value.length >= minLength && (isHex || !isNaN(Number(value)))) {\n        // Real value. Clamp to appropriate length (hex) or range (rgba).\n        var newColor = void 0;\n        if (isHex) {\n          newColor = getColorFromString('#' + correctHex(value));\n        } else if (isAlpha || isTransparency) {\n          var updater = isAlpha ? updateA : updateT;\n          newColor = updater(color, clamp(Number(value), MAX_COLOR_ALPHA));\n        } else {\n          newColor = getColorFromRGBA(correctRGB(__assign(__assign({}, color), (_a = {}, _a[component] = Number(value), _a))));\n        }\n        // Update state and call onChange\n        _this._updateColor(event, newColor);\n      } else {\n        // Intermediate value was an empty string or too short (hex only).\n        // Just clear the intermediate state and revert to the previous value.\n        _this.setState({\n          editingColor: undefined\n        });\n      }\n    };\n    initializeComponentRef(_this);\n    var strings = props.strings; // always defined since it's in defaultProps\n    warnDeprecations('ColorPicker', props, {\n      hexLabel: 'strings.hex',\n      redLabel: 'strings.red',\n      greenLabel: 'strings.green',\n      blueLabel: 'strings.blue',\n      alphaLabel: 'strings.alpha',\n      alphaSliderHidden: 'alphaType'\n    });\n    // eslint-disable-next-line deprecation/deprecation\n    if (strings.hue) {\n      // warnDeprecations can't handle nested deprecated props\n      warn(\"ColorPicker property 'strings.hue' was used but has been deprecated. Use 'strings.hueAriaLabel' instead.\");\n    }\n    _this.state = {\n      color: _getColorFromProps(props) || getColorFromString('#ffffff')\n    };\n    _this._textChangeHandlers = {};\n    for (var _i = 0, allColorComponents_1 = allColorComponents; _i < allColorComponents_1.length; _i++) {\n      var component = allColorComponents_1[_i];\n      _this._textChangeHandlers[component] = _this._onTextChange.bind(_this, component);\n    }\n    var defaultStrings = ColorPickerBase.defaultProps.strings;\n    _this._textLabels = {\n      /* eslint-disable deprecation/deprecation */\n      r: props.redLabel || strings.red || defaultStrings.red,\n      g: props.greenLabel || strings.green || defaultStrings.green,\n      b: props.blueLabel || strings.blue || defaultStrings.blue,\n      a: props.alphaLabel || strings.alpha || defaultStrings.alpha,\n      hex: props.hexLabel || strings.hex || defaultStrings.hex,\n      t: strings.transparency || defaultStrings.transparency\n      /* eslint-enable deprecation/deprecation */\n    };\n\n    _this._strings = __assign(__assign(__assign({}, defaultStrings), {\n      // these aria labels default to the visible labels\n      alphaAriaLabel: _this._textLabels.a,\n      transparencyAriaLabel: _this._textLabels.t\n    }), strings);\n    return _this;\n  }\n  Object.defineProperty(ColorPickerBase.prototype, \"color\", {\n    get: function () {\n      return this.state.color;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ColorPickerBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // if props changed (as opposed to a state update), update the color\n    if (prevProps !== this.props) {\n      var color = _getColorFromProps(this.props);\n      if (color) {\n        this._updateColor(undefined, color);\n      }\n    }\n  };\n  ColorPickerBase.prototype.render = function () {\n    var _this = this;\n    var props = this.props;\n    var strings = this._strings;\n    var textLabels = this._textLabels;\n    var theme = props.theme,\n      className = props.className,\n      styles = props.styles,\n      alphaType = props.alphaType,\n      // eslint-disable-next-line deprecation/deprecation\n      _a = props.alphaSliderHidden,\n      // eslint-disable-next-line deprecation/deprecation\n      alphaSliderHidden = _a === void 0 ? alphaType === 'none' : _a,\n      tooltipProps = props.tooltipProps;\n    var color = this.state.color;\n    var useTransparency = alphaType === 'transparency';\n    var colorComponents = ['hex', 'r', 'g', 'b', useTransparency ? 't' : 'a'];\n    var atValue = useTransparency ? color.t : color.a;\n    var atLabel = useTransparency ? textLabels.t : textLabels.a;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      alphaType: alphaType\n    });\n    var selectedColorAriaParts = [textLabels.r, color.r, textLabels.g, color.g, textLabels.b, color.b];\n    if (!alphaSliderHidden && typeof atValue === 'number') {\n      selectedColorAriaParts.push(atLabel, \"\".concat(atValue, \"%\"));\n    }\n    var ariaLabel = strings.rootAriaLabelFormat.replace('{0}', selectedColorAriaParts.join(' '));\n    return React.createElement(\"div\", {\n      className: classNames.root,\n      role: \"group\",\n      \"aria-label\": ariaLabel\n    }, React.createElement(\"div\", {\n      className: classNames.panel\n    }, React.createElement(ColorRectangle, {\n      color: color,\n      onChange: this._onSVChanged,\n      ariaLabel: strings.svAriaLabel,\n      ariaDescription: strings.svAriaDescription,\n      ariaValueFormat: strings.svAriaValueFormat,\n      className: classNames.colorRectangle\n    }), React.createElement(\"div\", {\n      className: classNames.flexContainer\n    }, React.createElement(\"div\", {\n      className: classNames.flexSlider\n    }, React.createElement(ColorSlider, {\n      className: \"is-hue\",\n      type: \"hue\",\n      // eslint-disable-next-line deprecation/deprecation\n      ariaLabel: strings.hue || strings.hueAriaLabel,\n      value: color.h,\n      onChange: this._onHChanged\n    }), !alphaSliderHidden && React.createElement(ColorSlider, {\n      className: \"is-alpha\",\n      type: alphaType,\n      ariaLabel: useTransparency ? strings.transparencyAriaLabel : strings.alphaAriaLabel,\n      overlayColor: color.hex,\n      value: atValue,\n      onChange: this._onATChanged\n    })), props.showPreview && React.createElement(\"div\", {\n      className: classNames.flexPreviewBox\n    }, React.createElement(\"div\", {\n      className: classNames.colorSquare + ' is-preview',\n      style: {\n        backgroundColor: color.str\n      }\n    }))), React.createElement(\"table\", {\n      className: classNames.table,\n      role: \"group\",\n      cellPadding: \"0\",\n      cellSpacing: \"0\"\n    }, React.createElement(\"thead\", null, React.createElement(\"tr\", {\n      className: classNames.tableHeader\n    }, React.createElement(\"td\", {\n      className: classNames.tableHexCell\n    }, textLabels.hex), React.createElement(\"td\", null, textLabels.r), React.createElement(\"td\", null, textLabels.g), React.createElement(\"td\", null, textLabels.b), !alphaSliderHidden && React.createElement(\"td\", {\n      className: classNames.tableAlphaCell\n    }, atLabel))), React.createElement(\"tbody\", null, React.createElement(\"tr\", null, colorComponents.map(function (comp) {\n      if ((comp === 'a' || comp === 't') && alphaSliderHidden) {\n        return null;\n      }\n      var tooltipContent = _this._getTooltipValue(comp);\n      return React.createElement(\"td\", {\n        key: comp\n      }, React.createElement(TooltipHost, __assign({\n        content: tooltipContent,\n        directionalHint: DirectionalHint.bottomCenter,\n        role: \"alert\"\n      }, tooltipProps), React.createElement(TextField, {\n        className: classNames.input,\n        onChange: _this._textChangeHandlers[comp],\n        onBlur: _this._onBlur,\n        value: _this._getDisplayValue(comp),\n        spellCheck: false,\n        ariaLabel: textLabels[comp],\n        autoComplete: \"off\",\n        invalid: !!tooltipContent\n      })));\n    }))))));\n  };\n  ColorPickerBase.prototype._getDisplayValue = function (component) {\n    var _a = this.state,\n      color = _a.color,\n      editingColor = _a.editingColor;\n    if (editingColor && editingColor.component === component) {\n      return editingColor.value;\n    }\n    if (component === 'hex') {\n      return color[component] || '';\n    } else if (typeof color[component] === 'number' && !isNaN(color[component])) {\n      return String(color[component]);\n    }\n    return '';\n  };\n  /* Get the error tooltip value for a component if the component is in an invalid state */\n  ColorPickerBase.prototype._getTooltipValue = function (component) {\n    var editingColor = this.state.editingColor;\n    // if the component does not have an interim value, it is valid\n    if (!editingColor || editingColor.component !== component) {\n      return undefined;\n    }\n    var value = editingColor.value;\n    // for hex, do not show a tooltip if the value is between 3-6 characters\n    if (component === 'hex' && value.length >= MIN_HEX_LENGTH && value.length <= MAX_HEX_LENGTH) {\n      return undefined;\n    }\n    var errorKey = errorKeys[component];\n    return this._strings[errorKey];\n  };\n  ColorPickerBase.prototype._onTextChange = function (component, event, newValue) {\n    var _a;\n    var color = this.state.color;\n    var isHex = component === 'hex';\n    var isAlpha = component === 'a';\n    var isTransparency = component === 't';\n    // eslint-disable-next-line deprecation/deprecation\n    newValue = (newValue || '').substr(0, isHex ? MAX_HEX_LENGTH : MAX_RGBA_LENGTH);\n    // Ignore what the user typed if it contains invalid characters\n    var validCharsRegex = isHex ? HEX_REGEX : RGBA_REGEX;\n    if (!validCharsRegex.test(newValue)) {\n      return;\n    }\n    // Determine if the entry is valid (different methods for hex, alpha, and RGB)\n    var isValid;\n    if (newValue === '') {\n      // Empty string is obviously not valid\n      isValid = false;\n    } else if (isHex) {\n      // Technically hex values of length 3 are also valid, but committing the value here would\n      // cause it to be automatically converted to a value of length 6, which may not be what the\n      // user wanted if they're not finished typing. (Values of length 3 will be committed on blur.)\n      isValid = newValue.length === MAX_HEX_LENGTH;\n    } else if (isAlpha || isTransparency) {\n      isValid = Number(newValue) <= MAX_COLOR_ALPHA;\n    } else {\n      isValid = Number(newValue) <= MAX_COLOR_RGB;\n    }\n    if (!isValid) {\n      // If the new value is an empty string or other invalid value, save that to display.\n      // (if the user still hasn't entered anything on blur, the last value is restored)\n      this.setState({\n        editingColor: {\n          component: component,\n          value: newValue\n        }\n      });\n    } else if (String(color[component]) === newValue) {\n      // If the new value is the same as the current value, mostly ignore it.\n      // Exception is that if the user was previously editing the value (but hadn't yet entered\n      // a new valid value), we should clear the intermediate value.\n      if (this.state.editingColor) {\n        this.setState({\n          editingColor: undefined\n        });\n      }\n    } else {\n      // Should be a valid color. Update the value.\n      var newColor = isHex ? getColorFromString('#' + newValue) : isTransparency ? updateT(color, Number(newValue)) : getColorFromRGBA(__assign(__assign({}, color), (_a = {}, _a[component] = Number(newValue), _a)));\n      this._updateColor(event, newColor);\n    }\n  };\n  /**\n   * Update the displayed color and call change handlers if appropriate.\n   * @param ev - Event if call was triggered by an event (undefined if triggered by props change)\n   * @param newColor - Updated color\n   */\n  ColorPickerBase.prototype._updateColor = function (ev, newColor) {\n    if (!newColor) {\n      return;\n    }\n    var _a = this.state,\n      color = _a.color,\n      editingColor = _a.editingColor;\n    // For black or white, the hue can change without changing the string.\n    var isDifferentColor = newColor.h !== color.h || newColor.str !== color.str;\n    if (isDifferentColor || editingColor) {\n      // If ev is undefined, it's an update from props (which should be unconditionally respected\n      // and not call onChange).\n      if (ev && this.props.onChange) {\n        this.props.onChange(ev, newColor);\n        if (ev.defaultPrevented) {\n          return;\n        }\n      }\n      this.setState({\n        color: newColor,\n        editingColor: undefined\n      });\n    }\n  };\n  ColorPickerBase.defaultProps = {\n    alphaType: 'alpha',\n    strings: {\n      rootAriaLabelFormat: 'Color picker, {0} selected.',\n      hex: 'Hex',\n      red: 'Red',\n      green: 'Green',\n      blue: 'Blue',\n      alpha: 'Alpha',\n      transparency: 'Transparency',\n      hueAriaLabel: 'Hue',\n      svAriaLabel: ColorRectangleBase.defaultProps.ariaLabel,\n      svAriaValueFormat: ColorRectangleBase.defaultProps.ariaValueFormat,\n      svAriaDescription: ColorRectangleBase.defaultProps.ariaDescription,\n      hexError: 'Hex values must be between 3 and 6 characters long',\n      alphaError: 'Alpha must be between 0 and 100',\n      transparencyError: 'Transparency must be between 0 and 100',\n      redError: 'Red must be between 0 and 255',\n      greenError: 'Green must be between 0 and 255',\n      blueError: 'Blue must be between 0 and 255'\n    }\n  };\n  return ColorPickerBase;\n}(React.Component);\nexport { ColorPickerBase };\nfunction _getColorFromProps(props) {\n  var color = props.color;\n  return typeof color === 'string' ? getColorFromString(color) : color;\n}","map":{"version":3,"names":["React","classNamesFunction","initializeComponentRef","warnDeprecations","warn","TextField","TooltipHost","DirectionalHint","ColorRectangle","ColorSlider","MAX_COLOR_ALPHA","MAX_COLOR_RGB","MAX_HEX_LENGTH","MAX_RGBA_LENGTH","MIN_HEX_LENGTH","MIN_RGBA_LENGTH","HEX_REGEX","RGBA_REGEX","getColorFromString","getColorFromRGBA","clamp","updateA","updateT","updateH","correctRGB","correctHex","ColorRectangleBase","getClassNames","allColorComponents","errorKeys","hex","r","g","b","a","t","ColorPickerBase","_super","__extends","props","_this","call","_onSVChanged","ev","color","_updateColor","_onHChanged","h","state","_onATChanged","value","updater","alphaType","Math","round","_onBlur","event","_b","editingColor","component","isHex","isAlpha","isTransparency","minLength","length","isNaN","Number","newColor","__assign","_a","setState","undefined","strings","hexLabel","redLabel","greenLabel","blueLabel","alphaLabel","alphaSliderHidden","hue","_getColorFromProps","_textChangeHandlers","_i","allColorComponents_1","_onTextChange","bind","defaultStrings","defaultProps","_textLabels","red","green","blue","alpha","transparency","_strings","alphaAriaLabel","transparencyAriaLabel","Object","defineProperty","prototype","get","componentDidUpdate","prevProps","prevState","render","textLabels","theme","className","styles","tooltipProps","useTransparency","colorComponents","atValue","atLabel","classNames","selectedColorAriaParts","push","concat","ariaLabel","rootAriaLabelFormat","replace","join","createElement","root","role","panel","onChange","svAriaLabel","ariaDescription","svAriaDescription","ariaValueFormat","svAriaValueFormat","colorRectangle","flexContainer","flexSlider","type","hueAriaLabel","overlayColor","showPreview","flexPreviewBox","colorSquare","style","backgroundColor","str","table","cellPadding","cellSpacing","tableHeader","tableHexCell","tableAlphaCell","map","comp","tooltipContent","_getTooltipValue","key","content","directionalHint","bottomCenter","input","onBlur","_getDisplayValue","spellCheck","autoComplete","invalid","String","errorKey","newValue","substr","validCharsRegex","test","isValid","isDifferentColor","defaultPrevented","hexError","alphaError","transparencyError","redError","greenError","blueError","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/ColorPicker/ColorPicker.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, warnDeprecations, warn } from '../../Utilities';\nimport { TextField } from '../../TextField';\nimport { TooltipHost } from '../../Tooltip';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\nimport { ColorSlider } from './ColorSlider/ColorSlider';\nimport {\n  MAX_COLOR_ALPHA,\n  MAX_COLOR_RGB,\n  MAX_HEX_LENGTH,\n  MAX_RGBA_LENGTH,\n  MIN_HEX_LENGTH,\n  MIN_RGBA_LENGTH,\n  HEX_REGEX,\n  RGBA_REGEX,\n} from '../../utilities/color/consts';\n// These imports are separated to help with bundling\nimport { getColorFromString } from '../../utilities/color/getColorFromString';\nimport { getColorFromRGBA } from '../../utilities/color/getColorFromRGBA';\nimport { clamp } from '../../utilities/color/clamp';\nimport { updateA } from '../../utilities/color/updateA';\nimport { updateT } from '../../utilities/color/updateT';\nimport { updateH } from '../../utilities/color/updateH';\nimport { correctRGB } from '../../utilities/color/correctRGB';\nimport { correctHex } from '../../utilities/color/correctHex';\nimport { ColorRectangleBase } from './ColorRectangle/ColorRectangle.base';\nimport type {\n  IColorPickerProps,\n  IColorPickerStyleProps,\n  IColorPickerStyles,\n  IColorPicker,\n  IColorPickerStrings,\n} from './ColorPicker.types';\nimport type { IColor, IRGB } from '../../utilities/color/interfaces';\n\ntype ColorComponent = keyof Pick<IColor, 'r' | 'g' | 'b' | 'a' | 't' | 'hex'>;\ntype ColorErrorKeys = keyof Pick<\n  IColorPickerStrings,\n  'hexError' | 'alphaError' | 'transparencyError' | 'redError' | 'greenError' | 'blueError'\n>;\n\nexport interface IColorPickerState {\n  /** Most recently selected color */\n  color: IColor;\n  /** Color component currently being edited via a text field (if intermediate value is invalid) */\n  editingColor?: {\n    /** Which color component is being edited */\n    component: ColorComponent;\n    /** Currently entered value, which is not valid */\n    value: string;\n  };\n}\n\nconst getClassNames = classNamesFunction<IColorPickerStyleProps, IColorPickerStyles>();\n\nconst allColorComponents: ColorComponent[] = ['hex', 'r', 'g', 'b', 'a', 't'];\n\nconst errorKeys: { [component in ColorComponent]: ColorErrorKeys } = {\n  hex: 'hexError',\n  r: 'redError',\n  g: 'greenError',\n  b: 'blueError',\n  a: 'alphaError',\n  t: 'transparencyError',\n};\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorPickerBase extends React.Component<IColorPickerProps, IColorPickerState> implements IColorPicker {\n  public static defaultProps: Partial<IColorPickerProps> = {\n    alphaType: 'alpha',\n    strings: {\n      rootAriaLabelFormat: 'Color picker, {0} selected.',\n      hex: 'Hex',\n      red: 'Red',\n      green: 'Green',\n      blue: 'Blue',\n      alpha: 'Alpha',\n      transparency: 'Transparency',\n      hueAriaLabel: 'Hue',\n      svAriaLabel: ColorRectangleBase.defaultProps.ariaLabel!,\n      svAriaValueFormat: ColorRectangleBase.defaultProps.ariaValueFormat!,\n      svAriaDescription: ColorRectangleBase.defaultProps.ariaDescription!,\n      hexError: 'Hex values must be between 3 and 6 characters long',\n      alphaError: 'Alpha must be between 0 and 100',\n      transparencyError: 'Transparency must be between 0 and 100',\n      redError: 'Red must be between 0 and 255',\n      greenError: 'Green must be between 0 and 255',\n      blueError: 'Blue must be between 0 and 255',\n    },\n  };\n\n  private _textChangeHandlers: {\n    [K in ColorComponent]: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void;\n  };\n  /**\n   * Strings displayed in the UI as text field labels (these are in a separate object for convenient\n   * indexing by short color component name).\n   */\n  private _textLabels: { [K in ColorComponent]: string };\n\n  /** Strings besides red/green/blue/alpha/hex, with defaults for all values except the deprecated `hue` */\n  private _strings: Required<Omit<IColorPickerStrings, ColorComponent | 'hue'>> & Pick<IColorPickerStrings, 'hue'>;\n\n  constructor(props: IColorPickerProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    const strings = props.strings!; // always defined since it's in defaultProps\n\n    warnDeprecations('ColorPicker', props, {\n      hexLabel: 'strings.hex',\n      redLabel: 'strings.red',\n      greenLabel: 'strings.green',\n      blueLabel: 'strings.blue',\n      alphaLabel: 'strings.alpha',\n      alphaSliderHidden: 'alphaType',\n    });\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (strings.hue) {\n      // warnDeprecations can't handle nested deprecated props\n      warn(\"ColorPicker property 'strings.hue' was used but has been deprecated. Use 'strings.hueAriaLabel' instead.\");\n    }\n\n    this.state = {\n      color: _getColorFromProps(props) || getColorFromString('#ffffff')!,\n    };\n\n    this._textChangeHandlers = {} as any;\n    for (const component of allColorComponents) {\n      this._textChangeHandlers[component] = this._onTextChange.bind(this, component);\n    }\n\n    const defaultStrings = ColorPickerBase.defaultProps.strings as Required<IColorPickerStrings>;\n\n    this._textLabels = {\n      /* eslint-disable deprecation/deprecation */\n      r: props.redLabel || strings.red || defaultStrings.red,\n      g: props.greenLabel || strings.green || defaultStrings.green,\n      b: props.blueLabel || strings.blue || defaultStrings.blue,\n      a: props.alphaLabel || strings.alpha || defaultStrings.alpha,\n      hex: props.hexLabel || strings.hex || defaultStrings.hex,\n      t: strings.transparency || defaultStrings.transparency,\n      /* eslint-enable deprecation/deprecation */\n    };\n\n    this._strings = {\n      ...defaultStrings,\n      // these aria labels default to the visible labels\n      alphaAriaLabel: this._textLabels.a,\n      transparencyAriaLabel: this._textLabels.t,\n      ...strings,\n    };\n  }\n\n  public get color(): IColor {\n    return this.state.color;\n  }\n\n  public componentDidUpdate(prevProps: Readonly<IColorPickerProps>, prevState: Readonly<IColorPickerState>): void {\n    // if props changed (as opposed to a state update), update the color\n    if (prevProps !== this.props) {\n      const color = _getColorFromProps(this.props);\n      if (color) {\n        this._updateColor(undefined, color);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const props = this.props;\n    const strings = this._strings;\n    const textLabels = this._textLabels;\n    const {\n      theme,\n      className,\n      styles,\n      alphaType,\n      // eslint-disable-next-line deprecation/deprecation\n      alphaSliderHidden = alphaType === 'none',\n      tooltipProps,\n    } = props;\n    const { color } = this.state;\n    const useTransparency = alphaType === 'transparency';\n    const colorComponents = ['hex', 'r', 'g', 'b', useTransparency ? 't' : 'a'];\n    const atValue = useTransparency ? color.t : color.a;\n    const atLabel = useTransparency ? textLabels.t : textLabels.a;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      alphaType,\n    });\n\n    const selectedColorAriaParts = [textLabels.r, color.r, textLabels.g, color.g, textLabels.b, color.b];\n    if (!alphaSliderHidden && typeof atValue === 'number') {\n      selectedColorAriaParts.push(atLabel, `${atValue}%`);\n    }\n    const ariaLabel = strings.rootAriaLabelFormat.replace('{0}', selectedColorAriaParts.join(' '));\n\n    return (\n      <div className={classNames.root} role=\"group\" aria-label={ariaLabel}>\n        <div className={classNames.panel}>\n          <ColorRectangle\n            color={color}\n            onChange={this._onSVChanged}\n            ariaLabel={strings.svAriaLabel}\n            ariaDescription={strings.svAriaDescription}\n            ariaValueFormat={strings.svAriaValueFormat}\n            className={classNames.colorRectangle}\n          />\n          <div className={classNames.flexContainer}>\n            <div className={classNames.flexSlider}>\n              <ColorSlider\n                className=\"is-hue\"\n                type=\"hue\"\n                // eslint-disable-next-line deprecation/deprecation\n                ariaLabel={strings.hue || strings.hueAriaLabel}\n                value={color.h}\n                onChange={this._onHChanged}\n              />\n              {!alphaSliderHidden && (\n                <ColorSlider\n                  className=\"is-alpha\"\n                  type={alphaType as 'alpha' | 'transparency'}\n                  ariaLabel={useTransparency ? strings.transparencyAriaLabel : strings.alphaAriaLabel}\n                  overlayColor={color.hex}\n                  value={atValue}\n                  onChange={this._onATChanged}\n                />\n              )}\n            </div>\n            {props.showPreview && (\n              <div className={classNames.flexPreviewBox}>\n                <div\n                  className={classNames.colorSquare + ' is-preview'}\n                  style={{\n                    backgroundColor: color.str,\n                  }}\n                />\n              </div>\n            )}\n          </div>\n\n          {/* Give the table role=group to prevent it from being read as a table (ideally we should\n          just get rid of the table, but this has the potential of breaking consumers) */}\n          <table className={classNames.table} role=\"group\" cellPadding=\"0\" cellSpacing=\"0\">\n            <thead>\n              <tr className={classNames.tableHeader}>\n                <td className={classNames.tableHexCell}>{textLabels.hex}</td>\n                <td>{textLabels.r}</td>\n                <td>{textLabels.g}</td>\n                <td>{textLabels.b}</td>\n                {!alphaSliderHidden && <td className={classNames.tableAlphaCell}>{atLabel}</td>}\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                {colorComponents.map((comp: ColorComponent) => {\n                  if ((comp === 'a' || comp === 't') && alphaSliderHidden) {\n                    return null;\n                  }\n                  const tooltipContent = this._getTooltipValue(comp);\n                  return (\n                    <td key={comp}>\n                      <TooltipHost\n                        content={tooltipContent}\n                        directionalHint={DirectionalHint.bottomCenter}\n                        role=\"alert\"\n                        {...tooltipProps}\n                      >\n                        <TextField\n                          className={classNames.input}\n                          onChange={this._textChangeHandlers[comp]}\n                          onBlur={this._onBlur}\n                          value={this._getDisplayValue(comp)}\n                          spellCheck={false}\n                          ariaLabel={textLabels[comp]}\n                          autoComplete=\"off\"\n                          invalid={!!tooltipContent}\n                        />\n                      </TooltipHost>\n                    </td>\n                  );\n                })}\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  private _getDisplayValue(component: ColorComponent): string {\n    const { color, editingColor } = this.state;\n    if (editingColor && editingColor.component === component) {\n      return editingColor.value;\n    }\n    if (component === 'hex') {\n      return color[component] || '';\n    } else if (typeof color[component] === 'number' && !isNaN(color[component] as number)) {\n      return String(color[component]);\n    }\n    return '';\n  }\n\n  /* Get the error tooltip value for a component if the component is in an invalid state */\n  private _getTooltipValue(component: ColorComponent): string | undefined {\n    const { editingColor } = this.state;\n    // if the component does not have an interim value, it is valid\n    if (!editingColor || editingColor.component !== component) {\n      return undefined;\n    }\n\n    const { value } = editingColor;\n    // for hex, do not show a tooltip if the value is between 3-6 characters\n    if (component === 'hex' && value.length >= MIN_HEX_LENGTH && value.length <= MAX_HEX_LENGTH) {\n      return undefined;\n    }\n\n    const errorKey: ColorErrorKeys = errorKeys[component];\n\n    return this._strings[errorKey];\n  }\n\n  private _onSVChanged = (ev: React.MouseEvent<HTMLElement>, color: IColor): void => {\n    this._updateColor(ev, color);\n  };\n\n  private _onHChanged = (ev: React.MouseEvent<HTMLElement>, h: number): void => {\n    this._updateColor(ev, updateH(this.state.color, h));\n  };\n\n  /** Callback for when the alpha/transparency slider changes */\n  private _onATChanged = (ev: React.MouseEvent<HTMLElement>, value: number): void => {\n    const updater = this.props.alphaType === 'transparency' ? updateT : updateA;\n    this._updateColor(ev, updater(this.state.color, Math.round(value)));\n  };\n\n  private _onTextChange(component: ColorComponent, event: React.FormEvent<HTMLInputElement>, newValue?: string): void {\n    const color = this.state.color;\n    const isHex = component === 'hex';\n    const isAlpha = component === 'a';\n    const isTransparency = component === 't';\n    // eslint-disable-next-line deprecation/deprecation\n    newValue = (newValue || '').substr(0, isHex ? MAX_HEX_LENGTH : MAX_RGBA_LENGTH);\n\n    // Ignore what the user typed if it contains invalid characters\n    const validCharsRegex = isHex ? HEX_REGEX : RGBA_REGEX;\n    if (!validCharsRegex.test(newValue)) {\n      return;\n    }\n\n    // Determine if the entry is valid (different methods for hex, alpha, and RGB)\n    let isValid: boolean;\n    if (newValue === '') {\n      // Empty string is obviously not valid\n      isValid = false;\n    } else if (isHex) {\n      // Technically hex values of length 3 are also valid, but committing the value here would\n      // cause it to be automatically converted to a value of length 6, which may not be what the\n      // user wanted if they're not finished typing. (Values of length 3 will be committed on blur.)\n      isValid = newValue.length === MAX_HEX_LENGTH;\n    } else if (isAlpha || isTransparency) {\n      isValid = Number(newValue) <= MAX_COLOR_ALPHA;\n    } else {\n      isValid = Number(newValue) <= MAX_COLOR_RGB;\n    }\n\n    if (!isValid) {\n      // If the new value is an empty string or other invalid value, save that to display.\n      // (if the user still hasn't entered anything on blur, the last value is restored)\n      this.setState({ editingColor: { component, value: newValue } });\n    } else if (String(color[component]) === newValue) {\n      // If the new value is the same as the current value, mostly ignore it.\n      // Exception is that if the user was previously editing the value (but hadn't yet entered\n      // a new valid value), we should clear the intermediate value.\n      if (this.state.editingColor) {\n        this.setState({ editingColor: undefined });\n      }\n    } else {\n      // Should be a valid color. Update the value.\n      const newColor = isHex\n        ? getColorFromString('#' + newValue)\n        : isTransparency\n        ? updateT(color, Number(newValue))\n        : getColorFromRGBA({\n            ...color,\n            // Overwrite whichever key is being updated with the new value\n            [component]: Number(newValue),\n          });\n      this._updateColor(event, newColor);\n    }\n  }\n\n  private _onBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    const { color, editingColor } = this.state;\n    if (!editingColor) {\n      return;\n    }\n\n    // If there was an intermediate incorrect value (such as too large or empty), correct it.\n    const { value, component } = editingColor;\n    const isHex = component === 'hex';\n    const isAlpha = component === 'a';\n    const isTransparency = component === 't';\n    const minLength = isHex ? MIN_HEX_LENGTH : MIN_RGBA_LENGTH;\n    if (value.length >= minLength && (isHex || !isNaN(Number(value)))) {\n      // Real value. Clamp to appropriate length (hex) or range (rgba).\n      let newColor: IColor | undefined;\n      if (isHex) {\n        newColor = getColorFromString('#' + correctHex(value));\n      } else if (isAlpha || isTransparency) {\n        const updater = isAlpha ? updateA : updateT;\n        newColor = updater(color, clamp(Number(value), MAX_COLOR_ALPHA));\n      } else {\n        newColor = getColorFromRGBA(\n          correctRGB({\n            ...color,\n            [component]: Number(value),\n          } as IRGB),\n        );\n      }\n\n      // Update state and call onChange\n      this._updateColor(event, newColor);\n    } else {\n      // Intermediate value was an empty string or too short (hex only).\n      // Just clear the intermediate state and revert to the previous value.\n      this.setState({ editingColor: undefined });\n    }\n  };\n\n  /**\n   * Update the displayed color and call change handlers if appropriate.\n   * @param ev - Event if call was triggered by an event (undefined if triggered by props change)\n   * @param newColor - Updated color\n   */\n  private _updateColor(ev: React.SyntheticEvent<HTMLElement> | undefined, newColor: IColor | undefined): void {\n    if (!newColor) {\n      return;\n    }\n\n    const { color, editingColor } = this.state;\n    // For black or white, the hue can change without changing the string.\n    const isDifferentColor = newColor.h !== color.h || newColor.str !== color.str;\n\n    if (isDifferentColor || editingColor) {\n      // If ev is undefined, it's an update from props (which should be unconditionally respected\n      // and not call onChange).\n      if (ev && this.props.onChange) {\n        this.props.onChange(ev, newColor);\n        if (ev.defaultPrevented) {\n          return;\n        }\n      }\n      this.setState({ color: newColor, editingColor: undefined });\n    }\n  }\n}\n\nfunction _getColorFromProps(props: IColorPickerProps): IColor | undefined {\n  const { color } = props;\n  return typeof color === 'string' ? getColorFromString(color) : color;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}