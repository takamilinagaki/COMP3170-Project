{"ast":null,"code":"import { warn } from './warn';\nimport { isControlled as checkIsControlled } from '../controlled';\nvar warningsMap;\nif (process.env.NODE_ENV !== 'production') {\n  warningsMap = {\n    valueOnChange: {},\n    valueDefaultValue: {},\n    controlledToUncontrolled: {},\n    uncontrolledToControlled: {}\n  };\n}\n/** Reset controlled usage warnings for testing purposes. */\nexport function resetControlledWarnings() {\n  if (process.env.NODE_ENV !== 'production') {\n    warningsMap.valueOnChange = {};\n    warningsMap.valueDefaultValue = {};\n    warningsMap.controlledToUncontrolled = {};\n    warningsMap.uncontrolledToControlled = {};\n  }\n}\n/**\n * Check for and warn on the following error conditions with a form component:\n * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n *    and the component is not read-only\n * - Both the value and defaultValue props are provided\n * - The component is attempting to switch between controlled and uncontrolled\n *\n * The messages mimic the warnings React gives for these error conditions on input elements.\n * The warning will only be displayed once per component ID.\n */\nexport function warnControlledUsage(params) {\n  if (process.env.NODE_ENV !== 'production') {\n    var componentId = params.componentId,\n      componentName = params.componentName,\n      defaultValueProp = params.defaultValueProp,\n      props = params.props,\n      oldProps = params.oldProps,\n      onChangeProp = params.onChangeProp,\n      readOnlyProp = params.readOnlyProp,\n      valueProp = params.valueProp;\n    // This warning logic closely follows what React does for native <input> elements.\n    var oldIsControlled = oldProps ? checkIsControlled(oldProps, valueProp) : undefined;\n    var newIsControlled = checkIsControlled(props, valueProp);\n    if (newIsControlled) {\n      // onChange (or readOnly) must be provided if value is provided\n      var hasOnChange = !!props[onChangeProp];\n      var isReadOnly = !!(readOnlyProp && props[readOnlyProp]);\n      if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {\n        warningsMap.valueOnChange[componentId] = true;\n        warn(\"Warning: You provided a '\".concat(String(valueProp), \"' prop to a \").concat(String(componentName), \" without an '\").concat(String(onChangeProp), \"' handler. \") + \"This will render a read-only field. If the field should be mutable use '\".concat(String(defaultValueProp), \"'. \") + \"Otherwise, set '\".concat(String(onChangeProp), \"'\").concat(readOnlyProp ? \" or '\".concat(String(readOnlyProp), \"'\") : '', \".\"));\n      }\n      // value and defaultValue are mutually exclusive\n      var defaultValue = props[defaultValueProp];\n      if (defaultValue !== undefined && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {\n        warningsMap.valueDefaultValue[componentId] = true;\n        warn(\"Warning: You provided both '\".concat(String(valueProp), \"' and '\").concat(String(defaultValueProp), \"' to a \").concat(componentName, \". \") + \"Form fields must be either controlled or uncontrolled (specify either the '\".concat(String(valueProp), \"' prop, \") + \"or the '\".concat(String(defaultValueProp), \"' prop, but not both). Decide between using a controlled or uncontrolled \") + \"\".concat(componentName, \" and remove one of these props. More info: https://fb.me/react-controlled-components\"));\n      }\n    }\n    // Warn if switching between uncontrolled and controlled. (One difference between this implementation\n    // and React's <input> is that if oldIsControlled is indeterminate and newIsControlled true, we don't warn.)\n    if (oldProps && newIsControlled !== oldIsControlled) {\n      var oldType = oldIsControlled ? 'a controlled' : 'an uncontrolled';\n      var newType = oldIsControlled ? 'uncontrolled' : 'controlled';\n      var warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;\n      if (!warnMap[componentId]) {\n        warnMap[componentId] = true;\n        warn(\"Warning: A component is changing \".concat(oldType, \" \").concat(componentName, \" to be \").concat(newType, \". \") + \"\".concat(componentName, \"s should not switch from controlled to uncontrolled (or vice versa). \") + \"Decide between using controlled or uncontrolled for the lifetime of the component. \" + \"More info: https://fb.me/react-controlled-components\");\n      }\n    }\n  }\n}","map":{"version":3,"names":["warn","isControlled","checkIsControlled","warningsMap","process","env","NODE_ENV","valueOnChange","valueDefaultValue","controlledToUncontrolled","uncontrolledToControlled","resetControlledWarnings","warnControlledUsage","params","componentId","componentName","defaultValueProp","props","oldProps","onChangeProp","readOnlyProp","valueProp","oldIsControlled","undefined","newIsControlled","hasOnChange","isReadOnly","concat","String","defaultValue","oldType","newType","warnMap"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/lib/src/warn/warnControlledUsage.ts"],"sourcesContent":["import { warn } from './warn';\nimport { isControlled as checkIsControlled } from '../controlled';\n\ntype WarningMap = { [id: string]: boolean };\n\nlet warningsMap: {\n  valueOnChange: WarningMap;\n  valueDefaultValue: WarningMap;\n  controlledToUncontrolled: WarningMap;\n  uncontrolledToControlled: WarningMap;\n};\nif (process.env.NODE_ENV !== 'production') {\n  warningsMap = {\n    valueOnChange: {},\n    valueDefaultValue: {},\n    controlledToUncontrolled: {},\n    uncontrolledToControlled: {},\n  };\n}\n\n/** Reset controlled usage warnings for testing purposes. */\nexport function resetControlledWarnings(): void {\n  if (process.env.NODE_ENV !== 'production') {\n    warningsMap.valueOnChange = {};\n    warningsMap.valueDefaultValue = {};\n    warningsMap.controlledToUncontrolled = {};\n    warningsMap.uncontrolledToControlled = {};\n  }\n}\n\nexport interface IWarnControlledUsageParams<P> {\n  /** ID of the component instance. Used to prevent showing warnings repeatedly. */\n  componentId: string;\n  /** Name of the component class. */\n  componentName: string;\n  /** Current props to evaluate. */\n  props: P;\n  /** Previous props to evaluate (undefined if called in the constructor). */\n  oldProps?: P;\n  /** Name of the prop for the controlled value. */\n  valueProp: keyof P;\n  /** Name of the prop for the uncontrolled initial value. */\n  defaultValueProp: keyof P;\n  /** Name of the change handler prop. */\n  onChangeProp: keyof P;\n  /** Name of the read-only prop. */\n  readOnlyProp?: keyof P;\n}\n\n/**\n * Check for and warn on the following error conditions with a form component:\n * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n *    and the component is not read-only\n * - Both the value and defaultValue props are provided\n * - The component is attempting to switch between controlled and uncontrolled\n *\n * The messages mimic the warnings React gives for these error conditions on input elements.\n * The warning will only be displayed once per component ID.\n */\nexport function warnControlledUsage<P>(params: IWarnControlledUsageParams<P>): void {\n  if (process.env.NODE_ENV !== 'production') {\n    const { componentId, componentName, defaultValueProp, props, oldProps, onChangeProp, readOnlyProp, valueProp } =\n      params;\n\n    // This warning logic closely follows what React does for native <input> elements.\n\n    const oldIsControlled = oldProps ? checkIsControlled(oldProps, valueProp) : undefined;\n    const newIsControlled = checkIsControlled(props, valueProp);\n\n    if (newIsControlled) {\n      // onChange (or readOnly) must be provided if value is provided\n      const hasOnChange = !!props[onChangeProp];\n      const isReadOnly = !!(readOnlyProp && props[readOnlyProp]);\n      if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {\n        warningsMap.valueOnChange[componentId] = true;\n        warn(\n          `Warning: You provided a '${String(valueProp)}' prop to a ${String(componentName)} without an '${String(\n            onChangeProp,\n          )}' handler. ` +\n            `This will render a read-only field. If the field should be mutable use '${String(defaultValueProp)}'. ` +\n            `Otherwise, set '${String(onChangeProp)}'${readOnlyProp ? ` or '${String(readOnlyProp)}'` : ''}.`,\n        );\n      }\n\n      // value and defaultValue are mutually exclusive\n      const defaultValue = props[defaultValueProp];\n      if (defaultValue !== undefined && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {\n        warningsMap.valueDefaultValue[componentId] = true;\n        warn(\n          `Warning: You provided both '${String(valueProp)}' and '${String(\n            defaultValueProp,\n          )}' to a ${componentName}. ` +\n            `Form fields must be either controlled or uncontrolled (specify either the '${String(valueProp)}' prop, ` +\n            `or the '${String(\n              defaultValueProp,\n            )}' prop, but not both). Decide between using a controlled or uncontrolled ` +\n            `${componentName} and remove one of these props. More info: https://fb.me/react-controlled-components`,\n        );\n      }\n    }\n\n    // Warn if switching between uncontrolled and controlled. (One difference between this implementation\n    // and React's <input> is that if oldIsControlled is indeterminate and newIsControlled true, we don't warn.)\n    if (oldProps && newIsControlled !== oldIsControlled) {\n      const oldType = oldIsControlled ? 'a controlled' : 'an uncontrolled';\n      const newType = oldIsControlled ? 'uncontrolled' : 'controlled';\n      const warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;\n      if (!warnMap[componentId]) {\n        warnMap[componentId] = true;\n        warn(\n          `Warning: A component is changing ${oldType} ${componentName} to be ${newType}. ` +\n            `${componentName}s should not switch from controlled to uncontrolled (or vice versa). ` +\n            `Decide between using controlled or uncontrolled for the lifetime of the component. ` +\n            `More info: https://fb.me/react-controlled-components`,\n        );\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}