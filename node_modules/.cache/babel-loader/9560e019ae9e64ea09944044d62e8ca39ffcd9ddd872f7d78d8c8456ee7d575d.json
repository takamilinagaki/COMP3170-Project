{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nvar getClassNames = classNamesFunction();\nvar GroupHeaderBase = /** @class */function (_super) {\n  __extends(GroupHeaderBase, _super);\n  function GroupHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._toggleCollapse = function () {\n      var _a = _this.props,\n        group = _a.group,\n        onToggleCollapse = _a.onToggleCollapse,\n        isGroupLoading = _a.isGroupLoading;\n      var isCollapsed = _this.state.isCollapsed;\n      var newCollapsed = !isCollapsed;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group);\n      _this.setState({\n        isCollapsed: newCollapsed,\n        isLoadingVisible: newLoadingVisible\n      });\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n    };\n    _this._onKeyUp = function (ev) {\n      var _a = _this.props,\n        group = _a.group,\n        onGroupHeaderKeyUp = _a.onGroupHeaderKeyUp;\n      if (onGroupHeaderKeyUp) {\n        onGroupHeaderKeyUp(ev, group);\n      }\n      if (!ev.defaultPrevented) {\n        // eslint-disable-next-line deprecation/deprecation\n        var shouldOpen = _this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, _this.props.theme);\n        // eslint-disable-next-line deprecation/deprecation\n        var shouldClose = !_this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, _this.props.theme);\n        if (shouldClose || shouldOpen) {\n          _this._toggleCollapse();\n          ev.stopPropagation();\n          ev.preventDefault();\n        }\n      }\n    };\n    _this._onToggleClick = function (ev) {\n      _this._toggleCollapse();\n      ev.stopPropagation();\n      ev.preventDefault();\n    };\n    _this._onHeaderClick = function () {\n      var _a = _this.props,\n        group = _a.group,\n        onGroupHeaderClick = _a.onGroupHeaderClick;\n      if (onGroupHeaderClick) {\n        onGroupHeaderClick(group);\n      }\n    };\n    _this._onRenderTitle = function (props) {\n      var group = props.group;\n      if (!group) {\n        return null;\n      }\n      var onRenderName = props.onRenderName ? composeRenderFunction(props.onRenderName, _this._onRenderName) : _this._onRenderName;\n      return React.createElement(\"div\", {\n        className: _this._classNames.title,\n        id: _this._id,\n        onClick: _this._onHeaderClick,\n        role: \"gridcell\",\n        \"aria-colspan\": _this.props.ariaColSpan,\n        \"data-selection-invoke\": true\n      }, onRenderName(props));\n    };\n    _this._onRenderName = function (props) {\n      var group = props.group;\n      if (!group) {\n        return null;\n      }\n      return React.createElement(React.Fragment, null, React.createElement(\"span\", null, group.name), React.createElement(\"span\", {\n        className: _this._classNames.headerCount\n      }, \"(\", group.count, group.hasMoreData && '+', \")\"));\n    };\n    _this._id = getId('GroupHeader');\n    _this.state = {\n      isCollapsed: _this.props.group && _this.props.group.isCollapsed,\n      isLoadingVisible: false\n    };\n    return _this;\n  }\n  GroupHeaderBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    if (nextProps.group) {\n      var newCollapsed = nextProps.group.isCollapsed;\n      var isGroupLoading = nextProps.isGroupLoading;\n      var newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n      return __assign(__assign({}, previousState), {\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false\n      });\n    }\n    return previousState;\n  };\n  GroupHeaderBase.prototype.render = function () {\n    var _a = this.props,\n      group = _a.group,\n      _b = _a.groupLevel,\n      groupLevel = _b === void 0 ? 0 : _b,\n      viewport = _a.viewport,\n      selectionMode = _a.selectionMode,\n      loadingText = _a.loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      _c = _a.isSelected,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = _c === void 0 ? false : _c,\n      _d = _a.selected,\n      selected = _d === void 0 ? false : _d,\n      indentWidth = _a.indentWidth,\n      onRenderGroupHeaderCheckbox = _a.onRenderGroupHeaderCheckbox,\n      _e = _a.isCollapsedGroupSelectVisible,\n      isCollapsedGroupSelectVisible = _e === void 0 ? true : _e,\n      expandButtonProps = _a.expandButtonProps,\n      expandButtonIcon = _a.expandButtonIcon,\n      selectAllButtonProps = _a.selectAllButtonProps,\n      theme = _a.theme,\n      styles = _a.styles,\n      className = _a.className,\n      compact = _a.compact,\n      ariaLevel = _a.ariaLevel,\n      ariaPosInSet = _a.ariaPosInSet,\n      ariaSetSize = _a.ariaSetSize,\n      ariaRowIndex = _a.ariaRowIndex,\n      useFastIcons = _a.useFastIcons;\n    var onRenderTitle = this.props.onRenderTitle ? composeRenderFunction(this.props.onRenderTitle, this._onRenderTitle) : this._onRenderTitle;\n    var defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n    var onRenderCheckbox = onRenderGroupHeaderCheckbox ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender) : defaultCheckboxRender;\n    var _f = this.state,\n      isCollapsed = _f.isCollapsed,\n      isLoadingVisible = _f.isLoadingVisible;\n    var canSelectGroup = selectionMode === SelectionMode.multiple;\n    var isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    var currentlySelected = selected || isSelected;\n    var isRTL = getRTL(theme);\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      selected: currentlySelected,\n      isCollapsed: isCollapsed,\n      compact: compact\n    });\n    if (!group) {\n      return null;\n    }\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      style: viewport ? {\n        minWidth: viewport.width\n      } : {},\n      role: \"row\",\n      \"aria-level\": ariaLevel,\n      \"aria-setsize\": ariaSetSize,\n      \"aria-posinset\": ariaPosInSet,\n      \"aria-rowindex\": ariaRowIndex,\n      \"data-is-focusable\": true,\n      onKeyUp: this._onKeyUp,\n      \"aria-label\": group.ariaLabel,\n      \"aria-labelledby\": group.ariaLabel ? undefined : this._id,\n      \"aria-expanded\": !this.state.isCollapsed,\n      \"aria-selected\": canSelectGroup ? currentlySelected : undefined,\n      \"data-selection-index\": group.startIndex,\n      \"data-selection-span\": group.count\n    }, React.createElement(\"div\", {\n      className: this._classNames.groupHeaderContainer,\n      role: \"presentation\"\n    }, isSelectionCheckVisible ? React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      type: \"button\",\n      className: this._classNames.check,\n      role: \"checkbox\",\n      id: \"\".concat(this._id, \"-check\"),\n      \"aria-checked\": currentlySelected,\n      \"aria-labelledby\": \"\".concat(this._id, \"-check \").concat(this._id),\n      \"data-selection-toggle\": true\n    }, selectAllButtonProps), onRenderCheckbox({\n      checked: currentlySelected,\n      theme: theme\n    }, onRenderCheckbox))) :\n    // To make the group header align properly with the column headers, this spacer\n    // needs to be the same width as the check cell in the column header.\n    selectionMode !== SelectionMode.none && React.createElement(GroupSpacer, {\n      indentWidth: CHECK_CELL_WIDTH,\n      count: 1\n    }), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      count: groupLevel\n    }), React.createElement(\"div\", {\n      className: this._classNames.dropIcon,\n      role: \"presentation\"\n    }, React.createElement(Icon, {\n      iconName: \"Tag\"\n    })), React.createElement(\"div\", {\n      role: \"gridcell\"\n    }, React.createElement(\"button\", __assign({\n      \"data-is-focusable\": false,\n      \"data-selection-disabled\": true,\n      type: \"button\",\n      className: this._classNames.expand,\n      onClick: this._onToggleClick,\n      \"aria-expanded\": !this.state.isCollapsed\n    }, expandButtonProps), React.createElement(Icon, {\n      className: this._classNames.expandIsCollapsed,\n      iconName: expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')\n    }))), onRenderTitle(this.props), isLoadingVisible && React.createElement(Spinner, {\n      label: loadingText\n    })));\n  };\n  GroupHeaderBase.prototype._defaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(Check, {\n      checked: checkboxProps.checked\n    });\n  };\n  GroupHeaderBase.prototype._fastDefaultCheckboxRender = function (checkboxProps) {\n    return React.createElement(FastCheck, {\n      theme: checkboxProps.theme,\n      checked: checkboxProps.checked\n    });\n  };\n  GroupHeaderBase.defaultProps = {\n    expandButtonProps: {\n      'aria-label': 'expand collapse group'\n    }\n  };\n  return GroupHeaderBase;\n}(React.Component);\nexport { GroupHeaderBase };\nvar FastCheck = React.memo(function (props) {\n  return React.createElement(Check, {\n    theme: props.theme,\n    checked: props.checked,\n    className: props.className,\n    useFastIcons: true\n  });\n});","map":{"version":3,"names":["React","composeRenderFunction","classNamesFunction","getId","getRTL","getRTLSafeKeyCode","KeyCodes","SelectionMode","Check","Icon","GroupSpacer","Spinner","CHECK_CELL_WIDTH","getClassNames","GroupHeaderBase","_super","__extends","props","_this","call","_toggleCollapse","_a","group","onToggleCollapse","isGroupLoading","isCollapsed","state","newCollapsed","newLoadingVisible","setState","isLoadingVisible","_onKeyUp","ev","onGroupHeaderKeyUp","defaultPrevented","shouldOpen","which","right","theme","shouldClose","left","stopPropagation","preventDefault","_onToggleClick","_onHeaderClick","onGroupHeaderClick","_onRenderTitle","onRenderName","_onRenderName","createElement","className","_classNames","title","id","_id","onClick","role","ariaColSpan","Fragment","name","headerCount","count","hasMoreData","getDerivedStateFromProps","nextProps","previousState","__assign","prototype","render","_b","groupLevel","viewport","selectionMode","loadingText","_c","isSelected","_d","selected","indentWidth","onRenderGroupHeaderCheckbox","_e","isCollapsedGroupSelectVisible","expandButtonProps","expandButtonIcon","selectAllButtonProps","styles","compact","ariaLevel","ariaPosInSet","ariaSetSize","ariaRowIndex","useFastIcons","onRenderTitle","defaultCheckboxRender","_fastDefaultCheckboxRender","_defaultCheckboxRender","onRenderCheckbox","_f","canSelectGroup","multiple","isSelectionCheckVisible","currentlySelected","isRTL","root","style","minWidth","width","onKeyUp","ariaLabel","undefined","startIndex","groupHeaderContainer","type","check","concat","checked","none","dropIcon","iconName","expand","expandIsCollapsed","label","checkboxProps","FastCheck","defaultProps","Component","memo"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupHeader.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\nimport type { IProcessedStyleSet, ITheme } from '../../Styling';\nimport type {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaLevel,\n      ariaPosInSet,\n      ariaSetSize,\n      ariaRowIndex,\n      useFastIcons,\n    } = this.props;\n\n    const onRenderTitle = this.props.onRenderTitle\n      ? composeRenderFunction(this.props.onRenderTitle, this._onRenderTitle)\n      : this._onRenderTitle;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        role=\"row\"\n        aria-level={ariaLevel}\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        aria-rowindex={ariaRowIndex}\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        data-selection-index={group.startIndex}\n        data-selection-span={group.count}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                id={`${this._id}-check`}\n                aria-checked={currentlySelected}\n                aria-labelledby={`${this._id}-check ${this._id}`}\n                data-selection-toggle={true}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            // To make the group header align properly with the column headers, this spacer\n            // needs to be the same width as the check cell in the column header.\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={CHECK_CELL_WIDTH} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              data-selection-disabled={true}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group);\n    }\n\n    if (!ev.defaultPrevented) {\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    const onRenderName = props.onRenderName\n      ? composeRenderFunction(props.onRenderName, this._onRenderName)\n      : this._onRenderName;\n\n    return (\n      <div\n        className={this._classNames.title}\n        id={this._id}\n        onClick={this._onHeaderClick}\n        role=\"gridcell\"\n        aria-colspan={this.props.ariaColSpan}\n        data-selection-invoke={true}\n      >\n        {onRenderName(props)}\n      </div>\n    );\n  };\n\n  private _onRenderName = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}