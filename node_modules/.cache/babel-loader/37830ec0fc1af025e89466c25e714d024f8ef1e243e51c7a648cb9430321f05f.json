{"ast":null,"code":"// Regex that finds { and } so they can be removed on a lookup for string format\nvar FORMAT_ARGS_REGEX = /[\\{\\}]/g;\n// Regex that finds {#} so it can be replaced by the arguments in string format\nvar FORMAT_REGEX = /\\{\\d+\\}/g;\n/**\n * String format method, used for scenarios where at runtime you\n * need to evaluate a formatted string given a tokenized string. This\n * usually only is needed in localization scenarios.\n\n * @example\n * ```tsx\n * \"I love {0} every {1}\".format(\"CXP\")\n * ```\n * will result in a Debug Exception.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function format(s) {\n  var values = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    values[_i - 1] = arguments[_i];\n  }\n  var args = values;\n  // Callback match function\n  function replaceFunc(match) {\n    // looks up in the args\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var replacement = args[match.replace(FORMAT_ARGS_REGEX, '')];\n    // catches undefined in nondebug and null in debug and nondebug\n    if (replacement === null || replacement === undefined) {\n      replacement = '';\n    }\n    return replacement;\n  }\n  return s.replace(FORMAT_REGEX, replaceFunc);\n}","map":{"version":3,"names":["FORMAT_ARGS_REGEX","FORMAT_REGEX","format","s","values","_i","arguments","length","args","replaceFunc","match","replacement","replace","undefined"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/src/string.ts"],"sourcesContent":["// Regex that finds { and } so they can be removed on a lookup for string format\nconst FORMAT_ARGS_REGEX = /[\\{\\}]/g;\n\n// Regex that finds {#} so it can be replaced by the arguments in string format\nconst FORMAT_REGEX = /\\{\\d+\\}/g;\n\n/**\n * String format method, used for scenarios where at runtime you\n * need to evaluate a formatted string given a tokenized string. This\n * usually only is needed in localization scenarios.\n\n * @example\n * ```tsx\n * \"I love {0} every {1}\".format(\"CXP\")\n * ```\n * will result in a Debug Exception.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function format(s: string, ...values: any[]): string {\n  let args = values;\n  // Callback match function\n  function replaceFunc(match: string): string {\n    // looks up in the args\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let replacement = args[match.replace(FORMAT_ARGS_REGEX, '') as any];\n\n    // catches undefined in nondebug and null in debug and nondebug\n    if (replacement === null || replacement === undefined) {\n      replacement = '';\n    }\n\n    return replacement;\n  }\n  return s.replace(FORMAT_REGEX, replaceFunc);\n}\n"],"mappings":"AAAA;AACA,IAAMA,iBAAiB,GAAG,SAAS;AAEnC;AACA,IAAMC,YAAY,GAAG,UAAU;AAE/B;;;;;;;;;;;;;AAaA;AACA,OAAM,SAAUC,MAAMA,CAACC,CAAS;EAAE,IAAAC,MAAA;OAAA,IAAAC,EAAA,IAAgB,EAAhBA,EAAA,GAAAC,SAAA,CAAAC,MAAgB,EAAhBF,EAAA,EAAgB;IAAhBD,MAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;EAChC,IAAIG,IAAI,GAAGJ,MAAM;EACjB;EACA,SAASK,WAAWA,CAACC,KAAa;IAChC;IACA;IACA,IAAIC,WAAW,GAAGH,IAAI,CAACE,KAAK,CAACE,OAAO,CAACZ,iBAAiB,EAAE,EAAE,CAAQ,CAAC;IAEnE;IACA,IAAIW,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAKE,SAAS,EAAE;MACrDF,WAAW,GAAG,EAAE;;IAGlB,OAAOA,WAAW;EACpB;EACA,OAAOR,CAAC,CAACS,OAAO,CAACX,YAAY,EAAEQ,WAAW,CAAC;AAC7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}