{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { GlobalSettings, warn } from '@fluentui/utilities';\nimport { fontFace, mergeStyles, Stylesheet } from '@fluentui/merge-styles';\nvar ICON_SETTING_NAME = 'icons';\nvar _iconSettings = GlobalSettings.getValue(ICON_SETTING_NAME, {\n  __options: {\n    disableWarnings: false,\n    warnOnMissingIcons: true\n  },\n  __remapped: {}\n});\n// Reset icon registration on stylesheet resets.\nvar stylesheet = Stylesheet.getInstance();\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(function () {\n    for (var name_1 in _iconSettings) {\n      if (_iconSettings.hasOwnProperty(name_1) && !!_iconSettings[name_1].subset) {\n        _iconSettings[name_1].subset.className = undefined;\n      }\n    }\n  });\n}\n/**\n * Normalizes an icon name for consistent mapping.\n * Current implementation is to convert the icon name to lower case.\n *\n * @param name - Icon name to normalize.\n * @returns {string} Normalized icon name to use for indexing and mapping.\n */\nvar normalizeIconName = function (name) {\n  return name.toLowerCase();\n};\n/**\n * Registers a given subset of icons.\n *\n * @param iconSubset - the icon subset definition.\n */\nexport function registerIcons(iconSubset, options) {\n  var subset = __assign(__assign({}, iconSubset), {\n    isRegistered: false,\n    className: undefined\n  });\n  var icons = iconSubset.icons;\n  // Grab options, optionally mix user provided ones on top.\n  options = options ? __assign(__assign({}, _iconSettings.__options), options) : _iconSettings.__options;\n  for (var iconName in icons) {\n    if (icons.hasOwnProperty(iconName)) {\n      var code = icons[iconName];\n      var normalizedIconName = normalizeIconName(iconName);\n      if (_iconSettings[normalizedIconName]) {\n        _warnDuplicateIcon(iconName);\n      } else {\n        _iconSettings[normalizedIconName] = {\n          code: code,\n          subset: subset\n        };\n      }\n    }\n  }\n}\n/**\n * Unregisters icons by name.\n *\n * @param iconNames - List of icons to unregister.\n */\nexport function unregisterIcons(iconNames) {\n  var options = _iconSettings.__options;\n  var _loop_1 = function (iconName) {\n    var normalizedIconName = normalizeIconName(iconName);\n    if (_iconSettings[normalizedIconName]) {\n      delete _iconSettings[normalizedIconName];\n    } else {\n      // Warn that we are trying to delete an icon that doesn't exist\n      if (!options.disableWarnings) {\n        warn(\"The icon \\\"\".concat(iconName, \"\\\" tried to unregister but was not registered.\"));\n      }\n    }\n    // Delete any aliases for this iconName\n    if (_iconSettings.__remapped[normalizedIconName]) {\n      delete _iconSettings.__remapped[normalizedIconName];\n    }\n    // Delete any items that were an alias for this iconName\n    Object.keys(_iconSettings.__remapped).forEach(function (key) {\n      if (_iconSettings.__remapped[key] === normalizedIconName) {\n        delete _iconSettings.__remapped[key];\n      }\n    });\n  };\n  for (var _i = 0, iconNames_1 = iconNames; _i < iconNames_1.length; _i++) {\n    var iconName = iconNames_1[_i];\n    _loop_1(iconName);\n  }\n}\n/**\n * Remaps one icon name to another.\n */\nexport function registerIconAlias(iconName, mappedToName) {\n  _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\n}\n/**\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\n * it will get registered immediately.\n *\n * @public\n * @param name - Name of icon.\n */\nexport function getIcon(name) {\n  var icon = undefined;\n  var options = _iconSettings.__options;\n  name = name ? normalizeIconName(name) : '';\n  name = _iconSettings.__remapped[name] || name;\n  if (name) {\n    icon = _iconSettings[name];\n    if (icon) {\n      var subset = icon.subset;\n      if (subset && subset.fontFace) {\n        if (!subset.isRegistered) {\n          fontFace(subset.fontFace);\n          subset.isRegistered = true;\n        }\n        if (!subset.className) {\n          subset.className = mergeStyles(subset.style, {\n            fontFamily: subset.fontFace.fontFamily,\n            fontWeight: subset.fontFace.fontWeight || 'normal',\n            fontStyle: subset.fontFace.fontStyle || 'normal'\n          });\n        }\n      }\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!options.disableWarnings && options.warnOnMissingIcons) {\n        warn(\"The icon \\\"\".concat(name, \"\\\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.\"));\n      }\n    }\n  }\n  return icon;\n}\n/**\n * Sets the icon options.\n *\n * @public\n */\nexport function setIconOptions(options) {\n  _iconSettings.__options = __assign(__assign({}, _iconSettings.__options), options);\n}\nvar _missingIcons = [];\nvar _missingIconsTimer = undefined;\nfunction _warnDuplicateIcon(iconName) {\n  var options = _iconSettings.__options;\n  var warningDelay = 2000;\n  var maxIconsInMessage = 10;\n  if (!options.disableWarnings) {\n    _missingIcons.push(iconName);\n    if (_missingIconsTimer === undefined) {\n      _missingIconsTimer = setTimeout(function () {\n        warn(\"Some icons were re-registered. Applications should only call registerIcons for any given \" + \"icon once. Redefining what an icon is may have unintended consequences. Duplicates \" + \"include: \\n\" + _missingIcons.slice(0, maxIconsInMessage).join(', ') + (_missingIcons.length > maxIconsInMessage ? \" (+ \".concat(_missingIcons.length - maxIconsInMessage, \" more)\") : ''));\n        _missingIconsTimer = undefined;\n        _missingIcons = [];\n      }, warningDelay);\n    }\n  }\n}","map":{"version":3,"names":["GlobalSettings","warn","fontFace","mergeStyles","Stylesheet","ICON_SETTING_NAME","_iconSettings","getValue","__options","disableWarnings","warnOnMissingIcons","__remapped","stylesheet","getInstance","onReset","name_1","hasOwnProperty","subset","className","undefined","normalizeIconName","name","toLowerCase","registerIcons","iconSubset","options","__assign","isRegistered","icons","iconName","code","normalizedIconName","_warnDuplicateIcon","unregisterIcons","iconNames","concat","Object","keys","forEach","key","_i","iconNames_1","length","registerIconAlias","mappedToName","getIcon","icon","style","fontFamily","fontWeight","fontStyle","setIconOptions","_missingIcons","_missingIconsTimer","warningDelay","maxIconsInMessage","push","setTimeout","slice","join"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/style-utilities/lib/src/utilities/icons.ts"],"sourcesContent":["import { GlobalSettings, warn } from '@fluentui/utilities';\nimport { fontFace, mergeStyles, Stylesheet } from '@fluentui/merge-styles';\nimport type { IRawStyle, IFontFace } from '@fluentui/merge-styles';\n\nexport interface IIconSubset {\n  fontFace?: IFontFace;\n  icons: {\n    [key: string]: string | JSX.Element;\n  };\n\n  style?: IRawStyle;\n  /**\n   * Indicates to the icon renderer that it is safe to merge any props on the original `Icon` element\n   * onto the child content element registered for the icon which are valid for HTML images.\n   */\n  mergeImageProps?: boolean;\n}\n\nexport interface IIconSubsetRecord extends IIconSubset {\n  isRegistered?: boolean;\n  className?: string;\n}\n\nexport interface IIconRecord {\n  code: string | undefined;\n  subset: IIconSubsetRecord;\n}\n\nexport interface IIconOptions {\n  /**\n   * By default, registering the same set of icons will generate a console warning per duplicate icon\n   * registered, because this scenario can create unexpected consequences.\n   *\n   * Some scenarios include:\n   *\n   * Icon set was previously registered using a different base url.\n   * Icon set was previously registered but a different version was provided.\n   * Icons in a previous registered set overlap with a new set.\n   *\n   * To simply ignore previously registered icons, you can specify to disable warnings. This means\n   * that if an icon which was previous registered is registered again, it will be silently ignored.\n   * However, consider whether the problems listed above will cause issues.\n   **/\n  disableWarnings: boolean;\n\n  /**\n   * @deprecated Use `disableWarnings` instead.\n   */\n  warnOnMissingIcons?: boolean;\n}\n\nexport interface IIconRecords {\n  __options: IIconOptions;\n  __remapped: { [key: string]: string };\n  [key: string]: IIconRecord | {};\n}\n\nconst ICON_SETTING_NAME = 'icons';\n\nconst _iconSettings = GlobalSettings.getValue<IIconRecords>(ICON_SETTING_NAME, {\n  __options: {\n    disableWarnings: false,\n    warnOnMissingIcons: true,\n  },\n  __remapped: {},\n});\n\n// Reset icon registration on stylesheet resets.\nconst stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(() => {\n    for (const name in _iconSettings) {\n      if (_iconSettings.hasOwnProperty(name) && !!(_iconSettings[name] as IIconRecord).subset) {\n        (_iconSettings[name] as IIconRecord).subset.className = undefined;\n      }\n    }\n  });\n}\n\n/**\n * Normalizes an icon name for consistent mapping.\n * Current implementation is to convert the icon name to lower case.\n *\n * @param name - Icon name to normalize.\n * @returns {string} Normalized icon name to use for indexing and mapping.\n */\nconst normalizeIconName = (name: string): string => name.toLowerCase();\n\n/**\n * Registers a given subset of icons.\n *\n * @param iconSubset - the icon subset definition.\n */\nexport function registerIcons(iconSubset: IIconSubset, options?: Partial<IIconOptions>): void {\n  let subset = {\n    ...iconSubset,\n    isRegistered: false,\n    className: undefined,\n  };\n  let { icons } = iconSubset;\n\n  // Grab options, optionally mix user provided ones on top.\n  options = options ? { ..._iconSettings.__options, ...options } : _iconSettings.__options;\n\n  for (const iconName in icons) {\n    if (icons.hasOwnProperty(iconName)) {\n      const code = icons[iconName];\n      const normalizedIconName = normalizeIconName(iconName);\n\n      if (_iconSettings[normalizedIconName]) {\n        _warnDuplicateIcon(iconName);\n      } else {\n        _iconSettings[normalizedIconName] = {\n          code,\n          subset,\n        } as IIconRecord;\n      }\n    }\n  }\n}\n\n/**\n * Unregisters icons by name.\n *\n * @param iconNames - List of icons to unregister.\n */\nexport function unregisterIcons(iconNames: string[]): void {\n  const options = _iconSettings.__options;\n\n  for (const iconName of iconNames) {\n    const normalizedIconName = normalizeIconName(iconName);\n    if (_iconSettings[normalizedIconName]) {\n      delete _iconSettings[normalizedIconName];\n    } else {\n      // Warn that we are trying to delete an icon that doesn't exist\n      if (!options.disableWarnings) {\n        warn(`The icon \"${iconName}\" tried to unregister but was not registered.`);\n      }\n    }\n\n    // Delete any aliases for this iconName\n    if (_iconSettings.__remapped[normalizedIconName]) {\n      delete _iconSettings.__remapped[normalizedIconName];\n    }\n\n    // Delete any items that were an alias for this iconName\n    Object.keys(_iconSettings.__remapped).forEach((key: string) => {\n      if (_iconSettings.__remapped[key] === normalizedIconName) {\n        delete _iconSettings.__remapped[key];\n      }\n    });\n  }\n}\n\n/**\n * Remaps one icon name to another.\n */\nexport function registerIconAlias(iconName: string, mappedToName: string): void {\n  _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\n}\n\n/**\n * Gets an icon definition. If an icon is requested but the subset has yet to be registered,\n * it will get registered immediately.\n *\n * @public\n * @param name - Name of icon.\n */\nexport function getIcon(name?: string): IIconRecord | undefined {\n  let icon: IIconRecord | undefined = undefined;\n  const options = _iconSettings.__options;\n\n  name = name ? normalizeIconName(name) : '';\n  name = _iconSettings.__remapped[name] || name;\n\n  if (name) {\n    icon = _iconSettings[name!] as IIconRecord;\n\n    if (icon) {\n      let { subset } = icon;\n      if (subset && subset.fontFace) {\n        if (!subset.isRegistered) {\n          fontFace(subset.fontFace);\n          subset.isRegistered = true;\n        }\n\n        if (!subset.className) {\n          subset.className = mergeStyles(subset.style, {\n            fontFamily: subset.fontFace.fontFamily,\n            fontWeight: subset.fontFace.fontWeight || 'normal',\n            fontStyle: subset.fontFace.fontStyle || 'normal',\n          });\n        }\n      }\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!options.disableWarnings && options.warnOnMissingIcons) {\n        warn(\n          `The icon \"${name}\" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.`,\n        );\n      }\n    }\n  }\n\n  return icon;\n}\n\n/**\n * Sets the icon options.\n *\n * @public\n */\nexport function setIconOptions(options: Partial<IIconOptions>): void {\n  _iconSettings.__options = {\n    ..._iconSettings.__options,\n    ...options,\n  };\n}\n\nlet _missingIcons: string[] = [];\nlet _missingIconsTimer: ReturnType<typeof setTimeout> | undefined = undefined;\n\nfunction _warnDuplicateIcon(iconName: string): void {\n  const options = _iconSettings.__options;\n  const warningDelay = 2000;\n  const maxIconsInMessage = 10;\n\n  if (!options.disableWarnings) {\n    _missingIcons.push(iconName);\n    if (_missingIconsTimer === undefined) {\n      _missingIconsTimer = setTimeout(() => {\n        warn(\n          `Some icons were re-registered. Applications should only call registerIcons for any given ` +\n            `icon once. Redefining what an icon is may have unintended consequences. Duplicates ` +\n            `include: \\n` +\n            _missingIcons.slice(0, maxIconsInMessage).join(', ') +\n            (_missingIcons.length > maxIconsInMessage ? ` (+ ${_missingIcons.length - maxIconsInMessage} more)` : ''),\n        );\n        _missingIconsTimer = undefined;\n        _missingIcons = [];\n      }, warningDelay);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}