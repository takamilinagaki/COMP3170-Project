{"ast":null,"code":"import { MAX_COLOR_ALPHA } from './consts';\nimport { hsv2rgb } from './hsv2rgb';\nimport { hsv2hex } from './hsv2hex';\nimport { _rgbaOrHexString } from './_rgbaOrHexString';\n/**\n * Converts an HSV color (and optional alpha value) to a color object.\n * If `a` is not given, a default of 100 is used.\n * Hex in the returned value will *not* be prefixed with #.\n * If `a` is unspecified or 100, the result's `str` property will contain a hex value\n * (*not* prefixed with #)\n */\nexport function getColorFromHSV(hsv, a) {\n  var h = hsv.h,\n    s = hsv.s,\n    v = hsv.v;\n  a = typeof a === 'number' ? a : MAX_COLOR_ALPHA;\n  var _a = hsv2rgb(h, s, v),\n    r = _a.r,\n    g = _a.g,\n    b = _a.b;\n  var hex = hsv2hex(h, s, v);\n  var str = _rgbaOrHexString(r, g, b, a, hex);\n  var t = MAX_COLOR_ALPHA - a;\n  return {\n    a: a,\n    b: b,\n    g: g,\n    h: h,\n    hex: hex,\n    r: r,\n    s: s,\n    str: str,\n    v: v,\n    t: t\n  };\n}","map":{"version":3,"names":["MAX_COLOR_ALPHA","hsv2rgb","hsv2hex","_rgbaOrHexString","getColorFromHSV","hsv","a","h","s","v","_a","r","g","b","hex","str","t"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/color/getColorFromHSV.ts"],"sourcesContent":["import { MAX_COLOR_ALPHA } from './consts';\nimport { hsv2rgb } from './hsv2rgb';\nimport { hsv2hex } from './hsv2hex';\nimport { _rgbaOrHexString } from './_rgbaOrHexString';\nimport type { IHSV, IColor } from './interfaces';\n\n/**\n * Converts an HSV color (and optional alpha value) to a color object.\n * If `a` is not given, a default of 100 is used.\n * Hex in the returned value will *not* be prefixed with #.\n * If `a` is unspecified or 100, the result's `str` property will contain a hex value\n * (*not* prefixed with #)\n */\nexport function getColorFromHSV(hsv: IHSV, a?: number): IColor {\n  const { h, s, v } = hsv;\n  a = typeof a === 'number' ? a : MAX_COLOR_ALPHA;\n\n  const { r, g, b } = hsv2rgb(h, s, v);\n  const hex = hsv2hex(h, s, v);\n  const str = _rgbaOrHexString(r, g, b, a, hex);\n  const t = MAX_COLOR_ALPHA - a;\n\n  return { a, b, g, h, hex, r, s, str, v, t };\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,UAAU;AAC1C,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,gBAAgB,QAAQ,oBAAoB;AAGrD;;;;;;;AAOA,OAAM,SAAUC,eAAeA,CAACC,GAAS,EAAEC,CAAU;EAC3C,IAAAC,CAAC,GAAWF,GAAG,CAAAE,CAAd;IAAEC,CAAC,GAAQH,GAAG,CAAAG,CAAX;IAAEC,CAAC,GAAKJ,GAAG,CAAAI,CAAR;EACfH,CAAC,GAAG,OAAOA,CAAC,KAAK,QAAQ,GAAGA,CAAC,GAAGN,eAAe;EAEzC,IAAAU,EAAA,GAAcT,OAAO,CAACM,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAA5BE,CAAC,GAAAD,EAAA,CAAAC,CAAA;IAAEC,CAAC,GAAAF,EAAA,CAAAE,CAAA;IAAEC,CAAC,GAAAH,EAAA,CAAAG,CAAqB;EACpC,IAAMC,GAAG,GAAGZ,OAAO,CAACK,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;EAC5B,IAAMM,GAAG,GAAGZ,gBAAgB,CAACQ,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEP,CAAC,EAAEQ,GAAG,CAAC;EAC7C,IAAME,CAAC,GAAGhB,eAAe,GAAGM,CAAC;EAE7B,OAAO;IAAEA,CAAC,EAAAA,CAAA;IAAEO,CAAC,EAAAA,CAAA;IAAED,CAAC,EAAAA,CAAA;IAAEL,CAAC,EAAAA,CAAA;IAAEO,GAAG,EAAAA,GAAA;IAAEH,CAAC,EAAAA,CAAA;IAAEH,CAAC,EAAAA,CAAA;IAAEO,GAAG,EAAAA,GAAA;IAAEN,CAAC,EAAAA,CAAA;IAAEO,CAAC,EAAAA;EAAA,CAAE;AAC7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}