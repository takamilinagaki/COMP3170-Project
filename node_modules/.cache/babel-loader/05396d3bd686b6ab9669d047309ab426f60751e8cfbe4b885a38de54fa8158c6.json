{"ast":null,"code":"export var StickyPositionType;\n(function (StickyPositionType) {\n  StickyPositionType[StickyPositionType[\"Both\"] = 0] = \"Both\";\n  StickyPositionType[StickyPositionType[\"Header\"] = 1] = \"Header\";\n  StickyPositionType[StickyPositionType[\"Footer\"] = 2] = \"Footer\";\n})(StickyPositionType || (StickyPositionType = {}));","map":{"version":3,"names":["StickyPositionType"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/Sticky/Sticky.types.ts"],"sourcesContent":["import { Sticky } from './Sticky';\nimport type { IReactProps, IRefObject } from '../../Utilities';\n\nexport interface IStickyProps extends IReactProps<Sticky> {\n  /**\n   * Gets ref to component interface.\n   */\n  componentRef?: IRefObject<IStickyProps>;\n\n  /**\n   * Class name to apply to the sticky element if component is sticky.\n   */\n  stickyClassName?: string;\n\n  /**\n   * color to apply as 'background-color' style for sticky element.\n   */\n  stickyBackgroundColor?: string;\n\n  /**\n   * Region to render sticky component in.\n   * @defaultvalue Both\n   */\n  stickyPosition?: StickyPositionType;\n\n  /**\n   * If true, then match scrolling position of placeholder element in Sticky.\n   * @defaultvalue true\n   */\n  isScrollSynced?: boolean;\n}\n\nexport enum StickyPositionType {\n  Both = 0,\n  Header = 1,\n  Footer = 2,\n}\n"],"mappings":"AAgCA,WAAYA,kBAIX;AAJD,WAAYA,kBAAkB;EAC5BA,kBAAA,CAAAA,kBAAA,sBAAQ;EACRA,kBAAA,CAAAA,kBAAA,0BAAU;EACVA,kBAAA,CAAAA,kBAAA,0BAAU;AACZ,CAAC,EAJWA,kBAAkB,KAAlBA,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}