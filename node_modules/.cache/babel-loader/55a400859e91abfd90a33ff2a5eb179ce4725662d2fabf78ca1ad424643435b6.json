{"ast":null,"code":"import { find } from '../../Utilities';\n/**\n * Tests for equality between two IKeytipTransitionKeys.\n *\n * @param key1 - First IKeytipTransitionKey.\n * @param key2 - Second IKeytipTransitionKey.\n * @returns T/F if the transition keys are equal.\n */\nexport function transitionKeysAreEqual(key1, key2) {\n  if (key1.key !== key2.key) {\n    return false;\n  }\n  var mod1 = key1.modifierKeys;\n  var mod2 = key2.modifierKeys;\n  if (!mod1 && mod2 || mod1 && !mod2) {\n    // Not equal if one modifier is defined and the other isn't\n    return false;\n  }\n  if (mod1 && mod2) {\n    if (mod1.length !== mod2.length) {\n      return false;\n    }\n    // Sort both arrays\n    mod1 = mod1.sort();\n    mod2 = mod2.sort();\n    for (var i = 0; i < mod1.length; i++) {\n      if (mod1[i] !== mod2[i]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n/**\n * Tests if 'key' is present in 'keys'.\n *\n * @param keys - Array of IKeytipTransitionKey.\n * @param key - IKeytipTransitionKey to find in 'keys'.\n * @returns T/F if 'keys' contains 'key'.\n */\nexport function transitionKeysContain(keys, key) {\n  return !!find(keys, function (transitionKey) {\n    return transitionKeysAreEqual(transitionKey, key);\n  });\n}","map":{"version":3,"names":["find","transitionKeysAreEqual","key1","key2","key","mod1","modifierKeys","mod2","length","sort","i","transitionKeysContain","keys","transitionKey"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/keytips/IKeytipTransitionKey.ts"],"sourcesContent":["import { find, KeyCodes } from '../../Utilities';\n\nexport type KeytipTransitionModifier =\n  | typeof KeyCodes.shift\n  | typeof KeyCodes.ctrl\n  | typeof KeyCodes.alt\n  | typeof KeyCodes.leftWindow;\n\nexport interface IKeytipTransitionKey {\n  key: string;\n  modifierKeys?: KeytipTransitionModifier[];\n}\n\n/**\n * Tests for equality between two IKeytipTransitionKeys.\n *\n * @param key1 - First IKeytipTransitionKey.\n * @param key2 - Second IKeytipTransitionKey.\n * @returns T/F if the transition keys are equal.\n */\nexport function transitionKeysAreEqual(key1: IKeytipTransitionKey, key2: IKeytipTransitionKey): boolean {\n  if (key1.key !== key2.key) {\n    return false;\n  }\n\n  let mod1 = key1.modifierKeys;\n  let mod2 = key2.modifierKeys;\n\n  if ((!mod1 && mod2) || (mod1 && !mod2)) {\n    // Not equal if one modifier is defined and the other isn't\n    return false;\n  }\n\n  if (mod1 && mod2) {\n    if (mod1.length !== mod2.length) {\n      return false;\n    }\n\n    // Sort both arrays\n    mod1 = mod1.sort();\n    mod2 = mod2.sort();\n    for (let i = 0; i < mod1.length; i++) {\n      if (mod1[i] !== mod2[i]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Tests if 'key' is present in 'keys'.\n *\n * @param keys - Array of IKeytipTransitionKey.\n * @param key - IKeytipTransitionKey to find in 'keys'.\n * @returns T/F if 'keys' contains 'key'.\n */\nexport function transitionKeysContain(keys: IKeytipTransitionKey[], key: IKeytipTransitionKey): boolean {\n  return !!find(keys, (transitionKey: IKeytipTransitionKey) => {\n    return transitionKeysAreEqual(transitionKey, key);\n  });\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAkB,iBAAiB;AAahD;;;;;;;AAOA,OAAM,SAAUC,sBAAsBA,CAACC,IAA0B,EAAEC,IAA0B;EAC3F,IAAID,IAAI,CAACE,GAAG,KAAKD,IAAI,CAACC,GAAG,EAAE;IACzB,OAAO,KAAK;;EAGd,IAAIC,IAAI,GAAGH,IAAI,CAACI,YAAY;EAC5B,IAAIC,IAAI,GAAGJ,IAAI,CAACG,YAAY;EAE5B,IAAK,CAACD,IAAI,IAAIE,IAAI,IAAMF,IAAI,IAAI,CAACE,IAAK,EAAE;IACtC;IACA,OAAO,KAAK;;EAGd,IAAIF,IAAI,IAAIE,IAAI,EAAE;IAChB,IAAIF,IAAI,CAACG,MAAM,KAAKD,IAAI,CAACC,MAAM,EAAE;MAC/B,OAAO,KAAK;;IAGd;IACAH,IAAI,GAAGA,IAAI,CAACI,IAAI,EAAE;IAClBF,IAAI,GAAGA,IAAI,CAACE,IAAI,EAAE;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACG,MAAM,EAAEE,CAAC,EAAE,EAAE;MACpC,IAAIL,IAAI,CAACK,CAAC,CAAC,KAAKH,IAAI,CAACG,CAAC,CAAC,EAAE;QACvB,OAAO,KAAK;;;;EAKlB,OAAO,IAAI;AACb;AAEA;;;;;;;AAOA,OAAM,SAAUC,qBAAqBA,CAACC,IAA4B,EAAER,GAAyB;EAC3F,OAAO,CAAC,CAACJ,IAAI,CAACY,IAAI,EAAE,UAACC,aAAmC;IACtD,OAAOZ,sBAAsB,CAACY,aAAa,EAAET,GAAG,CAAC;EACnD,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}