{"ast":null,"code":"import * as React from 'react';\nimport { getWindow } from '@fluentui/utilities';\nimport { useOnEvent } from '@fluentui/react-hooks';\nimport { getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\nimport { useWindow } from '../../WindowProvider';\n/**\n * Hook to get the current responsive mode (window size category).\n * @param elementRef - Use this element's parent window when determining the responsive mode.\n * @param overrideResponsiveMode - Override the responsive mode. If this param is present, it's always returned.\n */\nexport var useResponsiveMode = function (elementRef, overrideResponsiveMode) {\n  var _a = React.useState(getInitialResponsiveMode()),\n    lastResponsiveMode = _a[0],\n    setLastResponsiveMode = _a[1];\n  var onResize = React.useCallback(function () {\n    var newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));\n    // Setting the same value should not cause a re-render.\n    if (lastResponsiveMode !== newResponsiveMode) {\n      setLastResponsiveMode(newResponsiveMode);\n    }\n  }, [elementRef, lastResponsiveMode]);\n  var win = useWindow();\n  useOnEvent(win, 'resize', onResize);\n  // Call resize function initially on mount, or if the override changes from defined to undefined\n  // (the effect will run on all override changes, but onResize will only be called if it changed to undefined)\n  React.useEffect(function () {\n    if (overrideResponsiveMode === undefined) {\n      onResize();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount or when override changes\n  }, [overrideResponsiveMode]);\n  return overrideResponsiveMode !== null && overrideResponsiveMode !== void 0 ? overrideResponsiveMode : lastResponsiveMode;\n};","map":{"version":3,"names":["React","getWindow","useOnEvent","getResponsiveMode","getInitialResponsiveMode","useWindow","useResponsiveMode","elementRef","overrideResponsiveMode","_a","useState","lastResponsiveMode","setLastResponsiveMode","onResize","useCallback","newResponsiveMode","current","win","useEffect","undefined"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/hooks/useResponsiveMode.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getWindow } from '@fluentui/utilities';\nimport { useOnEvent } from '@fluentui/react-hooks';\nimport { ResponsiveMode, getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\nimport { useWindow } from '../../WindowProvider';\n\n/**\n * Hook to get the current responsive mode (window size category).\n * @param elementRef - Use this element's parent window when determining the responsive mode.\n * @param overrideResponsiveMode - Override the responsive mode. If this param is present, it's always returned.\n */\nexport const useResponsiveMode = (\n  elementRef: React.RefObject<HTMLElement | null>,\n  overrideResponsiveMode?: ResponsiveMode,\n) => {\n  const [lastResponsiveMode, setLastResponsiveMode] = React.useState<ResponsiveMode>(getInitialResponsiveMode());\n\n  const onResize = React.useCallback(() => {\n    const newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));\n\n    // Setting the same value should not cause a re-render.\n    if (lastResponsiveMode !== newResponsiveMode) {\n      setLastResponsiveMode(newResponsiveMode);\n    }\n  }, [elementRef, lastResponsiveMode]);\n\n  const win = useWindow();\n  useOnEvent(win, 'resize', onResize);\n\n  // Call resize function initially on mount, or if the override changes from defined to undefined\n  // (the effect will run on all override changes, but onResize will only be called if it changed to undefined)\n  React.useEffect(() => {\n    if (overrideResponsiveMode === undefined) {\n      onResize();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount or when override changes\n  }, [overrideResponsiveMode]);\n\n  return overrideResponsiveMode ?? lastResponsiveMode;\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAAyBC,iBAAiB,EAAEC,wBAAwB,QAAQ,kCAAkC;AAC9G,SAASC,SAAS,QAAQ,sBAAsB;AAEhD;;;;;AAKA,OAAO,IAAMC,iBAAiB,GAAG,SAAAA,CAC/BC,UAA+C,EAC/CC,sBAAuC;EAEjC,IAAAC,EAAA,GAA8CT,KAAK,CAACU,QAAQ,CAAiBN,wBAAwB,EAAE,CAAC;IAAvGO,kBAAkB,GAAAF,EAAA;IAAEG,qBAAqB,GAAAH,EAAA,GAA8D;EAE9G,IAAMI,QAAQ,GAAGb,KAAK,CAACc,WAAW,CAAC;IACjC,IAAMC,iBAAiB,GAAGZ,iBAAiB,CAACF,SAAS,CAACM,UAAU,CAACS,OAAO,CAAC,CAAC;IAE1E;IACA,IAAIL,kBAAkB,KAAKI,iBAAiB,EAAE;MAC5CH,qBAAqB,CAACG,iBAAiB,CAAC;;EAE5C,CAAC,EAAE,CAACR,UAAU,EAAEI,kBAAkB,CAAC,CAAC;EAEpC,IAAMM,GAAG,GAAGZ,SAAS,EAAE;EACvBH,UAAU,CAACe,GAAG,EAAE,QAAQ,EAAEJ,QAAQ,CAAC;EAEnC;EACA;EACAb,KAAK,CAACkB,SAAS,CAAC;IACd,IAAIV,sBAAsB,KAAKW,SAAS,EAAE;MACxCN,QAAQ,EAAE;;IAEZ;EACF,CAAC,EAAE,CAACL,sBAAsB,CAAC,CAAC;EAE5B,OAAOA,sBAAsB,aAAtBA,sBAAsB,cAAtBA,sBAAsB,GAAIG,kBAAkB;AACrD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}