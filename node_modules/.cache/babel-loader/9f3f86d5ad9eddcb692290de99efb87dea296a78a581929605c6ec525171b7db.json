{"ast":null,"code":"// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nvar _getThemedSpacing = function (space, theme) {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space];\n  }\n  return space;\n};\n// Helper function that takes a gap as a string and converts it into a { value, unit } representation.\nvar _getValueUnitGap = function (gap) {\n  var numericalPart = parseFloat(gap);\n  var numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  var numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n  var unitPart = gap.substring(numericalString.toString().length);\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px'\n  };\n};\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\nexport var parseGap = function (gap, theme) {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px'\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px'\n      }\n    };\n  }\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px'\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px'\n      }\n    };\n  }\n  var splitGap = gap.split(' ');\n  // If the array has more than two values, then return 0px.\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px'\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px'\n      }\n    };\n  }\n  // If the array has two values, then parse each one.\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme))\n    };\n  }\n  // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n  var calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap\n  };\n};\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\nexport var parsePadding = function (padding, theme) {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n  var paddingValues = padding.split(' ');\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n  return paddingValues.reduce(function (padding1, padding2) {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};","map":{"version":3,"names":["_getThemedSpacing","space","theme","spacing","hasOwnProperty","_getValueUnitGap","gap","numericalPart","parseFloat","numericalValue","isNaN","numericalString","toString","unitPart","substring","length","value","unit","parseGap","undefined","rowGap","columnGap","splitGap","split","calculatedGap","parsePadding","padding","paddingValues","reduce","padding1","padding2"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/Stack/StackUtils.ts"],"sourcesContent":["import type { ITheme } from '../../Styling';\nimport type { IStackProps } from './Stack.types';\n\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nconst _getThemedSpacing = (space: string, theme: ITheme): string => {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space as keyof typeof theme.spacing];\n  }\n  return space;\n};\n\n// Helper function that takes a gap as a string and converts it into a { value, unit } representation.\nconst _getValueUnitGap = (gap: string): { value: number; unit: string } => {\n  const numericalPart = parseFloat(gap);\n  const numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  const numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n\n  const unitPart = gap.substring(numericalString.toString().length);\n\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px',\n  };\n};\n\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\nexport const parseGap = (\n  gap: IStackProps['gap'],\n  theme: ITheme,\n): { rowGap: { value: number; unit: string }; columnGap: { value: number; unit: string } } => {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px',\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px',\n      },\n    };\n  }\n\n  const splitGap = gap.split(' ');\n\n  // If the array has more than two values, then return 0px.\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  // If the array has two values, then parse each one.\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme)),\n    };\n  }\n\n  // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n  const calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap,\n  };\n};\n\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\nexport const parsePadding = (padding: number | string | undefined, theme: ITheme): number | string | undefined => {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n\n  const paddingValues = padding.split(' ');\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n\n  return paddingValues.reduce((padding1: string, padding2: string) => {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}