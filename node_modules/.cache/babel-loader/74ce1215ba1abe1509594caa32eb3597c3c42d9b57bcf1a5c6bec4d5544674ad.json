{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css, initializeComponentRef } from '../../../Utilities';\nimport { CommandButton, IconButton } from '../../../Button';\nimport * as stylesImport from './Suggestions.scss';\nvar legacyStyles = stylesImport;\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory Pickers}\n */\nvar SuggestionsItem = /** @class */function (_super) {\n  __extends(SuggestionsItem, _super);\n  function SuggestionsItem(props) {\n    var _this = _super.call(this, props) || this;\n    initializeComponentRef(_this);\n    return _this;\n  }\n  SuggestionsItem.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      suggestionModel = _b.suggestionModel,\n      RenderSuggestion = _b.RenderSuggestion,\n      onClick = _b.onClick,\n      className = _b.className,\n      id = _b.id,\n      onRemoveItem = _b.onRemoveItem,\n      isSelectedOverride = _b.isSelectedOverride,\n      removeButtonAriaLabel = _b.removeButtonAriaLabel,\n      styles = _b.styles,\n      theme = _b.theme,\n      removeButtonIconProps = _b.removeButtonIconProps;\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    var classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      suggested: suggestionModel.selected || isSelectedOverride\n    }) : {\n      root: css('ms-Suggestions-item', legacyStyles.suggestionsItem, (_a = {}, _a['is-suggested ' + legacyStyles.suggestionsItemIsSuggested] = suggestionModel.selected || isSelectedOverride, _a), className),\n      itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n      closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton)\n    };\n    return React.createElement(\"div\", {\n      className: classNames.root,\n      role: \"presentation\"\n    }, React.createElement(CommandButton, {\n      onClick: onClick,\n      className: classNames.itemButton,\n      id: id,\n      \"aria-selected\": suggestionModel.selected,\n      role: \"option\",\n      \"aria-label\": suggestionModel.ariaLabel\n    }, RenderSuggestion(suggestionModel.item, this.props)), this.props.showRemoveButton ? React.createElement(IconButton, {\n      iconProps: removeButtonIconProps !== null && removeButtonIconProps !== void 0 ? removeButtonIconProps : {\n        iconName: 'Cancel'\n      },\n      styles: {\n        icon: {\n          fontSize: '12px'\n        }\n      },\n      title: removeButtonAriaLabel,\n      ariaLabel: removeButtonAriaLabel,\n      onClick: onRemoveItem,\n      className: classNames.closeButton\n    }) : null);\n  };\n  return SuggestionsItem;\n}(React.Component);\nexport { SuggestionsItem };","map":{"version":3,"names":["React","classNamesFunction","css","initializeComponentRef","CommandButton","IconButton","stylesImport","legacyStyles","getClassNames","SuggestionsItem","_super","__extends","props","_this","call","prototype","render","_b","suggestionModel","RenderSuggestion","onClick","className","id","onRemoveItem","isSelectedOverride","removeButtonAriaLabel","styles","theme","removeButtonIconProps","classNames","suggested","selected","root","suggestionsItem","_a","suggestionsItemIsSuggested","itemButton","closeButton","createElement","role","ariaLabel","item","showRemoveButton","iconProps","iconName","icon","fontSize","title","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/pickers/src/components/pickers/Suggestions/SuggestionsItem.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, css, initializeComponentRef } from '../../../Utilities';\nimport { CommandButton, IconButton } from '../../../Button';\nimport * as stylesImport from './Suggestions.scss';\nimport type { IProcessedStyleSet } from '../../../Styling';\nimport type { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsItemStyleProps, ISuggestionsItemStyles>();\n\n/**\n * {@docCategory Pickers}\n */\nexport class SuggestionsItem<T> extends React.Component<ISuggestionItemProps<T>, {}> {\n  constructor(props: ISuggestionItemProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      suggestionModel,\n      RenderSuggestion,\n      onClick,\n      className,\n      id,\n      onRemoveItem,\n      isSelectedOverride,\n      removeButtonAriaLabel,\n      styles,\n      theme,\n      removeButtonIconProps,\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<ISuggestionsItemStyles>> = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggested: suggestionModel.selected || isSelectedOverride,\n        })\n      : {\n          root: css(\n            'ms-Suggestions-item',\n            legacyStyles.suggestionsItem,\n            {\n              ['is-suggested ' + legacyStyles.suggestionsItemIsSuggested]:\n                suggestionModel.selected || isSelectedOverride,\n            },\n            className,\n          ),\n          itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n          closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton),\n        };\n\n    return (\n      <div className={classNames.root} role=\"presentation\">\n        <CommandButton\n          onClick={onClick}\n          className={classNames.itemButton}\n          id={id}\n          aria-selected={suggestionModel.selected}\n          role=\"option\"\n          aria-label={suggestionModel.ariaLabel}\n        >\n          {RenderSuggestion(suggestionModel.item, this.props)}\n        </CommandButton>\n        {this.props.showRemoveButton ? (\n          <IconButton\n            iconProps={removeButtonIconProps ?? { iconName: 'Cancel' }}\n            styles={{ icon: { fontSize: '12px' } }}\n            title={removeButtonAriaLabel}\n            ariaLabel={removeButtonAriaLabel}\n            onClick={onRemoveItem}\n            className={classNames.closeButton}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}