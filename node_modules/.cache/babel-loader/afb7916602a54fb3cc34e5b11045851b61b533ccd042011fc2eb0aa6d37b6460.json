{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '@fluentui/foundation-legacy';\nimport { css, getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles, GlobalClassNames as StackGlobalClassNames } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\nvar StackView = function (props) {\n  var _a = props.as,\n    RootType = _a === void 0 ? 'div' : _a,\n    _b = props.disableShrink,\n    disableShrink = _b === void 0 ? false : _b,\n    // eslint-disable-next-line deprecation/deprecation\n    _c = props.doNotRenderFalsyValues,\n    // eslint-disable-next-line deprecation/deprecation\n    doNotRenderFalsyValues = _c === void 0 ? false : _c,\n    _d = props.enableScopedSelectors,\n    enableScopedSelectors = _d === void 0 ? false : _d,\n    wrap = props.wrap,\n    rest = __rest(props, [\"as\", \"disableShrink\", \"doNotRenderFalsyValues\", \"enableScopedSelectors\", \"wrap\"]);\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding'\n  });\n  var stackChildren = _processStackChildren(props.children, {\n    disableShrink: disableShrink,\n    enableScopedSelectors: enableScopedSelectors,\n    doNotRenderFalsyValues: doNotRenderFalsyValues\n  });\n  var nativeProps = getNativeProps(rest, htmlElementProperties);\n  var Slots = getSlots(props, {\n    root: RootType,\n    inner: 'div'\n  });\n  if (wrap) {\n    return withSlots(Slots.root, __assign({}, nativeProps), withSlots(Slots.inner, null, stackChildren));\n  }\n  return withSlots(Slots.root, __assign({}, nativeProps), stackChildren);\n};\nfunction _processStackChildren(children, _a) {\n  var disableShrink = _a.disableShrink,\n    enableScopedSelectors = _a.enableScopedSelectors,\n    doNotRenderFalsyValues = _a.doNotRenderFalsyValues;\n  var childrenArray = React.Children.toArray(children);\n  childrenArray = React.Children.map(childrenArray, function (child) {\n    if (!child || !React.isValidElement(child)) {\n      return doNotRenderFalsyValues ? null : child;\n    }\n    if (child.type === React.Fragment) {\n      return child.props.children ? _processStackChildren(child.props.children, {\n        disableShrink: disableShrink,\n        enableScopedSelectors: enableScopedSelectors,\n        doNotRenderFalsyValues: doNotRenderFalsyValues\n      }) : null;\n    }\n    var childAsReactElement = child;\n    var defaultItemProps = {};\n    if (_isStackItem(child)) {\n      defaultItemProps = {\n        shrink: !disableShrink\n      };\n    }\n    var childClassName = childAsReactElement.props.className;\n    return React.cloneElement(childAsReactElement, __assign(__assign(__assign(__assign({}, defaultItemProps), childAsReactElement.props), childClassName && {\n      className: childClassName\n    }), enableScopedSelectors && {\n      className: css(StackGlobalClassNames.child, childClassName)\n    }));\n  });\n  return childrenArray;\n}\nfunction _isStackItem(item) {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return !!item && typeof item === 'object' && !!item.type &&\n  // StackItem is generated by createComponent, so we need to check its displayName instead of name\n  item.type.displayName === StackItem.displayName;\n}\nvar StackStatics = {\n  Item: StackItem\n};\nexport var Stack = createComponent(StackView, {\n  displayName: 'Stack',\n  styles: styles,\n  statics: StackStatics\n});\nexport default Stack;","map":{"version":3,"names":["React","withSlots","createComponent","getSlots","css","getNativeProps","htmlElementProperties","warnDeprecations","styles","GlobalClassNames","StackGlobalClassNames","StackItem","StackView","props","_a","as","RootType","_b","disableShrink","_c","doNotRenderFalsyValues","_d","enableScopedSelectors","wrap","rest","__rest","gap","maxHeight","maxWidth","padding","stackChildren","_processStackChildren","children","nativeProps","Slots","root","inner","__assign","childrenArray","Children","toArray","map","child","isValidElement","type","Fragment","childAsReactElement","defaultItemProps","_isStackItem","shrink","childClassName","className","cloneElement","item","displayName","StackStatics","Item","Stack","statics"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/Stack/Stack.tsx"],"sourcesContent":["/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '@fluentui/foundation-legacy';\nimport { css, getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles, GlobalClassNames as StackGlobalClassNames } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\nimport type { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport type { IStackItemProps } from './StackItem/StackItem.types';\n\nconst StackView: IStackComponent['view'] = props => {\n  const {\n    as: RootType = 'div',\n    disableShrink = false,\n    // eslint-disable-next-line deprecation/deprecation\n    doNotRenderFalsyValues = false,\n    enableScopedSelectors = false,\n    wrap,\n    ...rest\n  } = props;\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding',\n  });\n\n  const stackChildren = _processStackChildren(props.children, {\n    disableShrink,\n    enableScopedSelectors,\n    doNotRenderFalsyValues,\n  });\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div',\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nfunction _processStackChildren(\n  children: React.ReactNode,\n  {\n    disableShrink,\n    enableScopedSelectors,\n    doNotRenderFalsyValues,\n  }: { disableShrink: boolean; enableScopedSelectors: boolean; doNotRenderFalsyValues: boolean },\n): (React.ReactChild | React.ReactFragment | React.ReactPortal)[] {\n  let childrenArray = React.Children.toArray(children);\n\n  childrenArray = React.Children.map(childrenArray, child => {\n    if (!child || !React.isValidElement(child)) {\n      return doNotRenderFalsyValues ? null : child;\n    }\n\n    if (child.type === React.Fragment) {\n      return child.props.children\n        ? _processStackChildren(child.props.children, { disableShrink, enableScopedSelectors, doNotRenderFalsyValues })\n        : null;\n    }\n\n    const childAsReactElement = child as React.ReactElement;\n\n    let defaultItemProps: IStackItemProps = {};\n    if (_isStackItem(child)) {\n      defaultItemProps = { shrink: !disableShrink };\n    }\n    const childClassName = childAsReactElement.props.className;\n\n    return React.cloneElement(childAsReactElement, {\n      ...defaultItemProps,\n      ...childAsReactElement.props,\n      ...(childClassName && { className: childClassName }),\n      ...(enableScopedSelectors && { className: css(StackGlobalClassNames.child, childClassName) }),\n    });\n  });\n\n  return childrenArray;\n}\n\nfunction _isStackItem(item: React.ReactNode): item is typeof StackItem {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // StackItem is generated by createComponent, so we need to check its displayName instead of name\n    ((item as React.ReactElement).type as React.ComponentType).displayName === StackItem.displayName\n  );\n}\n\nconst StackStatics = {\n  Item: StackItem,\n};\n\nexport const Stack: React.FunctionComponent<IStackProps> & {\n  Item: React.FunctionComponent<IStackItemProps>;\n} = createComponent(StackView, {\n  displayName: 'Stack',\n  styles,\n  statics: StackStatics,\n});\n\nexport default Stack;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}