{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, KeyCodes, css, elementContains, format, getId, classNamesFunction, styled, initializeComponentRef } from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { Selection, SelectionZone, SelectionMode } from '../../utilities/selection/index';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { Suggestions } from './Suggestions/Suggestions';\nimport { getStyles as suggestionsStyles } from './Suggestions/Suggestions.styles';\nimport { SuggestionsController } from './Suggestions/SuggestionsController';\nimport { ValidationState } from './BasePicker.types';\nimport { Autofill } from '../Autofill/index';\nimport * as stylesImport from './BasePicker.scss';\nvar legacyStyles = stylesImport;\nvar EXTENDED_LOAD_TIME = 3000;\nvar getClassNames = classNamesFunction();\n/**\n * Should be removed once new picker without inheritance is created\n */\nfunction getStyledSuggestions(suggestionsType) {\n  return styled(suggestionsType, suggestionsStyles, undefined, {\n    scope: 'Suggestions'\n  });\n}\n/**\n * {@docCategory Pickers}\n */\nvar BasePicker = /** @class */function (_super) {\n  __extends(BasePicker, _super);\n  function BasePicker(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n    // Refs\n    _this.root = React.createRef();\n    _this.input = React.createRef();\n    _this.suggestionElement = React.createRef();\n    /**\n     * @deprecated this is no longer necessary as typescript now supports generic elements\n     */\n    _this.SuggestionOfProperType = Suggestions;\n    // eslint-disable-next-line deprecation/deprecation\n    _this._styledSuggestions = getStyledSuggestions(_this.SuggestionOfProperType);\n    _this._overrideScrollDismiss = false;\n    _this.dismissSuggestions = function (ev) {\n      var selectItemFunction = function () {\n        var addItemOnDismiss = true;\n        if (_this.props.onDismiss) {\n          addItemOnDismiss = _this.props.onDismiss(ev, _this.suggestionStore.currentSuggestion ? _this.suggestionStore.currentSuggestion.item : undefined);\n        }\n        if (!ev || ev && !ev.defaultPrevented) {\n          // Select the first suggestion if one is available and permitted by onDismiss when user leaves.\n          if (addItemOnDismiss !== false && _this.canAddItems() && _this.suggestionStore.hasSelectedSuggestion() && _this.state.suggestedDisplayValue) {\n            _this.addItemByIndex(0);\n          }\n        }\n      };\n      if (_this.currentPromise) {\n        _this.currentPromise.then(function () {\n          return selectItemFunction();\n        });\n      } else {\n        selectItemFunction();\n      }\n      _this.setState({\n        suggestionsVisible: false\n      });\n    };\n    _this.refocusSuggestions = function (keyCode) {\n      _this.resetFocus();\n      if (_this.suggestionStore.suggestions && _this.suggestionStore.suggestions.length > 0) {\n        if (keyCode === KeyCodes.up) {\n          _this.suggestionStore.setSelectedSuggestion(_this.suggestionStore.suggestions.length - 1);\n        } else if (keyCode === KeyCodes.down) {\n          _this.suggestionStore.setSelectedSuggestion(0);\n        }\n      }\n    };\n    _this.onInputChange = function (value) {\n      _this.updateValue(value);\n      _this.setState({\n        moreSuggestionsAvailable: true,\n        isMostRecentlyUsedVisible: false\n      });\n    };\n    _this.onSuggestionClick = function (ev, item, index) {\n      _this.addItemByIndex(index);\n    };\n    _this.onSuggestionRemove = function (ev, item, index) {\n      if (_this.props.onRemoveSuggestion) {\n        _this.props.onRemoveSuggestion(item);\n      }\n      _this.suggestionStore.removeSuggestion(index);\n    };\n    _this.onInputFocus = function (ev) {\n      _this.selection.setAllSelected(false);\n      // Only trigger all of the focus if this component isn't already focused.\n      // For example when an item is selected or removed from the selected list it should be treated\n      // as though the input is still focused.\n      if (!_this.state.isFocused) {\n        _this._userTriggeredSuggestions();\n        if (_this.props.inputProps && _this.props.inputProps.onFocus) {\n          _this.props.inputProps.onFocus(ev);\n        }\n      }\n    };\n    _this.onInputBlur = function (ev) {\n      if (_this.props.inputProps && _this.props.inputProps.onBlur) {\n        _this.props.inputProps.onBlur(ev);\n      }\n    };\n    _this.onBlur = function (ev) {\n      if (_this.state.isFocused) {\n        // Only blur the entire component if an unrelated element gets focus.\n        // Otherwise treat it as though it still has focus.\n        // Do nothing if the blur is coming from something\n        // inside the comboBox root or the comboBox menu since\n        // it we are not really bluring from the whole comboBox\n        var relatedTarget = ev.relatedTarget;\n        if (ev.relatedTarget === null) {\n          // In IE11, due to lack of support, event.relatedTarget is always\n          // null making every onBlur call to be \"outside\" of the ComboBox\n          // even when it's not. Using document.activeElement is another way\n          // for us to be able to get what the relatedTarget without relying\n          // on the event\n          relatedTarget = document.activeElement;\n        }\n        if (relatedTarget && !elementContains(_this.root.current, relatedTarget)) {\n          _this.setState({\n            isFocused: false\n          });\n          if (_this.props.onBlur) {\n            _this.props.onBlur(ev);\n          }\n        }\n      }\n    };\n    /**\n     * Resets focus to last element in wrapper div if clicking back into Picker that has hit item limit\n     */\n    _this.onWrapperClick = function (ev) {\n      if (_this.state.items.length && !_this.canAddItems()) {\n        _this.resetFocus(_this.state.items.length - 1);\n      }\n    };\n    /**\n     * Reveals suggestions any time the user clicks on the input element\n     * without shifting focus.\n     */\n    _this.onClick = function (ev) {\n      if (_this.props.inputProps !== undefined && _this.props.inputProps.onClick !== undefined) {\n        _this.props.inputProps.onClick(ev);\n      }\n      // Only primary (left) clicks show suggestions.\n      if (ev.button === 0) {\n        _this._userTriggeredSuggestions();\n      }\n    };\n    _this.onFocus = function () {\n      if (!_this.state.isFocused) {\n        _this.setState({\n          isFocused: true\n        });\n      }\n    };\n    _this.onKeyDown = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      var keyCode = ev.which;\n      switch (keyCode) {\n        case KeyCodes.escape:\n          if (_this.state.suggestionsVisible) {\n            _this.setState({\n              suggestionsVisible: false\n            });\n            ev.preventDefault();\n            ev.stopPropagation();\n          }\n          break;\n        case KeyCodes.tab:\n        case KeyCodes.enter:\n          if (_this.suggestionElement.current && _this.suggestionElement.current.hasSuggestedActionSelected()) {\n            _this.suggestionElement.current.executeSelectedAction();\n          } else if (!ev.shiftKey && _this.suggestionStore.hasSelectedSuggestion() && _this.state.suggestionsVisible) {\n            _this.completeSuggestion();\n            ev.preventDefault();\n            ev.stopPropagation();\n          } else {\n            _this._completeGenericSuggestion();\n          }\n          break;\n        case KeyCodes.backspace:\n          if (!_this.props.disabled) {\n            _this.onBackspace(ev);\n          }\n          ev.stopPropagation();\n          break;\n        case KeyCodes.del:\n          if (!_this.props.disabled) {\n            if (_this.input.current && ev.target === _this.input.current.inputElement && _this.state.suggestionsVisible && _this.suggestionStore.currentIndex !== -1) {\n              if (_this.props.onRemoveSuggestion) {\n                _this.props.onRemoveSuggestion(_this.suggestionStore.currentSuggestion.item);\n              }\n              _this.suggestionStore.removeSuggestion(_this.suggestionStore.currentIndex);\n              _this.forceUpdate();\n            } else {\n              _this.onBackspace(ev);\n            }\n          }\n          ev.stopPropagation();\n          break;\n        case KeyCodes.up:\n          if (_this.input.current && ev.target === _this.input.current.inputElement && _this.state.suggestionsVisible) {\n            if (_this.suggestionElement.current && _this.suggestionElement.current.tryHandleKeyDown(keyCode, _this.suggestionStore.currentIndex)) {\n              ev.preventDefault();\n              ev.stopPropagation();\n              _this.forceUpdate();\n            } else {\n              if (_this.suggestionElement.current && _this.suggestionElement.current.hasSuggestedAction() && _this.suggestionStore.currentIndex === 0) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                _this.suggestionElement.current.focusAboveSuggestions();\n                _this.suggestionStore.deselectAllSuggestions();\n                _this.forceUpdate();\n              } else {\n                if (_this.suggestionStore.previousSuggestion()) {\n                  ev.preventDefault();\n                  ev.stopPropagation();\n                  _this.onSuggestionSelect();\n                }\n              }\n            }\n          }\n          break;\n        case KeyCodes.down:\n          if (_this.input.current && ev.target === _this.input.current.inputElement && _this.state.suggestionsVisible) {\n            if (_this.suggestionElement.current && _this.suggestionElement.current.tryHandleKeyDown(keyCode, _this.suggestionStore.currentIndex)) {\n              ev.preventDefault();\n              ev.stopPropagation();\n              _this.forceUpdate();\n            } else {\n              if (_this.suggestionElement.current && _this.suggestionElement.current.hasSuggestedAction() && _this.suggestionStore.currentIndex + 1 === _this.suggestionStore.suggestions.length) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                _this.suggestionElement.current.focusBelowSuggestions();\n                _this.suggestionStore.deselectAllSuggestions();\n                _this.forceUpdate();\n              } else {\n                if (_this.suggestionStore.nextSuggestion()) {\n                  ev.preventDefault();\n                  ev.stopPropagation();\n                  _this.onSuggestionSelect();\n                }\n              }\n            }\n          }\n          break;\n      }\n    };\n    _this.onItemChange = function (changedItem, index) {\n      var items = _this.state.items;\n      if (index >= 0) {\n        var newItems = items;\n        newItems[index] = changedItem;\n        _this._updateSelectedItems(newItems);\n      }\n    };\n    _this.onGetMoreResults = function () {\n      _this.setState({\n        isSearching: true\n      }, function () {\n        if (_this.props.onGetMoreResults && _this.input.current) {\n          var suggestions = _this.props.onGetMoreResults(_this.input.current.value, _this.state.items);\n          var suggestionsArray = suggestions;\n          var suggestionsPromiseLike = suggestions;\n          if (Array.isArray(suggestionsArray)) {\n            _this.updateSuggestions(suggestionsArray);\n            _this.setState({\n              isSearching: false\n            });\n          } else if (suggestionsPromiseLike.then) {\n            suggestionsPromiseLike.then(function (newSuggestions) {\n              _this.updateSuggestions(newSuggestions);\n              _this.setState({\n                isSearching: false\n              });\n            });\n          }\n        } else {\n          _this.setState({\n            isSearching: false\n          });\n        }\n        if (_this.input.current) {\n          _this.input.current.focus();\n        }\n        _this.setState({\n          moreSuggestionsAvailable: false,\n          isResultsFooterVisible: true\n        });\n      });\n    };\n    _this.completeSelection = function (item) {\n      _this.addItem(item);\n      _this.updateValue('');\n      if (_this.input.current) {\n        _this.input.current.clear();\n      }\n      _this.setState({\n        suggestionsVisible: false\n      });\n    };\n    _this.addItemByIndex = function (index) {\n      _this.completeSelection(_this.suggestionStore.getSuggestionAtIndex(index).item);\n    };\n    _this.addItem = function (item) {\n      var processedItem = _this.props.onItemSelected ? _this.props.onItemSelected(item) : item;\n      if (processedItem === null) {\n        return;\n      }\n      var processedItemObject = processedItem;\n      var processedItemPromiseLike = processedItem;\n      if (processedItemPromiseLike && processedItemPromiseLike.then) {\n        processedItemPromiseLike.then(function (resolvedProcessedItem) {\n          var newItems = _this.state.items.concat([resolvedProcessedItem]);\n          _this._updateSelectedItems(newItems);\n        });\n      } else {\n        var newItems = _this.state.items.concat([processedItemObject]);\n        _this._updateSelectedItems(newItems);\n      }\n      _this.setState({\n        suggestedDisplayValue: '',\n        selectionRemoved: undefined\n      });\n    };\n    _this.removeItem = function (item) {\n      var items = _this.state.items;\n      var index = items.indexOf(item);\n      if (index >= 0) {\n        var newItems = items.slice(0, index).concat(items.slice(index + 1));\n        _this.setState({\n          selectionRemoved: item\n        });\n        _this._updateSelectedItems(newItems);\n        // reset selection removed text after a timeout so it isn't reached by screen reader virtual cursor.\n        // the exact timing isn't important, the live region will fully read even if the text is removed.\n        _this._async.setTimeout(function () {\n          _this.setState({\n            selectionRemoved: undefined\n          });\n        }, 1000);\n      }\n    };\n    _this.removeItems = function (itemsToRemove) {\n      var items = _this.state.items;\n      var newItems = items.filter(function (item) {\n        return itemsToRemove.indexOf(item) === -1;\n      });\n      _this._updateSelectedItems(newItems);\n    };\n    /**\n     * @deprecated this is no longer necessary as focuszone has been removed\n     */\n    _this._shouldFocusZoneEnterInnerZone = function (ev) {\n      // If suggestions are shown const up/down keys control them, otherwise allow them through to control the focusZone.\n      if (_this.state.suggestionsVisible) {\n        // eslint-disable-next-line deprecation/deprecation\n        switch (ev.which) {\n          case KeyCodes.up:\n          case KeyCodes.down:\n            return true;\n        }\n      }\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        return true;\n      }\n      return false;\n    };\n    _this._onResolveSuggestions = function (updatedValue) {\n      var suggestions = _this.props.onResolveSuggestions(updatedValue, _this.state.items);\n      if (suggestions !== null) {\n        _this.updateSuggestionsList(suggestions, updatedValue);\n      }\n    };\n    _this._completeGenericSuggestion = function () {\n      if (_this.props.onValidateInput && _this.input.current && _this.props.onValidateInput(_this.input.current.value) !== ValidationState.invalid && _this.props.createGenericItem) {\n        var itemToConvert = _this.props.createGenericItem(_this.input.current.value, _this.props.onValidateInput(_this.input.current.value));\n        _this.suggestionStore.createGenericSuggestion(itemToConvert);\n        _this.completeSuggestion();\n      }\n    };\n    /**\n     * This should be called when the user does something other than use text entry to trigger suggestions.\n     *\n     */\n    _this._userTriggeredSuggestions = function () {\n      if (!_this.state.suggestionsVisible) {\n        var input = _this.input.current ? _this.input.current.value : '';\n        if (!input) {\n          _this.onEmptyInputFocus();\n        } else {\n          if (_this.suggestionStore.suggestions.length === 0) {\n            _this._onResolveSuggestions(input);\n          } else {\n            _this.setState({\n              isMostRecentlyUsedVisible: false,\n              suggestionsVisible: true\n            });\n          }\n        }\n      }\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    var items = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n    _this._id = getId();\n    _this._ariaMap = {\n      selectedItems: \"selected-items-\".concat(_this._id),\n      selectedSuggestionAlert: \"selected-suggestion-alert-\".concat(_this._id),\n      suggestionList: \"suggestion-list-\".concat(_this._id),\n      combobox: \"combobox-\".concat(_this._id)\n    };\n    _this.suggestionStore = new SuggestionsController();\n    _this.selection = new Selection({\n      onSelectionChanged: function () {\n        return _this.onSelectionChange();\n      }\n    });\n    _this.selection.setItems(items);\n    _this.state = {\n      items: items,\n      suggestedDisplayValue: '',\n      isMostRecentlyUsedVisible: false,\n      moreSuggestionsAvailable: false,\n      isFocused: false,\n      isSearching: false,\n      selectedIndices: [],\n      selectionRemoved: undefined\n    };\n    return _this;\n  }\n  BasePicker.getDerivedStateFromProps = function (newProps) {\n    if (newProps.selectedItems) {\n      return {\n        items: newProps.selectedItems\n      };\n    }\n    return null;\n  };\n  Object.defineProperty(BasePicker.prototype, \"items\", {\n    get: function () {\n      return this.state.items;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BasePicker.prototype.componentDidMount = function () {\n    this.selection.setItems(this.state.items);\n    this._onResolveSuggestions = this._async.debounce(this._onResolveSuggestions, this.props.resolveDelay);\n  };\n  BasePicker.prototype.componentDidUpdate = function (oldProps, oldState) {\n    var _this = this;\n    if (this.state.items && this.state.items !== oldState.items) {\n      var currentSelectedIndex = this.selection.getSelectedIndices()[0];\n      this.selection.setItems(this.state.items);\n      if (this.state.isFocused) {\n        // Reset focus and selection so that selected item stays in sync if something\n        // has been removed\n        if (this.state.items.length < oldState.items.length) {\n          this.selection.setIndexSelected(currentSelectedIndex, false, true);\n          this.resetFocus(currentSelectedIndex);\n        }\n        // Reset focus to last item if the input is removed\n        else if (this.state.items.length > oldState.items.length && !this.canAddItems()) {\n          this.resetFocus(this.state.items.length - 1);\n        }\n      }\n    }\n    // handle dismiss buffer after suggestions are opened\n    if (this.state.suggestionsVisible && !oldState.suggestionsVisible) {\n      this._overrideScrollDismiss = true;\n      this._async.clearTimeout(this._overrideScrollDimissTimeout);\n      this._overrideScrollDimissTimeout = this._async.setTimeout(function () {\n        _this._overrideScrollDismiss = false;\n      }, 100);\n    }\n  };\n  BasePicker.prototype.componentWillUnmount = function () {\n    if (this.currentPromise) {\n      this.currentPromise = undefined;\n    }\n    this._async.dispose();\n  };\n  BasePicker.prototype.focus = function () {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  };\n  BasePicker.prototype.focusInput = function () {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  };\n  BasePicker.prototype.completeSuggestion = function (forceComplete) {\n    if (this.suggestionStore.hasSelectedSuggestion() && this.input.current) {\n      this.completeSelection(this.suggestionStore.currentSuggestion.item);\n    } else if (forceComplete) {\n      this._completeGenericSuggestion();\n    }\n  };\n  BasePicker.prototype.render = function () {\n    var _a = this.state,\n      suggestedDisplayValue = _a.suggestedDisplayValue,\n      isFocused = _a.isFocused,\n      items = _a.items;\n    var _b = this.props,\n      className = _b.className,\n      inputProps = _b.inputProps,\n      disabled = _b.disabled,\n      selectionAriaLabel = _b.selectionAriaLabel,\n      _c = _b.selectionRole,\n      selectionRole = _c === void 0 ? 'list' : _c,\n      theme = _b.theme,\n      styles = _b.styles;\n    var suggestionsVisible = !!this.state.suggestionsVisible;\n    var suggestionsAvailable = suggestionsVisible ? this._ariaMap.suggestionList : undefined;\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from BasePicker class because it\n    // might be used by consumers who created custom pickers from extending from\n    // this base class and have not used the new 'styles' prop.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    var classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isFocused: isFocused,\n      disabled: disabled,\n      inputClassName: inputProps && inputProps.className\n    }) : {\n      root: css('ms-BasePicker', className ? className : ''),\n      text: css('ms-BasePicker-text', legacyStyles.pickerText, this.state.isFocused && legacyStyles.inputFocused),\n      itemsWrapper: legacyStyles.pickerItems,\n      input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\n      screenReaderText: legacyStyles.screenReaderOnly\n    };\n    var comboLabel = this.props['aria-label'] || (inputProps === null || inputProps === void 0 ? void 0 : inputProps['aria-label']);\n    // selectionAriaLabel is contained in a separate <span> rather than an aria-label on the items list\n    // because if the items list has an aria-label, the aria-describedby on the input will only read\n    // that label instead of all the selected items. Using aria-labelledby instead fixes this, since\n    // aria-describedby and aria-labelledby will not follow a second aria-labelledby\n    return React.createElement(\"div\", {\n      ref: this.root,\n      className: classNames.root,\n      onKeyDown: this.onKeyDown,\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      onClick: this.onWrapperClick\n    }, this.renderCustomAlert(classNames.screenReaderText), React.createElement(\"span\", {\n      id: \"\".concat(this._ariaMap.selectedItems, \"-label\"),\n      hidden: true\n    }, selectionAriaLabel || comboLabel), React.createElement(SelectionZone, {\n      selection: this.selection,\n      selectionMode: SelectionMode.multiple\n    }, React.createElement(\"div\", {\n      className: classNames.text,\n      \"aria-owns\": suggestionsAvailable\n    }, items.length > 0 && React.createElement(\"span\", {\n      id: this._ariaMap.selectedItems,\n      className: classNames.itemsWrapper,\n      role: selectionRole,\n      \"aria-labelledby\": \"\".concat(this._ariaMap.selectedItems, \"-label\")\n    }, this.renderItems()), this.canAddItems() && React.createElement(Autofill, __assign({\n      spellCheck: false\n    }, inputProps, {\n      className: classNames.input,\n      componentRef: this.input,\n      id: (inputProps === null || inputProps === void 0 ? void 0 : inputProps.id) ? inputProps.id : this._ariaMap.combobox,\n      onClick: this.onClick,\n      onFocus: this.onInputFocus,\n      onBlur: this.onInputBlur,\n      onInputValueChange: this.onInputChange,\n      suggestedDisplayValue: suggestedDisplayValue,\n      \"aria-activedescendant\": suggestionsVisible ? this.getActiveDescendant() : undefined,\n      \"aria-controls\": suggestionsAvailable,\n      \"aria-describedby\": items.length > 0 ? this._ariaMap.selectedItems : undefined,\n      \"aria-expanded\": suggestionsVisible,\n      \"aria-haspopup\": \"listbox\",\n      \"aria-label\": comboLabel,\n      role: \"combobox\",\n      disabled: disabled,\n      onInputChange: this.props.onInputChange\n    })))), this.renderSuggestions());\n  };\n  BasePicker.prototype.canAddItems = function () {\n    var items = this.state.items;\n    var itemLimit = this.props.itemLimit;\n    return itemLimit === undefined || items.length < itemLimit;\n  };\n  BasePicker.prototype.renderSuggestions = function () {\n    var _this = this;\n    var StyledTypedSuggestions = this._styledSuggestions;\n    return this.state.suggestionsVisible && this.input ? React.createElement(Callout, __assign({\n      isBeakVisible: false,\n      gapSpace: 5,\n      target: this.input.current ? this.input.current.inputElement : undefined,\n      onDismiss: this.dismissSuggestions,\n      directionalHint: DirectionalHint.bottomLeftEdge,\n      directionalHintForRTL: DirectionalHint.bottomRightEdge,\n      // eslint-disable-next-line react/jsx-no-bind\n      preventDismissOnEvent: function (ev) {\n        return _this._preventDismissOnScrollOrResize(ev);\n      }\n    }, this.props.pickerCalloutProps), React.createElement(StyledTypedSuggestions\n    // Assumed to set in derived component's defaultProps\n    , __assign({\n      // Assumed to set in derived component's defaultProps\n      onRenderSuggestion: this.props.onRenderSuggestionsItem,\n      onSuggestionClick: this.onSuggestionClick,\n      onSuggestionRemove: this.onSuggestionRemove,\n      suggestions: this.suggestionStore.getSuggestions(),\n      componentRef: this.suggestionElement,\n      onGetMoreResults: this.onGetMoreResults,\n      moreSuggestionsAvailable: this.state.moreSuggestionsAvailable,\n      isLoading: this.state.suggestionsLoading,\n      isExtendedLoading: this.state.suggestionsExtendedLoading,\n      isSearching: this.state.isSearching,\n      isMostRecentlyUsedVisible: this.state.isMostRecentlyUsedVisible,\n      isResultsFooterVisible: this.state.isResultsFooterVisible,\n      refocusSuggestions: this.refocusSuggestions,\n      removeSuggestionAriaLabel: this.props.removeButtonAriaLabel,\n      suggestionsListId: this._ariaMap.suggestionList,\n      createGenericItem: this._completeGenericSuggestion\n    }, this.props.pickerSuggestionsProps))) : null;\n  };\n  BasePicker.prototype.renderItems = function () {\n    var _this = this;\n    var _a = this.props,\n      disabled = _a.disabled,\n      removeButtonAriaLabel = _a.removeButtonAriaLabel,\n      removeButtonIconProps = _a.removeButtonIconProps;\n    var onRenderItem = this.props.onRenderItem;\n    var _b = this.state,\n      items = _b.items,\n      selectedIndices = _b.selectedIndices;\n    return items.map(function (item, index) {\n      return onRenderItem({\n        item: item,\n        index: index,\n        key: item.key ? item.key : index,\n        selected: selectedIndices.indexOf(index) !== -1,\n        onRemoveItem: function () {\n          return _this.removeItem(item);\n        },\n        disabled: disabled,\n        onItemChange: _this.onItemChange,\n        removeButtonAriaLabel: removeButtonAriaLabel,\n        removeButtonIconProps: removeButtonIconProps\n      });\n    });\n  };\n  BasePicker.prototype.resetFocus = function (index) {\n    var items = this.state.items;\n    if (items.length) {\n      // default to focusing the last item\n      index = index !== null && index !== void 0 ? index : items.length - 1;\n      var newEl = this.root.current && this.root.current.querySelectorAll('[data-selection-index] > button')[Math.min(index, items.length - 1)];\n      if (newEl) {\n        newEl.focus();\n      }\n    } else {\n      if (this.input.current) {\n        this.input.current.focus();\n      }\n    }\n  };\n  BasePicker.prototype.onSuggestionSelect = function () {\n    if (this.suggestionStore.currentSuggestion) {\n      var currentValue = this.input.current ? this.input.current.value : '';\n      var itemValue = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, currentValue);\n      this.setState({\n        suggestedDisplayValue: itemValue\n      });\n    }\n  };\n  BasePicker.prototype.onSelectionChange = function () {\n    this.setState({\n      selectedIndices: this.selection.getSelectedIndices()\n    });\n  };\n  BasePicker.prototype.updateSuggestions = function (suggestions) {\n    var _a;\n    var maxSuggestionsCount = (_a = this.props.pickerSuggestionsProps) === null || _a === void 0 ? void 0 : _a.resultsMaximumNumber;\n    this.suggestionStore.updateSuggestions(suggestions, 0, maxSuggestionsCount);\n    this.forceUpdate();\n  };\n  /**\n   * Only to be called when there is nothing in the input. Checks to see if the consumer has\n   * provided a function to resolve suggestions\n   */\n  BasePicker.prototype.onEmptyInputFocus = function () {\n    var emptyResolveSuggestions = this.props.onEmptyResolveSuggestions ? this.props.onEmptyResolveSuggestions :\n    // eslint-disable-next-line deprecation/deprecation\n    this.props.onEmptyInputFocus;\n    // Only attempt to resolve suggestions if it exists\n    if (emptyResolveSuggestions) {\n      var suggestions = emptyResolveSuggestions(this.state.items);\n      this.updateSuggestionsList(suggestions);\n      this.setState({\n        isMostRecentlyUsedVisible: true,\n        suggestionsVisible: true,\n        moreSuggestionsAvailable: false\n      });\n    }\n  };\n  BasePicker.prototype.updateValue = function (updatedValue) {\n    this._onResolveSuggestions(updatedValue);\n  };\n  BasePicker.prototype.updateSuggestionsList = function (suggestions, updatedValue) {\n    var _this = this;\n    // Check to see if the returned value is an array, if it is then just pass it into the next function .\n    // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n    // If it is then resolve it asynchronously.\n    if (Array.isArray(suggestions)) {\n      this._updateAndResolveValue(updatedValue, suggestions);\n    } else if (suggestions && suggestions.then) {\n      this.setState({\n        suggestionsLoading: true\n      });\n      this._startLoadTimer();\n      // Clear suggestions\n      this.suggestionStore.updateSuggestions([]);\n      if (updatedValue !== undefined) {\n        this.setState({\n          suggestionsVisible: this._getShowSuggestions()\n        });\n      } else {\n        this.setState({\n          suggestionsVisible: this.input.current && this.input.current.inputElement === document.activeElement\n        });\n      }\n      // Ensure that the promise will only use the callback if it was the most recent one.\n      this.currentPromise = suggestions;\n      suggestions.then(function (newSuggestions) {\n        if (suggestions === _this.currentPromise) {\n          _this._updateAndResolveValue(updatedValue, newSuggestions);\n        }\n      });\n    }\n  };\n  BasePicker.prototype.resolveNewValue = function (updatedValue, suggestions) {\n    var _this = this;\n    this.updateSuggestions(suggestions);\n    var itemValue = undefined;\n    if (this.suggestionStore.currentSuggestion) {\n      itemValue = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, updatedValue);\n    }\n    // Only set suggestionloading to false after there has been time for the new suggestions to flow\n    // to the suggestions list. This is to ensure that the suggestions are available before aria-activedescendant\n    // is set so that screen readers will read out the first selected option.\n    this.setState({\n      suggestedDisplayValue: itemValue,\n      suggestionsVisible: this._getShowSuggestions()\n    }, function () {\n      return _this.setState({\n        suggestionsLoading: false,\n        suggestionsExtendedLoading: false\n      });\n    });\n  };\n  BasePicker.prototype.onChange = function (items) {\n    if (this.props.onChange) {\n      this.props.onChange(items);\n    }\n  };\n  // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n  BasePicker.prototype.onBackspace = function (ev) {\n    if (this.state.items.length && !this.input.current || this.input.current && !this.input.current.isValueSelected && this.input.current.cursorLocation === 0) {\n      if (this.selection.getSelectedCount() > 0) {\n        this.removeItems(this.selection.getSelection());\n      } else {\n        this.removeItem(this.state.items[this.state.items.length - 1]);\n      }\n    }\n  };\n  BasePicker.prototype.getActiveDescendant = function () {\n    var _a;\n    if (this.state.suggestionsLoading) {\n      return undefined;\n    }\n    var currentIndex = this.suggestionStore.currentIndex;\n    if (currentIndex < 0) {\n      // if the suggestions element has actions and the currentIndex does not point to a suggestion,\n      // return the action id\n      if ((_a = this.suggestionElement.current) === null || _a === void 0 ? void 0 : _a.hasSuggestedAction()) {\n        return 'sug-selectedAction';\n      }\n      // If there are no suggestions and no action suggested, then return the ID for the no results found.\n      if (this.suggestionStore.suggestions.length === 0) {\n        return 'sug-noResultsFound';\n      }\n      return undefined;\n    } else {\n      return \"sug-\".concat(currentIndex);\n    }\n  };\n  /** @deprecated use renderCustomAlert instead */\n  BasePicker.prototype.getSuggestionsAlert = function (suggestionAlertClassName) {\n    if (suggestionAlertClassName === void 0) {\n      suggestionAlertClassName = legacyStyles.screenReaderOnly;\n    }\n    var currentIndex = this.suggestionStore.currentIndex;\n    if (this.props.enableSelectedSuggestionAlert) {\n      var selectedSuggestion = currentIndex > -1 ? this.suggestionStore.getSuggestionAtIndex(this.suggestionStore.currentIndex) : undefined;\n      var selectedSuggestionAlertText = selectedSuggestion ? selectedSuggestion.ariaLabel : undefined;\n      // keeping the id/className here for legacy support\n      return React.createElement(\"div\", {\n        id: this._ariaMap.selectedSuggestionAlert,\n        className: suggestionAlertClassName\n      }, \"\".concat(selectedSuggestionAlertText, \" \"));\n    }\n  };\n  BasePicker.prototype.renderCustomAlert = function (alertClassName) {\n    if (alertClassName === void 0) {\n      alertClassName = legacyStyles.screenReaderOnly;\n    }\n    var _a = this.props.suggestionRemovedText,\n      suggestionRemovedText = _a === void 0 ? 'removed {0}' : _a;\n    var removedItemText = '';\n    if (this.state.selectionRemoved) {\n      var itemName = this._getTextFromItem(this.state.selectionRemoved, '');\n      removedItemText = format(suggestionRemovedText, itemName);\n    }\n    return React.createElement(\"div\", {\n      className: alertClassName,\n      id: this._ariaMap.selectedSuggestionAlert,\n      \"aria-live\": \"assertive\"\n    },\n    // eslint-disable-next-line deprecation/deprecation\n    this.getSuggestionsAlert(alertClassName), removedItemText);\n  };\n  // do not dismiss if the window resizes or scrolls within 100ms of opening\n  // this prevents the Android issue where pickers immediately dismiss on open, because the keyboard appears\n  BasePicker.prototype._preventDismissOnScrollOrResize = function (ev) {\n    if (this._overrideScrollDismiss && (ev.type === 'scroll' || ev.type === 'resize')) {\n      return true;\n    }\n    return false;\n  };\n  /** If suggestions are still loading after a predefined amount of time, set state to show user alert */\n  BasePicker.prototype._startLoadTimer = function () {\n    var _this = this;\n    this._async.setTimeout(function () {\n      if (_this.state.suggestionsLoading) {\n        _this.setState({\n          suggestionsExtendedLoading: true\n        });\n      }\n    }, EXTENDED_LOAD_TIME);\n  };\n  /**\n   * Takes in the current updated value and either resolves it with the new suggestions\n   * or if updated value is undefined then it clears out currently suggested items\n   */\n  BasePicker.prototype._updateAndResolveValue = function (updatedValue, newSuggestions) {\n    var _a;\n    if (updatedValue !== undefined) {\n      this.resolveNewValue(updatedValue, newSuggestions);\n    } else {\n      var maxSuggestionsCount = (_a = this.props.pickerSuggestionsProps) === null || _a === void 0 ? void 0 : _a.resultsMaximumNumber;\n      this.suggestionStore.updateSuggestions(newSuggestions, -1, maxSuggestionsCount);\n      if (this.state.suggestionsLoading) {\n        this.setState({\n          suggestionsLoading: false,\n          suggestionsExtendedLoading: false\n        });\n      }\n    }\n  };\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If `selectedItems` is provided, this will act as a controlled component and it will not update its own state.\n   */\n  BasePicker.prototype._updateSelectedItems = function (items) {\n    var _this = this;\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to add or remove the items.\n      this.onChange(items);\n    } else {\n      this.setState({\n        items: items\n      }, function () {\n        _this._onSelectedItemsUpdated(items);\n      });\n    }\n  };\n  BasePicker.prototype._onSelectedItemsUpdated = function (items) {\n    this.onChange(items);\n  };\n  /**\n   * Suggestions are normally shown after the user updates text and the text\n   * is non-empty, but also when the user clicks on the input element.\n   * @returns True if suggestions should be shown.\n   */\n  BasePicker.prototype._getShowSuggestions = function () {\n    var areSuggestionsVisible = this.input.current !== undefined && this.input.current !== null && this.input.current.inputElement === document.activeElement && this.input.current.value !== '';\n    return areSuggestionsVisible;\n  };\n  BasePicker.prototype._getTextFromItem = function (item, currentValue) {\n    if (this.props.getTextFromItem) {\n      return this.props.getTextFromItem(item, currentValue);\n    } else {\n      return '';\n    }\n  };\n  return BasePicker;\n}(React.Component);\nexport { BasePicker };\nvar BasePickerListBelow = /** @class */function (_super) {\n  __extends(BasePickerListBelow, _super);\n  function BasePickerListBelow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  BasePickerListBelow.prototype.render = function () {\n    var _a = this.state,\n      suggestedDisplayValue = _a.suggestedDisplayValue,\n      isFocused = _a.isFocused;\n    var _b = this.props,\n      className = _b.className,\n      inputProps = _b.inputProps,\n      disabled = _b.disabled,\n      selectionAriaLabel = _b.selectionAriaLabel,\n      _c = _b.selectionRole,\n      selectionRole = _c === void 0 ? 'list' : _c,\n      theme = _b.theme,\n      styles = _b.styles;\n    var suggestionsVisible = !!this.state.suggestionsVisible;\n    var suggestionsAvailable = suggestionsVisible ? this._ariaMap.suggestionList : undefined;\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from BasePicker class because it\n    // might be used by consumers who created custom pickers from extending from\n    // this base class and have not used the new 'styles' prop.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    var classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isFocused: isFocused,\n      inputClassName: inputProps && inputProps.className\n    }) : {\n      root: css('ms-BasePicker', legacyStyles.picker, className ? className : ''),\n      text: css('ms-BasePicker-text', legacyStyles.pickerText, this.state.isFocused && legacyStyles.inputFocused, disabled && legacyStyles.inputDisabled),\n      itemsWrapper: legacyStyles.pickerItems,\n      input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\n      screenReaderText: legacyStyles.screenReaderOnly\n    };\n    var comboLabel = this.props['aria-label'] || (inputProps === null || inputProps === void 0 ? void 0 : inputProps['aria-label']);\n    return React.createElement(\"div\", {\n      ref: this.root,\n      onBlur: this.onBlur,\n      onFocus: this.onFocus\n    }, React.createElement(\"div\", {\n      className: classNames.root,\n      onKeyDown: this.onKeyDown\n    }, this.renderCustomAlert(classNames.screenReaderText), React.createElement(\"span\", {\n      id: \"\".concat(this._ariaMap.selectedItems, \"-label\"),\n      hidden: true\n    }, selectionAriaLabel || comboLabel), React.createElement(\"div\", {\n      className: classNames.text,\n      \"aria-owns\": suggestionsAvailable\n    }, React.createElement(Autofill, __assign({}, inputProps, {\n      className: classNames.input,\n      componentRef: this.input,\n      onFocus: this.onInputFocus,\n      onBlur: this.onInputBlur,\n      onClick: this.onClick,\n      onInputValueChange: this.onInputChange,\n      suggestedDisplayValue: suggestedDisplayValue,\n      \"aria-activedescendant\": suggestionsVisible ? this.getActiveDescendant() : undefined,\n      \"aria-controls\": suggestionsAvailable,\n      \"aria-expanded\": suggestionsVisible,\n      \"aria-haspopup\": \"listbox\",\n      \"aria-label\": comboLabel,\n      \"aria-describedby\": this.state.items.length > 0 ? this._ariaMap.selectedItems : undefined,\n      role: \"combobox\",\n      id: (inputProps === null || inputProps === void 0 ? void 0 : inputProps.id) ? inputProps.id : this._ariaMap.combobox,\n      disabled: disabled,\n      onInputChange: this.props.onInputChange\n    })))), this.renderSuggestions(), React.createElement(SelectionZone, {\n      selection: this.selection,\n      selectionMode: SelectionMode.single\n    }, React.createElement(\"div\", {\n      id: this._ariaMap.selectedItems,\n      className: \"ms-BasePicker-selectedItems\" // just a className hook without any styles applied to it.\n      ,\n      role: selectionRole,\n      \"aria-labelledby\": \"\".concat(this._ariaMap.selectedItems, \"-label\")\n    }, this.renderItems())));\n  };\n  BasePickerListBelow.prototype.onBackspace = function (ev) {\n    // override the existing backspace method to not do anything because the list items appear below.\n  };\n  return BasePickerListBelow;\n}(BasePicker);\nexport { BasePickerListBelow };","map":{"version":3,"names":["React","Async","KeyCodes","css","elementContains","format","getId","classNamesFunction","styled","initializeComponentRef","Callout","Selection","SelectionZone","SelectionMode","DirectionalHint","Suggestions","getStyles","suggestionsStyles","SuggestionsController","ValidationState","Autofill","stylesImport","legacyStyles","EXTENDED_LOAD_TIME","getClassNames","getStyledSuggestions","suggestionsType","undefined","scope","BasePicker","_super","__extends","basePickerProps","_this","call","root","createRef","input","suggestionElement","SuggestionOfProperType","_styledSuggestions","_overrideScrollDismiss","dismissSuggestions","ev","selectItemFunction","addItemOnDismiss","props","onDismiss","suggestionStore","currentSuggestion","item","defaultPrevented","canAddItems","hasSelectedSuggestion","state","suggestedDisplayValue","addItemByIndex","currentPromise","then","setState","suggestionsVisible","refocusSuggestions","keyCode","resetFocus","suggestions","length","up","setSelectedSuggestion","down","onInputChange","value","updateValue","moreSuggestionsAvailable","isMostRecentlyUsedVisible","onSuggestionClick","index","onSuggestionRemove","onRemoveSuggestion","removeSuggestion","onInputFocus","selection","setAllSelected","isFocused","_userTriggeredSuggestions","inputProps","onFocus","onInputBlur","onBlur","relatedTarget","document","activeElement","current","onWrapperClick","items","onClick","button","onKeyDown","which","escape","preventDefault","stopPropagation","tab","enter","hasSuggestedActionSelected","executeSelectedAction","shiftKey","completeSuggestion","_completeGenericSuggestion","backspace","disabled","onBackspace","del","target","inputElement","currentIndex","forceUpdate","tryHandleKeyDown","hasSuggestedAction","focusAboveSuggestions","deselectAllSuggestions","previousSuggestion","onSuggestionSelect","focusBelowSuggestions","nextSuggestion","onItemChange","changedItem","newItems","_updateSelectedItems","onGetMoreResults","isSearching","suggestionsArray","suggestionsPromiseLike","Array","isArray","updateSuggestions","newSuggestions","focus","isResultsFooterVisible","completeSelection","addItem","clear","getSuggestionAtIndex","processedItem","onItemSelected","processedItemObject","processedItemPromiseLike","resolvedProcessedItem","concat","selectionRemoved","removeItem","indexOf","slice","_async","setTimeout","removeItems","itemsToRemove","filter","_shouldFocusZoneEnterInnerZone","_onResolveSuggestions","updatedValue","onResolveSuggestions","updateSuggestionsList","onValidateInput","invalid","createGenericItem","itemToConvert","createGenericSuggestion","onEmptyInputFocus","selectedItems","defaultSelectedItems","_id","_ariaMap","selectedSuggestionAlert","suggestionList","combobox","onSelectionChanged","onSelectionChange","setItems","selectedIndices","getDerivedStateFromProps","newProps","Object","defineProperty","prototype","get","componentDidMount","debounce","resolveDelay","componentDidUpdate","oldProps","oldState","currentSelectedIndex","getSelectedIndices","setIndexSelected","clearTimeout","_overrideScrollDimissTimeout","componentWillUnmount","dispose","focusInput","forceComplete","render","_a","_b","className","selectionAriaLabel","_c","selectionRole","theme","styles","suggestionsAvailable","classNames","inputClassName","text","pickerText","inputFocused","itemsWrapper","pickerItems","pickerInput","screenReaderText","screenReaderOnly","comboLabel","createElement","ref","renderCustomAlert","id","hidden","selectionMode","multiple","role","renderItems","__assign","spellCheck","componentRef","onInputValueChange","getActiveDescendant","renderSuggestions","itemLimit","StyledTypedSuggestions","isBeakVisible","gapSpace","directionalHint","bottomLeftEdge","directionalHintForRTL","bottomRightEdge","preventDismissOnEvent","_preventDismissOnScrollOrResize","pickerCalloutProps","onRenderSuggestion","onRenderSuggestionsItem","getSuggestions","isLoading","suggestionsLoading","isExtendedLoading","suggestionsExtendedLoading","removeSuggestionAriaLabel","removeButtonAriaLabel","suggestionsListId","pickerSuggestionsProps","removeButtonIconProps","onRenderItem","map","key","selected","onRemoveItem","newEl","querySelectorAll","Math","min","currentValue","itemValue","_getTextFromItem","maxSuggestionsCount","resultsMaximumNumber","emptyResolveSuggestions","onEmptyResolveSuggestions","_updateAndResolveValue","_startLoadTimer","_getShowSuggestions","resolveNewValue","onChange","isValueSelected","cursorLocation","getSelectedCount","getSelection","getSuggestionsAlert","suggestionAlertClassName","enableSelectedSuggestionAlert","selectedSuggestion","selectedSuggestionAlertText","ariaLabel","alertClassName","suggestionRemovedText","removedItemText","itemName","type","_onSelectedItemsUpdated","areSuggestionsVisible","getTextFromItem","Component","BasePickerListBelow","picker","inputDisabled","single"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/pickers/BasePicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Async,\n  KeyCodes,\n  css,\n  elementContains,\n  format,\n  getId,\n  classNamesFunction,\n  styled,\n  initializeComponentRef,\n} from '../../Utilities';\nimport { Callout } from '../../Callout';\nimport { Selection, SelectionZone, SelectionMode } from '../../utilities/selection/index';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { Suggestions } from './Suggestions/Suggestions';\nimport { getStyles as suggestionsStyles } from './Suggestions/Suggestions.styles';\nimport { SuggestionsController } from './Suggestions/SuggestionsController';\nimport { ValidationState } from './BasePicker.types';\nimport { Autofill } from '../Autofill/index';\nimport * as stylesImport from './BasePicker.scss';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  ISuggestions,\n  ISuggestionsProps,\n  ISuggestionsStyleProps,\n  ISuggestionsStyles,\n} from './Suggestions/Suggestions.types';\nimport type { IBasePicker, IBasePickerProps, IBasePickerStyleProps, IBasePickerStyles } from './BasePicker.types';\nimport type { IAutofill } from '../Autofill/index';\nimport type { IPickerItemProps } from './PickerItem.types';\n\nconst legacyStyles: any = stylesImport;\n\nconst EXTENDED_LOAD_TIME = 3000;\n\nexport interface IBasePickerState<T> {\n  items?: any;\n  suggestedDisplayValue?: string;\n  moreSuggestionsAvailable?: boolean;\n  isFocused?: boolean;\n  isSearching?: boolean;\n  isMostRecentlyUsedVisible?: boolean;\n  suggestionsVisible?: boolean;\n  suggestionsLoading?: boolean;\n  suggestionsExtendedLoading?: boolean;\n  isResultsFooterVisible?: boolean;\n  selectedIndices?: number[];\n  selectionRemoved?: T;\n}\n\n/**\n * Aria id's for internal picker components\n * {@docCategory Pickers}\n */\nexport type IPickerAriaIds = {\n  /**\n   * Aria id for selected suggestion alert component\n   */\n  selectedSuggestionAlert: string;\n  /**\n   * Aria id for selected items container component\n   */\n  selectedItems: string;\n  /**\n   * Aria id for suggestions list component\n   */\n  suggestionList: string;\n  /**\n   * Aria id for element with role=combobox\n   */\n  combobox: string;\n};\n\nconst getClassNames = classNamesFunction<IBasePickerStyleProps, IBasePickerStyles>();\n\n/**\n * Should be removed once new picker without inheritance is created\n */\nfunction getStyledSuggestions<T>(suggestionsType: new (props: ISuggestionsProps<T>) => Suggestions<T>) {\n  return styled<ISuggestionsProps<any>, ISuggestionsStyleProps, ISuggestionsStyles>(\n    suggestionsType,\n    suggestionsStyles,\n    undefined,\n    {\n      scope: 'Suggestions',\n    },\n  );\n}\n\n/**\n * {@docCategory Pickers}\n */\nexport class BasePicker<T, P extends IBasePickerProps<T>>\n  extends React.Component<P, IBasePickerState<T>>\n  implements IBasePicker<T>\n{\n  // Refs\n  protected root = React.createRef<HTMLDivElement>();\n  protected input = React.createRef<IAutofill>();\n  protected suggestionElement = React.createRef<ISuggestions<T>>();\n  protected selection: Selection;\n  protected suggestionStore: SuggestionsController<T>;\n  /**\n   * @deprecated this is no longer necessary as typescript now supports generic elements\n   */\n  protected SuggestionOfProperType = Suggestions as new (props: ISuggestionsProps<T>) => Suggestions<T>;\n  protected currentPromise: PromiseLike<any> | undefined;\n  protected _ariaMap: IPickerAriaIds;\n  // eslint-disable-next-line deprecation/deprecation\n  private _styledSuggestions = getStyledSuggestions(this.SuggestionOfProperType);\n  private _id: string;\n  private _async: Async;\n  private _overrideScrollDismiss = false;\n  private _overrideScrollDimissTimeout: number;\n\n  public static getDerivedStateFromProps(newProps: IBasePickerProps<any>) {\n    if (newProps.selectedItems) {\n      return { items: newProps.selectedItems };\n    }\n    return null;\n  }\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    const items: T[] = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n\n    this._id = getId();\n    this._ariaMap = {\n      selectedItems: `selected-items-${this._id}`,\n      selectedSuggestionAlert: `selected-suggestion-alert-${this._id}`,\n      suggestionList: `suggestion-list-${this._id}`,\n      combobox: `combobox-${this._id}`,\n    };\n    this.suggestionStore = new SuggestionsController<T>();\n    this.selection = new Selection({ onSelectionChanged: () => this.onSelectionChange() });\n    this.selection.setItems(items);\n    this.state = {\n      items,\n      suggestedDisplayValue: '',\n      isMostRecentlyUsedVisible: false,\n      moreSuggestionsAvailable: false,\n      isFocused: false,\n      isSearching: false,\n      selectedIndices: [],\n      selectionRemoved: undefined,\n    };\n  }\n\n  public get items(): T[] {\n    return this.state.items;\n  }\n\n  public componentDidMount(): void {\n    this.selection.setItems(this.state.items);\n    this._onResolveSuggestions = this._async.debounce(this._onResolveSuggestions, this.props.resolveDelay);\n  }\n\n  public componentDidUpdate(oldProps: P, oldState: IBasePickerState<T>) {\n    if (this.state.items && this.state.items !== oldState.items) {\n      const currentSelectedIndex = this.selection.getSelectedIndices()[0];\n      this.selection.setItems(this.state.items);\n      if (this.state.isFocused) {\n        // Reset focus and selection so that selected item stays in sync if something\n        // has been removed\n        if (this.state.items.length < oldState.items.length) {\n          this.selection.setIndexSelected(currentSelectedIndex, false, true);\n          this.resetFocus(currentSelectedIndex);\n        }\n        // Reset focus to last item if the input is removed\n        else if (this.state.items.length > oldState.items.length && !this.canAddItems()) {\n          this.resetFocus(this.state.items.length - 1);\n        }\n      }\n    }\n\n    // handle dismiss buffer after suggestions are opened\n    if (this.state.suggestionsVisible && !oldState.suggestionsVisible) {\n      this._overrideScrollDismiss = true;\n      this._async.clearTimeout(this._overrideScrollDimissTimeout);\n      this._overrideScrollDimissTimeout = this._async.setTimeout(() => {\n        this._overrideScrollDismiss = false;\n      }, 100);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this.currentPromise) {\n      this.currentPromise = undefined;\n    }\n    this._async.dispose();\n  }\n\n  public focus() {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  }\n\n  public focusInput() {\n    if (this.input.current) {\n      this.input.current.focus();\n    }\n  }\n\n  public dismissSuggestions = (ev?: any): void => {\n    const selectItemFunction = () => {\n      let addItemOnDismiss: boolean | void = true;\n      if (this.props.onDismiss) {\n        addItemOnDismiss = this.props.onDismiss(\n          ev,\n          this.suggestionStore.currentSuggestion ? this.suggestionStore.currentSuggestion.item : undefined,\n        );\n      }\n\n      if (!ev || (ev && !ev.defaultPrevented)) {\n        // Select the first suggestion if one is available and permitted by onDismiss when user leaves.\n        if (\n          addItemOnDismiss !== false &&\n          this.canAddItems() &&\n          this.suggestionStore.hasSelectedSuggestion() &&\n          this.state.suggestedDisplayValue\n        ) {\n          this.addItemByIndex(0);\n        }\n      }\n    };\n\n    if (this.currentPromise) {\n      this.currentPromise.then(() => selectItemFunction());\n    } else {\n      selectItemFunction();\n    }\n\n    this.setState({ suggestionsVisible: false });\n  };\n\n  public completeSuggestion(forceComplete?: boolean) {\n    if (this.suggestionStore.hasSelectedSuggestion() && this.input.current) {\n      this.completeSelection(this.suggestionStore.currentSuggestion!.item);\n    } else if (forceComplete) {\n      this._completeGenericSuggestion();\n    }\n  }\n\n  public refocusSuggestions = (keyCode: KeyCodes): void => {\n    this.resetFocus();\n    if (this.suggestionStore.suggestions && this.suggestionStore.suggestions.length > 0) {\n      if (keyCode === KeyCodes.up) {\n        this.suggestionStore.setSelectedSuggestion(this.suggestionStore.suggestions.length - 1);\n      } else if (keyCode === KeyCodes.down) {\n        this.suggestionStore.setSelectedSuggestion(0);\n      }\n    }\n  };\n\n  public render(): JSX.Element {\n    const { suggestedDisplayValue, isFocused, items } = this.state;\n    const { className, inputProps, disabled, selectionAriaLabel, selectionRole = 'list', theme, styles } = this.props;\n\n    const suggestionsVisible = !!this.state.suggestionsVisible;\n    const suggestionsAvailable = suggestionsVisible ? this._ariaMap.suggestionList : undefined;\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from BasePicker class because it\n    // might be used by consumers who created custom pickers from extending from\n    // this base class and have not used the new 'styles' prop.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<IBasePickerStyles>> = styles\n      ? getClassNames(styles, {\n          theme,\n          className,\n          isFocused,\n          disabled,\n          inputClassName: inputProps && inputProps.className,\n        })\n      : {\n          root: css('ms-BasePicker', className ? className : ''),\n          text: css('ms-BasePicker-text', legacyStyles.pickerText, this.state.isFocused && legacyStyles.inputFocused),\n          itemsWrapper: legacyStyles.pickerItems,\n          input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\n          screenReaderText: legacyStyles.screenReaderOnly,\n        };\n\n    const comboLabel = this.props['aria-label'] || inputProps?.['aria-label'];\n\n    // selectionAriaLabel is contained in a separate <span> rather than an aria-label on the items list\n    // because if the items list has an aria-label, the aria-describedby on the input will only read\n    // that label instead of all the selected items. Using aria-labelledby instead fixes this, since\n    // aria-describedby and aria-labelledby will not follow a second aria-labelledby\n    return (\n      <div\n        ref={this.root}\n        className={classNames.root}\n        onKeyDown={this.onKeyDown}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        onClick={this.onWrapperClick}\n      >\n        {this.renderCustomAlert(classNames.screenReaderText)}\n        <span id={`${this._ariaMap.selectedItems}-label`} hidden>\n          {selectionAriaLabel || comboLabel}\n        </span>\n        <SelectionZone selection={this.selection} selectionMode={SelectionMode.multiple}>\n          <div className={classNames.text} aria-owns={suggestionsAvailable}>\n            {items.length > 0 && (\n              <span\n                id={this._ariaMap.selectedItems}\n                className={classNames.itemsWrapper}\n                role={selectionRole}\n                aria-labelledby={`${this._ariaMap.selectedItems}-label`}\n              >\n                {this.renderItems()}\n              </span>\n            )}\n            {this.canAddItems() && (\n              <Autofill\n                spellCheck={false}\n                {...(inputProps as any)}\n                className={classNames.input}\n                componentRef={this.input}\n                id={inputProps?.id ? inputProps.id : this._ariaMap.combobox}\n                onClick={this.onClick}\n                onFocus={this.onInputFocus}\n                onBlur={this.onInputBlur}\n                onInputValueChange={this.onInputChange}\n                suggestedDisplayValue={suggestedDisplayValue}\n                aria-activedescendant={suggestionsVisible ? this.getActiveDescendant() : undefined}\n                aria-controls={suggestionsAvailable}\n                aria-describedby={items.length > 0 ? this._ariaMap.selectedItems : undefined}\n                aria-expanded={suggestionsVisible}\n                aria-haspopup=\"listbox\"\n                aria-label={comboLabel}\n                role=\"combobox\"\n                disabled={disabled}\n                onInputChange={this.props.onInputChange}\n              />\n            )}\n          </div>\n        </SelectionZone>\n        {this.renderSuggestions()}\n      </div>\n    );\n  }\n\n  protected canAddItems(): boolean {\n    const { items } = this.state;\n    const { itemLimit } = this.props;\n    return itemLimit === undefined || items.length < itemLimit;\n  }\n\n  protected renderSuggestions(): JSX.Element | null {\n    const StyledTypedSuggestions: React.FunctionComponent<ISuggestionsProps<T>> = this._styledSuggestions;\n\n    return this.state.suggestionsVisible && this.input ? (\n      <Callout\n        isBeakVisible={false}\n        gapSpace={5}\n        target={this.input.current ? this.input.current.inputElement : undefined}\n        onDismiss={this.dismissSuggestions}\n        directionalHint={DirectionalHint.bottomLeftEdge}\n        directionalHintForRTL={DirectionalHint.bottomRightEdge}\n        // eslint-disable-next-line react/jsx-no-bind\n        preventDismissOnEvent={(ev: Event) => this._preventDismissOnScrollOrResize(ev)}\n        {...this.props.pickerCalloutProps}\n      >\n        <StyledTypedSuggestions\n          // Assumed to set in derived component's defaultProps\n          onRenderSuggestion={this.props.onRenderSuggestionsItem!}\n          onSuggestionClick={this.onSuggestionClick}\n          onSuggestionRemove={this.onSuggestionRemove}\n          suggestions={this.suggestionStore.getSuggestions()}\n          componentRef={this.suggestionElement}\n          onGetMoreResults={this.onGetMoreResults}\n          moreSuggestionsAvailable={this.state.moreSuggestionsAvailable}\n          isLoading={this.state.suggestionsLoading}\n          isExtendedLoading={this.state.suggestionsExtendedLoading}\n          isSearching={this.state.isSearching}\n          isMostRecentlyUsedVisible={this.state.isMostRecentlyUsedVisible}\n          isResultsFooterVisible={this.state.isResultsFooterVisible}\n          refocusSuggestions={this.refocusSuggestions}\n          removeSuggestionAriaLabel={this.props.removeButtonAriaLabel}\n          suggestionsListId={this._ariaMap.suggestionList}\n          createGenericItem={this._completeGenericSuggestion}\n          {...this.props.pickerSuggestionsProps}\n        />\n      </Callout>\n    ) : null;\n  }\n\n  protected renderItems(): JSX.Element[] {\n    const { disabled, removeButtonAriaLabel, removeButtonIconProps } = this.props;\n    const onRenderItem = this.props.onRenderItem as (props: IPickerItemProps<T>) => JSX.Element;\n\n    const { items, selectedIndices } = this.state;\n    return items.map((item: any, index: number) =>\n      onRenderItem({\n        item,\n        index,\n        key: item.key ? item.key : index,\n        selected: selectedIndices!.indexOf(index) !== -1,\n        onRemoveItem: () => this.removeItem(item),\n        disabled,\n        onItemChange: this.onItemChange,\n        removeButtonAriaLabel,\n        removeButtonIconProps,\n      }),\n    );\n  }\n\n  protected resetFocus(index?: number) {\n    const { items } = this.state;\n\n    if (items.length) {\n      // default to focusing the last item\n      index = index ?? items.length - 1;\n      const newEl: HTMLElement | null =\n        this.root.current &&\n        (this.root.current.querySelectorAll('[data-selection-index] > button')[\n          Math.min(index!, items.length - 1)\n        ] as HTMLElement | null);\n      if (newEl) {\n        newEl.focus();\n      }\n    } else {\n      if (this.input.current) {\n        this.input.current.focus();\n      }\n    }\n  }\n\n  protected onSuggestionSelect() {\n    if (this.suggestionStore.currentSuggestion) {\n      const currentValue: string = this.input.current ? this.input.current.value : '';\n      const itemValue: string = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, currentValue);\n      this.setState({ suggestedDisplayValue: itemValue });\n    }\n  }\n\n  protected onSelectionChange() {\n    this.setState({\n      selectedIndices: this.selection.getSelectedIndices(),\n    });\n  }\n\n  protected updateSuggestions(suggestions: any[]) {\n    const maxSuggestionsCount = this.props.pickerSuggestionsProps?.resultsMaximumNumber;\n    this.suggestionStore.updateSuggestions(suggestions, 0, maxSuggestionsCount);\n    this.forceUpdate();\n  }\n\n  /**\n   * Only to be called when there is nothing in the input. Checks to see if the consumer has\n   * provided a function to resolve suggestions\n   */\n  protected onEmptyInputFocus() {\n    const emptyResolveSuggestions = this.props.onEmptyResolveSuggestions\n      ? this.props.onEmptyResolveSuggestions\n      : // eslint-disable-next-line deprecation/deprecation\n        this.props.onEmptyInputFocus;\n\n    // Only attempt to resolve suggestions if it exists\n    if (emptyResolveSuggestions) {\n      const suggestions = emptyResolveSuggestions(this.state.items);\n\n      this.updateSuggestionsList(suggestions);\n\n      this.setState({\n        isMostRecentlyUsedVisible: true,\n        suggestionsVisible: true,\n        moreSuggestionsAvailable: false,\n      });\n    }\n  }\n\n  protected updateValue(updatedValue: string) {\n    this._onResolveSuggestions(updatedValue);\n  }\n\n  protected updateSuggestionsList(suggestions: T[] | PromiseLike<T[]>, updatedValue?: string) {\n    // Check to see if the returned value is an array, if it is then just pass it into the next function .\n    // If the returned value is not an array then check to see if it's a promise or PromiseLike.\n    // If it is then resolve it asynchronously.\n    if (Array.isArray(suggestions)) {\n      this._updateAndResolveValue(updatedValue, suggestions);\n    } else if (suggestions && (suggestions as PromiseLike<T[]>).then) {\n      this.setState({\n        suggestionsLoading: true,\n      });\n      this._startLoadTimer();\n\n      // Clear suggestions\n      this.suggestionStore.updateSuggestions([]);\n\n      if (updatedValue !== undefined) {\n        this.setState({\n          suggestionsVisible: this._getShowSuggestions(),\n        });\n      } else {\n        this.setState({\n          suggestionsVisible: this.input.current! && this.input.current!.inputElement === document.activeElement,\n        });\n      }\n\n      // Ensure that the promise will only use the callback if it was the most recent one.\n      this.currentPromise = suggestions;\n      suggestions.then((newSuggestions: T[]) => {\n        if (suggestions === this.currentPromise) {\n          this._updateAndResolveValue(updatedValue, newSuggestions);\n        }\n      });\n    }\n  }\n\n  protected resolveNewValue(updatedValue: string, suggestions: T[]) {\n    this.updateSuggestions(suggestions);\n    let itemValue: string | undefined = undefined;\n\n    if (this.suggestionStore.currentSuggestion) {\n      itemValue = this._getTextFromItem(this.suggestionStore.currentSuggestion.item, updatedValue);\n    }\n\n    // Only set suggestionloading to false after there has been time for the new suggestions to flow\n    // to the suggestions list. This is to ensure that the suggestions are available before aria-activedescendant\n    // is set so that screen readers will read out the first selected option.\n    this.setState(\n      {\n        suggestedDisplayValue: itemValue,\n        suggestionsVisible: this._getShowSuggestions(),\n      },\n      () => this.setState({ suggestionsLoading: false, suggestionsExtendedLoading: false }),\n    );\n  }\n\n  protected onChange(items?: T[]) {\n    if (this.props.onChange) {\n      (this.props.onChange as any)(items);\n    }\n  }\n\n  protected onInputChange = (value: string): void => {\n    this.updateValue(value);\n    this.setState({\n      moreSuggestionsAvailable: true,\n      isMostRecentlyUsedVisible: false,\n    });\n  };\n\n  protected onSuggestionClick = (ev: React.MouseEvent<HTMLElement>, item: any, index: number): void => {\n    this.addItemByIndex(index);\n  };\n\n  protected onSuggestionRemove = (ev: React.MouseEvent<HTMLElement>, item: T, index: number): void => {\n    if (this.props.onRemoveSuggestion) {\n      this.props.onRemoveSuggestion(item);\n    }\n    this.suggestionStore.removeSuggestion(index);\n  };\n\n  protected onInputFocus = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\n    this.selection.setAllSelected(false);\n    // Only trigger all of the focus if this component isn't already focused.\n    // For example when an item is selected or removed from the selected list it should be treated\n    // as though the input is still focused.\n    if (!this.state.isFocused) {\n      this._userTriggeredSuggestions();\n\n      if (this.props.inputProps && this.props.inputProps.onFocus) {\n        this.props.inputProps.onFocus(ev as React.FocusEvent<HTMLInputElement>);\n      }\n    }\n  };\n\n  protected onInputBlur = (ev: React.FocusEvent<HTMLInputElement | Autofill>): void => {\n    if (this.props.inputProps && this.props.inputProps.onBlur) {\n      this.props.inputProps.onBlur(ev as React.FocusEvent<HTMLInputElement>);\n    }\n  };\n\n  protected onBlur = (ev: React.FocusEvent<HTMLElement | Autofill>): void => {\n    if (this.state.isFocused) {\n      // Only blur the entire component if an unrelated element gets focus.\n      // Otherwise treat it as though it still has focus.\n      // Do nothing if the blur is coming from something\n      // inside the comboBox root or the comboBox menu since\n      // it we are not really bluring from the whole comboBox\n      let relatedTarget: EventTarget | null = ev.relatedTarget;\n\n      if (ev.relatedTarget === null) {\n        // In IE11, due to lack of support, event.relatedTarget is always\n        // null making every onBlur call to be \"outside\" of the ComboBox\n        // even when it's not. Using document.activeElement is another way\n        // for us to be able to get what the relatedTarget without relying\n        // on the event\n        relatedTarget = document.activeElement;\n      }\n      if (relatedTarget && !elementContains(this.root.current!, relatedTarget as HTMLElement)) {\n        this.setState({ isFocused: false });\n        if (this.props.onBlur) {\n          this.props.onBlur(ev as React.FocusEvent<HTMLInputElement>);\n        }\n      }\n    }\n  };\n\n  /**\n   * Resets focus to last element in wrapper div if clicking back into Picker that has hit item limit\n   */\n  protected onWrapperClick = (ev: React.MouseEvent<HTMLInputElement>): void => {\n    if (this.state.items.length && !this.canAddItems()) {\n      this.resetFocus(this.state.items.length - 1);\n    }\n  };\n\n  /**\n   * Reveals suggestions any time the user clicks on the input element\n   * without shifting focus.\n   */\n  protected onClick = (ev: React.MouseEvent<HTMLInputElement>): void => {\n    if (this.props.inputProps !== undefined && this.props.inputProps.onClick !== undefined) {\n      this.props.inputProps.onClick(ev);\n    }\n\n    // Only primary (left) clicks show suggestions.\n    if (ev.button === 0) {\n      this._userTriggeredSuggestions();\n    }\n  };\n\n  protected onFocus = () => {\n    if (!this.state.isFocused) {\n      this.setState({ isFocused: true });\n    }\n  };\n\n  protected onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    const keyCode = ev.which;\n    switch (keyCode) {\n      case KeyCodes.escape:\n        if (this.state.suggestionsVisible) {\n          this.setState({ suggestionsVisible: false });\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n        break;\n\n      case KeyCodes.tab:\n      case KeyCodes.enter:\n        if (this.suggestionElement.current && this.suggestionElement.current.hasSuggestedActionSelected()) {\n          this.suggestionElement.current.executeSelectedAction();\n        } else if (!ev.shiftKey && this.suggestionStore.hasSelectedSuggestion() && this.state.suggestionsVisible) {\n          this.completeSuggestion();\n          ev.preventDefault();\n          ev.stopPropagation();\n        } else {\n          this._completeGenericSuggestion();\n        }\n\n        break;\n\n      case KeyCodes.backspace:\n        if (!this.props.disabled) {\n          this.onBackspace(ev);\n        }\n        ev.stopPropagation();\n        break;\n\n      case KeyCodes.del:\n        if (!this.props.disabled) {\n          if (\n            this.input.current &&\n            ev.target === this.input.current.inputElement &&\n            this.state.suggestionsVisible &&\n            this.suggestionStore.currentIndex !== -1\n          ) {\n            if (this.props.onRemoveSuggestion) {\n              this.props.onRemoveSuggestion(this.suggestionStore.currentSuggestion!.item);\n            }\n            this.suggestionStore.removeSuggestion(this.suggestionStore.currentIndex);\n            this.forceUpdate();\n          } else {\n            this.onBackspace(ev);\n          }\n        }\n        ev.stopPropagation();\n        break;\n\n      case KeyCodes.up:\n        if (this.input.current && ev.target === this.input.current.inputElement && this.state.suggestionsVisible) {\n          if (\n            this.suggestionElement.current &&\n            this.suggestionElement.current.tryHandleKeyDown(keyCode, this.suggestionStore.currentIndex)\n          ) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.forceUpdate();\n          } else {\n            if (\n              this.suggestionElement.current &&\n              this.suggestionElement.current.hasSuggestedAction() &&\n              this.suggestionStore.currentIndex === 0\n            ) {\n              ev.preventDefault();\n              ev.stopPropagation();\n              this.suggestionElement.current.focusAboveSuggestions();\n              this.suggestionStore.deselectAllSuggestions();\n              this.forceUpdate();\n            } else {\n              if (this.suggestionStore.previousSuggestion()) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.onSuggestionSelect();\n              }\n            }\n          }\n        }\n        break;\n\n      case KeyCodes.down:\n        if (this.input.current && ev.target === this.input.current.inputElement && this.state.suggestionsVisible) {\n          if (\n            this.suggestionElement.current &&\n            this.suggestionElement.current.tryHandleKeyDown(keyCode, this.suggestionStore.currentIndex)\n          ) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.forceUpdate();\n          } else {\n            if (\n              this.suggestionElement.current &&\n              this.suggestionElement.current.hasSuggestedAction() &&\n              this.suggestionStore.currentIndex + 1 === this.suggestionStore.suggestions.length\n            ) {\n              ev.preventDefault();\n              ev.stopPropagation();\n              this.suggestionElement.current.focusBelowSuggestions();\n              this.suggestionStore.deselectAllSuggestions();\n              this.forceUpdate();\n            } else {\n              if (this.suggestionStore.nextSuggestion()) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.onSuggestionSelect();\n              }\n            }\n          }\n        }\n        break;\n    }\n  };\n\n  protected onItemChange = (changedItem: T, index: number): void => {\n    const { items } = this.state;\n\n    if (index >= 0) {\n      const newItems: T[] = items;\n      newItems[index] = changedItem;\n\n      this._updateSelectedItems(newItems);\n    }\n  };\n\n  protected onGetMoreResults = (): void => {\n    this.setState(\n      {\n        isSearching: true,\n      },\n      () => {\n        if (this.props.onGetMoreResults && this.input.current) {\n          const suggestions: T[] | PromiseLike<T[]> = (this.props.onGetMoreResults as any)(\n            this.input.current.value,\n            this.state.items,\n          );\n          const suggestionsArray: T[] = suggestions as T[];\n          const suggestionsPromiseLike: PromiseLike<T[]> = suggestions as PromiseLike<T[]>;\n\n          if (Array.isArray(suggestionsArray)) {\n            this.updateSuggestions(suggestionsArray);\n            this.setState({ isSearching: false });\n          } else if (suggestionsPromiseLike.then) {\n            suggestionsPromiseLike.then((newSuggestions: T[]) => {\n              this.updateSuggestions(newSuggestions);\n              this.setState({ isSearching: false });\n            });\n          }\n        } else {\n          this.setState({ isSearching: false });\n        }\n\n        if (this.input.current) {\n          this.input.current.focus();\n        }\n\n        this.setState({\n          moreSuggestionsAvailable: false,\n          isResultsFooterVisible: true,\n        });\n      },\n    );\n  };\n\n  protected completeSelection = (item: T) => {\n    this.addItem(item);\n    this.updateValue('');\n    if (this.input.current) {\n      this.input.current.clear();\n    }\n    this.setState({ suggestionsVisible: false });\n  };\n\n  protected addItemByIndex = (index: number): void => {\n    this.completeSelection(this.suggestionStore.getSuggestionAtIndex(index).item);\n  };\n\n  protected addItem = (item: T): void => {\n    const processedItem: T | PromiseLike<T> | null = this.props.onItemSelected\n      ? (this.props.onItemSelected as any)(item)\n      : item;\n\n    if (processedItem === null) {\n      return;\n    }\n\n    const processedItemObject: T = processedItem as T;\n    const processedItemPromiseLike: PromiseLike<T> = processedItem as PromiseLike<T>;\n\n    if (processedItemPromiseLike && processedItemPromiseLike.then) {\n      processedItemPromiseLike.then((resolvedProcessedItem: T) => {\n        const newItems: T[] = this.state.items.concat([resolvedProcessedItem]);\n        this._updateSelectedItems(newItems);\n      });\n    } else {\n      const newItems: T[] = this.state.items.concat([processedItemObject]);\n      this._updateSelectedItems(newItems);\n    }\n    this.setState({ suggestedDisplayValue: '', selectionRemoved: undefined });\n  };\n\n  protected removeItem = (item: T): void => {\n    const { items } = this.state;\n    const index: number = items.indexOf(item);\n\n    if (index >= 0) {\n      const newItems: T[] = items.slice(0, index).concat(items.slice(index + 1));\n      this.setState({ selectionRemoved: item });\n      this._updateSelectedItems(newItems);\n\n      // reset selection removed text after a timeout so it isn't reached by screen reader virtual cursor.\n      // the exact timing isn't important, the live region will fully read even if the text is removed.\n      this._async.setTimeout(() => {\n        this.setState({ selectionRemoved: undefined });\n      }, 1000);\n    }\n  };\n\n  protected removeItems = (itemsToRemove: any[]): void => {\n    const { items } = this.state;\n    const newItems: T[] = items.filter((item: any) => itemsToRemove.indexOf(item) === -1);\n\n    this._updateSelectedItems(newItems);\n  };\n\n  // This is protected because we may expect the backspace key to work differently in a different kind of picker.\n  // This lets the subclass override it and provide it's own onBackspace. For an example see the BasePickerListBelow\n  protected onBackspace(ev: React.KeyboardEvent<HTMLElement>) {\n    if (\n      (this.state.items.length && !this.input.current) ||\n      (this.input.current && !this.input.current.isValueSelected && this.input.current.cursorLocation === 0)\n    ) {\n      if (this.selection.getSelectedCount() > 0) {\n        this.removeItems(this.selection.getSelection());\n      } else {\n        this.removeItem(this.state.items[this.state.items.length - 1]);\n      }\n    }\n  }\n\n  /**\n   * @deprecated this is no longer necessary as focuszone has been removed\n   */\n  protected _shouldFocusZoneEnterInnerZone = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // If suggestions are shown const up/down keys control them, otherwise allow them through to control the focusZone.\n    if (this.state.suggestionsVisible) {\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.up:\n        case KeyCodes.down:\n          return true;\n      }\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.enter) {\n      return true;\n    }\n\n    return false;\n  };\n\n  protected getActiveDescendant() {\n    if (this.state.suggestionsLoading) {\n      return undefined;\n    }\n\n    const currentIndex = this.suggestionStore.currentIndex;\n\n    if (currentIndex < 0) {\n      // if the suggestions element has actions and the currentIndex does not point to a suggestion,\n      // return the action id\n      if (this.suggestionElement.current?.hasSuggestedAction()) {\n        return 'sug-selectedAction';\n      }\n\n      // If there are no suggestions and no action suggested, then return the ID for the no results found.\n      if (this.suggestionStore.suggestions.length === 0) {\n        return 'sug-noResultsFound';\n      }\n\n      return undefined;\n    } else {\n      return `sug-${currentIndex}`;\n    }\n  }\n\n  /** @deprecated use renderCustomAlert instead */\n  protected getSuggestionsAlert(suggestionAlertClassName: string = legacyStyles.screenReaderOnly) {\n    const currentIndex = this.suggestionStore.currentIndex;\n    if (this.props.enableSelectedSuggestionAlert) {\n      const selectedSuggestion =\n        currentIndex > -1 ? this.suggestionStore.getSuggestionAtIndex(this.suggestionStore.currentIndex) : undefined;\n      const selectedSuggestionAlertText = selectedSuggestion ? selectedSuggestion.ariaLabel : undefined;\n      // keeping the id/className here for legacy support\n      return (\n        <div id={this._ariaMap.selectedSuggestionAlert} className={suggestionAlertClassName}>\n          {`${selectedSuggestionAlertText} `}\n        </div>\n      );\n    }\n  }\n\n  protected renderCustomAlert(alertClassName: string = legacyStyles.screenReaderOnly) {\n    const { suggestionRemovedText = 'removed {0}' } = this.props;\n    let removedItemText = '';\n\n    if (this.state.selectionRemoved) {\n      const itemName = this._getTextFromItem(this.state.selectionRemoved, '');\n      removedItemText = format(suggestionRemovedText, itemName);\n    }\n\n    return (\n      <div className={alertClassName} id={this._ariaMap.selectedSuggestionAlert} aria-live=\"assertive\">\n        {\n          // eslint-disable-next-line deprecation/deprecation\n          this.getSuggestionsAlert(alertClassName)\n        }\n        {removedItemText}\n      </div>\n    );\n  }\n\n  // do not dismiss if the window resizes or scrolls within 100ms of opening\n  // this prevents the Android issue where pickers immediately dismiss on open, because the keyboard appears\n  private _preventDismissOnScrollOrResize(ev: Event) {\n    if (this._overrideScrollDismiss && (ev.type === 'scroll' || ev.type === 'resize')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /** If suggestions are still loading after a predefined amount of time, set state to show user alert */\n  private _startLoadTimer() {\n    this._async.setTimeout(() => {\n      if (this.state.suggestionsLoading) {\n        this.setState({ suggestionsExtendedLoading: true });\n      }\n    }, EXTENDED_LOAD_TIME);\n  }\n\n  /**\n   * Takes in the current updated value and either resolves it with the new suggestions\n   * or if updated value is undefined then it clears out currently suggested items\n   */\n  private _updateAndResolveValue(updatedValue: string | undefined, newSuggestions: T[]) {\n    if (updatedValue !== undefined) {\n      this.resolveNewValue(updatedValue, newSuggestions);\n    } else {\n      const maxSuggestionsCount = this.props.pickerSuggestionsProps?.resultsMaximumNumber;\n      this.suggestionStore.updateSuggestions(newSuggestions, -1, maxSuggestionsCount);\n      if (this.state.suggestionsLoading) {\n        this.setState({\n          suggestionsLoading: false,\n          suggestionsExtendedLoading: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If `selectedItems` is provided, this will act as a controlled component and it will not update its own state.\n   */\n  private _updateSelectedItems(items: T[]): void {\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to add or remove the items.\n      this.onChange(items);\n    } else {\n      this.setState({ items }, () => {\n        this._onSelectedItemsUpdated(items);\n      });\n    }\n  }\n\n  private _onSelectedItemsUpdated(items?: T[]): void {\n    this.onChange(items);\n  }\n\n  /**\n   * Suggestions are normally shown after the user updates text and the text\n   * is non-empty, but also when the user clicks on the input element.\n   * @returns True if suggestions should be shown.\n   */\n  private _getShowSuggestions(): boolean {\n    const areSuggestionsVisible =\n      this.input.current !== undefined &&\n      this.input.current !== null &&\n      this.input.current.inputElement === document.activeElement &&\n      this.input.current.value !== '';\n\n    return areSuggestionsVisible;\n  }\n\n  private _onResolveSuggestions = (updatedValue: string): void => {\n    const suggestions: T[] | PromiseLike<T[]> | null = this.props.onResolveSuggestions(updatedValue, this.state.items);\n\n    if (suggestions !== null) {\n      this.updateSuggestionsList(suggestions, updatedValue);\n    }\n  };\n\n  private _completeGenericSuggestion = (): void => {\n    if (\n      this.props.onValidateInput &&\n      this.input.current &&\n      (this.props.onValidateInput as any)(this.input.current.value) !== ValidationState.invalid &&\n      this.props.createGenericItem\n    ) {\n      const itemToConvert = this.props.createGenericItem(\n        this.input.current.value,\n        this.props.onValidateInput(this.input.current.value),\n      );\n      this.suggestionStore.createGenericSuggestion(itemToConvert);\n      this.completeSuggestion();\n    }\n  };\n\n  private _getTextFromItem(item: T, currentValue?: string): string {\n    if (this.props.getTextFromItem) {\n      return (this.props.getTextFromItem as any)(item, currentValue);\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * This should be called when the user does something other than use text entry to trigger suggestions.\n   *\n   */\n  private _userTriggeredSuggestions = () => {\n    if (!this.state.suggestionsVisible) {\n      const input = this.input.current ? this.input.current.value : '';\n      if (!input) {\n        this.onEmptyInputFocus();\n      } else {\n        if (this.suggestionStore.suggestions.length === 0) {\n          this._onResolveSuggestions(input);\n        } else {\n          this.setState({\n            isMostRecentlyUsedVisible: false,\n            suggestionsVisible: true,\n          });\n        }\n      }\n    }\n  };\n}\n\nexport class BasePickerListBelow<T, P extends IBasePickerProps<T>> extends BasePicker<T, P> {\n  public render(): JSX.Element {\n    const { suggestedDisplayValue, isFocused } = this.state;\n    const { className, inputProps, disabled, selectionAriaLabel, selectionRole = 'list', theme, styles } = this.props;\n\n    const suggestionsVisible = !!this.state.suggestionsVisible;\n\n    const suggestionsAvailable: string | undefined = suggestionsVisible ? this._ariaMap.suggestionList : undefined;\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from BasePicker class because it\n    // might be used by consumers who created custom pickers from extending from\n    // this base class and have not used the new 'styles' prop.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // for every other already existing picker variant (PeoplePicker, TagPicker)\n    // so that we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    const classNames: Partial<IProcessedStyleSet<IBasePickerStyles>> = styles\n      ? getClassNames(styles, {\n          theme,\n          className,\n          isFocused,\n          inputClassName: inputProps && inputProps.className,\n        })\n      : {\n          root: css('ms-BasePicker', legacyStyles.picker, className ? className : ''),\n          text: css(\n            'ms-BasePicker-text',\n            legacyStyles.pickerText,\n            this.state.isFocused && legacyStyles.inputFocused,\n            disabled && legacyStyles.inputDisabled,\n          ),\n          itemsWrapper: legacyStyles.pickerItems,\n          input: css('ms-BasePicker-input', legacyStyles.pickerInput, inputProps && inputProps.className),\n          screenReaderText: legacyStyles.screenReaderOnly,\n        };\n\n    const comboLabel = this.props['aria-label'] || inputProps?.['aria-label'];\n\n    return (\n      <div ref={this.root} onBlur={this.onBlur} onFocus={this.onFocus}>\n        <div className={classNames.root} onKeyDown={this.onKeyDown}>\n          {this.renderCustomAlert(classNames.screenReaderText)}\n          <span id={`${this._ariaMap.selectedItems}-label`} hidden>\n            {selectionAriaLabel || comboLabel}\n          </span>\n          <div className={classNames.text} aria-owns={suggestionsAvailable}>\n            <Autofill\n              {...(inputProps as any)}\n              className={classNames.input}\n              componentRef={this.input}\n              onFocus={this.onInputFocus}\n              onBlur={this.onInputBlur}\n              onClick={this.onClick}\n              onInputValueChange={this.onInputChange}\n              suggestedDisplayValue={suggestedDisplayValue}\n              aria-activedescendant={suggestionsVisible ? this.getActiveDescendant() : undefined}\n              aria-controls={suggestionsAvailable}\n              aria-expanded={suggestionsVisible}\n              aria-haspopup=\"listbox\"\n              aria-label={comboLabel}\n              aria-describedby={this.state.items.length > 0 ? this._ariaMap.selectedItems : undefined}\n              role=\"combobox\"\n              id={inputProps?.id ? inputProps.id : this._ariaMap.combobox}\n              disabled={disabled}\n              onInputChange={this.props.onInputChange}\n            />\n          </div>\n        </div>\n        {this.renderSuggestions()}\n        <SelectionZone selection={this.selection} selectionMode={SelectionMode.single}>\n          <div\n            id={this._ariaMap.selectedItems}\n            className=\"ms-BasePicker-selectedItems\" // just a className hook without any styles applied to it.\n            role={selectionRole}\n            aria-labelledby={`${this._ariaMap.selectedItems}-label`}\n          >\n            {this.renderItems()}\n          </div>\n        </SelectionZone>\n      </div>\n    );\n  }\n\n  protected onBackspace(ev: React.KeyboardEvent<HTMLElement>) {\n    // override the existing backspace method to not do anything because the list items appear below.\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}