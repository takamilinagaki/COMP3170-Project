{"ast":null,"code":"/**\n * Helper to find the index of an item within an array, using a callback to\n * determine the match.\n *\n * @public\n * @param array - Array to search.\n * @param cb - Callback which returns true on matches.\n * @param fromIndex - Optional index to start from (defaults to 0)\n */\nexport function findIndex(array, cb, fromIndex) {\n  if (fromIndex === void 0) {\n    fromIndex = 0;\n  }\n  var index = -1;\n  for (var i = fromIndex; array && i < array.length; i++) {\n    if (cb(array[i], i)) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n}\n/**\n * Helper to find the first item within an array that satisfies the callback.\n * @param array - Array to search\n * @param cb - Callback which returns true on matches\n */\nexport function find(array, cb) {\n  var index = findIndex(array, cb);\n  if (index < 0) {\n    return undefined;\n  }\n  return array[index];\n}\n/**\n * Creates an array of a given size and helper method to populate.\n *\n * @public\n * @param size - Size of array.\n * @param getItem - Callback to populate given cell index.\n */\nexport function createArray(size, getItem) {\n  var array = [];\n  for (var i = 0; i < size; i++) {\n    array.push(getItem(i));\n  }\n  return array;\n}\n/**\n * Convert the given array to a matrix with columnCount number\n * of columns.\n *\n * @public\n * @param items - The array to convert\n * @param columnCount - The number of columns for the resulting matrix\n * @returns A matrix of items\n */\nexport function toMatrix(items, columnCount) {\n  return items.reduce(function (rows, currentValue, index) {\n    if (index % columnCount === 0) {\n      rows.push([currentValue]);\n    } else {\n      rows[rows.length - 1].push(currentValue);\n    }\n    return rows;\n  }, []);\n}\n/**\n * Given an array, it returns a new array that does not contain the item at the given index.\n * @param array - The array to operate on\n * @param index - The index of the element to remove\n */\nexport function removeIndex(array, index) {\n  return array.filter(function (_, i) {\n    return index !== i;\n  });\n}\n/**\n * Given an array, this function returns a new array where the element at a given index has been replaced.\n * @param array - The array to operate on\n * @param newElement - The element that will be placed in the new array\n * @param index - The index of the element that should be replaced\n */\nexport function replaceElement(array, newElement, index) {\n  var copy = array.slice();\n  copy[index] = newElement;\n  return copy;\n}\n/**\n * Given an array, this function returns a new array where an element has been inserted at the given index.\n * @param array - The array to operate on\n * @param index - The index where an element should be inserted\n * @param itemToAdd - The element to insert\n */\nexport function addElementAtIndex(array, index, itemToAdd) {\n  var copy = array.slice();\n  copy.splice(index, 0, itemToAdd);\n  return copy;\n}\n/**\n * Given an array where each element is of type T or T[], flatten it into an array of T\n * @param array - The array where each element can optionally also be an array\n */\nexport function flatten(array) {\n  var result = [];\n  array.forEach(function (item) {\n    return result = result.concat(item);\n  });\n  return result;\n}\n/**\n * Returns a boolean indicating if the two given arrays are equal in length and values.\n *\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.\n */\nexport function arraysEqual(array1, array2) {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  for (var i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["findIndex","array","cb","fromIndex","index","i","length","find","undefined","createArray","size","getItem","push","toMatrix","items","columnCount","reduce","rows","currentValue","removeIndex","filter","_","replaceElement","newElement","copy","slice","addElementAtIndex","itemToAdd","splice","flatten","result","forEach","item","concat","arraysEqual","array1","array2"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/src/array.ts"],"sourcesContent":["/**\n * Helper to find the index of an item within an array, using a callback to\n * determine the match.\n *\n * @public\n * @param array - Array to search.\n * @param cb - Callback which returns true on matches.\n * @param fromIndex - Optional index to start from (defaults to 0)\n */\nexport function findIndex<T>(array: T[], cb: (item: T, index: number) => boolean, fromIndex: number = 0): number {\n  let index = -1;\n\n  for (let i = fromIndex; array && i < array.length; i++) {\n    if (cb(array[i], i)) {\n      index = i;\n      break;\n    }\n  }\n\n  return index;\n}\n\n/**\n * Helper to find the first item within an array that satisfies the callback.\n * @param array - Array to search\n * @param cb - Callback which returns true on matches\n */\nexport function find<T>(array: T[], cb: (item: T, index: number) => boolean): T | undefined {\n  let index = findIndex(array, cb);\n\n  if (index < 0) {\n    return undefined;\n  }\n\n  return array[index];\n}\n\n/**\n * Creates an array of a given size and helper method to populate.\n *\n * @public\n * @param size - Size of array.\n * @param getItem - Callback to populate given cell index.\n */\nexport function createArray<T>(size: number, getItem: (index: number) => T): T[] {\n  let array: T[] = [];\n\n  for (let i = 0; i < size; i++) {\n    array.push(getItem(i));\n  }\n\n  return array;\n}\n\n/**\n * Convert the given array to a matrix with columnCount number\n * of columns.\n *\n * @public\n * @param items - The array to convert\n * @param columnCount - The number of columns for the resulting matrix\n * @returns A matrix of items\n */\nexport function toMatrix<T>(items: T[], columnCount: number): T[][] {\n  return items.reduce((rows: T[][], currentValue: T, index: number) => {\n    if (index % columnCount === 0) {\n      rows.push([currentValue]);\n    } else {\n      rows[rows.length - 1].push(currentValue);\n    }\n    return rows;\n  }, [] as T[][]);\n}\n\n/**\n * Given an array, it returns a new array that does not contain the item at the given index.\n * @param array - The array to operate on\n * @param index - The index of the element to remove\n */\nexport function removeIndex<T>(array: T[], index: number): T[] {\n  return array.filter((_: T, i: number) => index !== i);\n}\n\n/**\n * Given an array, this function returns a new array where the element at a given index has been replaced.\n * @param array - The array to operate on\n * @param newElement - The element that will be placed in the new array\n * @param index - The index of the element that should be replaced\n */\nexport function replaceElement<T>(array: T[], newElement: T, index: number): T[] {\n  const copy = array.slice();\n  copy[index] = newElement;\n  return copy;\n}\n\n/**\n * Given an array, this function returns a new array where an element has been inserted at the given index.\n * @param array - The array to operate on\n * @param index - The index where an element should be inserted\n * @param itemToAdd - The element to insert\n */\nexport function addElementAtIndex<T>(array: T[], index: number, itemToAdd: T): T[] {\n  const copy = array.slice();\n  copy.splice(index, 0, itemToAdd);\n  return copy;\n}\n\n/**\n * Given an array where each element is of type T or T[], flatten it into an array of T\n * @param array - The array where each element can optionally also be an array\n */\nexport function flatten<T>(array: (T | T[])[]): T[] {\n  let result: T[] = [];\n  array.forEach((item: T | T[]): T[] => (result = result.concat(item)));\n  return result;\n}\n\n/**\n * Returns a boolean indicating if the two given arrays are equal in length and values.\n *\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @returns True if the arrays are the same length and have the same values in the same positions, false otherwise.\n */\nexport function arraysEqual<T>(array1: T[], array2: T[]): boolean {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  for (let i = 0; i < array1.length; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}