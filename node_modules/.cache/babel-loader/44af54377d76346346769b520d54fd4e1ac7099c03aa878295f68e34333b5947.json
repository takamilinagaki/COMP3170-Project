{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, getNativeProps, imgProperties } from '../../Utilities';\nimport { ImageCoverStyle, ImageFit, ImageLoadState } from './Image.types';\nimport { useIsomorphicLayoutEffect, useMergedRefs } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar SVG_REGEX = /\\.svg$/i;\nvar KEY_PREFIX = 'fabricImage';\nfunction useLoadState(props, imageElement) {\n  var onLoadingStateChange = props.onLoadingStateChange,\n    onLoad = props.onLoad,\n    onError = props.onError,\n    src = props.src;\n  var _a = React.useState(ImageLoadState.notLoaded),\n    loadState = _a[0],\n    setLoadState = _a[1];\n  useIsomorphicLayoutEffect(function () {\n    // If the src property changes, reset the load state\n    // (does nothing if the load state is already notLoaded)\n    setLoadState(ImageLoadState.notLoaded);\n  }, [src]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- intended to run every render\n  React.useEffect(function () {\n    if (loadState === ImageLoadState.notLoaded) {\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n      // .complete, because .complete will also be set to true if the image breaks. However,\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n      // to checking .complete for these images.\n      var isLoaded = imageElement.current ? src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0 || imageElement.current.complete && SVG_REGEX.test(src) : false;\n      if (isLoaded) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    }\n  });\n  React.useEffect(function () {\n    onLoadingStateChange === null || onLoadingStateChange === void 0 ? void 0 : onLoadingStateChange(loadState);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when loadState changes\n  }, [loadState]);\n  var onImageLoaded = React.useCallback(function (ev) {\n    onLoad === null || onLoad === void 0 ? void 0 : onLoad(ev);\n    if (src) {\n      setLoadState(ImageLoadState.loaded);\n    }\n  }, [src, onLoad]);\n  var onImageError = React.useCallback(function (ev) {\n    onError === null || onError === void 0 ? void 0 : onError(ev);\n    setLoadState(ImageLoadState.error);\n  }, [onError]);\n  return [loadState, onImageLoaded, onImageError];\n}\nexport var ImageBase = React.forwardRef(function (props, forwardedRef) {\n  var frameElement = React.useRef();\n  var imageElement = React.useRef();\n  var _a = useLoadState(props, imageElement),\n    loadState = _a[0],\n    onImageLoaded = _a[1],\n    onImageError = _a[2];\n  var imageProps = getNativeProps(props, imgProperties, ['width', 'height']);\n  var src = props.src,\n    alt = props.alt,\n    width = props.width,\n    height = props.height,\n    _b = props.shouldFadeIn,\n    shouldFadeIn = _b === void 0 ? true : _b,\n    shouldStartVisible = props.shouldStartVisible,\n    className = props.className,\n    imageFit = props.imageFit,\n    role = props.role,\n    maximizeFrame = props.maximizeFrame,\n    styles = props.styles,\n    theme = props.theme,\n    loading = props.loading;\n  var coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    width: width,\n    height: height,\n    maximizeFrame: maximizeFrame,\n    shouldFadeIn: shouldFadeIn,\n    shouldStartVisible: shouldStartVisible,\n    isLoaded: loadState === ImageLoadState.loaded || loadState === ImageLoadState.notLoaded && props.shouldStartVisible,\n    isLandscape: coverStyle === ImageCoverStyle.landscape,\n    isCenter: imageFit === ImageFit.center,\n    isCenterContain: imageFit === ImageFit.centerContain,\n    isCenterCover: imageFit === ImageFit.centerCover,\n    isContain: imageFit === ImageFit.contain,\n    isCover: imageFit === ImageFit.cover,\n    isNone: imageFit === ImageFit.none,\n    isError: loadState === ImageLoadState.error,\n    isNotImageFit: imageFit === undefined\n  });\n  // If image dimensions aren't specified, the natural size of the image is used.\n  return React.createElement(\"div\", {\n    className: classNames.root,\n    style: {\n      width: width,\n      height: height\n    },\n    ref: frameElement\n  }, React.createElement(\"img\", __assign({}, imageProps, {\n    onLoad: onImageLoaded,\n    onError: onImageError,\n    key: KEY_PREFIX + props.src || '',\n    className: classNames.image,\n    ref: useMergedRefs(imageElement, forwardedRef),\n    src: src,\n    alt: alt,\n    role: role,\n    loading: loading\n  })));\n});\nImageBase.displayName = 'ImageBase';\nfunction useCoverStyle(props, loadState, imageElement, frameElement) {\n  var previousLoadState = React.useRef(loadState);\n  var coverStyle = React.useRef();\n  if (coverStyle === undefined || previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded) {\n    coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);\n  }\n  previousLoadState.current = loadState;\n  return coverStyle.current;\n}\nfunction computeCoverStyle(props, loadState, imageElement, frameElement) {\n  var imageFit = props.imageFit,\n    width = props.width,\n    height = props.height;\n  // Do not compute cover style if it was already specified in props\n  if (props.coverStyle !== undefined) {\n    return props.coverStyle;\n  } else if (loadState === ImageLoadState.loaded && (imageFit === ImageFit.cover || imageFit === ImageFit.contain || imageFit === ImageFit.centerContain || imageFit === ImageFit.centerCover) && imageElement.current && frameElement.current) {\n    // Determine the desired ratio using the width and height props.\n    // If those props aren't available, measure measure the frame.\n    var desiredRatio = void 0;\n    if (typeof width === 'number' && typeof height === 'number' && imageFit !== ImageFit.centerContain && imageFit !== ImageFit.centerCover) {\n      desiredRatio = width / height;\n    } else {\n      desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;\n    }\n    // Examine the source image to determine its original ratio.\n    var naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;\n    // Should we crop from the top or the sides?\n    if (naturalRatio > desiredRatio) {\n      return ImageCoverStyle.landscape;\n    }\n  }\n  return ImageCoverStyle.portrait;\n}","map":{"version":3,"names":["React","classNamesFunction","getNativeProps","imgProperties","ImageCoverStyle","ImageFit","ImageLoadState","useIsomorphicLayoutEffect","useMergedRefs","getClassNames","SVG_REGEX","KEY_PREFIX","useLoadState","props","imageElement","onLoadingStateChange","onLoad","onError","src","_a","useState","notLoaded","loadState","setLoadState","useEffect","isLoaded","current","naturalWidth","naturalHeight","complete","test","loaded","onImageLoaded","useCallback","ev","onImageError","error","ImageBase","forwardRef","forwardedRef","frameElement","useRef","imageProps","alt","width","height","_b","shouldFadeIn","shouldStartVisible","className","imageFit","role","maximizeFrame","styles","theme","loading","coverStyle","useCoverStyle","classNames","isLandscape","landscape","isCenter","center","isCenterContain","centerContain","isCenterCover","centerCover","isContain","contain","isCover","cover","isNone","none","isError","isNotImageFit","undefined","createElement","root","style","ref","__assign","key","image","displayName","previousLoadState","computeCoverStyle","desiredRatio","clientWidth","clientHeight","naturalRatio","portrait"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/Image/Image.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNamesFunction, getNativeProps, imgProperties } from '../../Utilities';\nimport { ImageCoverStyle, ImageFit, ImageLoadState } from './Image.types';\nimport { useIsomorphicLayoutEffect, useMergedRefs } from '@fluentui/react-hooks';\nimport type { IImageProps, IImageStyleProps, IImageStyles } from './Image.types';\n\nconst getClassNames = classNamesFunction<IImageStyleProps, IImageStyles>();\n\nexport interface IImageState {\n  loadState?: ImageLoadState;\n}\n\nconst SVG_REGEX = /\\.svg$/i;\nconst KEY_PREFIX = 'fabricImage';\n\nfunction useLoadState(\n  props: IImageProps,\n  imageElement: React.RefObject<HTMLImageElement>,\n): readonly [\n  ImageLoadState,\n  /* onImageLoad */ (ev: React.SyntheticEvent<HTMLImageElement>) => void,\n  /* onImageError */ (ev: React.SyntheticEvent<HTMLImageElement>) => void,\n] {\n  const { onLoadingStateChange, onLoad, onError, src } = props;\n\n  const [loadState, setLoadState] = React.useState<ImageLoadState>(ImageLoadState.notLoaded);\n\n  useIsomorphicLayoutEffect(() => {\n    // If the src property changes, reset the load state\n    // (does nothing if the load state is already notLoaded)\n    setLoadState(ImageLoadState.notLoaded);\n  }, [src]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- intended to run every render\n  React.useEffect(() => {\n    if (loadState === ImageLoadState.notLoaded) {\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n      // .complete, because .complete will also be set to true if the image breaks. However,\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n      // to checking .complete for these images.\n      const isLoaded: boolean = imageElement.current\n        ? (src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0) ||\n          (imageElement.current.complete && SVG_REGEX.test(src!))\n        : false;\n\n      if (isLoaded) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    }\n  });\n\n  React.useEffect(() => {\n    onLoadingStateChange?.(loadState);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when loadState changes\n  }, [loadState]);\n\n  const onImageLoaded = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLImageElement>) => {\n      onLoad?.(ev);\n      if (src) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    },\n    [src, onLoad],\n  );\n\n  const onImageError = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLImageElement>) => {\n      onError?.(ev);\n      setLoadState(ImageLoadState.error);\n    },\n    [onError],\n  );\n\n  return [loadState, onImageLoaded, onImageError] as const;\n}\n\nexport const ImageBase: React.FunctionComponent<IImageProps> = React.forwardRef<HTMLImageElement, IImageProps>(\n  (props, forwardedRef) => {\n    const frameElement = React.useRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>;\n    const imageElement = React.useRef<HTMLImageElement>() as React.RefObject<HTMLImageElement>;\n    const [loadState, onImageLoaded, onImageError] = useLoadState(props, imageElement);\n\n    const imageProps = getNativeProps<React.ImgHTMLAttributes<HTMLImageElement>>(props, imgProperties, [\n      'width',\n      'height',\n    ]);\n    const {\n      src,\n      alt,\n      width,\n      height,\n      shouldFadeIn = true,\n      shouldStartVisible,\n      className,\n      imageFit,\n      role,\n      maximizeFrame,\n      styles,\n      theme,\n      loading,\n    } = props;\n    const coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      width,\n      height,\n      maximizeFrame,\n      shouldFadeIn,\n      shouldStartVisible,\n      isLoaded:\n        loadState === ImageLoadState.loaded || (loadState === ImageLoadState.notLoaded && props.shouldStartVisible),\n      isLandscape: coverStyle === ImageCoverStyle.landscape,\n      isCenter: imageFit === ImageFit.center,\n      isCenterContain: imageFit === ImageFit.centerContain,\n      isCenterCover: imageFit === ImageFit.centerCover,\n      isContain: imageFit === ImageFit.contain,\n      isCover: imageFit === ImageFit.cover,\n      isNone: imageFit === ImageFit.none,\n      isError: loadState === ImageLoadState.error,\n      isNotImageFit: imageFit === undefined,\n    });\n\n    // If image dimensions aren't specified, the natural size of the image is used.\n    return (\n      <div className={classNames.root} style={{ width, height }} ref={frameElement}>\n        <img\n          {...imageProps}\n          onLoad={onImageLoaded}\n          onError={onImageError}\n          key={KEY_PREFIX + props.src || ''}\n          className={classNames.image}\n          ref={useMergedRefs(imageElement, forwardedRef)}\n          src={src}\n          alt={alt}\n          role={role}\n          loading={loading}\n        />\n      </div>\n    );\n  },\n);\nImageBase.displayName = 'ImageBase';\n\nfunction useCoverStyle(\n  props: IImageProps,\n  loadState: ImageLoadState,\n  imageElement: React.RefObject<HTMLImageElement>,\n  frameElement: React.RefObject<HTMLDivElement>,\n) {\n  const previousLoadState = React.useRef(loadState);\n  const coverStyle = React.useRef<ImageCoverStyle | undefined>();\n\n  if (\n    coverStyle === undefined ||\n    (previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded)\n  ) {\n    coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);\n  }\n\n  previousLoadState.current = loadState;\n\n  return coverStyle.current!;\n}\n\nfunction computeCoverStyle(\n  props: IImageProps,\n  loadState: ImageLoadState,\n  imageElement: React.RefObject<HTMLImageElement>,\n  frameElement: React.RefObject<HTMLDivElement>,\n): ImageCoverStyle {\n  const { imageFit, width, height } = props;\n\n  // Do not compute cover style if it was already specified in props\n  if (props.coverStyle !== undefined) {\n    return props.coverStyle;\n  } else if (\n    loadState === ImageLoadState.loaded &&\n    (imageFit === ImageFit.cover ||\n      imageFit === ImageFit.contain ||\n      imageFit === ImageFit.centerContain ||\n      imageFit === ImageFit.centerCover) &&\n    imageElement.current &&\n    frameElement.current\n  ) {\n    // Determine the desired ratio using the width and height props.\n    // If those props aren't available, measure measure the frame.\n    let desiredRatio;\n    if (\n      typeof width === 'number' &&\n      typeof height === 'number' &&\n      imageFit !== ImageFit.centerContain &&\n      imageFit !== ImageFit.centerCover\n    ) {\n      desiredRatio = width / height;\n    } else {\n      desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;\n    }\n\n    // Examine the source image to determine its original ratio.\n    const naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;\n\n    // Should we crop from the top or the sides?\n    if (naturalRatio > desiredRatio) {\n      return ImageCoverStyle.landscape;\n    }\n  }\n  return ImageCoverStyle.portrait;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}