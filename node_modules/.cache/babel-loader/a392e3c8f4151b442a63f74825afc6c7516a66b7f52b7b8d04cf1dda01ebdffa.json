{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, css } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { DetailsList } from './DetailsList';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType } from '../../Shimmer';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nvar getClassNames = classNamesFunction();\nvar SHIMMER_INITIAL_ITEMS = 10;\nvar DEFAULT_SHIMMER_HEIGHT = 7;\nvar SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\nvar ShimmeredDetailsListBase = /** @class */function (_super) {\n  __extends(ShimmeredDetailsListBase, _super);\n  function ShimmeredDetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._onRenderShimmerPlaceholder = function (index, rowProps) {\n      var onRenderCustomPlaceholder = _this.props.onRenderCustomPlaceholder;\n      var placeholderElements = onRenderCustomPlaceholder ? onRenderCustomPlaceholder(rowProps, index, _this._renderDefaultShimmerPlaceholder) : _this._renderDefaultShimmerPlaceholder(rowProps);\n      return React.createElement(Shimmer, {\n        customElementsGroup: placeholderElements\n      });\n    };\n    _this._renderDefaultShimmerPlaceholder = function (rowProps) {\n      var columns = rowProps.columns,\n        compact = rowProps.compact,\n        selectionMode = rowProps.selectionMode,\n        checkboxVisibility = rowProps.checkboxVisibility,\n        _a = rowProps.cellStyleProps,\n        cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n      var rowHeight = DEFAULT_ROW_HEIGHTS.rowHeight,\n        compactRowHeight = DEFAULT_ROW_HEIGHTS.compactRowHeight;\n      // 1px to take into account the border-bottom of DetailsRow.\n      var gapHeight = compact ? compactRowHeight : rowHeight + 1;\n      var shimmerElementsRow = [];\n      var showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n      if (showCheckbox) {\n        shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n          key: 'checkboxGap',\n          shimmerElements: [{\n            type: ShimmerElementType.gap,\n            width: '40px',\n            height: gapHeight\n          }]\n        }));\n      }\n      columns.forEach(function (column, columnIdx) {\n        var shimmerElements = [];\n        var groupWidth = cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + column.calculatedWidth + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: cellStyleProps.cellLeftPadding,\n          height: gapHeight\n        });\n        if (column.isIconOnly) {\n          shimmerElements.push({\n            type: ShimmerElementType.line,\n            width: column.calculatedWidth,\n            height: column.calculatedWidth\n          });\n          shimmerElements.push({\n            type: ShimmerElementType.gap,\n            width: cellStyleProps.cellRightPadding,\n            height: gapHeight\n          });\n        } else {\n          shimmerElements.push({\n            type: ShimmerElementType.line,\n            width: column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n            height: DEFAULT_SHIMMER_HEIGHT\n          });\n          shimmerElements.push({\n            type: ShimmerElementType.gap,\n            width: cellStyleProps.cellRightPadding + (column.calculatedWidth - column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n            height: gapHeight\n          });\n        }\n        shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n          key: columnIdx,\n          width: \"\".concat(groupWidth, \"px\"),\n          shimmerElements: shimmerElements\n        }));\n      });\n      // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave\n      // until the column resizing logic is done.\n      shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n        key: 'endGap',\n        width: '100%',\n        shimmerElements: [{\n          type: ShimmerElementType.gap,\n          width: '100%',\n          height: gapHeight\n        }]\n      }));\n      return React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        }\n      }, shimmerElementsRow);\n    };\n    _this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n    return _this;\n  }\n  ShimmeredDetailsListBase.prototype.render = function () {\n    var _a = this.props,\n      detailsListStyles = _a.detailsListStyles,\n      enableShimmer = _a.enableShimmer,\n      items = _a.items,\n      listProps = _a.listProps,\n      onRenderCustomPlaceholder = _a.onRenderCustomPlaceholder,\n      removeFadingOverlay = _a.removeFadingOverlay,\n      shimmerLines = _a.shimmerLines,\n      styles = _a.styles,\n      theme = _a.theme,\n      ariaLabelForGrid = _a.ariaLabelForGrid,\n      ariaLabelForShimmer = _a.ariaLabelForShimmer,\n      restProps = __rest(_a, [\"detailsListStyles\", \"enableShimmer\", \"items\", \"listProps\", \"onRenderCustomPlaceholder\", \"removeFadingOverlay\", \"shimmerLines\", \"styles\", \"theme\", \"ariaLabelForGrid\", \"ariaLabelForShimmer\"]);\n    var listClassName = listProps && listProps.className;\n    this._classNames = getClassNames(styles, {\n      theme: theme\n    });\n    var newListProps = __assign(__assign({}, listProps), {\n      // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on\n      // and the overlay is not disabled by `removeFadingOverlay` prop.\n      className: enableShimmer && !removeFadingOverlay ? css(this._classNames.root, listClassName) : listClassName\n    });\n    return React.createElement(DetailsList, __assign({}, restProps, {\n      styles: detailsListStyles,\n      items: enableShimmer ? this._shimmerItems : items,\n      isPlaceholderData: enableShimmer,\n      ariaLabelForGrid: enableShimmer && ariaLabelForShimmer || ariaLabelForGrid,\n      onRenderMissingItem: this._onRenderShimmerPlaceholder,\n      listProps: newListProps\n    }));\n  };\n  return ShimmeredDetailsListBase;\n}(React.Component);\nexport { ShimmeredDetailsListBase };","map":{"version":3,"names":["React","classNamesFunction","css","SelectionMode","DetailsList","Shimmer","ShimmerElementsGroup","ShimmerElementType","CheckboxVisibility","DEFAULT_CELL_STYLE_PROPS","DEFAULT_ROW_HEIGHTS","getClassNames","SHIMMER_INITIAL_ITEMS","DEFAULT_SHIMMER_HEIGHT","SHIMMER_LINE_VS_CELL_WIDTH_RATIO","ShimmeredDetailsListBase","_super","__extends","props","_this","call","_onRenderShimmerPlaceholder","index","rowProps","onRenderCustomPlaceholder","placeholderElements","_renderDefaultShimmerPlaceholder","createElement","customElementsGroup","columns","compact","selectionMode","checkboxVisibility","_a","cellStyleProps","rowHeight","compactRowHeight","gapHeight","shimmerElementsRow","showCheckbox","none","hidden","push","key","shimmerElements","type","gap","width","height","forEach","column","columnIdx","groupWidth","cellLeftPadding","cellRightPadding","calculatedWidth","isPadded","cellExtraRightPadding","isIconOnly","line","concat","style","display","_shimmerItems","shimmerLines","Array","prototype","render","detailsListStyles","enableShimmer","items","listProps","removeFadingOverlay","styles","theme","ariaLabelForGrid","ariaLabelForShimmer","restProps","__rest","listClassName","className","_classNames","newListProps","__assign","root","isPlaceholderData","onRenderMissingItem","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/DetailsList/ShimmeredDetailsList.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { classNamesFunction, css } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { DetailsList } from './DetailsList';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType } from '../../Shimmer';\nimport { CheckboxVisibility } from './DetailsList.types';\n\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDetailsRowProps } from './DetailsRow.types';\nimport type { IShimmerElement } from '../../Shimmer';\nimport type {\n  IShimmeredDetailsListProps,\n  IShimmeredDetailsListStyleProps,\n  IShimmeredDetailsListStyles,\n} from './ShimmeredDetailsList.types';\n\nconst getClassNames = classNamesFunction<IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles>();\n\nconst SHIMMER_INITIAL_ITEMS = 10;\nconst DEFAULT_SHIMMER_HEIGHT = 7;\nconst SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\n\nexport class ShimmeredDetailsListBase extends React.Component<IShimmeredDetailsListProps, {}> {\n  private _shimmerItems: null[];\n  private _classNames: IProcessedStyleSet<IShimmeredDetailsListStyles>;\n\n  constructor(props: IShimmeredDetailsListProps) {\n    super(props);\n\n    this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n  }\n\n  public render(): JSX.Element {\n    const {\n      detailsListStyles,\n      enableShimmer,\n      items,\n      listProps,\n      onRenderCustomPlaceholder,\n      removeFadingOverlay,\n      shimmerLines,\n      styles,\n      theme,\n      ariaLabelForGrid,\n      ariaLabelForShimmer,\n      ...restProps\n    } = this.props;\n\n    const listClassName = listProps && listProps.className;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n    });\n\n    const newListProps = {\n      ...listProps,\n      // Adds to the optional listProp className a fading out overlay className only when `enableShimmer` toggled on\n      // and the overlay is not disabled by `removeFadingOverlay` prop.\n      className: enableShimmer && !removeFadingOverlay ? css(this._classNames.root, listClassName) : listClassName,\n    };\n\n    return (\n      <DetailsList\n        {...restProps}\n        styles={detailsListStyles}\n        items={enableShimmer ? this._shimmerItems : items}\n        isPlaceholderData={enableShimmer}\n        ariaLabelForGrid={(enableShimmer && ariaLabelForShimmer) || ariaLabelForGrid}\n        onRenderMissingItem={this._onRenderShimmerPlaceholder}\n        listProps={newListProps}\n      />\n    );\n  }\n\n  private _onRenderShimmerPlaceholder = (index: number, rowProps: IDetailsRowProps): React.ReactNode => {\n    const { onRenderCustomPlaceholder } = this.props;\n\n    const placeholderElements: React.ReactNode = onRenderCustomPlaceholder\n      ? onRenderCustomPlaceholder(rowProps, index, this._renderDefaultShimmerPlaceholder)\n      : this._renderDefaultShimmerPlaceholder(rowProps);\n\n    return <Shimmer customElementsGroup={placeholderElements} />;\n  };\n\n  private _renderDefaultShimmerPlaceholder = (rowProps: IDetailsRowProps): React.ReactNode => {\n    const { columns, compact, selectionMode, checkboxVisibility, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = rowProps;\n\n    const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n    // 1px to take into account the border-bottom of DetailsRow.\n    const gapHeight: number = compact ? compactRowHeight : rowHeight + 1;\n\n    const shimmerElementsRow: JSX.Element[] = [];\n\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n\n    if (showCheckbox) {\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup\n          key={'checkboxGap'}\n          shimmerElements={[{ type: ShimmerElementType.gap, width: '40px', height: gapHeight }]}\n        />,\n      );\n    }\n\n    columns.forEach((column, columnIdx) => {\n      const shimmerElements: IShimmerElement[] = [];\n      const groupWidth: number =\n        cellStyleProps.cellLeftPadding +\n        cellStyleProps.cellRightPadding +\n        column.calculatedWidth! +\n        (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      shimmerElements.push({\n        type: ShimmerElementType.gap,\n        width: cellStyleProps.cellLeftPadding,\n        height: gapHeight,\n      });\n\n      if (column.isIconOnly) {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth!,\n          height: column.calculatedWidth!,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: cellStyleProps.cellRightPadding,\n          height: gapHeight,\n        });\n      } else {\n        shimmerElements.push({\n          type: ShimmerElementType.line,\n          width: column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n          height: DEFAULT_SHIMMER_HEIGHT,\n        });\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width:\n            cellStyleProps.cellRightPadding +\n            (column.calculatedWidth! - column.calculatedWidth! * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          height: gapHeight,\n        });\n      }\n      shimmerElementsRow.push(\n        <ShimmerElementsGroup key={columnIdx} width={`${groupWidth}px`} shimmerElements={shimmerElements} />,\n      );\n    });\n    // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave\n    // until the column resizing logic is done.\n    shimmerElementsRow.push(\n      <ShimmerElementsGroup\n        key={'endGap'}\n        width={'100%'}\n        shimmerElements={[{ type: ShimmerElementType.gap, width: '100%', height: gapHeight }]}\n      />,\n    );\n    return <div style={{ display: 'flex' }}>{shimmerElementsRow}</div>;\n  };\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,kBAAkB,EAAEC,GAAG,QAAQ,iBAAiB;AACzD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,OAAO,EAAEC,oBAAoB,EAAEC,kBAAkB,QAAQ,eAAe;AACjF,SAASC,kBAAkB,QAAQ,qBAAqB;AAExD,SAASC,wBAAwB,EAAEC,mBAAmB,QAAQ,qBAAqB;AAUnF,IAAMC,aAAa,GAAGV,kBAAkB,EAAgE;AAExG,IAAMW,qBAAqB,GAAG,EAAE;AAChC,IAAMC,sBAAsB,GAAG,CAAC;AAChC,IAAMC,gCAAgC,GAAG,IAAI;AAE7C,IAAAC,wBAAA,0BAAAC,MAAA;EAA8CC,SAAA,CAAAF,wBAAA,EAAAC,MAAA;EAI5C,SAAAD,yBAAYG,KAAiC;IAA7C,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAMF,KAAK,CAAC;IA+CNC,KAAA,CAAAE,2BAA2B,GAAG,UAACC,KAAa,EAAEC,QAA0B;MACtE,IAAAC,yBAAyB,GAAKL,KAAI,CAACD,KAAK,CAAAM,yBAAf;MAEjC,IAAMC,mBAAmB,GAAoBD,yBAAyB,GAClEA,yBAAyB,CAACD,QAAQ,EAAED,KAAK,EAAEH,KAAI,CAACO,gCAAgC,CAAC,GACjFP,KAAI,CAACO,gCAAgC,CAACH,QAAQ,CAAC;MAEnD,OAAOvB,KAAA,CAAA2B,aAAA,CAACtB,OAAO;QAACuB,mBAAmB,EAAEH;MAAmB,EAAI;IAC9D,CAAC;IAEON,KAAA,CAAAO,gCAAgC,GAAG,UAACH,QAA0B;MAC5D,IAAAM,OAAO,GAA4FN,QAAQ,CAAAM,OAApG;QAAEC,OAAO,GAAmFP,QAAQ,CAAAO,OAA3F;QAAEC,aAAa,GAAoER,QAAQ,CAAAQ,aAA5E;QAAEC,kBAAkB,GAAgDT,QAAQ,CAAAS,kBAAxD;QAAEC,EAAA,GAA8CV,QAAQ,CAAAW,cAAb;QAAzCA,cAAc,GAAAD,EAAA,cAAGxB,wBAAwB,GAAAwB,EAAA;MAE9F,IAAAE,SAAS,GAAuBzB,mBAAmB,CAAAyB,SAA1C;QAAEC,gBAAgB,GAAK1B,mBAAmB,CAAA0B,gBAAxB;MACnC;MACA,IAAMC,SAAS,GAAWP,OAAO,GAAGM,gBAAgB,GAAGD,SAAS,GAAG,CAAC;MAEpE,IAAMG,kBAAkB,GAAkB,EAAE;MAE5C,IAAMC,YAAY,GAAGR,aAAa,KAAK5B,aAAa,CAACqC,IAAI,IAAIR,kBAAkB,KAAKxB,kBAAkB,CAACiC,MAAM;MAE7G,IAAIF,YAAY,EAAE;QAChBD,kBAAkB,CAACI,IAAI,CACrB1C,KAAA,CAAA2B,aAAA,CAACrB,oBAAoB;UACnBqC,GAAG,EAAE,aAAa;UAClBC,eAAe,EAAE,CAAC;YAAEC,IAAI,EAAEtC,kBAAkB,CAACuC,GAAG;YAAEC,KAAK,EAAE,MAAM;YAAEC,MAAM,EAAEX;UAAS,CAAE;QAAC,EACrF,CACH;;MAGHR,OAAO,CAACoB,OAAO,CAAC,UAACC,MAAM,EAAEC,SAAS;QAChC,IAAMP,eAAe,GAAsB,EAAE;QAC7C,IAAMQ,UAAU,GACdlB,cAAc,CAACmB,eAAe,GAC9BnB,cAAc,CAACoB,gBAAgB,GAC/BJ,MAAM,CAACK,eAAgB,IACtBL,MAAM,CAACM,QAAQ,GAAGtB,cAAc,CAACuB,qBAAqB,GAAG,CAAC,CAAC;QAE9Db,eAAe,CAACF,IAAI,CAAC;UACnBG,IAAI,EAAEtC,kBAAkB,CAACuC,GAAG;UAC5BC,KAAK,EAAEb,cAAc,CAACmB,eAAe;UACrCL,MAAM,EAAEX;SACT,CAAC;QAEF,IAAIa,MAAM,CAACQ,UAAU,EAAE;UACrBd,eAAe,CAACF,IAAI,CAAC;YACnBG,IAAI,EAAEtC,kBAAkB,CAACoD,IAAI;YAC7BZ,KAAK,EAAEG,MAAM,CAACK,eAAgB;YAC9BP,MAAM,EAAEE,MAAM,CAACK;WAChB,CAAC;UACFX,eAAe,CAACF,IAAI,CAAC;YACnBG,IAAI,EAAEtC,kBAAkB,CAACuC,GAAG;YAC5BC,KAAK,EAAEb,cAAc,CAACoB,gBAAgB;YACtCN,MAAM,EAAEX;WACT,CAAC;SACH,MAAM;UACLO,eAAe,CAACF,IAAI,CAAC;YACnBG,IAAI,EAAEtC,kBAAkB,CAACoD,IAAI;YAC7BZ,KAAK,EAAEG,MAAM,CAACK,eAAgB,GAAGzC,gCAAgC;YACjEkC,MAAM,EAAEnC;WACT,CAAC;UACF+B,eAAe,CAACF,IAAI,CAAC;YACnBG,IAAI,EAAEtC,kBAAkB,CAACuC,GAAG;YAC5BC,KAAK,EACHb,cAAc,CAACoB,gBAAgB,IAC9BJ,MAAM,CAACK,eAAgB,GAAGL,MAAM,CAACK,eAAgB,GAAGzC,gCAAgC,CAAC,IACrFoC,MAAM,CAACM,QAAQ,GAAGtB,cAAc,CAACuB,qBAAqB,GAAG,CAAC,CAAC;YAC9DT,MAAM,EAAEX;WACT,CAAC;;QAEJC,kBAAkB,CAACI,IAAI,CACrB1C,KAAA,CAAA2B,aAAA,CAACrB,oBAAoB;UAACqC,GAAG,EAAEQ,SAAS;UAAEJ,KAAK,EAAE,GAAAa,MAAA,CAAGR,UAAU,OAAI;UAAER,eAAe,EAAEA;QAAe,EAAI,CACrG;MACH,CAAC,CAAC;MACF;MACA;MACAN,kBAAkB,CAACI,IAAI,CACrB1C,KAAA,CAAA2B,aAAA,CAACrB,oBAAoB;QACnBqC,GAAG,EAAE,QAAQ;QACbI,KAAK,EAAE,MAAM;QACbH,eAAe,EAAE,CAAC;UAAEC,IAAI,EAAEtC,kBAAkB,CAACuC,GAAG;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAEX;QAAS,CAAE;MAAC,EACrF,CACH;MACD,OAAOrC,KAAA,CAAA2B,aAAA;QAAKkC,KAAK,EAAE;UAAEC,OAAO,EAAE;QAAM;MAAE,GAAGxB,kBAAkB,CAAO;IACpE,CAAC;IAjICnB,KAAI,CAAC4C,aAAa,GAAG7C,KAAK,CAAC8C,YAAY,GAAG,IAAIC,KAAK,CAAC/C,KAAK,CAAC8C,YAAY,CAAC,GAAG,IAAIC,KAAK,CAACrD,qBAAqB,CAAC;;EAC5G;EAEOG,wBAAA,CAAAmD,SAAA,CAAAC,MAAM,GAAb;IACE,IAAMlC,EAAA,GAaF,IAAI,CAACf,KAAK;MAZZkD,iBAAiB,GAAAnC,EAAA,CAAAmC,iBAAA;MACjBC,aAAa,GAAApC,EAAA,CAAAoC,aAAA;MACbC,KAAK,GAAArC,EAAA,CAAAqC,KAAA;MACLC,SAAS,GAAAtC,EAAA,CAAAsC,SAAA;MACT/C,yBAAyB,GAAAS,EAAA,CAAAT,yBAAA;MACzBgD,mBAAmB,GAAAvC,EAAA,CAAAuC,mBAAA;MACnBR,YAAY,GAAA/B,EAAA,CAAA+B,YAAA;MACZS,MAAM,GAAAxC,EAAA,CAAAwC,MAAA;MACNC,KAAK,GAAAzC,EAAA,CAAAyC,KAAA;MACLC,gBAAgB,GAAA1C,EAAA,CAAA0C,gBAAA;MAChBC,mBAAmB,GAAA3C,EAAA,CAAA2C,mBAAA;MAChBC,SAAS,GAAAC,MAAA,CAAA7C,EAAA,EAZR,8LAaL,CAAa;IAEd,IAAM8C,aAAa,GAAGR,SAAS,IAAIA,SAAS,CAACS,SAAS;IAEtD,IAAI,CAACC,WAAW,GAAGtE,aAAa,CAAC8D,MAAM,EAAE;MACvCC,KAAK,EAAEA;KACR,CAAC;IAEF,IAAMQ,YAAY,GAAAC,QAAA,CAAAA,QAAA,KACbZ,SAAS;MACZ;MACA;MACAS,SAAS,EAAEX,aAAa,IAAI,CAACG,mBAAmB,GAAGtE,GAAG,CAAC,IAAI,CAAC+E,WAAW,CAACG,IAAI,EAAEL,aAAa,CAAC,GAAGA;IAAa,EAC7G;IAED,OACE/E,KAAA,CAAA2B,aAAA,CAACvB,WAAW,EAAA+E,QAAA,KACNN,SAAS;MACbJ,MAAM,EAAEL,iBAAiB;MACzBE,KAAK,EAAED,aAAa,GAAG,IAAI,CAACN,aAAa,GAAGO,KAAK;MACjDe,iBAAiB,EAAEhB,aAAa;MAChCM,gBAAgB,EAAGN,aAAa,IAAIO,mBAAmB,IAAKD,gBAAgB;MAC5EW,mBAAmB,EAAE,IAAI,CAACjE,2BAA2B;MACrDkD,SAAS,EAAEW;IAAY,GACvB;EAEN,CAAC;EAuFH,OAAAnE,wBAAC;AAAD,CAAC,CAzI6Cf,KAAK,CAACuF,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}