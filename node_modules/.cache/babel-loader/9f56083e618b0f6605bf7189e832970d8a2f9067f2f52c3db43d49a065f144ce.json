{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nvar getClassNames = classNamesFunction();\nvar MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nvar MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\nvar NO_COLUMNS = [];\nvar DetailsHeaderBase = /** @class */function (_super) {\n  __extends(DetailsHeaderBase, _super);\n  function DetailsHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._rootElement = React.createRef();\n    _this._rootComponent = React.createRef();\n    _this._draggedColumnIndex = -1;\n    _this._dropHintDetails = {};\n    _this._updateDroppingState = function (newValue, event) {\n      if (_this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n        _this._resetDropHints();\n      }\n    };\n    _this._onDragOver = function (item, event) {\n      if (_this._draggedColumnIndex >= 0) {\n        event.stopPropagation();\n        _this._computeDropHintToBeShown(event.clientX);\n      }\n    };\n    _this._onDrop = function (item, event) {\n      // Safe to assume this is defined since we're handling a drop event\n      var columnReorderProps = _this._getColumnReorderProps();\n      // Target index will not get changed if draggeditem is after target item.\n      if (_this._draggedColumnIndex >= 0 && event) {\n        var targetIndex = _this._draggedColumnIndex > _this._currentDropHintIndex ? _this._currentDropHintIndex : _this._currentDropHintIndex - 1;\n        var isValidDrop = _this._isValidCurrentDropHintIndex();\n        event.stopPropagation();\n        if (isValidDrop) {\n          _this._onDropIndexInfo.sourceIndex = _this._draggedColumnIndex;\n          _this._onDropIndexInfo.targetIndex = targetIndex;\n          if (columnReorderProps.onColumnDrop) {\n            var dragDropDetails = {\n              draggedIndex: _this._draggedColumnIndex,\n              targetIndex: targetIndex\n            };\n            columnReorderProps.onColumnDrop(dragDropDetails);\n            /* eslint-disable deprecation/deprecation */\n          } else if (columnReorderProps.handleColumnReorder) {\n            columnReorderProps.handleColumnReorder(_this._draggedColumnIndex, targetIndex);\n            /* eslint-enable deprecation/deprecation */\n          }\n        }\n      }\n\n      _this._resetDropHints();\n      _this._dropHintDetails = {};\n      _this._draggedColumnIndex = -1;\n    };\n    _this._computeColumnIndexOffset = function (showCheckbox) {\n      var hasGroupExpander = _this.props.groupNestingDepth && _this.props.groupNestingDepth > 0;\n      var offset = 1;\n      if (showCheckbox) {\n        offset += 1;\n      }\n      if (hasGroupExpander) {\n        offset += 1;\n      }\n      return offset;\n    };\n    _this._updateDragInfo = function (props, event) {\n      // Safe to assume this is defined since we're handling a drag event\n      var columnReorderProps = _this._getColumnReorderProps();\n      var itemIndex = props.itemIndex;\n      if (itemIndex >= 0) {\n        // Column index is set based on the checkbox\n        _this._draggedColumnIndex = itemIndex - _this._computeColumnIndexOffset(!_this._isCheckboxColumnHidden());\n        _this._getDropHintPositions();\n        if (columnReorderProps.onColumnDragStart) {\n          columnReorderProps.onColumnDragStart(true);\n        }\n      } else if (event && _this._draggedColumnIndex >= 0) {\n        _this._resetDropHints();\n        _this._draggedColumnIndex = -1;\n        _this._dropHintDetails = {};\n        if (columnReorderProps.onColumnDragEnd) {\n          var columnDragEndLocation = _this._isEventOnHeader(event);\n          columnReorderProps.onColumnDragEnd({\n            dropLocation: columnDragEndLocation\n          }, event);\n        }\n      }\n    };\n    _this._getDropHintPositions = function () {\n      var _a = _this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n      // Safe to assume this is defined since we're handling a drag/drop event\n      var columnReorderProps = _this._getColumnReorderProps();\n      var prevX = 0;\n      var prevMid = 0;\n      var prevRef;\n      var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n      for (var i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n        if (_this._rootElement.current) {\n          var dropHintElement = _this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0];\n          if (dropHintElement) {\n            if (i === frozenColumnCountFromStart) {\n              prevX = dropHintElement.offsetLeft;\n              prevMid = dropHintElement.offsetLeft;\n              prevRef = dropHintElement;\n            } else {\n              var newMid = (dropHintElement.offsetLeft + prevX) / 2;\n              _this._dropHintDetails[i - 1] = {\n                originX: prevX,\n                startX: prevMid,\n                endX: newMid,\n                dropHintElementRef: prevRef\n              };\n              prevMid = newMid;\n              prevRef = dropHintElement;\n              prevX = dropHintElement.offsetLeft;\n              if (i === columns.length - frozenColumnCountFromEnd) {\n                _this._dropHintDetails[i] = {\n                  originX: prevX,\n                  startX: prevMid,\n                  endX: dropHintElement.offsetLeft,\n                  dropHintElementRef: prevRef\n                };\n              }\n            }\n          }\n        }\n      }\n    };\n    /**\n     * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n     */\n    _this._computeDropHintToBeShown = function (clientX) {\n      var isRtl = getRTL(_this.props.theme);\n      if (_this._rootElement.current) {\n        var clientRect = _this._rootElement.current.getBoundingClientRect();\n        var headerOriginX = clientRect.left;\n        var eventXRelativePosition = clientX - headerOriginX;\n        var currentDropHintIndex = _this._currentDropHintIndex;\n        if (_this._isValidCurrentDropHintIndex()) {\n          if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex].startX, _this._dropHintDetails[currentDropHintIndex].endX)) {\n            return;\n          }\n        }\n        var _a = _this.props.columns,\n          columns = _a === void 0 ? NO_COLUMNS : _a;\n        // Safe to assume this is defined since we're handling a drag/drop event\n        var columnReorderProps = _this._getColumnReorderProps();\n        var frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n        var frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n        var currentIndex = frozenColumnCountFromStart;\n        var lastValidColumn = columns.length - frozenColumnCountFromEnd;\n        var indexToUpdate = -1;\n        if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[currentIndex].endX)) {\n          indexToUpdate = currentIndex;\n        } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[lastValidColumn].startX)) {\n          indexToUpdate = lastValidColumn;\n        } else if (_this._isValidCurrentDropHintIndex()) {\n          if (_this._dropHintDetails[currentDropHintIndex + 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex + 1].startX, _this._dropHintDetails[currentDropHintIndex + 1].endX)) {\n            indexToUpdate = currentDropHintIndex + 1;\n          } else if (_this._dropHintDetails[currentDropHintIndex - 1] && _liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex - 1].startX, _this._dropHintDetails[currentDropHintIndex - 1].endX)) {\n            indexToUpdate = currentDropHintIndex - 1;\n          }\n        }\n        if (indexToUpdate === -1) {\n          var startIndex = frozenColumnCountFromStart;\n          var endIndex = lastValidColumn;\n          while (startIndex < endIndex) {\n            var middleIndex = Math.ceil((endIndex + startIndex) / 2);\n            if (_liesBetween(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].startX, _this._dropHintDetails[middleIndex].endX)) {\n              indexToUpdate = middleIndex;\n              break;\n            } else if (_isBefore(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              endIndex = middleIndex;\n            } else if (_isAfter(isRtl, eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              startIndex = middleIndex;\n            }\n          }\n        }\n        if (indexToUpdate === _this._draggedColumnIndex || indexToUpdate === _this._draggedColumnIndex + 1) {\n          if (_this._isValidCurrentDropHintIndex()) {\n            _this._resetDropHints();\n          }\n        } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n          _this._resetDropHints();\n          _this._updateDropHintElement(_this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n          _this._currentDropHintIndex = indexToUpdate;\n        }\n      }\n    };\n    _this._renderColumnSizer = function (_a) {\n      var _b;\n      var columnIndex = _a.columnIndex;\n      var _c = _this.props.columns,\n        columns = _c === void 0 ? NO_COLUMNS : _c;\n      var column = columns[columnIndex];\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      var classNames = _this._classNames;\n      return column.isResizable ? React.createElement(\"div\", {\n        key: \"\".concat(column.key, \"_sizer\"),\n        \"aria-hidden\": true,\n        role: \"button\",\n        \"data-is-focusable\": false,\n        onClick: _stopPropagation,\n        \"data-sizer-index\": columnIndex,\n        onBlur: _this._onSizerBlur,\n        className: css(classNames.cellSizer, columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd, (_b = {}, _b[classNames.cellIsResizing] = columnResizeDetails && columnResizeDetails.columnIndex === columnIndex, _b)),\n        onDoubleClick: _this._onSizerDoubleClick.bind(_this, columnIndex)\n      }) : null;\n    };\n    _this._onRenderColumnHeaderTooltip = function (tooltipHostProps) {\n      return React.createElement(\"span\", {\n        className: tooltipHostProps.hostClassName\n      }, tooltipHostProps.children);\n    };\n    /**\n     * Called when the select all toggle is clicked.\n     */\n    _this._onSelectAllClicked = function () {\n      var selection = _this.props.selection;\n      if (selection) {\n        selection.toggleAllSelected();\n      }\n    };\n    _this._onRootMouseDown = function (ev) {\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n      var columnIndex = Number(columnIndexAttr);\n      var _a = _this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n      if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n        // Ignore anything except the primary button.\n        return;\n      }\n      _this.setState({\n        columnResizeDetails: {\n          columnIndex: columnIndex,\n          columnMinWidth: columns[columnIndex].calculatedWidth,\n          originX: ev.clientX\n        }\n      });\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n    _this._onRootMouseMove = function (ev) {\n      var _a = _this.state,\n        columnResizeDetails = _a.columnResizeDetails,\n        isSizing = _a.isSizing;\n      if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n        _this.setState({\n          isSizing: true\n        });\n      }\n    };\n    _this._onRootKeyDown = function (ev) {\n      var _a = _this.state,\n        columnResizeDetails = _a.columnResizeDetails,\n        isSizing = _a.isSizing;\n      var _b = _this.props,\n        _c = _b.columns,\n        columns = _c === void 0 ? NO_COLUMNS : _c,\n        onColumnResized = _b.onColumnResized;\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n      if (!columnIndexAttr || isSizing) {\n        return;\n      }\n      var columnIndex = Number(columnIndexAttr);\n      if (!columnResizeDetails) {\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: {\n              columnIndex: columnIndex,\n              columnMinWidth: columns[columnIndex].calculatedWidth\n            }\n          });\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      } else {\n        var increment = void 0;\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: undefined\n          });\n          ev.preventDefault();\n          ev.stopPropagation();\n          // eslint-disable-next-line deprecation/deprecation\n        } else if (ev.which === KeyCodes.left) {\n          increment = getRTL(_this.props.theme) ? 1 : -1;\n          // eslint-disable-next-line deprecation/deprecation\n        } else if (ev.which === KeyCodes.right) {\n          increment = getRTL(_this.props.theme) ? -1 : 1;\n        }\n        if (increment) {\n          if (!ev.shiftKey) {\n            increment *= 10;\n          }\n          _this.setState({\n            columnResizeDetails: __assign(__assign({}, columnResizeDetails), {\n              columnMinWidth: columnResizeDetails.columnMinWidth + increment\n            })\n          });\n          if (onColumnResized) {\n            onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n          }\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    };\n    /**\n     * mouse move event handler in the header\n     * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n     *\n     * @param ev - mouse move event\n     */\n    _this._onSizerMouseMove = function (ev) {\n      var\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = ev.buttons;\n      var _a = _this.props,\n        onColumnIsSizingChanged = _a.onColumnIsSizingChanged,\n        onColumnResized = _a.onColumnResized,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n        // cancel mouse down event and return early when the primary button is not pressed\n        _this._onSizerMouseUp(ev);\n        return;\n      }\n      if (ev.clientX !== columnResizeDetails.originX) {\n        if (onColumnIsSizingChanged) {\n          onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], true);\n        }\n      }\n      if (onColumnResized) {\n        var movement = ev.clientX - columnResizeDetails.originX;\n        if (getRTL(_this.props.theme)) {\n          movement = -movement;\n        }\n        onColumnResized(columns[columnResizeDetails.columnIndex], columnResizeDetails.columnMinWidth + movement, columnResizeDetails.columnIndex);\n      }\n    };\n    _this._onSizerBlur = function (ev) {\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      if (columnResizeDetails) {\n        _this.setState({\n          columnResizeDetails: undefined,\n          isSizing: false\n        });\n      }\n    };\n    /**\n     * mouse up event handler in the header\n     * clear the resize related state.\n     * This is to ensure we can catch double click event\n     *\n     * @param ev - mouse up event\n     */\n    _this._onSizerMouseUp = function (ev) {\n      var _a = _this.props,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b,\n        onColumnIsSizingChanged = _a.onColumnIsSizingChanged;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      _this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false\n      });\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], false);\n      }\n    };\n    _this._onToggleCollapseAll = function () {\n      var onToggleCollapseAll = _this.props.onToggleCollapseAll;\n      var newCollapsed = !_this.state.isAllCollapsed;\n      _this.setState({\n        isAllCollapsed: newCollapsed\n      });\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(newCollapsed);\n      }\n    };\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: _this.props.isAllCollapsed,\n      isAllSelected: !!_this.props.selection && _this.props.selection.isAllSelected()\n    };\n    _this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1\n    };\n    _this._id = getId('header');\n    _this._currentDropHintIndex = -1;\n    // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n    _this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: function () {\n          return;\n        }\n      },\n      minimumPixelsForDrag: _this.props.minimumPixelsForDrag\n    });\n    return _this;\n  }\n  DetailsHeaderBase.prototype.componentDidMount = function () {\n    var selection = this.props.selection;\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    // this._rootElement.current will be null in tests using react-test-renderer\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n      }\n    }\n  };\n  DetailsHeaderBase.prototype.componentDidUpdate = function (prevProps) {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement.current, this._events, this._getHeaderDragDropOptions());\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      var _a = prevProps.columns,\n        previousColumns = _a === void 0 ? NO_COLUMNS : _a;\n      var _b = this.props.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b;\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1\n        };\n      }\n    }\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({\n        isAllCollapsed: this.props.isAllCollapsed\n      });\n    }\n  };\n  DetailsHeaderBase.prototype.componentWillUnmount = function () {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n    this._dragDropHelper.dispose();\n    this._events.dispose();\n  };\n  DetailsHeaderBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      _b = _a.columns,\n      columns = _b === void 0 ? NO_COLUMNS : _b,\n      ariaLabel = _a.ariaLabel,\n      ariaLabelForToggleAllGroupsButton = _a.ariaLabelForToggleAllGroupsButton,\n      ariaLabelForSelectAllCheckbox = _a.ariaLabelForSelectAllCheckbox,\n      selectAllVisibility = _a.selectAllVisibility,\n      ariaLabelForSelectionColumn = _a.ariaLabelForSelectionColumn,\n      indentWidth = _a.indentWidth,\n      onColumnClick = _a.onColumnClick,\n      onColumnContextMenu = _a.onColumnContextMenu,\n      _c = _a.onRenderColumnHeaderTooltip,\n      onRenderColumnHeaderTooltip = _c === void 0 ? this._onRenderColumnHeaderTooltip : _c,\n      styles = _a.styles,\n      selectionMode = _a.selectionMode,\n      theme = _a.theme,\n      onRenderDetailsCheckbox = _a.onRenderDetailsCheckbox,\n      groupNestingDepth = _a.groupNestingDepth,\n      useFastIcons = _a.useFastIcons,\n      checkboxVisibility = _a.checkboxVisibility,\n      className = _a.className;\n    var _d = this.state,\n      isAllSelected = _d.isAllSelected,\n      columnResizeDetails = _d.columnResizeDetails,\n      isSizing = _d.isSizing,\n      isAllCollapsed = _d.isAllCollapsed;\n    var showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    var isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    var isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n    var columnReorderProps = this._getColumnReorderProps();\n    var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart ? columnReorderProps.frozenColumnCountFromStart : 0;\n    var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd ? columnReorderProps.frozenColumnCountFromEnd : 0;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      isAllSelected: isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing: isSizing,\n      isAllCollapsed: isAllCollapsed,\n      isCheckboxHidden: isCheckboxHidden,\n      className: className\n    });\n    var classNames = this._classNames;\n    var IconComponent = useFastIcons ? FontIcon : Icon;\n    var hasGroupExpander = groupNestingDepth > 0;\n    var showGroupExpander = hasGroupExpander && this.props.collapseAllVisibility === CollapseAllVisibility.visible;\n    var columnIndexOffset = this._computeColumnIndexOffset(showCheckbox);\n    var isRTL = getRTL(theme);\n    return React.createElement(FocusZone, {\n      role: \"row\",\n      \"aria-label\": ariaLabel,\n      className: classNames.root,\n      componentRef: this._rootComponent,\n      elementRef: this._rootElement,\n      onMouseMove: this._onRootMouseMove,\n      \"data-automationid\": \"DetailsHeader\",\n      direction: FocusZoneDirection.horizontal\n    }, showCheckbox ? [React.createElement(\"div\", {\n      key: \"__checkbox\",\n      className: classNames.cellIsCheck,\n      \"aria-labelledby\": \"\".concat(this._id, \"-checkTooltip\"),\n      onClick: !isCheckboxHidden ? this._onSelectAllClicked : undefined,\n      role: 'columnheader'\n    }, onRenderColumnHeaderTooltip({\n      hostClassName: classNames.checkTooltip,\n      id: \"\".concat(this._id, \"-checkTooltip\"),\n      setAriaDescribedBy: false,\n      content: ariaLabelForSelectAllCheckbox,\n      children: React.createElement(DetailsRowCheck, {\n        id: \"\".concat(this._id, \"-check\"),\n        \"aria-label\": selectionMode === SelectionMode.multiple ? ariaLabelForSelectAllCheckbox : ariaLabelForSelectionColumn,\n        \"data-is-focusable\": !isCheckboxHidden || undefined,\n        isHeader: true,\n        selected: isAllSelected,\n        anySelected: false,\n        canSelect: !isCheckboxHidden,\n        className: classNames.check,\n        onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n        useFastIcons: useFastIcons,\n        isVisible: isCheckboxAlwaysVisible\n      })\n    }, this._onRenderColumnHeaderTooltip)), !this.props.onRenderColumnHeaderTooltip ? ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: \"\".concat(this._id, \"-checkTooltip\"),\n      className: classNames.accessibleLabel,\n      \"aria-hidden\": true\n    }, ariaLabelForSelectAllCheckbox) : ariaLabelForSelectionColumn && isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: \"\".concat(this._id, \"-checkTooltip\"),\n      className: classNames.accessibleLabel,\n      \"aria-hidden\": true\n    }, ariaLabelForSelectionColumn) : null : null] : null, showGroupExpander ? React.createElement(\"div\", {\n      className: classNames.cellIsGroupExpander,\n      onClick: this._onToggleCollapseAll,\n      \"data-is-focusable\": true,\n      \"aria-label\": ariaLabelForToggleAllGroupsButton,\n      \"aria-expanded\": !isAllCollapsed,\n      role: \"columnheader\"\n    }, React.createElement(IconComponent, {\n      className: classNames.collapseButton,\n      iconName: isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'\n    }), React.createElement(\"span\", {\n      className: classNames.accessibleLabel\n    }, ariaLabelForToggleAllGroupsButton)) : hasGroupExpander ? React.createElement(\"div\", {\n      className: classNames.cellIsGroupExpander,\n      \"data-is-focusable\": false,\n      role: \"columnheader\"\n    }) : null, React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      role: \"gridcell\",\n      count: groupNestingDepth - 1\n    }), columns.map(function (column, columnIndex) {\n      var _isDraggable = columnReorderProps ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd : false;\n      return [columnReorderProps && (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) && _this._renderDropHint(columnIndex), React.createElement(DetailsColumn, {\n        column: column,\n        styles: column.styles,\n        key: column.key,\n        columnIndex: columnIndexOffset + columnIndex,\n        parentId: _this._id,\n        isDraggable: _isDraggable,\n        updateDragInfo: _this._updateDragInfo,\n        dragDropHelper: _this._dragDropHelper,\n        onColumnClick: onColumnClick,\n        onColumnContextMenu: onColumnContextMenu,\n        // Do not render tooltips by default, but allow for override via props.\n        onRenderColumnHeaderTooltip: _this.props.onRenderColumnHeaderTooltip,\n        isDropped: _this._onDropIndexInfo.targetIndex === columnIndex,\n        cellStyleProps: _this.props.cellStyleProps,\n        useFastIcons: useFastIcons\n      }), _this._renderColumnDivider(columnIndex)];\n    }), columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length), isSizing && React.createElement(Layer, null, React.createElement(\"div\", {\n      className: classNames.sizingOverlay,\n      onMouseMove: this._onSizerMouseMove,\n      onMouseUp: this._onSizerMouseUp\n    })));\n  };\n  /** Set focus to the active thing in the focus area. */\n  DetailsHeaderBase.prototype.focus = function () {\n    var _a;\n    return !!((_a = this._rootComponent.current) === null || _a === void 0 ? void 0 : _a.focus());\n  };\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n  DetailsHeaderBase.prototype._getColumnReorderProps = function () {\n    var _a = this.props,\n      columnReorderOptions = _a.columnReorderOptions,\n      columnReorderProps = _a.columnReorderProps;\n    return columnReorderProps || columnReorderOptions && __assign(__assign({}, columnReorderOptions), {\n      onColumnDragEnd: undefined\n    });\n  };\n  DetailsHeaderBase.prototype._getHeaderDragDropOptions = function () {\n    var options = {\n      selectionIndex: 1,\n      context: {\n        data: this,\n        index: 0\n      },\n      canDrag: function () {\n        return false;\n      },\n      canDrop: function () {\n        return true;\n      },\n      onDragStart: function () {\n        return undefined;\n      },\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: function () {\n        return undefined;\n      },\n      onDragOver: this._onDragOver\n    };\n    return options;\n  };\n  DetailsHeaderBase.prototype._isValidCurrentDropHintIndex = function () {\n    return this._currentDropHintIndex >= 0;\n  };\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n  DetailsHeaderBase.prototype._isCheckboxColumnHidden = function () {\n    var _a = this.props,\n      selectionMode = _a.selectionMode,\n      checkboxVisibility = _a.checkboxVisibility;\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  };\n  DetailsHeaderBase.prototype._resetDropHints = function () {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n      this._currentDropHintIndex = -1;\n    }\n  };\n  DetailsHeaderBase.prototype._updateDropHintElement = function (element, displayProperty) {\n    element.childNodes[1].style.display = displayProperty;\n    element.childNodes[0].style.display = displayProperty;\n  };\n  DetailsHeaderBase.prototype._isEventOnHeader = function (event) {\n    if (this._rootElement.current) {\n      var clientRect = this._rootElement.current.getBoundingClientRect();\n      if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  };\n  DetailsHeaderBase.prototype._renderColumnDivider = function (columnIndex) {\n    var _a = this.props.columns,\n      columns = _a === void 0 ? NO_COLUMNS : _a;\n    var column = columns[columnIndex];\n    var onRenderDivider = column.onRenderDivider;\n    return onRenderDivider ? onRenderDivider({\n      column: column,\n      columnIndex: columnIndex\n    }, this._renderColumnSizer) : this._renderColumnSizer({\n      column: column,\n      columnIndex: columnIndex\n    });\n  };\n  DetailsHeaderBase.prototype._renderDropHint = function (dropHintIndex) {\n    var classNames = this._classNames;\n    var IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return React.createElement(\"div\", {\n      key: 'dropHintKey',\n      className: classNames.dropHintStyle,\n      id: \"columnDropHint_\".concat(dropHintIndex)\n    }, React.createElement(\"div\", {\n      role: \"presentation\",\n      key: \"dropHintCircleKey\",\n      className: classNames.dropHintCaretStyle,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      \"aria-hidden\": true\n    }, React.createElement(IconComponent, {\n      iconName: 'CircleShapeSolid'\n    })), React.createElement(\"div\", {\n      key: \"dropHintLineKey\",\n      \"aria-hidden\": true,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      className: classNames.dropHintLineStyle\n    }));\n  };\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n  DetailsHeaderBase.prototype._onSizerDoubleClick = function (columnIndex, ev) {\n    var _a = this.props,\n      onColumnAutoResized = _a.onColumnAutoResized,\n      _b = _a.columns,\n      columns = _b === void 0 ? NO_COLUMNS : _b;\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  };\n  DetailsHeaderBase.prototype._onSelectionChanged = function () {\n    var isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected\n      });\n    }\n  };\n  DetailsHeaderBase.defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true\n  };\n  return DetailsHeaderBase;\n}(React.Component);\nexport { DetailsHeaderBase };\nfunction _liesBetween(rtl, target, left, right) {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\nfunction _isBefore(rtl, a, b) {\n  return rtl ? a >= b : a <= b;\n}\nfunction _isAfter(rtl, a, b) {\n  return rtl ? a <= b : a >= b;\n}\nfunction _stopPropagation(ev) {\n  ev.stopPropagation();\n}","map":{"version":3,"names":["React","initializeComponentRef","EventGroup","css","getRTL","getId","KeyCodes","classNamesFunction","ColumnDragEndLocation","CheckboxVisibility","FocusZone","FocusZoneDirection","Icon","FontIcon","Layer","GroupSpacer","CollapseAllVisibility","DetailsRowCheck","SelectionMode","SELECTION_CHANGE","DragDropHelper","DetailsColumn","SelectAllVisibility","getClassNames","MOUSEDOWN_PRIMARY_BUTTON","MOUSEMOVE_PRIMARY_BUTTON","NO_COLUMNS","DetailsHeaderBase","_super","__extends","props","_this","call","_rootElement","createRef","_rootComponent","_draggedColumnIndex","_dropHintDetails","_updateDroppingState","newValue","event","type","_resetDropHints","_onDragOver","item","stopPropagation","_computeDropHintToBeShown","clientX","_onDrop","columnReorderProps","_getColumnReorderProps","targetIndex","_currentDropHintIndex","isValidDrop","_isValidCurrentDropHintIndex","_onDropIndexInfo","sourceIndex","onColumnDrop","dragDropDetails","draggedIndex","handleColumnReorder","_computeColumnIndexOffset","showCheckbox","hasGroupExpander","groupNestingDepth","offset","_updateDragInfo","itemIndex","_isCheckboxColumnHidden","_getDropHintPositions","onColumnDragStart","onColumnDragEnd","columnDragEndLocation","_isEventOnHeader","dropLocation","_a","columns","prevX","prevMid","prevRef","frozenColumnCountFromStart","frozenColumnCountFromEnd","i","length","current","dropHintElement","querySelectorAll","offsetLeft","newMid","originX","startX","endX","dropHintElementRef","isRtl","theme","clientRect","getBoundingClientRect","headerOriginX","left","eventXRelativePosition","currentDropHintIndex","_liesBetween","currentIndex","lastValidColumn","indexToUpdate","_isBefore","_isAfter","startIndex","endIndex","middleIndex","Math","ceil","_updateDropHintElement","_renderColumnSizer","columnIndex","_c","column","columnResizeDetails","state","classNames","_classNames","isResizable","createElement","key","concat","role","onClick","_stopPropagation","onBlur","_onSizerBlur","className","cellSizer","cellSizerStart","cellSizerEnd","_b","cellIsResizing","onDoubleClick","_onSizerDoubleClick","bind","_onRenderColumnHeaderTooltip","tooltipHostProps","hostClassName","children","_onSelectAllClicked","selection","toggleAllSelected","_onRootMouseDown","ev","columnIndexAttr","target","getAttribute","Number","button","setState","columnMinWidth","calculatedWidth","preventDefault","_onRootMouseMove","isSizing","_onRootKeyDown","onColumnResized","which","enter","increment","undefined","right","shiftKey","__assign","_onSizerMouseMove","buttons","onColumnIsSizingChanged","_onSizerMouseUp","movement","_onToggleCollapseAll","onToggleCollapseAll","newCollapsed","isAllCollapsed","_events","isAllSelected","_id","_dragDropHelper","getSelection","minimumPixelsForDrag","prototype","componentDidMount","on","_onSelectionChanged","_subscriptionObject","subscribe","_getHeaderDragDropOptions","componentDidUpdate","prevProps","dispose","previousColumns","componentWillUnmount","render","ariaLabel","ariaLabelForToggleAllGroupsButton","ariaLabelForSelectAllCheckbox","selectAllVisibility","ariaLabelForSelectionColumn","indentWidth","onColumnClick","onColumnContextMenu","onRenderColumnHeaderTooltip","styles","selectionMode","onRenderDetailsCheckbox","useFastIcons","checkboxVisibility","_d","none","isCheckboxHidden","hidden","isCheckboxAlwaysVisible","always","isSelectAllHidden","isResizingColumn","IconComponent","showGroupExpander","collapseAllVisibility","visible","columnIndexOffset","isRTL","root","componentRef","elementRef","onMouseMove","direction","horizontal","cellIsCheck","checkTooltip","id","setAriaDescribedBy","content","multiple","isHeader","selected","anySelected","canSelect","check","isVisible","accessibleLabel","cellIsGroupExpander","collapseButton","iconName","count","map","_isDraggable","_renderDropHint","parentId","isDraggable","updateDragInfo","dragDropHelper","isDropped","cellStyleProps","_renderColumnDivider","sizingOverlay","onMouseUp","focus","columnReorderOptions","options","selectionIndex","context","data","index","canDrag","canDrop","onDragStart","updateDropState","onDrop","onDragEnd","onDragOver","element","displayProperty","childNodes","style","display","clientY","top","bottom","header","onRenderDivider","dropHintIndex","dropHintStyle","dropHintCaretStyle","dropHintLineStyle","onColumnAutoResized","defaultProps","Component","rtl","a","b"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsHeader.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, getRTL, getId, KeyCodes, classNamesFunction } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn, IDetailsHeaderBaseProps, IColumnDragDropDetails } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { ITooltipHostProps } from '../../Tooltip';\nimport type { ISelection } from '../../Selection';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\nimport type {\n  IDropHintDetails,\n  IColumnReorderHeaderProps,\n  IDetailsHeaderState,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles,\n  IDetailsHeader,\n} from './DetailsHeader.types';\n\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsHeaderBase\n  extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\n  implements IDetailsHeader\n{\n  public static defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true,\n  };\n\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\n  private _rootElement = React.createRef<HTMLElement>();\n  private _events: EventGroup;\n  private _rootComponent = React.createRef<IFocusZone>();\n  private _id: string;\n  private _draggedColumnIndex = -1;\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\n  private _dragDropHelper: DragDropHelper;\n  private _currentDropHintIndex: number;\n  private _subscriptionObject?: IDisposable;\n  private _onDropIndexInfo: {\n    sourceIndex: number;\n    targetIndex: number;\n  };\n\n  constructor(props: IDetailsHeaderBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: this.props.isAllCollapsed,\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\n    };\n\n    this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1,\n    };\n    this._id = getId('header');\n    this._currentDropHintIndex = -1;\n\n    // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n    this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: () => {\n          return;\n        },\n      } as ISelection,\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\n    });\n  }\n\n  public componentDidMount(): void {\n    const { selection } = this.props;\n\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n\n    // this._rootElement.current will be null in tests using react-test-renderer\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\n      const { columns = NO_COLUMNS } = this.props;\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1,\n        };\n      }\n    }\n\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    this._dragDropHelper.dispose();\n\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      columns = NO_COLUMNS,\n      ariaLabel,\n      ariaLabelForToggleAllGroupsButton,\n      ariaLabelForSelectAllCheckbox,\n      selectAllVisibility,\n      ariaLabelForSelectionColumn,\n      indentWidth,\n      onColumnClick,\n      onColumnContextMenu,\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\n      styles,\n      selectionMode,\n      theme,\n      onRenderDetailsCheckbox,\n      groupNestingDepth,\n      useFastIcons,\n      checkboxVisibility,\n      className,\n    } = this.props;\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n\n    const columnReorderProps = this._getColumnReorderProps();\n    const frozenColumnCountFromStart =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\n        ? columnReorderProps.frozenColumnCountFromStart\n        : 0;\n    const frozenColumnCountFromEnd =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\n        ? columnReorderProps.frozenColumnCountFromEnd\n        : 0;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing,\n      isAllCollapsed,\n      isCheckboxHidden,\n      className,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n    const hasGroupExpander = groupNestingDepth! > 0;\n    const showGroupExpander = hasGroupExpander && this.props.collapseAllVisibility === CollapseAllVisibility.visible;\n    const columnIndexOffset = this._computeColumnIndexOffset(showCheckbox);\n\n    const isRTL = getRTL(theme);\n    return (\n      <FocusZone\n        role=\"row\"\n        aria-label={ariaLabel}\n        className={classNames.root}\n        componentRef={this._rootComponent}\n        elementRef={this._rootElement}\n        onMouseMove={this._onRootMouseMove}\n        data-automationid=\"DetailsHeader\"\n        direction={FocusZoneDirection.horizontal}\n      >\n        {showCheckbox\n          ? [\n              <div\n                key=\"__checkbox\"\n                className={classNames.cellIsCheck}\n                aria-labelledby={`${this._id}-checkTooltip`}\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\n                role={'columnheader'}\n              >\n                {onRenderColumnHeaderTooltip(\n                  {\n                    hostClassName: classNames.checkTooltip,\n                    id: `${this._id}-checkTooltip`,\n                    setAriaDescribedBy: false,\n                    content: ariaLabelForSelectAllCheckbox,\n                    children: (\n                      <DetailsRowCheck\n                        id={`${this._id}-check`}\n                        aria-label={\n                          selectionMode === SelectionMode.multiple\n                            ? ariaLabelForSelectAllCheckbox\n                            : ariaLabelForSelectionColumn\n                        }\n                        data-is-focusable={!isCheckboxHidden || undefined}\n                        isHeader={true}\n                        selected={isAllSelected}\n                        anySelected={false}\n                        canSelect={!isCheckboxHidden}\n                        className={classNames.check}\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\n                        useFastIcons={useFastIcons}\n                        isVisible={isCheckboxAlwaysVisible}\n                      />\n                    ),\n                  },\n                  this._onRenderColumnHeaderTooltip,\n                )}\n              </div>,\n              !this.props.onRenderColumnHeaderTooltip ? (\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectAllCheckbox}\n                  </label>\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectionColumn}\n                  </label>\n                ) : null\n              ) : null,\n            ]\n          : null}\n        {showGroupExpander ? (\n          <div\n            className={classNames.cellIsGroupExpander}\n            onClick={this._onToggleCollapseAll}\n            data-is-focusable={true}\n            aria-label={ariaLabelForToggleAllGroupsButton}\n            aria-expanded={!isAllCollapsed}\n            role=\"columnheader\"\n          >\n            <IconComponent\n              className={classNames.collapseButton}\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\n            />\n            {/* Use this span in addition to aria-label, otherwise VoiceOver ignores the column */}\n            <span className={classNames.accessibleLabel}>{ariaLabelForToggleAllGroupsButton}</span>\n          </div>\n        ) : hasGroupExpander ? (\n          <div className={classNames.cellIsGroupExpander} data-is-focusable={false} role=\"columnheader\">\n            {/* Empty placeholder cell when CollapseAllVisibility is hidden */}\n          </div>\n        ) : null}\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\n        {columns.map((column: IColumn, columnIndex: number) => {\n          const _isDraggable = columnReorderProps\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\n            : false;\n          return [\n            columnReorderProps &&\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\n              this._renderDropHint(columnIndex),\n            <DetailsColumn\n              column={column}\n              styles={column.styles}\n              key={column.key}\n              columnIndex={columnIndexOffset + columnIndex}\n              parentId={this._id}\n              isDraggable={_isDraggable}\n              updateDragInfo={this._updateDragInfo}\n              dragDropHelper={this._dragDropHelper}\n              onColumnClick={onColumnClick}\n              onColumnContextMenu={onColumnContextMenu}\n              // Do not render tooltips by default, but allow for override via props.\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\n              cellStyleProps={this.props.cellStyleProps}\n              useFastIcons={useFastIcons}\n            />,\n            this._renderColumnDivider(columnIndex),\n          ];\n        })}\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\n        {isSizing && (\n          <Layer>\n            <div\n              className={classNames.sizingOverlay}\n              onMouseMove={this._onSizerMouseMove}\n              onMouseUp={this._onSizerMouseUp}\n            />\n          </Layer>\n        )}\n      </FocusZone>\n    );\n  }\n\n  /** Set focus to the active thing in the focus area. */\n  public focus(): boolean {\n    return !!this._rootComponent.current?.focus();\n  }\n\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\n    const { columnReorderOptions, columnReorderProps } = this.props;\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\n  }\n\n  private _getHeaderDragDropOptions(): IDragDropOptions {\n    const options = {\n      selectionIndex: 1,\n      context: { data: this, index: 0 },\n      canDrag: () => false,\n      canDrop: () => true,\n      onDragStart: () => undefined,\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: () => undefined,\n      onDragOver: this._onDragOver,\n    };\n    return options;\n  }\n\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n      this._resetDropHints();\n    }\n  };\n\n  private _isValidCurrentDropHintIndex() {\n    return this._currentDropHintIndex >= 0;\n  }\n\n  private _onDragOver = (item: any, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0) {\n      event.stopPropagation();\n      this._computeDropHintToBeShown(event.clientX);\n    }\n  };\n\n  private _onDrop = (item?: any, event?: DragEvent): void => {\n    // Safe to assume this is defined since we're handling a drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n\n    // Target index will not get changed if draggeditem is after target item.\n    if (this._draggedColumnIndex >= 0 && event) {\n      const targetIndex =\n        this._draggedColumnIndex > this._currentDropHintIndex\n          ? this._currentDropHintIndex\n          : this._currentDropHintIndex - 1;\n      const isValidDrop = this._isValidCurrentDropHintIndex();\n      event.stopPropagation();\n      if (isValidDrop) {\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\n        this._onDropIndexInfo.targetIndex = targetIndex;\n\n        if (columnReorderProps.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: this._draggedColumnIndex,\n            targetIndex,\n          };\n          columnReorderProps.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderProps.handleColumnReorder) {\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n\n    this._resetDropHints();\n    this._dropHintDetails = {};\n    this._draggedColumnIndex = -1;\n  };\n\n  private _computeColumnIndexOffset = (showCheckbox: boolean) => {\n    const hasGroupExpander = this.props.groupNestingDepth && this.props.groupNestingDepth > 0;\n\n    let offset = 1;\n    if (showCheckbox) {\n      offset += 1;\n    }\n\n    if (hasGroupExpander) {\n      offset += 1;\n    }\n\n    return offset;\n  };\n\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n  private _isCheckboxColumnHidden(): boolean {\n    const { selectionMode, checkboxVisibility } = this.props;\n\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  }\n\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\n    // Safe to assume this is defined since we're handling a drag event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    const itemIndex = props.itemIndex;\n    if (itemIndex >= 0) {\n      // Column index is set based on the checkbox\n      this._draggedColumnIndex = itemIndex - this._computeColumnIndexOffset(!this._isCheckboxColumnHidden());\n      this._getDropHintPositions();\n      if (columnReorderProps.onColumnDragStart) {\n        columnReorderProps.onColumnDragStart(true);\n      }\n    } else if (event && this._draggedColumnIndex >= 0) {\n      this._resetDropHints();\n      this._draggedColumnIndex = -1;\n      this._dropHintDetails = {};\n      if (columnReorderProps.onColumnDragEnd) {\n        const columnDragEndLocation = this._isEventOnHeader(event);\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\n      }\n    }\n  };\n\n  private _resetDropHints(): void {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n      this._currentDropHintIndex = -1;\n    }\n  }\n\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\n  }\n\n  private _getDropHintPositions = (): void => {\n    const { columns = NO_COLUMNS } = this.props;\n    // Safe to assume this is defined since we're handling a drag/drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    let prevX = 0;\n    let prevMid = 0;\n    let prevRef: HTMLElement;\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n      if (this._rootElement.current) {\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\n        if (dropHintElement) {\n          if (i === frozenColumnCountFromStart) {\n            prevX = dropHintElement.offsetLeft;\n            prevMid = dropHintElement.offsetLeft;\n            prevRef = dropHintElement;\n          } else {\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\n            this._dropHintDetails[i - 1] = {\n              originX: prevX,\n              startX: prevMid!,\n              endX: newMid,\n              dropHintElementRef: prevRef!,\n            };\n            prevMid = newMid;\n            prevRef = dropHintElement;\n            prevX = dropHintElement.offsetLeft;\n            if (i === columns.length - frozenColumnCountFromEnd) {\n              this._dropHintDetails[i] = {\n                originX: prevX,\n                startX: prevMid!,\n                endX: dropHintElement.offsetLeft,\n                dropHintElementRef: prevRef,\n              };\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n   */\n  private _computeDropHintToBeShown = (clientX: number): void => {\n    const isRtl = getRTL(this.props.theme);\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      const headerOriginX = clientRect.left;\n      const eventXRelativePosition = clientX - headerOriginX;\n      const currentDropHintIndex = this._currentDropHintIndex;\n      if (this._isValidCurrentDropHintIndex()) {\n        if (\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex!].startX,\n            this._dropHintDetails[currentDropHintIndex!].endX,\n          )\n        ) {\n          return;\n        }\n      }\n      const { columns = NO_COLUMNS } = this.props;\n      // Safe to assume this is defined since we're handling a drag/drop event\n      const columnReorderProps = this._getColumnReorderProps()!;\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n      const currentIndex: number = frozenColumnCountFromStart;\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\n      let indexToUpdate = -1;\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\n        indexToUpdate = currentIndex;\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\n        indexToUpdate = lastValidColumn;\n      } else if (this._isValidCurrentDropHintIndex()) {\n        if (\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! + 1;\n        } else if (\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! - 1;\n        }\n      }\n      if (indexToUpdate === -1) {\n        let startIndex = frozenColumnCountFromStart;\n        let endIndex = lastValidColumn;\n        while (startIndex < endIndex) {\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\n          if (\n            _liesBetween(\n              isRtl,\n              eventXRelativePosition,\n              this._dropHintDetails[middleIndex].startX,\n              this._dropHintDetails[middleIndex].endX,\n            )\n          ) {\n            indexToUpdate = middleIndex;\n            break;\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            endIndex = middleIndex;\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            startIndex = middleIndex;\n          }\n        }\n      }\n\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\n        if (this._isValidCurrentDropHintIndex()) {\n          this._resetDropHints();\n        }\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n        this._resetDropHints();\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n        this._currentDropHintIndex = indexToUpdate;\n      }\n    }\n  };\n\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      if (\n        event.clientX > clientRect.left &&\n        event.clientX < clientRect.right &&\n        event.clientY > clientRect.top &&\n        event.clientY < clientRect.bottom\n      ) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  }\n\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { columnResizeDetails } = this.state;\n    const classNames = this._classNames;\n\n    return column.isResizable ? (\n      <div\n        key={`${column.key}_sizer`}\n        aria-hidden={true}\n        role=\"button\"\n        data-is-focusable={false}\n        onClick={_stopPropagation}\n        data-sizer-index={columnIndex}\n        onBlur={this._onSizerBlur}\n        className={css(\n          classNames.cellSizer,\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\n          {\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\n          },\n        )}\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\n      />\n    ) : null;\n  };\n\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { onRenderDivider } = column;\n    return onRenderDivider\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\n      : this._renderColumnSizer({ column, columnIndex });\n  }\n\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\n    const classNames = this._classNames;\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return (\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\n        <div\n          role=\"presentation\"\n          key={`dropHintCircleKey`}\n          className={classNames.dropHintCaretStyle}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          aria-hidden={true}\n        >\n          <IconComponent iconName={'CircleShapeSolid'} />\n        </div>\n        <div\n          key={`dropHintLineKey`}\n          aria-hidden={true}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          className={classNames.dropHintLineStyle}\n        />\n      </div>\n    );\n  }\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  }\n\n  /**\n   * Called when the select all toggle is clicked.\n   */\n  private _onSelectAllClicked = (): void => {\n    const { selection } = this.props;\n\n    if (selection) {\n      selection.toggleAllSelected();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n    const columnIndex = Number(columnIndexAttr);\n    const { columns = NO_COLUMNS } = this.props;\n\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    this.setState({\n      columnResizeDetails: {\n        columnIndex,\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\n        originX: ev.clientX,\n      },\n    });\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n      this.setState({ isSizing: true });\n    }\n  };\n\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\n\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n\n    if (!columnIndexAttr || isSizing) {\n      return;\n    }\n\n    const columnIndex = Number(columnIndexAttr);\n\n    if (!columnResizeDetails) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: {\n            columnIndex,\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\n          },\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    } else {\n      let increment: number | undefined;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: undefined,\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.left) {\n        increment = getRTL(this.props.theme) ? 1 : -1;\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.right) {\n        increment = getRTL(this.props.theme) ? -1 : 1;\n      }\n\n      if (increment) {\n        if (!ev.shiftKey) {\n          increment *= 10;\n        }\n\n        this.setState({\n          columnResizeDetails: {\n            ...columnResizeDetails,\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\n          },\n        });\n\n        if (onColumnResized) {\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  /**\n   * mouse move event handler in the header\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n   *\n   * @param ev - mouse move event\n   */\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const {\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons,\n    } = ev;\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onSizerMouseUp(ev);\n      return;\n    }\n\n    if (ev.clientX !== columnResizeDetails!.originX) {\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\n      }\n    }\n\n    if (onColumnResized) {\n      let movement = ev.clientX - columnResizeDetails!.originX!;\n\n      if (getRTL(this.props.theme)) {\n        movement = -movement;\n      }\n\n      onColumnResized(\n        columns[columnResizeDetails!.columnIndex],\n        columnResizeDetails!.columnMinWidth + movement,\n        columnResizeDetails!.columnIndex,\n      );\n    }\n  };\n\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { columnResizeDetails } = this.state;\n\n    if (columnResizeDetails) {\n      this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false,\n      });\n    }\n  };\n\n  /**\n   * mouse up event handler in the header\n   * clear the resize related state.\n   * This is to ensure we can catch double click event\n   *\n   * @param ev - mouse up event\n   */\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    this.setState({\n      columnResizeDetails: undefined,\n      isSizing: false,\n    });\n\n    if (onColumnIsSizingChanged) {\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\n    }\n  };\n\n  private _onSelectionChanged(): void {\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected,\n      });\n    }\n  }\n\n  private _onToggleCollapseAll = (): void => {\n    const { onToggleCollapseAll } = this.props;\n    const newCollapsed = !this.state.isAllCollapsed;\n    this.setState({\n      isAllCollapsed: newCollapsed,\n    });\n    if (onToggleCollapseAll) {\n      onToggleCollapseAll(newCollapsed);\n    }\n  };\n}\n\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a >= b : a <= b;\n}\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a <= b : a >= b;\n}\n\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\n  ev.stopPropagation();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}