{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List } from '../../List';\nimport { SelectionMode } from '../../Selection';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nvar getClassNames = classNamesFunction();\nvar ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.rowHeight,\n  COMPACT_ROW_HEIGHT = DEFAULT_ROW_HEIGHTS.compactRowHeight;\nvar GroupedListBase = /** @class */function (_super) {\n  __extends(GroupedListBase, _super);\n  function GroupedListBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._list = React.createRef();\n    _this._renderGroup = function (group, groupIndex) {\n      var _a = _this.props,\n        dragDropEvents = _a.dragDropEvents,\n        dragDropHelper = _a.dragDropHelper,\n        eventsToRegister = _a.eventsToRegister,\n        groupProps = _a.groupProps,\n        items = _a.items,\n        listProps = _a.listProps,\n        onRenderCell = _a.onRenderCell,\n        selectionMode = _a.selectionMode,\n        selection = _a.selection,\n        viewport = _a.viewport,\n        onShouldVirtualize = _a.onShouldVirtualize,\n        groups = _a.groups,\n        compact = _a.compact;\n      // override group header/footer props as needed\n      var dividerProps = {\n        onToggleSelectGroup: _this._onToggleSelectGroup,\n        onToggleCollapse: _this._onToggleCollapse,\n        onToggleSummarize: _this._onToggleSummarize\n      };\n      var headerProps = __assign(__assign({}, groupProps.headerProps), dividerProps);\n      var showAllProps = __assign(__assign({}, groupProps.showAllProps), dividerProps);\n      var footerProps = __assign(__assign({}, groupProps.footerProps), dividerProps);\n      var groupNestingDepth = _this._getGroupNestingDepth();\n      if (!groupProps.showEmptyGroups && group && group.count === 0) {\n        return null;\n      }\n      var finalListProps = __assign(__assign({}, listProps || {}), {\n        version: _this.state.version\n      });\n      return React.createElement(GroupedListSection, {\n        key: _this._getGroupKey(group, groupIndex),\n        dragDropEvents: dragDropEvents,\n        dragDropHelper: dragDropHelper,\n        eventsToRegister: eventsToRegister,\n        footerProps: footerProps,\n        getGroupItemLimit: groupProps && groupProps.getGroupItemLimit,\n        group: group,\n        groupIndex: groupIndex,\n        groupNestingDepth: groupNestingDepth,\n        groupProps: groupProps,\n        headerProps: headerProps,\n        listProps: finalListProps,\n        items: items,\n        onRenderCell: onRenderCell,\n        onRenderGroupHeader: groupProps.onRenderHeader,\n        onRenderGroupShowAll: groupProps.onRenderShowAll,\n        onRenderGroupFooter: groupProps.onRenderFooter,\n        selectionMode: selectionMode,\n        selection: selection,\n        showAllProps: showAllProps,\n        viewport: viewport,\n        onShouldVirtualize: onShouldVirtualize,\n        groupedListClassNames: _this._classNames,\n        groups: groups,\n        compact: compact\n      });\n    };\n    _this._getDefaultGroupItemLimit = function (group) {\n      return group.children && group.children.length > 0 ? group.children.length : group.count;\n    };\n    _this._getGroupItemLimit = function (group) {\n      var groupProps = _this.props.groupProps;\n      var getGroupItemLimit = groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : _this._getDefaultGroupItemLimit;\n      return getGroupItemLimit(group);\n    };\n    _this._getGroupHeight = function (group) {\n      var rowHeight = _this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n      return rowHeight + (group.isCollapsed ? 0 : rowHeight * _this._getGroupItemLimit(group));\n    };\n    _this._getPageHeight = function (itemIndex) {\n      var groups = _this.state.groups;\n      var _a = _this.props.getGroupHeight,\n        getGroupHeight = _a === void 0 ? _this._getGroupHeight : _a;\n      var pageGroup = groups && groups[itemIndex];\n      if (pageGroup) {\n        return getGroupHeight(pageGroup, itemIndex);\n      } else {\n        return 0;\n      }\n    };\n    _this._onToggleCollapse = function (group) {\n      var groupProps = _this.props.groupProps;\n      var onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n      if (group) {\n        if (onToggleCollapse) {\n          onToggleCollapse(group);\n        }\n        group.isCollapsed = !group.isCollapsed;\n        _this._updateIsSomeGroupExpanded();\n        _this.forceUpdate();\n      }\n    };\n    _this._onToggleSelectGroup = function (group) {\n      var _a = _this.props,\n        selection = _a.selection,\n        selectionMode = _a.selectionMode;\n      if (group && selection && selectionMode === SelectionMode.multiple) {\n        selection.toggleRangeSelected(group.startIndex, group.count);\n      }\n    };\n    _this._isInnerZoneKeystroke = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n    };\n    _this._onToggleSummarize = function (group) {\n      var groupProps = _this.props.groupProps;\n      var onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n      if (onToggleSummarize) {\n        onToggleSummarize(group);\n      } else {\n        if (group) {\n          group.isShowingAll = !group.isShowingAll;\n        }\n        _this.forceUpdate();\n      }\n    };\n    _this._getPageSpecification = function (itemIndex) {\n      var groups = _this.state.groups;\n      var pageGroup = groups && groups[itemIndex];\n      return {\n        key: pageGroup && pageGroup.key\n      };\n    };\n    initializeComponentRef(_this);\n    _this._isSomeGroupExpanded = _this._computeIsSomeGroupExpanded(props.groups);\n    var _a = props.listProps,\n      _b = _a === void 0 ? {} : _a,\n      _c = _b.version,\n      version = _c === void 0 ? {} : _c;\n    _this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version: version\n    };\n    return _this;\n  }\n  GroupedListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    var groups = nextProps.groups,\n      selectionMode = nextProps.selectionMode,\n      compact = nextProps.compact,\n      items = nextProps.items,\n      listProps = nextProps.listProps;\n    var listVersion = listProps && listProps.version;\n    var nextState = __assign(__assign({}, previousState), {\n      selectionMode: selectionMode,\n      compact: compact,\n      groups: groups,\n      listProps: listProps,\n      items: items\n    });\n    var shouldForceUpdates = false;\n    var previousListVersion = previousState.listProps && previousState.listProps.version;\n    if (listVersion !== previousListVersion || items !== previousState.items || groups !== previousState.groups || selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n    if (shouldForceUpdates) {\n      nextState = __assign(__assign({}, nextState), {\n        version: {}\n      });\n    }\n    return nextState;\n  };\n  GroupedListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  };\n  GroupedListBase.prototype.getStartItemIndexInView = function () {\n    return this._list.current.getStartItemIndexInView() || 0;\n  };\n  GroupedListBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n      groupProps = _a.groupProps,\n      _b = _a.groups,\n      groups = _b === void 0 ? [] : _b;\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  };\n  GroupedListBase.prototype.render = function () {\n    var _a = this.props,\n      className = _a.className,\n      usePageCache = _a.usePageCache,\n      onShouldVirtualize = _a.onShouldVirtualize,\n      theme = _a.theme,\n      _b = _a.role,\n      role = _b === void 0 ? 'treegrid' : _b,\n      styles = _a.styles,\n      compact = _a.compact,\n      _c = _a.focusZoneProps,\n      focusZoneProps = _c === void 0 ? {} : _c,\n      _d = _a.rootListProps,\n      rootListProps = _d === void 0 ? {} : _d;\n    var _e = this.state,\n      groups = _e.groups,\n      version = _e.version;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      compact: compact\n    });\n    var _f = focusZoneProps.shouldEnterInnerZone,\n      shouldEnterInnerZone = _f === void 0 ? this._isInnerZoneKeystroke : _f;\n    return React.createElement(FocusZone, __assign({\n      direction: FocusZoneDirection.vertical,\n      \"data-automationid\": \"GroupedList\",\n      \"data-is-scrollable\": \"false\",\n      role: \"presentation\"\n    }, focusZoneProps, {\n      shouldEnterInnerZone: shouldEnterInnerZone,\n      className: css(this._classNames.root, focusZoneProps.className)\n    }), !groups ? this._renderGroup(undefined, 0) : React.createElement(List, __assign({\n      ref: this._list,\n      role: role,\n      items: groups,\n      onRenderCell: this._renderGroup,\n      getItemCountForPage: this._returnOne,\n      getPageHeight: this._getPageHeight,\n      getPageSpecification: this._getPageSpecification,\n      usePageCache: usePageCache,\n      onShouldVirtualize: onShouldVirtualize,\n      version: version\n    }, rootListProps)));\n  };\n  GroupedListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n    this._forceListUpdates();\n  };\n  GroupedListBase.prototype.toggleCollapseAll = function (allCollapsed) {\n    var _a = this.state.groups,\n      groups = _a === void 0 ? [] : _a;\n    var groupProps = this.props.groupProps;\n    var onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n      this._setGroupsCollapsedState(groups, allCollapsed);\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n  GroupedListBase.prototype._setGroupsCollapsedState = function (groups, isCollapsed) {\n    for (var groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  };\n  GroupedListBase.prototype._returnOne = function () {\n    return 1;\n  };\n  GroupedListBase.prototype._getGroupKey = function (group, index) {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  };\n  GroupedListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.state.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n    return level;\n  };\n  GroupedListBase.prototype._forceListUpdates = function (groups) {\n    this.setState({\n      version: {}\n    });\n  };\n  GroupedListBase.prototype._computeIsSomeGroupExpanded = function (groups) {\n    var _this = this;\n    return !!(groups && groups.some(function (group) {\n      return group.children ? _this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed;\n    }));\n  };\n  GroupedListBase.prototype._updateIsSomeGroupExpanded = function () {\n    var groups = this.state.groups;\n    var onGroupExpandStateChanged = this.props.onGroupExpandStateChanged;\n    var newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  };\n  GroupedListBase.defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false\n  };\n  return GroupedListBase;\n}(React.Component);\nexport { GroupedListBase };","map":{"version":3,"names":["React","initializeComponentRef","classNamesFunction","KeyCodes","getRTLSafeKeyCode","css","GroupedListSection","List","SelectionMode","DEFAULT_ROW_HEIGHTS","FocusZone","FocusZoneDirection","getClassNames","ROW_HEIGHT","rowHeight","COMPACT_ROW_HEIGHT","compactRowHeight","GroupedListBase","_super","__extends","props","_this","call","_list","createRef","_renderGroup","group","groupIndex","_a","dragDropEvents","dragDropHelper","eventsToRegister","groupProps","items","listProps","onRenderCell","selectionMode","selection","viewport","onShouldVirtualize","groups","compact","dividerProps","onToggleSelectGroup","_onToggleSelectGroup","onToggleCollapse","_onToggleCollapse","onToggleSummarize","_onToggleSummarize","headerProps","__assign","showAllProps","footerProps","groupNestingDepth","_getGroupNestingDepth","showEmptyGroups","count","finalListProps","version","state","createElement","key","_getGroupKey","getGroupItemLimit","onRenderGroupHeader","onRenderHeader","onRenderGroupShowAll","onRenderShowAll","onRenderGroupFooter","onRenderFooter","groupedListClassNames","_classNames","_getDefaultGroupItemLimit","children","length","_getGroupItemLimit","_getGroupHeight","isCollapsed","_getPageHeight","itemIndex","getGroupHeight","pageGroup","_updateIsSomeGroupExpanded","forceUpdate","multiple","toggleRangeSelected","startIndex","_isInnerZoneKeystroke","ev","which","right","isShowingAll","_getPageSpecification","_isSomeGroupExpanded","_computeIsSomeGroupExpanded","_b","_c","getDerivedStateFromProps","nextProps","previousState","listVersion","nextState","shouldForceUpdates","previousListVersion","prototype","scrollToIndex","index","measureItem","scrollToMode","current","getStartItemIndexInView","componentDidMount","isAllGroupsCollapsed","_setGroupsCollapsedState","render","className","usePageCache","theme","role","styles","focusZoneProps","_d","rootListProps","_e","_f","shouldEnterInnerZone","direction","vertical","root","undefined","ref","getItemCountForPage","_returnOne","getPageHeight","getPageSpecification","_forceListUpdates","toggleCollapseAll","allCollapsed","onToggleCollapseAll","String","level","groupsInLevel","setState","some","onGroupExpandStateChanged","newIsSomeGroupExpanded","defaultProps","isHeaderVisible","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedList.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode } from '../../List';\nimport { SelectionMode } from '../../Selection';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport type { IListProps } from '../../List';\nimport type { IGroupHeaderProps } from './GroupHeader';\nimport type { IGroupShowAllProps } from './GroupShowAll.styles';\nimport type { IGroupFooterProps } from './GroupFooter.types';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n      items,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.children && group.children.length > 0 ? group.children.length : group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // eslint-disable-next-line deprecation/deprecation\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}