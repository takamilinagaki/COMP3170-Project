{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, useFocusRects } from '@fluentui/utilities';\nvar getClassNames = classNamesFunction();\n/**\n * The useLink hook processes the Link component props and returns\n * state, slots and slotProps for consumption by the component.\n */\nexport var useLink = function (props, forwardedRef) {\n  var as = props.as,\n    className = props.className,\n    disabled = props.disabled,\n    href = props.href,\n    onClick = props.onClick,\n    styles = props.styles,\n    theme = props.theme,\n    underline = props.underline;\n  var rootRef = React.useRef(null);\n  var mergedRootRefs = useMergedRefs(rootRef, forwardedRef);\n  useComponentRef(props, rootRef);\n  useFocusRects(rootRef);\n  var classNames = getClassNames(styles, {\n    className: className,\n    isButton: !href,\n    isDisabled: disabled,\n    isUnderlined: underline,\n    theme: theme\n  });\n  var _onClick = function (ev) {\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n  var rootType = as ? as : href ? 'a' : 'button';\n  var state = {};\n  var slots = {\n    root: rootType\n  };\n  var slotProps = {\n    root: __assign(__assign({}, adjustPropsForRootType(rootType, props)), {\n      'aria-disabled': disabled,\n      className: classNames.root,\n      onClick: _onClick,\n      ref: mergedRootRefs\n    })\n  };\n  return {\n    state: state,\n    slots: slots,\n    slotProps: slotProps\n  };\n};\nvar useComponentRef = function (props, link) {\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      focus: function () {\n        if (link.current) {\n          link.current.focus();\n        }\n      }\n    };\n  }, [link]);\n};\nvar adjustPropsForRootType = function (RootType, props) {\n  // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n  // as those will always be removed. We also take some props that are optional\n  // based on the RootType.\n  var as = props.as,\n    disabled = props.disabled,\n    target = props.target,\n    href = props.href,\n    theme = props.theme,\n    getStyles = props.getStyles,\n    styles = props.styles,\n    componentRef = props.componentRef,\n    underline = props.underline,\n    restProps = __rest(props, [\"as\", \"disabled\", \"target\", \"href\", \"theme\", \"getStyles\", \"styles\", \"componentRef\", \"underline\"]);\n  // RootType will be a string if we're dealing with an html component\n  if (typeof RootType === 'string') {\n    // Remove the disabled prop for anchor elements\n    if (RootType === 'a') {\n      return __assign({\n        target: target,\n        href: disabled ? undefined : href\n      }, restProps);\n    }\n    // Add the type='button' prop for button elements\n    if (RootType === 'button') {\n      return __assign({\n        type: 'button',\n        disabled: disabled\n      }, restProps);\n    }\n    // Remove the target and href props for all other non anchor elements\n    return __assign(__assign({}, restProps), {\n      disabled: disabled\n    });\n  }\n  // Retain all props except 'as' for ReactComponents\n  return __assign({\n    target: target,\n    href: href,\n    disabled: disabled\n  }, restProps);\n};","map":{"version":3,"names":["React","useMergedRefs","classNamesFunction","useFocusRects","getClassNames","useLink","props","forwardedRef","as","className","disabled","href","onClick","styles","theme","underline","rootRef","useRef","mergedRootRefs","useComponentRef","classNames","isButton","isDisabled","isUnderlined","_onClick","ev","preventDefault","rootType","state","slots","root","slotProps","__assign","adjustPropsForRootType","ref","link","useImperativeHandle","componentRef","focus","current","RootType","target","getStyles","restProps","__rest","undefined","type"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/Link/useLink.ts"],"sourcesContent":["import * as React from 'react';\nimport { useMergedRefs } from '@fluentui/react-hooks';\nimport { classNamesFunction, useFocusRects } from '@fluentui/utilities';\nimport type { ILink, ILinkProps, ILinkStyleProps, ILinkStyles } from './Link.types';\n\nconst getClassNames = classNamesFunction<ILinkStyleProps, ILinkStyles>();\n\n/**\n * The useLink hook processes the Link component props and returns\n * state, slots and slotProps for consumption by the component.\n */\nexport const useLink = (props: ILinkProps, forwardedRef: React.Ref<HTMLElement>): any => {\n  const { as, className, disabled, href, onClick, styles, theme, underline } = props;\n  const rootRef = React.useRef<HTMLDivElement | null>(null);\n  const mergedRootRefs: React.Ref<HTMLElement> = useMergedRefs(rootRef, forwardedRef);\n\n  useComponentRef(props, rootRef);\n  useFocusRects(rootRef);\n\n  const classNames = getClassNames(styles!, {\n    className,\n    isButton: !href,\n    isDisabled: disabled,\n    isUnderlined: underline,\n    theme: theme!,\n  });\n\n  const _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    if (disabled) {\n      ev.preventDefault();\n    } else if (onClick) {\n      onClick(ev);\n    }\n  };\n\n  const rootType = as ? as : href ? 'a' : 'button';\n\n  const state = {};\n  const slots = { root: rootType };\n  const slotProps = {\n    root: {\n      ...adjustPropsForRootType(rootType, props),\n      'aria-disabled': disabled,\n      className: classNames.root,\n      onClick: _onClick,\n      ref: mergedRootRefs,\n    },\n  };\n\n  return { state, slots, slotProps };\n};\n\nconst useComponentRef = (props: ILinkProps, link: React.RefObject<ILink>) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      focus() {\n        if (link.current) {\n          link.current.focus();\n        }\n      },\n    }),\n    [link],\n  );\n};\n\nconst adjustPropsForRootType = (\n  RootType: string | React.ComponentClass | React.FunctionComponent,\n  props: ILinkProps & { getStyles?: any },\n): Partial<ILinkProps> => {\n  // Deconstruct the props so we remove props like `as`, `theme` and `styles`\n  // as those will always be removed. We also take some props that are optional\n  // based on the RootType.\n  const { as, disabled, target, href, theme, getStyles, styles, componentRef, underline, ...restProps } = props;\n\n  // RootType will be a string if we're dealing with an html component\n  if (typeof RootType === 'string') {\n    // Remove the disabled prop for anchor elements\n    if (RootType === 'a') {\n      return {\n        target,\n        href: disabled ? undefined : href,\n        ...restProps,\n      };\n    }\n\n    // Add the type='button' prop for button elements\n    if (RootType === 'button') {\n      return {\n        type: 'button',\n        disabled,\n        ...restProps,\n      };\n    }\n\n    // Remove the target and href props for all other non anchor elements\n    return { ...restProps, disabled };\n  }\n\n  // Retain all props except 'as' for ReactComponents\n  return { target, href, disabled, ...restProps };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}