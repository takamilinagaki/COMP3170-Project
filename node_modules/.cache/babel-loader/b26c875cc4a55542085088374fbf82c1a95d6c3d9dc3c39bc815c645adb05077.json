{"ast":null,"code":"import { MAX_COLOR_ALPHA } from './consts';\n/**\n * @internal\n * Get a CSS color string from some color components.\n * If `a` is specified and not 100, returns an `rgba()` string.\n * Otherwise returns `hex` prefixed with #.\n */\nexport function _rgbaOrHexString(r, g, b, a, hex) {\n  return a === MAX_COLOR_ALPHA || typeof a !== 'number' ? \"#\".concat(hex) : \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(a / MAX_COLOR_ALPHA, \")\");\n}","map":{"version":3,"names":["MAX_COLOR_ALPHA","_rgbaOrHexString","r","g","b","a","hex","concat"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/color/_rgbaOrHexString.ts"],"sourcesContent":["import { MAX_COLOR_ALPHA } from './consts';\n\n/**\n * @internal\n * Get a CSS color string from some color components.\n * If `a` is specified and not 100, returns an `rgba()` string.\n * Otherwise returns `hex` prefixed with #.\n */\nexport function _rgbaOrHexString(r: number, g: number, b: number, a: number | undefined, hex: string): string {\n  return a === MAX_COLOR_ALPHA || typeof a !== 'number' ? `#${hex}` : `rgba(${r}, ${g}, ${b}, ${a / MAX_COLOR_ALPHA})`;\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,UAAU;AAE1C;;;;;;AAMA,OAAM,SAAUC,gBAAgBA,CAACC,CAAS,EAAEC,CAAS,EAAEC,CAAS,EAAEC,CAAqB,EAAEC,GAAW;EAClG,OAAOD,CAAC,KAAKL,eAAe,IAAI,OAAOK,CAAC,KAAK,QAAQ,GAAG,IAAAE,MAAA,CAAID,GAAG,CAAE,GAAG,QAAAC,MAAA,CAAQL,CAAC,QAAAK,MAAA,CAAKJ,CAAC,QAAAI,MAAA,CAAKH,CAAC,QAAAG,MAAA,CAAKF,CAAC,GAAGL,eAAe,MAAG;AACtH"},"metadata":{},"sourceType":"module","externalDependencies":[]}