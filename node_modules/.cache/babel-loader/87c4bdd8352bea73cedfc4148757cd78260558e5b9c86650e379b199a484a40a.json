{"ast":null,"code":"var _a;\nimport { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nvar ICON_MAP = (_a = {}, _a[MessageBarType.info] = 'Info', _a[MessageBarType.warning] = 'Info', _a[MessageBarType.error] = 'ErrorBadge', _a[MessageBarType.blocked] = 'Blocked2', _a[MessageBarType.severeWarning] = 'Warning', _a[MessageBarType.success] = 'Completed', _a);\nvar COMPONENT_NAME = 'MessageBar';\nvar getClassNames = classNamesFunction();\nvar getAnnouncementPriority = function (messageBarType) {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\nvar getRole = function (messageBarType) {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\nexport var MessageBarBase = React.forwardRef(function (props, ref) {\n  var _a = useBoolean(false),\n    expandSingleLine = _a[0],\n    toggleExpandSingleLine = _a[1].toggle;\n  var labelId = useId('MessageBar');\n  var actions = props.actions,\n    className = props.className,\n    children = props.children,\n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel = props.overflowButtonAriaLabel,\n    dismissIconProps = props.dismissIconProps,\n    styles = props.styles,\n    theme = props.theme,\n    _b = props.messageBarType,\n    messageBarType = _b === void 0 ? MessageBarType.info : _b,\n    _c = props.onDismiss,\n    onDismiss = _c === void 0 ? undefined : _c,\n    _d = props.isMultiline,\n    isMultiline = _d === void 0 ? true : _d,\n    truncated = props.truncated,\n    dismissButtonAriaLabel = props.dismissButtonAriaLabel,\n    messageBarIconProps = props.messageBarIconProps,\n    role = props.role,\n    _e = props.delayedRender,\n    delayedRender = _e === void 0 ? true : _e,\n    expandButtonProps = props.expandButtonProps;\n  var nativeProps = getNativeProps(props, htmlElementProperties, ['className', 'role']);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated: truncated,\n    isMultiline: isMultiline,\n    expandSingleLine: expandSingleLine,\n    className: className\n  });\n  var expandIconProps = {\n    iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown'\n  };\n  var regionProps = actions || onDismiss ? {\n    'aria-describedby': labelId,\n    role: 'region'\n  } : {};\n  var actionsDiv = actions ? React.createElement(\"div\", {\n    className: classNames.actions\n  }, actions) : null;\n  var dismissButton = onDismiss ? React.createElement(IconButton, {\n    disabled: false,\n    className: classNames.dismissal,\n    onClick: onDismiss,\n    iconProps: dismissIconProps ? dismissIconProps : {\n      iconName: 'Clear'\n    },\n    title: dismissButtonAriaLabel,\n    ariaLabel: dismissButtonAriaLabel\n  }) : null;\n  return React.createElement(\"div\", __assign({\n    ref: ref,\n    className: classNames.root\n  }, regionProps), React.createElement(\"div\", {\n    className: classNames.content\n  }, React.createElement(\"div\", {\n    className: classNames.iconContainer,\n    \"aria-hidden\": true\n  }, messageBarIconProps ? React.createElement(Icon, __assign({}, messageBarIconProps, {\n    className: css(classNames.icon, messageBarIconProps.className)\n  })) : React.createElement(Icon, {\n    iconName: ICON_MAP[messageBarType],\n    className: classNames.icon\n  })), React.createElement(\"div\", {\n    className: classNames.text,\n    id: labelId,\n    role: role || getRole(messageBarType),\n    \"aria-live\": getAnnouncementPriority(messageBarType)\n  }, React.createElement(\"span\", __assign({\n    className: classNames.innerText\n  }, nativeProps), delayedRender ? React.createElement(DelayedRender, null, React.createElement(\"span\", null, children)) :\n  // this span is probably not necessary, but preserving it for now in case anyone\n  // has styling that expects it to be present\n  React.createElement(\"span\", null, children))), /* singleline expand/collapse button */!isMultiline && !actionsDiv && truncated && React.createElement(\"div\", {\n    className: classNames.expandSingleLine\n  }, React.createElement(IconButton, __assign({\n    disabled: false,\n    className: classNames.expand,\n    onClick: toggleExpandSingleLine,\n    iconProps: expandIconProps,\n    ariaLabel: overflowButtonAriaLabel,\n    \"aria-expanded\": expandSingleLine\n  }, expandButtonProps))), !isMultiline && actionsDiv, /* singleline dismiss */!isMultiline && dismissButton && React.createElement(\"div\", {\n    className: classNames.dismissSingleLine\n  }, dismissButton), isMultiline && dismissButton), isMultiline && actionsDiv);\n});\nMessageBarBase.displayName = COMPONENT_NAME;","map":{"version":3,"names":["React","DelayedRender","classNamesFunction","getNativeProps","htmlElementProperties","css","IconButton","Icon","MessageBarType","useId","useBoolean","ICON_MAP","_a","info","warning","error","blocked","severeWarning","success","COMPONENT_NAME","getClassNames","getAnnouncementPriority","messageBarType","getRole","MessageBarBase","forwardRef","props","ref","expandSingleLine","toggleExpandSingleLine","toggle","labelId","actions","className","children","overflowButtonAriaLabel","dismissIconProps","styles","theme","_b","_c","onDismiss","undefined","_d","isMultiline","truncated","dismissButtonAriaLabel","messageBarIconProps","role","_e","delayedRender","expandButtonProps","nativeProps","classNames","expandIconProps","iconName","regionProps","actionsDiv","createElement","dismissButton","disabled","dismissal","onClick","iconProps","title","ariaLabel","__assign","root","content","iconContainer","icon","text","id","innerText","expand","dismissSingleLine","displayName"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/MessageBar/MessageBar.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DelayedRender, classNamesFunction, getNativeProps, htmlElementProperties, css } from '../../Utilities';\nimport { IconButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { MessageBarType } from './MessageBar.types';\nimport { useId, useBoolean } from '@fluentui/react-hooks';\nimport type { IMessageBarProps, IMessageBarStyleProps, IMessageBarStyles } from './MessageBar.types';\n\nconst ICON_MAP = {\n  [MessageBarType.info]: 'Info',\n  [MessageBarType.warning]: 'Info',\n  [MessageBarType.error]: 'ErrorBadge',\n  [MessageBarType.blocked]: 'Blocked2',\n  [MessageBarType.severeWarning]: 'Warning',\n  [MessageBarType.success]: 'Completed',\n};\n\nconst COMPONENT_NAME = 'MessageBar';\n\nconst getClassNames = classNamesFunction<IMessageBarStyleProps, IMessageBarStyles>();\n\nconst getAnnouncementPriority = (messageBarType: MessageBarType): 'assertive' | 'polite' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'assertive';\n  }\n  return 'polite';\n};\n\nconst getRole = (messageBarType: MessageBarType): 'alert' | 'status' => {\n  switch (messageBarType) {\n    case MessageBarType.blocked:\n    case MessageBarType.error:\n    case MessageBarType.severeWarning:\n      return 'alert';\n  }\n  return 'status';\n};\n\nexport const MessageBarBase: React.FunctionComponent<IMessageBarProps> = React.forwardRef<\n  HTMLDivElement,\n  IMessageBarProps\n>((props, ref) => {\n  const [expandSingleLine, { toggle: toggleExpandSingleLine }] = useBoolean(false);\n  const labelId = useId('MessageBar');\n\n  const {\n    actions,\n    className,\n    children,\n    // eslint-disable-next-line deprecation/deprecation\n    overflowButtonAriaLabel,\n    dismissIconProps,\n    styles,\n    theme,\n    messageBarType = MessageBarType.info,\n    onDismiss = undefined,\n    isMultiline = true,\n    truncated,\n    dismissButtonAriaLabel,\n    messageBarIconProps,\n    role,\n    delayedRender = true,\n    expandButtonProps,\n  } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLSpanElement>>(props, htmlElementProperties, [\n    'className',\n    'role',\n  ]);\n\n  const classNames: { [key in keyof IMessageBarStyles]: string } = getClassNames(styles, {\n    theme: theme!,\n    messageBarType: messageBarType || MessageBarType.info,\n    onDismiss: onDismiss !== undefined,\n    actions: actions !== undefined,\n    truncated,\n    isMultiline,\n    expandSingleLine,\n    className,\n  });\n\n  const expandIconProps = { iconName: expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' };\n  const regionProps = actions || onDismiss ? { 'aria-describedby': labelId, role: 'region' } : {};\n  const actionsDiv = actions ? <div className={classNames.actions}>{actions}</div> : null;\n\n  const dismissButton = onDismiss ? (\n    <IconButton\n      disabled={false}\n      className={classNames.dismissal}\n      onClick={onDismiss}\n      iconProps={dismissIconProps ? dismissIconProps : { iconName: 'Clear' }}\n      title={dismissButtonAriaLabel}\n      ariaLabel={dismissButtonAriaLabel}\n    />\n  ) : null;\n\n  return (\n    <div ref={ref} className={classNames.root} {...regionProps}>\n      <div className={classNames.content}>\n        <div className={classNames.iconContainer} aria-hidden>\n          {messageBarIconProps ? (\n            <Icon {...messageBarIconProps} className={css(classNames.icon, messageBarIconProps.className)} />\n          ) : (\n            <Icon iconName={ICON_MAP[messageBarType!]} className={classNames.icon} />\n          )}\n        </div>\n        <div\n          className={classNames.text}\n          id={labelId}\n          role={role || getRole(messageBarType)}\n          aria-live={getAnnouncementPriority(messageBarType)}\n        >\n          <span className={classNames.innerText} {...nativeProps}>\n            {delayedRender ? (\n              <DelayedRender>\n                <span>{children}</span>\n              </DelayedRender>\n            ) : (\n              // this span is probably not necessary, but preserving it for now in case anyone\n              // has styling that expects it to be present\n              <span>{children}</span>\n            )}\n          </span>\n        </div>\n        {\n          /* singleline expand/collapse button */ !isMultiline && !actionsDiv && truncated && (\n            <div className={classNames.expandSingleLine}>\n              <IconButton\n                disabled={false}\n                className={classNames.expand}\n                onClick={toggleExpandSingleLine}\n                iconProps={expandIconProps}\n                ariaLabel={overflowButtonAriaLabel}\n                aria-expanded={expandSingleLine}\n                {...expandButtonProps}\n              />\n            </div>\n          )\n        }\n        {/* singleline actions */ !isMultiline && actionsDiv}\n        {\n          /* singleline dismiss */ !isMultiline && dismissButton && (\n            <div className={classNames.dismissSingleLine}>{dismissButton}</div>\n          )\n        }\n        {/* multiline dismiss */ isMultiline && dismissButton}\n      </div>\n      {/* multiline actions */ isMultiline && actionsDiv}\n    </div>\n  );\n});\nMessageBarBase.displayName = COMPONENT_NAME;\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,qBAAqB,EAAEC,GAAG,QAAQ,iBAAiB;AAC/G,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,IAAI,QAAQ,YAAY;AACjC,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,KAAK,EAAEC,UAAU,QAAQ,uBAAuB;AAGzD,IAAMC,QAAQ,IAAAC,EAAA,OACZA,EAAA,CAACJ,cAAc,CAACK,IAAI,IAAG,MAAM,EAC7BD,EAAA,CAACJ,cAAc,CAACM,OAAO,IAAG,MAAM,EAChCF,EAAA,CAACJ,cAAc,CAACO,KAAK,IAAG,YAAY,EACpCH,EAAA,CAACJ,cAAc,CAACQ,OAAO,IAAG,UAAU,EACpCJ,EAAA,CAACJ,cAAc,CAACS,aAAa,IAAG,SAAS,EACzCL,EAAA,CAACJ,cAAc,CAACU,OAAO,IAAG,WAAW,E,GACtC;AAED,IAAMC,cAAc,GAAG,YAAY;AAEnC,IAAMC,aAAa,GAAGlB,kBAAkB,EAA4C;AAEpF,IAAMmB,uBAAuB,GAAG,SAAAA,CAACC,cAA8B;EAC7D,QAAQA,cAAc;IACpB,KAAKd,cAAc,CAACQ,OAAO;IAC3B,KAAKR,cAAc,CAACO,KAAK;IACzB,KAAKP,cAAc,CAACS,aAAa;MAC/B,OAAO,WAAW;;EAEtB,OAAO,QAAQ;AACjB,CAAC;AAED,IAAMM,OAAO,GAAG,SAAAA,CAACD,cAA8B;EAC7C,QAAQA,cAAc;IACpB,KAAKd,cAAc,CAACQ,OAAO;IAC3B,KAAKR,cAAc,CAACO,KAAK;IACzB,KAAKP,cAAc,CAACS,aAAa;MAC/B,OAAO,OAAO;;EAElB,OAAO,QAAQ;AACjB,CAAC;AAED,OAAO,IAAMO,cAAc,GAA8CxB,KAAK,CAACyB,UAAU,CAGvF,UAACC,KAAK,EAAEC,GAAG;EACL,IAAAf,EAAA,GAAyDF,UAAU,CAAC,KAAK,CAAC;IAAzEkB,gBAAgB,GAAAhB,EAAA;IAAYiB,sBAAsB,GAAAjB,EAAA,IAAAkB,MAAuB;EAChF,IAAMC,OAAO,GAAGtB,KAAK,CAAC,YAAY,CAAC;EAGjC,IAAAuB,OAAO,GAiBLN,KAAK,CAAAM,OAjBA;IACPC,SAAS,GAgBPP,KAAK,CAAAO,SAhBE;IACTC,QAAQ,GAeNR,KAAK,CAAAQ,QAfC;IACR;IACAC,uBAAuB,GAarBT,KAAK,CAAAS,uBAbgB;IACvBC,gBAAgB,GAYdV,KAAK,CAAAU,gBAZS;IAChBC,MAAM,GAWJX,KAAK,CAAAW,MAXD;IACNC,KAAK,GAUHZ,KAAK,CAAAY,KAVF;IACLC,EAAA,GASEb,KAAK,CAAAJ,cAT6B;IAApCA,cAAc,GAAAiB,EAAA,cAAG/B,cAAc,CAACK,IAAI,GAAA0B,EAAA;IACpCC,EAAA,GAQEd,KAAK,CAAAe,SARc;IAArBA,SAAS,GAAAD,EAAA,cAAGE,SAAS,GAAAF,EAAA;IACrBG,EAAA,GAOEjB,KAAK,CAAAkB,WAPW;IAAlBA,WAAW,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IAClBE,SAAS,GAMPnB,KAAK,CAAAmB,SANE;IACTC,sBAAsB,GAKpBpB,KAAK,CAAAoB,sBALe;IACtBC,mBAAmB,GAIjBrB,KAAK,CAAAqB,mBAJY;IACnBC,IAAI,GAGFtB,KAAK,CAAAsB,IAHH;IACJC,EAAA,GAEEvB,KAAK,CAAAwB,aAFa;IAApBA,aAAa,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;IACpBE,iBAAiB,GACfzB,KAAK,CAAAyB,iBADU;EAGnB,IAAMC,WAAW,GAAGjD,cAAc,CAAwCuB,KAAK,EAAEtB,qBAAqB,EAAE,CACtG,WAAW,EACX,MAAM,CACP,CAAC;EAEF,IAAMiD,UAAU,GAAiDjC,aAAa,CAACiB,MAAM,EAAE;IACrFC,KAAK,EAAEA,KAAM;IACbhB,cAAc,EAAEA,cAAc,IAAId,cAAc,CAACK,IAAI;IACrD4B,SAAS,EAAEA,SAAS,KAAKC,SAAS;IAClCV,OAAO,EAAEA,OAAO,KAAKU,SAAS;IAC9BG,SAAS,EAAAA,SAAA;IACTD,WAAW,EAAAA,WAAA;IACXhB,gBAAgB,EAAAA,gBAAA;IAChBK,SAAS,EAAAA;GACV,CAAC;EAEF,IAAMqB,eAAe,GAAG;IAAEC,QAAQ,EAAE3B,gBAAgB,GAAG,iBAAiB,GAAG;EAAmB,CAAE;EAChG,IAAM4B,WAAW,GAAGxB,OAAO,IAAIS,SAAS,GAAG;IAAE,kBAAkB,EAAEV,OAAO;IAAEiB,IAAI,EAAE;EAAQ,CAAE,GAAG,EAAE;EAC/F,IAAMS,UAAU,GAAGzB,OAAO,GAAGhC,KAAA,CAAA0D,aAAA;IAAKzB,SAAS,EAAEoB,UAAU,CAACrB;EAAO,GAAGA,OAAO,CAAO,GAAG,IAAI;EAEvF,IAAM2B,aAAa,GAAGlB,SAAS,GAC7BzC,KAAA,CAAA0D,aAAA,CAACpD,UAAU;IACTsD,QAAQ,EAAE,KAAK;IACf3B,SAAS,EAAEoB,UAAU,CAACQ,SAAS;IAC/BC,OAAO,EAAErB,SAAS;IAClBsB,SAAS,EAAE3B,gBAAgB,GAAGA,gBAAgB,GAAG;MAAEmB,QAAQ,EAAE;IAAO,CAAE;IACtES,KAAK,EAAElB,sBAAsB;IAC7BmB,SAAS,EAAEnB;EAAsB,EACjC,GACA,IAAI;EAER,OACE9C,KAAA,CAAA0D,aAAA,QAAAQ,QAAA;IAAKvC,GAAG,EAAEA,GAAG;IAAEM,SAAS,EAAEoB,UAAU,CAACc;EAAI,GAAMX,WAAW,GACxDxD,KAAA,CAAA0D,aAAA;IAAKzB,SAAS,EAAEoB,UAAU,CAACe;EAAO,GAChCpE,KAAA,CAAA0D,aAAA;IAAKzB,SAAS,EAAEoB,UAAU,CAACgB,aAAa;IAAA;EAAA,GACrCtB,mBAAmB,GAClB/C,KAAA,CAAA0D,aAAA,CAACnD,IAAI,EAAA2D,QAAA,KAAKnB,mBAAmB;IAAEd,SAAS,EAAE5B,GAAG,CAACgD,UAAU,CAACiB,IAAI,EAAEvB,mBAAmB,CAACd,SAAS;EAAC,GAAI,GAEjGjC,KAAA,CAAA0D,aAAA,CAACnD,IAAI;IAACgD,QAAQ,EAAE5C,QAAQ,CAACW,cAAe,CAAC;IAAEW,SAAS,EAAEoB,UAAU,CAACiB;EAAI,EACtE,CACG,EACNtE,KAAA,CAAA0D,aAAA;IACEzB,SAAS,EAAEoB,UAAU,CAACkB,IAAI;IAC1BC,EAAE,EAAEzC,OAAO;IACXiB,IAAI,EAAEA,IAAI,IAAIzB,OAAO,CAACD,cAAc,CAAC;IAAA,aAC1BD,uBAAuB,CAACC,cAAc;EAAC,GAElDtB,KAAA,CAAA0D,aAAA,SAAAQ,QAAA;IAAMjC,SAAS,EAAEoB,UAAU,CAACoB;EAAS,GAAMrB,WAAW,GACnDF,aAAa,GACZlD,KAAA,CAAA0D,aAAA,CAACzD,aAAa,QACZD,KAAA,CAAA0D,aAAA,eAAOxB,QAAQ,CAAQ,CACT;EAEhB;EACA;EACAlC,KAAA,CAAA0D,aAAA,eAAOxB,QAAQ,CAChB,CACI,CACH,EAEJ,uCAAwC,CAACU,WAAW,IAAI,CAACa,UAAU,IAAIZ,SAAS,IAC9E7C,KAAA,CAAA0D,aAAA;IAAKzB,SAAS,EAAEoB,UAAU,CAACzB;EAAgB,GACzC5B,KAAA,CAAA0D,aAAA,CAACpD,UAAU,EAAA4D,QAAA;IACTN,QAAQ,EAAE,KAAK;IACf3B,SAAS,EAAEoB,UAAU,CAACqB,MAAM;IAC5BZ,OAAO,EAAEjC,sBAAsB;IAC/BkC,SAAS,EAAET,eAAe;IAC1BW,SAAS,EAAE9B,uBAAuB;IAAA,iBACnBP;EAAgB,GAC3BuB,iBAAiB,EACrB,CAEL,EAEuB,CAACP,WAAW,IAAIa,UAAU,EAElD,wBAAyB,CAACb,WAAW,IAAIe,aAAa,IACpD3D,KAAA,CAAA0D,aAAA;IAAKzB,SAAS,EAAEoB,UAAU,CAACsB;EAAiB,GAAGhB,aAAa,CAC7D,EAEsBf,WAAW,IAAIe,aAAa,CACjD,EACmBf,WAAW,IAAIa,UAAU,CAC9C;AAEV,CAAC,CAAC;AACFjC,cAAc,CAACoD,WAAW,GAAGzD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}