{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { DropdownMenuItemType } from '../Dropdown.types';\n/**\n * A utility class to cache size and position in cache.\n *\n * Dropdown options has non-selectable display types. It is therefore not cheap to determine\n * the total number of actual selectable options as well as the position an option is in the\n * list of options - O(n) cost for each lookup.\n *\n * Given that we potentially have to make this determination on every single render pass, this\n * cache should provide a little bit of relief.\n */\nvar DropdownSizePosCache = /** @class */function () {\n  function DropdownSizePosCache() {\n    this._size = 0;\n  }\n  /**\n   * Invalidates the cache and recalculate the size of selectable options.\n   */\n  DropdownSizePosCache.prototype.updateOptions = function (options) {\n    var displayOnlyOptionsCache = [];\n    var notSelectableOptionsCache = [];\n    var size = 0;\n    for (var i = 0; i < options.length; i++) {\n      var _a = options[i],\n        itemType = _a.itemType,\n        hidden = _a.hidden;\n      if (itemType === DropdownMenuItemType.Divider || itemType === DropdownMenuItemType.Header) {\n        displayOnlyOptionsCache.push(i);\n        notSelectableOptionsCache.push(i);\n      } else if (hidden) {\n        notSelectableOptionsCache.push(i);\n      } else {\n        size++;\n      }\n    }\n    this._size = size;\n    this._displayOnlyOptionsCache = displayOnlyOptionsCache;\n    this._notSelectableOptionsCache = notSelectableOptionsCache;\n    this._cachedOptions = __spreadArray([], options, true);\n  };\n  Object.defineProperty(DropdownSizePosCache.prototype, \"optionSetSize\", {\n    /**\n     * The size of all the selectable options.\n     */\n    get: function () {\n      return this._size;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DropdownSizePosCache.prototype, \"cachedOptions\", {\n    /**\n     * The chached options array.\n     */\n    get: function () {\n      return this._cachedOptions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Returns the position of this option element relative to the full set of selectable option elements.\n   * Note: the first selectable element is position 1 in the set.\n   * @param index The raw index of the option element.\n   */\n  DropdownSizePosCache.prototype.positionInSet = function (index) {\n    if (index === undefined) {\n      return undefined;\n    }\n    // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that\n    // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.\n    var offset = 0;\n    while (index > this._notSelectableOptionsCache[offset]) {\n      offset++;\n    }\n    if (this._displayOnlyOptionsCache[offset] === index) {\n      throw new Error(\"Unexpected: Option at index \".concat(index, \" is not a selectable element.\"));\n    }\n    if (this._notSelectableOptionsCache[offset] === index) {\n      return undefined;\n    }\n    return index - offset + 1;\n  };\n  return DropdownSizePosCache;\n}();\nexport { DropdownSizePosCache };","map":{"version":3,"names":["DropdownMenuItemType","DropdownSizePosCache","_size","prototype","updateOptions","options","displayOnlyOptionsCache","notSelectableOptionsCache","size","i","length","_a","itemType","hidden","Divider","Header","push","_displayOnlyOptionsCache","_notSelectableOptionsCache","_cachedOptions","__spreadArray","Object","defineProperty","get","positionInSet","index","undefined","offset","Error","concat"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/Dropdown/src/components/Dropdown/utilities/DropdownSizePosCache.ts"],"sourcesContent":["import { DropdownMenuItemType } from '../Dropdown.types';\nimport type { IDropdownOption } from '../Dropdown.types';\n\n/**\n * A utility class to cache size and position in cache.\n *\n * Dropdown options has non-selectable display types. It is therefore not cheap to determine\n * the total number of actual selectable options as well as the position an option is in the\n * list of options - O(n) cost for each lookup.\n *\n * Given that we potentially have to make this determination on every single render pass, this\n * cache should provide a little bit of relief.\n */\nexport class DropdownSizePosCache {\n  private _cachedOptions: IDropdownOption[];\n  private _displayOnlyOptionsCache: number[];\n  private _notSelectableOptionsCache: number[];\n  private _size = 0;\n\n  /**\n   * Invalidates the cache and recalculate the size of selectable options.\n   */\n  public updateOptions(options: IDropdownOption[]) {\n    const displayOnlyOptionsCache = [];\n    const notSelectableOptionsCache = [];\n    let size = 0;\n    for (let i = 0; i < options.length; i++) {\n      const { itemType, hidden } = options[i];\n\n      if (itemType === DropdownMenuItemType.Divider || itemType === DropdownMenuItemType.Header) {\n        displayOnlyOptionsCache.push(i);\n        notSelectableOptionsCache.push(i);\n      } else if (hidden) {\n        notSelectableOptionsCache.push(i);\n      } else {\n        size++;\n      }\n    }\n\n    this._size = size;\n    this._displayOnlyOptionsCache = displayOnlyOptionsCache;\n    this._notSelectableOptionsCache = notSelectableOptionsCache;\n    this._cachedOptions = [...options];\n  }\n\n  /**\n   * The size of all the selectable options.\n   */\n  public get optionSetSize(): number {\n    return this._size;\n  }\n\n  /**\n   * The chached options array.\n   */\n  public get cachedOptions(): IDropdownOption[] {\n    return this._cachedOptions;\n  }\n\n  /**\n   * Returns the position of this option element relative to the full set of selectable option elements.\n   * Note: the first selectable element is position 1 in the set.\n   * @param index The raw index of the option element.\n   */\n  public positionInSet(index: number | undefined): number | undefined {\n    if (index === undefined) {\n      return undefined;\n    }\n\n    // we could possibly memoize this too but this should be good enough, most of the time (the expectation is that\n    // when you have a lot of options, the selectable options will heavily dominate over the non-selectable options.\n    let offset = 0;\n    while (index > this._notSelectableOptionsCache[offset]) {\n      offset++;\n    }\n\n    if (this._displayOnlyOptionsCache[offset] === index) {\n      throw new Error(`Unexpected: Option at index ${index} is not a selectable element.`);\n    }\n\n    if (this._notSelectableOptionsCache[offset] === index) {\n      return undefined;\n    }\n\n    return index - offset + 1;\n  }\n}\n"],"mappings":";AAAA,SAASA,oBAAoB,QAAQ,mBAAmB;AAGxD;;;;;;;;;;AAUA,IAAAC,oBAAA;EAAA,SAAAA,qBAAA;IAIU,KAAAC,KAAK,GAAG,CAAC;EAqEnB;EAnEE;;;EAGOD,oBAAA,CAAAE,SAAA,CAAAC,aAAa,GAApB,UAAqBC,OAA0B;IAC7C,IAAMC,uBAAuB,GAAG,EAAE;IAClC,IAAMC,yBAAyB,GAAG,EAAE;IACpC,IAAIC,IAAI,GAAG,CAAC;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;MACjC,IAAAE,EAAA,GAAuBN,OAAO,CAACI,CAAC,CAAC;QAA/BG,QAAQ,GAAAD,EAAA,CAAAC,QAAA;QAAEC,MAAM,GAAAF,EAAA,CAAAE,MAAe;MAEvC,IAAID,QAAQ,KAAKZ,oBAAoB,CAACc,OAAO,IAAIF,QAAQ,KAAKZ,oBAAoB,CAACe,MAAM,EAAE;QACzFT,uBAAuB,CAACU,IAAI,CAACP,CAAC,CAAC;QAC/BF,yBAAyB,CAACS,IAAI,CAACP,CAAC,CAAC;OAClC,MAAM,IAAII,MAAM,EAAE;QACjBN,yBAAyB,CAACS,IAAI,CAACP,CAAC,CAAC;OAClC,MAAM;QACLD,IAAI,EAAE;;;IAIV,IAAI,CAACN,KAAK,GAAGM,IAAI;IACjB,IAAI,CAACS,wBAAwB,GAAGX,uBAAuB;IACvD,IAAI,CAACY,0BAA0B,GAAGX,yBAAyB;IAC3D,IAAI,CAACY,cAAc,GAAAC,aAAA,KAAOf,OAAO,OAAC;EACpC,CAAC;EAKDgB,MAAA,CAAAC,cAAA,CAAWrB,oBAAA,CAAAE,SAAA,iBAAa;IAHxB;;;SAGA,SAAAoB,CAAA;MACE,OAAO,IAAI,CAACrB,KAAK;IACnB,CAAC;;;;EAKDmB,MAAA,CAAAC,cAAA,CAAWrB,oBAAA,CAAAE,SAAA,iBAAa;IAHxB;;;SAGA,SAAAoB,CAAA;MACE,OAAO,IAAI,CAACJ,cAAc;IAC5B,CAAC;;;;EAED;;;;;EAKOlB,oBAAA,CAAAE,SAAA,CAAAqB,aAAa,GAApB,UAAqBC,KAAyB;IAC5C,IAAIA,KAAK,KAAKC,SAAS,EAAE;MACvB,OAAOA,SAAS;;IAGlB;IACA;IACA,IAAIC,MAAM,GAAG,CAAC;IACd,OAAOF,KAAK,GAAG,IAAI,CAACP,0BAA0B,CAACS,MAAM,CAAC,EAAE;MACtDA,MAAM,EAAE;;IAGV,IAAI,IAAI,CAACV,wBAAwB,CAACU,MAAM,CAAC,KAAKF,KAAK,EAAE;MACnD,MAAM,IAAIG,KAAK,CAAC,+BAAAC,MAAA,CAA+BJ,KAAK,kCAA+B,CAAC;;IAGtF,IAAI,IAAI,CAACP,0BAA0B,CAACS,MAAM,CAAC,KAAKF,KAAK,EAAE;MACrD,OAAOC,SAAS;;IAGlB,OAAOD,KAAK,GAAGE,MAAM,GAAG,CAAC;EAC3B,CAAC;EACH,OAAA1B,oBAAC;AAAD,CAAC,CAzED"},"metadata":{},"sourceType":"module","externalDependencies":[]}