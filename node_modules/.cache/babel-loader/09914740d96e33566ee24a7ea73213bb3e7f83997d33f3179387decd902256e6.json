{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { toMatrix, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { useId } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nexport var ButtonGridBase = React.forwardRef(function (props, forwardedRef) {\n  var id = useId(undefined, props.id);\n  var items = props.items,\n    columnCount = props.columnCount,\n    onRenderItem = props.onRenderItem,\n    isSemanticRadio = props.isSemanticRadio,\n    // eslint-disable-next-line deprecation/deprecation\n    _a = props.ariaPosInSet,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaPosInSet = _a === void 0 ? props.positionInSet : _a,\n    // eslint-disable-next-line deprecation/deprecation\n    _b = props.ariaSetSize,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaSetSize = _b === void 0 ? props.setSize : _b,\n    styles = props.styles,\n    doNotContainWithinFocusZone = props.doNotContainWithinFocusZone;\n  var htmlProps = getNativeProps(props, htmlElementProperties,\n  // avoid applying onBlur on the table if it's being used in the FocusZone\n  doNotContainWithinFocusZone ? [] : ['onBlur']);\n  var classNames = getClassNames(styles, {\n    theme: props.theme\n  });\n  // Array to store the cells in the correct row index\n  var rowsOfItems = toMatrix(items, columnCount);\n  var content = React.createElement(\"table\", __assign({\n    \"aria-posinset\": ariaPosInSet,\n    \"aria-setsize\": ariaSetSize,\n    id: id,\n    role: isSemanticRadio ? 'radiogroup' : 'grid'\n  }, htmlProps, {\n    className: classNames.root\n  }), React.createElement(\"tbody\", {\n    role: isSemanticRadio ? 'presentation' : 'rowgroup'\n  }, rowsOfItems.map(function (rows, rowIndex) {\n    return React.createElement(\"tr\", {\n      role: isSemanticRadio ? 'presentation' : 'row',\n      key: rowIndex\n    }, rows.map(function (cell, cellIndex) {\n      return React.createElement(\"td\", {\n        role: \"presentation\",\n        key: cellIndex + '-cell',\n        className: classNames.tableCell\n      }, onRenderItem(cell, cellIndex));\n    }));\n  })));\n  return doNotContainWithinFocusZone ? content : React.createElement(FocusZone, {\n    elementRef: forwardedRef,\n    isCircularNavigation: props.shouldFocusCircularNavigate,\n    className: classNames.focusedContainer,\n    onBlur: props.onBlur\n  }, content);\n});","map":{"version":3,"names":["React","toMatrix","classNamesFunction","getNativeProps","htmlElementProperties","FocusZone","useId","getClassNames","ButtonGridBase","forwardRef","props","forwardedRef","id","undefined","items","columnCount","onRenderItem","isSemanticRadio","_a","ariaPosInSet","positionInSet","_b","ariaSetSize","setSize","styles","doNotContainWithinFocusZone","htmlProps","classNames","theme","rowsOfItems","content","createElement","__assign","role","className","root","map","rows","rowIndex","key","cell","cellIndex","tableCell","elementRef","isCircularNavigation","shouldFocusCircularNavigate","focusedContainer","onBlur"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/ButtonGrid/ButtonGrid.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { toMatrix, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nimport { useId } from '@fluentui/react-hooks';\nimport type { IButtonGridProps, IButtonGridStyleProps, IButtonGridStyles } from './ButtonGrid.types';\n\nconst getClassNames = classNamesFunction<IButtonGridStyleProps, IButtonGridStyles>();\n\nexport const ButtonGridBase: React.FunctionComponent<IButtonGridProps> = React.forwardRef<\n  HTMLElement,\n  IButtonGridProps\n>((props, forwardedRef) => {\n  const id = useId(undefined, props.id);\n\n  const {\n    items,\n    columnCount,\n    onRenderItem,\n    isSemanticRadio,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaPosInSet = props.positionInSet,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaSetSize = props.setSize,\n    styles,\n    doNotContainWithinFocusZone,\n  } = props;\n\n  const htmlProps = getNativeProps<React.HTMLAttributes<HTMLTableElement>>(\n    props,\n    htmlElementProperties,\n    // avoid applying onBlur on the table if it's being used in the FocusZone\n    doNotContainWithinFocusZone ? [] : ['onBlur'],\n  );\n\n  const classNames = getClassNames(styles!, { theme: props.theme! });\n\n  // Array to store the cells in the correct row index\n  const rowsOfItems: any[][] = toMatrix(items, columnCount);\n\n  const content = (\n    <table\n      aria-posinset={ariaPosInSet}\n      aria-setsize={ariaSetSize}\n      id={id}\n      role={isSemanticRadio ? 'radiogroup' : 'grid'}\n      {...htmlProps}\n      className={classNames.root}\n    >\n      <tbody role={isSemanticRadio ? 'presentation' : 'rowgroup'}>\n        {rowsOfItems.map((rows, rowIndex) => {\n          return (\n            <tr role={isSemanticRadio ? 'presentation' : 'row'} key={rowIndex}>\n              {rows.map((cell, cellIndex: number) => {\n                return (\n                  <td role=\"presentation\" key={cellIndex + '-cell'} className={classNames.tableCell}>\n                    {onRenderItem(cell, cellIndex)}\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n\n  return doNotContainWithinFocusZone ? (\n    content\n  ) : (\n    <FocusZone\n      elementRef={forwardedRef}\n      isCircularNavigation={props.shouldFocusCircularNavigate}\n      className={classNames.focusedContainer}\n      onBlur={props.onBlur}\n    >\n      {content}\n    </FocusZone>\n  );\n});\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,kBAAkB,EAAEC,cAAc,EAAEC,qBAAqB,QAAQ,iBAAiB;AACrG,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,KAAK,QAAQ,uBAAuB;AAG7C,IAAMC,aAAa,GAAGL,kBAAkB,EAA4C;AAEpF,OAAO,IAAMM,cAAc,GAA8CR,KAAK,CAACS,UAAU,CAGvF,UAACC,KAAK,EAAEC,YAAY;EACpB,IAAMC,EAAE,GAAGN,KAAK,CAACO,SAAS,EAAEH,KAAK,CAACE,EAAE,CAAC;EAGnC,IAAAE,KAAK,GAUHJ,KAAK,CAAAI,KAVF;IACLC,WAAW,GASTL,KAAK,CAAAK,WATI;IACXC,YAAY,GAQVN,KAAK,CAAAM,YARK;IACZC,eAAe,GAObP,KAAK,CAAAO,eAPQ;IACf;IACAC,EAAA,GAKER,KAAK,CAAAS,YAL2B;IADlC;IACAA,YAAY,GAAAD,EAAA,cAAGR,KAAK,CAACU,aAAa,GAAAF,EAAA;IAClC;IACAG,EAAA,GAGEX,KAAK,CAAAY,WAHoB;IAD3B;IACAA,WAAW,GAAAD,EAAA,cAAGX,KAAK,CAACa,OAAO,GAAAF,EAAA;IAC3BG,MAAM,GAEJd,KAAK,CAAAc,MAFD;IACNC,2BAA2B,GACzBf,KAAK,CAAAe,2BADoB;EAG7B,IAAMC,SAAS,GAAGvB,cAAc,CAC9BO,KAAK,EACLN,qBAAqB;EACrB;EACAqB,2BAA2B,GAAG,EAAE,GAAG,CAAC,QAAQ,CAAC,CAC9C;EAED,IAAME,UAAU,GAAGpB,aAAa,CAACiB,MAAO,EAAE;IAAEI,KAAK,EAAElB,KAAK,CAACkB;EAAM,CAAE,CAAC;EAElE;EACA,IAAMC,WAAW,GAAY5B,QAAQ,CAACa,KAAK,EAAEC,WAAW,CAAC;EAEzD,IAAMe,OAAO,GACX9B,KAAA,CAAA+B,aAAA,UAAAC,QAAA;IAAA,iBACiBb,YAAY;IAAA,gBACbG,WAAW;IACzBV,EAAE,EAAEA,EAAE;IACNqB,IAAI,EAAEhB,eAAe,GAAG,YAAY,GAAG;EAAM,GACzCS,SAAS;IACbQ,SAAS,EAAEP,UAAU,CAACQ;EAAI,IAE1BnC,KAAA,CAAA+B,aAAA;IAAOE,IAAI,EAAEhB,eAAe,GAAG,cAAc,GAAG;EAAU,GACvDY,WAAW,CAACO,GAAG,CAAC,UAACC,IAAI,EAAEC,QAAQ;IAC9B,OACEtC,KAAA,CAAA+B,aAAA;MAAIE,IAAI,EAAEhB,eAAe,GAAG,cAAc,GAAG,KAAK;MAAEsB,GAAG,EAAED;IAAQ,GAC9DD,IAAI,CAACD,GAAG,CAAC,UAACI,IAAI,EAAEC,SAAiB;MAChC,OACEzC,KAAA,CAAA+B,aAAA;QAAIE,IAAI,EAAC,cAAc;QAACM,GAAG,EAAEE,SAAS,GAAG,OAAO;QAAEP,SAAS,EAAEP,UAAU,CAACe;MAAS,GAC9E1B,YAAY,CAACwB,IAAI,EAAEC,SAAS,CAAC,CAC3B;IAET,CAAC,CAAC,CACC;EAET,CAAC,CAAC,CACI,CAEX;EAED,OAAOhB,2BAA2B,GAChCK,OAAO,GAEP9B,KAAA,CAAA+B,aAAA,CAAC1B,SAAS;IACRsC,UAAU,EAAEhC,YAAY;IACxBiC,oBAAoB,EAAElC,KAAK,CAACmC,2BAA2B;IACvDX,SAAS,EAAEP,UAAU,CAACmB,gBAAgB;IACtCC,MAAM,EAAErC,KAAK,CAACqC;EAAM,GAEnBjB,OAAO,CAEX;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}