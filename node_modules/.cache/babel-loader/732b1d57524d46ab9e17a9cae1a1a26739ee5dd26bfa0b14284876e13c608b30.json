{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, KeyCodes, classNamesFunction, css, styled } from '../../../Utilities';\nimport { CommandButton } from '../../../Button';\nimport { Spinner } from '../../../Spinner';\nimport { Announced } from '../../../Announced';\nimport { SuggestionActionType } from './Suggestions.types';\nimport { SuggestionsItem } from './SuggestionsItem';\nimport { getStyles as suggestionsItemStyles } from './SuggestionsItem.styles';\nimport * as stylesImport from './Suggestions.scss';\nvar legacyStyles = stylesImport;\nvar getClassNames = classNamesFunction();\nvar StyledSuggestionsItem = styled(SuggestionsItem, suggestionsItemStyles, undefined, {\n  scope: 'SuggestionItem'\n});\n/**\n * {@docCategory Pickers}\n */\nvar Suggestions = /** @class */function (_super) {\n  __extends(Suggestions, _super);\n  function Suggestions(suggestionsProps) {\n    var _this = _super.call(this, suggestionsProps) || this;\n    _this._forceResolveButton = React.createRef();\n    _this._searchForMoreButton = React.createRef();\n    _this._selectedElement = React.createRef();\n    _this._scrollContainer = React.createRef();\n    /**\n     * Returns true if the event was handled, false otherwise\n     */\n    _this.tryHandleKeyDown = function (keyCode, currentSuggestionIndex) {\n      var isEventHandled = false;\n      var newSelectedActionType = null;\n      var currentSelectedAction = _this.state.selectedActionType;\n      var suggestionLength = _this.props.suggestions.length;\n      if (keyCode === KeyCodes.down) {\n        switch (currentSelectedAction) {\n          case SuggestionActionType.forceResolve:\n            if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n              newSelectedActionType = SuggestionActionType.none;\n            } else if (_this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            } else {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n            break;\n          case SuggestionActionType.searchMore:\n            if (_this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            } else if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n              newSelectedActionType = SuggestionActionType.none;\n            } else {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            }\n            break;\n          case SuggestionActionType.none:\n            if (currentSuggestionIndex === -1 && _this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n            break;\n        }\n      } else if (keyCode === KeyCodes.up) {\n        switch (currentSelectedAction) {\n          case SuggestionActionType.forceResolve:\n            if (_this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            } else if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n              newSelectedActionType = SuggestionActionType.none;\n            }\n            break;\n          case SuggestionActionType.searchMore:\n            if (suggestionLength > 0) {\n              _this._refocusOnSuggestions(keyCode);\n              newSelectedActionType = SuggestionActionType.none;\n            } else if (_this._forceResolveButton.current) {\n              newSelectedActionType = SuggestionActionType.forceResolve;\n            }\n            break;\n          case SuggestionActionType.none:\n            if (currentSuggestionIndex === -1 && _this._searchForMoreButton.current) {\n              newSelectedActionType = SuggestionActionType.searchMore;\n            }\n            break;\n        }\n      }\n      if (newSelectedActionType !== null) {\n        _this.setState({\n          selectedActionType: newSelectedActionType\n        });\n        isEventHandled = true;\n      }\n      return isEventHandled;\n    };\n    _this._getAlertText = function () {\n      var _a = _this.props,\n        isLoading = _a.isLoading,\n        isSearching = _a.isSearching,\n        suggestions = _a.suggestions,\n        suggestionsAvailableAlertText = _a.suggestionsAvailableAlertText,\n        noResultsFoundText = _a.noResultsFoundText,\n        isExtendedLoading = _a.isExtendedLoading,\n        loadingText = _a.loadingText;\n      if (!isLoading && !isSearching) {\n        if (suggestions.length > 0) {\n          return suggestionsAvailableAlertText || '';\n        }\n        if (noResultsFoundText) {\n          return noResultsFoundText;\n        }\n      } else if (isLoading && isExtendedLoading) {\n        return loadingText || '';\n      }\n      return '';\n    };\n    _this._getMoreResults = function () {\n      if (_this.props.onGetMoreResults) {\n        _this.props.onGetMoreResults();\n        // Reset selected action type as it will be of type SuggestionActionType.none after more results are gotten\n        _this.setState({\n          selectedActionType: SuggestionActionType.none\n        });\n      }\n    };\n    _this._forceResolve = function () {\n      if (_this.props.createGenericItem) {\n        _this.props.createGenericItem();\n      }\n    };\n    _this._shouldShowForceResolve = function () {\n      return _this.props.showForceResolve ? _this.props.showForceResolve() : false;\n    };\n    _this._onClickTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        _this.props.onSuggestionClick(ev, item, index);\n      };\n    };\n    _this._refocusOnSuggestions = function (keyCode) {\n      if (typeof _this.props.refocusSuggestions === 'function') {\n        _this.props.refocusSuggestions(keyCode);\n      }\n    };\n    _this._onRemoveTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        var onSuggestionRemove = _this.props.onSuggestionRemove;\n        onSuggestionRemove(ev, item, index);\n        ev.stopPropagation();\n      };\n    };\n    initializeComponentRef(_this);\n    _this.state = {\n      selectedActionType: SuggestionActionType.none\n    };\n    return _this;\n  }\n  Suggestions.prototype.componentDidMount = function () {\n    this.scrollSelected();\n    this.activeSelectedElement = this._selectedElement ? this._selectedElement.current : null;\n  };\n  Suggestions.prototype.componentDidUpdate = function () {\n    // Only scroll to selected element if the selected element has changed. Otherwise do nothing.\n    // This prevents some odd behavior where scrolling the active element out of view and clicking on a selected element\n    // will trigger a focus event and not give the clicked element the click.\n    if (this._selectedElement.current && this.activeSelectedElement !== this._selectedElement.current) {\n      this.scrollSelected();\n      this.activeSelectedElement = this._selectedElement.current;\n    }\n  };\n  Suggestions.prototype.render = function () {\n    var _a, _b;\n    var _this = this;\n    var _c = this.props,\n      forceResolveText = _c.forceResolveText,\n      mostRecentlyUsedHeaderText = _c.mostRecentlyUsedHeaderText,\n      searchForMoreIcon = _c.searchForMoreIcon,\n      searchForMoreText = _c.searchForMoreText,\n      className = _c.className,\n      moreSuggestionsAvailable = _c.moreSuggestionsAvailable,\n      noResultsFoundText = _c.noResultsFoundText,\n      suggestions = _c.suggestions,\n      isLoading = _c.isLoading,\n      isSearching = _c.isSearching,\n      loadingText = _c.loadingText,\n      onRenderNoResultFound = _c.onRenderNoResultFound,\n      searchingText = _c.searchingText,\n      isMostRecentlyUsedVisible = _c.isMostRecentlyUsedVisible,\n      resultsMaximumNumber = _c.resultsMaximumNumber,\n      resultsFooterFull = _c.resultsFooterFull,\n      resultsFooter = _c.resultsFooter,\n      _d = _c.isResultsFooterVisible,\n      isResultsFooterVisible = _d === void 0 ? true : _d,\n      suggestionsHeaderText = _c.suggestionsHeaderText,\n      suggestionsClassName = _c.suggestionsClassName,\n      theme = _c.theme,\n      styles = _c.styles,\n      suggestionsListId = _c.suggestionsListId,\n      suggestionsContainerAriaLabel = _c.suggestionsContainerAriaLabel;\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from Suggestions class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in BasePicker when the typed Suggestions class is ready to be rendered. If the check\n    // passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    this._classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      suggestionsClassName: suggestionsClassName,\n      forceResolveButtonSelected: this.state.selectedActionType === SuggestionActionType.forceResolve,\n      searchForMoreButtonSelected: this.state.selectedActionType === SuggestionActionType.searchMore\n    }) : {\n      root: css('ms-Suggestions', className, legacyStyles.root),\n      title: css('ms-Suggestions-title', legacyStyles.suggestionsTitle),\n      searchForMoreButton: css('ms-SearchMore-button', legacyStyles.actionButton, (_a = {}, _a['is-selected ' + legacyStyles.buttonSelected] = this.state.selectedActionType === SuggestionActionType.searchMore, _a)),\n      forceResolveButton: css('ms-forceResolve-button', legacyStyles.actionButton, (_b = {}, _b['is-selected ' + legacyStyles.buttonSelected] = this.state.selectedActionType === SuggestionActionType.forceResolve, _b)),\n      suggestionsAvailable: css('ms-Suggestions-suggestionsAvailable', legacyStyles.suggestionsAvailable),\n      suggestionsContainer: css('ms-Suggestions-container', legacyStyles.suggestionsContainer, suggestionsClassName),\n      noSuggestions: css('ms-Suggestions-none', legacyStyles.suggestionsNone)\n    };\n    var spinnerStyles = this._classNames.subComponentStyles ? this._classNames.subComponentStyles.spinner : undefined;\n    // TODO: cleanup after refactor of pickers to composition pattern and remove SASS support.\n    var spinnerClassNameOrStyles = styles ? {\n      styles: spinnerStyles\n    } : {\n      className: css('ms-Suggestions-spinner', legacyStyles.suggestionsSpinner)\n    };\n    var noResults = function () {\n      var defaultRender = function () {\n        return React.createElement(\"div\", {\n          className: _this._classNames.noSuggestions\n        }, noResultsFoundText);\n      };\n      return (\n        // This ID can be used by the parent to set aria-activedescendant to this\n        React.createElement(\"div\", {\n          id: \"sug-noResultsFound\",\n          role: \"option\"\n        }, onRenderNoResultFound ? onRenderNoResultFound(undefined, defaultRender) : defaultRender())\n      );\n    };\n    // MostRecently Used text should supercede the header text if it's there and available.\n    var headerText = suggestionsHeaderText;\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n    var footerTitle = undefined;\n    if (isResultsFooterVisible) {\n      footerTitle = suggestions.length >= resultsMaximumNumber ? resultsFooterFull : resultsFooter;\n    }\n    var hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;\n    var forceResolveId = this.state.selectedActionType === SuggestionActionType.forceResolve ? 'sug-selectedAction' : undefined;\n    var searchForMoreId = this.state.selectedActionType === SuggestionActionType.searchMore ? 'sug-selectedAction' : undefined;\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      \"aria-label\": suggestionsContainerAriaLabel || headerText,\n      id: suggestionsListId,\n      role: \"listbox\"\n    }, React.createElement(Announced, {\n      message: this._getAlertText(),\n      \"aria-live\": \"polite\"\n    }), headerText ? React.createElement(\"div\", {\n      className: this._classNames.title\n    }, headerText) : null, forceResolveText && this._shouldShowForceResolve() && React.createElement(CommandButton, {\n      componentRef: this._forceResolveButton,\n      className: this._classNames.forceResolveButton,\n      id: forceResolveId,\n      onClick: this._forceResolve,\n      \"data-automationid\": 'sug-forceResolve'\n    }, forceResolveText), isLoading && React.createElement(Spinner, __assign({}, spinnerClassNameOrStyles, {\n      ariaLabel: loadingText,\n      label: loadingText\n    })), hasNoSuggestions ? noResults() : this._renderSuggestions(), searchForMoreText && moreSuggestionsAvailable && React.createElement(CommandButton, {\n      componentRef: this._searchForMoreButton,\n      className: this._classNames.searchForMoreButton,\n      iconProps: searchForMoreIcon || {\n        iconName: 'Search'\n      },\n      id: searchForMoreId,\n      onClick: this._getMoreResults,\n      \"data-automationid\": 'sug-searchForMore',\n      role: 'option'\n    }, searchForMoreText), isSearching ? React.createElement(Spinner, __assign({}, spinnerClassNameOrStyles, {\n      ariaLabel: searchingText,\n      label: searchingText\n    })) : null, footerTitle && !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ? React.createElement(\"div\", {\n      className: this._classNames.title\n    }, footerTitle(this.props)) : null);\n  };\n  Suggestions.prototype.hasSuggestedAction = function () {\n    return !!this._searchForMoreButton.current || !!this._forceResolveButton.current;\n  };\n  Suggestions.prototype.hasSuggestedActionSelected = function () {\n    return this.state.selectedActionType !== SuggestionActionType.none;\n  };\n  Suggestions.prototype.executeSelectedAction = function () {\n    switch (this.state.selectedActionType) {\n      case SuggestionActionType.forceResolve:\n        this._forceResolve();\n        break;\n      case SuggestionActionType.searchMore:\n        this._getMoreResults();\n        break;\n    }\n  };\n  Suggestions.prototype.focusAboveSuggestions = function () {\n    if (this._forceResolveButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.forceResolve\n      });\n    } else if (this._searchForMoreButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.searchMore\n      });\n    }\n  };\n  Suggestions.prototype.focusBelowSuggestions = function () {\n    if (this._searchForMoreButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.searchMore\n      });\n    } else if (this._forceResolveButton.current) {\n      this.setState({\n        selectedActionType: SuggestionActionType.forceResolve\n      });\n    }\n  };\n  Suggestions.prototype.focusSearchForMoreButton = function () {\n    if (this._searchForMoreButton.current) {\n      this._searchForMoreButton.current.focus();\n    }\n  };\n  Suggestions.prototype.scrollSelected = function () {\n    if (this._selectedElement.current && this._scrollContainer.current && this._scrollContainer.current.scrollTo !== undefined) {\n      var _a = this._selectedElement.current,\n        offsetHeight = _a.offsetHeight,\n        offsetTop = _a.offsetTop;\n      var _b = this._scrollContainer.current,\n        parentOffsetHeight = _b.offsetHeight,\n        scrollTop = _b.scrollTop;\n      var isAbove = offsetTop < scrollTop;\n      var isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;\n      if (isAbove) {\n        this._scrollContainer.current.scrollTo(0, offsetTop);\n      } else if (isBelow) {\n        this._scrollContainer.current.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);\n      }\n    }\n  };\n  Suggestions.prototype._renderSuggestions = function () {\n    var _this = this;\n    var _a = this.props,\n      onRenderSuggestion = _a.onRenderSuggestion,\n      removeSuggestionAriaLabel = _a.removeSuggestionAriaLabel,\n      suggestionsItemClassName = _a.suggestionsItemClassName,\n      resultsMaximumNumber = _a.resultsMaximumNumber,\n      showRemoveButtons = _a.showRemoveButtons,\n      removeButtonIconProps = _a.removeButtonIconProps;\n    var suggestions = this.props.suggestions;\n    var StyledTypedSuggestionsItem = StyledSuggestionsItem;\n    var selectedIndex = -1;\n    suggestions.some(function (element, index) {\n      if (element.selected) {\n        selectedIndex = index;\n        return true;\n      }\n      return false;\n    });\n    if (resultsMaximumNumber) {\n      suggestions = selectedIndex >= resultsMaximumNumber ? suggestions.slice(selectedIndex - resultsMaximumNumber + 1, selectedIndex + 1) : suggestions.slice(0, resultsMaximumNumber);\n    }\n    if (suggestions.length === 0) {\n      return null;\n    }\n    return React.createElement(\"div\", {\n      className: this._classNames.suggestionsContainer,\n      ref: this._scrollContainer,\n      role: \"presentation\"\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(\"div\", {\n        ref: suggestion.selected ? _this._selectedElement : undefined,\n        key: suggestion.item.key ? suggestion.item.key : index,\n        role: \"presentation\"\n      }, React.createElement(StyledTypedSuggestionsItem, {\n        suggestionModel: suggestion,\n        RenderSuggestion: onRenderSuggestion,\n        onClick: _this._onClickTypedSuggestionsItem(suggestion.item, index),\n        className: suggestionsItemClassName,\n        showRemoveButton: showRemoveButtons,\n        removeButtonAriaLabel: removeSuggestionAriaLabel,\n        onRemoveItem: _this._onRemoveTypedSuggestionsItem(suggestion.item, index),\n        id: 'sug-' + index,\n        removeButtonIconProps: removeButtonIconProps\n      }));\n    }));\n  };\n  return Suggestions;\n}(React.Component);\nexport { Suggestions };","map":{"version":3,"names":["React","initializeComponentRef","KeyCodes","classNamesFunction","css","styled","CommandButton","Spinner","Announced","SuggestionActionType","SuggestionsItem","getStyles","suggestionsItemStyles","stylesImport","legacyStyles","getClassNames","StyledSuggestionsItem","undefined","scope","Suggestions","_super","__extends","suggestionsProps","_this","call","_forceResolveButton","createRef","_searchForMoreButton","_selectedElement","_scrollContainer","tryHandleKeyDown","keyCode","currentSuggestionIndex","isEventHandled","newSelectedActionType","currentSelectedAction","state","selectedActionType","suggestionLength","props","suggestions","length","down","forceResolve","_refocusOnSuggestions","none","current","searchMore","up","setState","_getAlertText","_a","isLoading","isSearching","suggestionsAvailableAlertText","noResultsFoundText","isExtendedLoading","loadingText","_getMoreResults","onGetMoreResults","_forceResolve","createGenericItem","_shouldShowForceResolve","showForceResolve","_onClickTypedSuggestionsItem","item","index","ev","onSuggestionClick","refocusSuggestions","_onRemoveTypedSuggestionsItem","onSuggestionRemove","stopPropagation","prototype","componentDidMount","scrollSelected","activeSelectedElement","componentDidUpdate","render","_c","forceResolveText","mostRecentlyUsedHeaderText","searchForMoreIcon","searchForMoreText","className","moreSuggestionsAvailable","onRenderNoResultFound","searchingText","isMostRecentlyUsedVisible","resultsMaximumNumber","resultsFooterFull","resultsFooter","_d","isResultsFooterVisible","suggestionsHeaderText","suggestionsClassName","theme","styles","suggestionsListId","suggestionsContainerAriaLabel","_classNames","forceResolveButtonSelected","searchForMoreButtonSelected","root","title","suggestionsTitle","searchForMoreButton","actionButton","buttonSelected","forceResolveButton","_b","suggestionsAvailable","suggestionsContainer","noSuggestions","suggestionsNone","spinnerStyles","subComponentStyles","spinner","spinnerClassNameOrStyles","suggestionsSpinner","noResults","defaultRender","createElement","id","role","headerText","footerTitle","hasNoSuggestions","forceResolveId","searchForMoreId","message","componentRef","onClick","__assign","ariaLabel","label","_renderSuggestions","iconProps","iconName","hasSuggestedAction","hasSuggestedActionSelected","executeSelectedAction","focusAboveSuggestions","focusBelowSuggestions","focusSearchForMoreButton","focus","scrollTo","offsetHeight","offsetTop","parentOffsetHeight","scrollTop","isAbove","isBelow","onRenderSuggestion","removeSuggestionAriaLabel","suggestionsItemClassName","showRemoveButtons","removeButtonIconProps","StyledTypedSuggestionsItem","selectedIndex","some","element","selected","slice","ref","map","suggestion","key","suggestionModel","RenderSuggestion","showRemoveButton","removeButtonAriaLabel","onRemoveItem","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/pickers/src/components/pickers/Suggestions/Suggestions.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { initializeComponentRef, KeyCodes, classNamesFunction, css, styled } from '../../../Utilities';\nimport { CommandButton } from '../../../Button';\nimport { Spinner } from '../../../Spinner';\nimport { Announced } from '../../../Announced';\nimport { SuggestionActionType } from './Suggestions.types';\nimport { SuggestionsItem } from './SuggestionsItem';\nimport { getStyles as suggestionsItemStyles } from './SuggestionsItem.styles';\nimport * as stylesImport from './Suggestions.scss';\nimport type { IStyleFunctionOrObject } from '../../../Utilities';\nimport type { IProcessedStyleSet } from '../../../Styling';\nimport type { IButton } from '../../../Button';\nimport type { ISpinnerStyleProps, ISpinnerStyles } from '../../../Spinner';\nimport type { ISuggestionsProps, ISuggestionsStyleProps, ISuggestionsStyles } from './Suggestions.types';\nimport type { ISuggestionItemProps, ISuggestionsItemStyleProps, ISuggestionsItemStyles } from './SuggestionsItem.types';\n\nconst legacyStyles: any = stylesImport;\n\nconst getClassNames = classNamesFunction<ISuggestionsStyleProps, ISuggestionsStyles>();\n\nexport interface ISuggestionsState {\n  selectedActionType: SuggestionActionType;\n}\n\nconst StyledSuggestionsItem = styled<ISuggestionItemProps<any>, ISuggestionsItemStyleProps, ISuggestionsItemStyles>(\n  SuggestionsItem,\n  suggestionsItemStyles,\n  undefined,\n  {\n    scope: 'SuggestionItem',\n  },\n);\n\n/**\n * {@docCategory Pickers}\n */\nexport class Suggestions<T> extends React.Component<ISuggestionsProps<T>, ISuggestionsState> {\n  protected _forceResolveButton = React.createRef<IButton>();\n  protected _searchForMoreButton = React.createRef<IButton>();\n  protected _selectedElement = React.createRef<HTMLDivElement>();\n  protected _scrollContainer = React.createRef<HTMLDivElement>();\n  private activeSelectedElement: HTMLDivElement | null;\n  private _classNames: Partial<IProcessedStyleSet<ISuggestionsStyles>>;\n\n  constructor(suggestionsProps: ISuggestionsProps<T>) {\n    super(suggestionsProps);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      selectedActionType: SuggestionActionType.none,\n    };\n  }\n\n  public componentDidMount(): void {\n    this.scrollSelected();\n    this.activeSelectedElement = this._selectedElement ? this._selectedElement.current : null;\n  }\n\n  public componentDidUpdate(): void {\n    // Only scroll to selected element if the selected element has changed. Otherwise do nothing.\n    // This prevents some odd behavior where scrolling the active element out of view and clicking on a selected element\n    // will trigger a focus event and not give the clicked element the click.\n    if (this._selectedElement.current && this.activeSelectedElement !== this._selectedElement.current) {\n      this.scrollSelected();\n      this.activeSelectedElement = this._selectedElement.current;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      forceResolveText,\n      mostRecentlyUsedHeaderText,\n      searchForMoreIcon,\n      searchForMoreText,\n      className,\n      moreSuggestionsAvailable,\n      noResultsFoundText,\n      suggestions,\n      isLoading,\n      isSearching,\n      loadingText,\n      onRenderNoResultFound,\n      searchingText,\n      isMostRecentlyUsedVisible,\n      resultsMaximumNumber,\n      resultsFooterFull,\n      resultsFooter,\n      isResultsFooterVisible = true,\n      suggestionsHeaderText,\n      suggestionsClassName,\n      theme,\n      styles,\n      suggestionsListId,\n      suggestionsContainerAriaLabel,\n    } = this.props;\n\n    // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from Suggestions class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in BasePicker when the typed Suggestions class is ready to be rendered. If the check\n    // passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n    this._classNames = styles\n      ? getClassNames(styles, {\n          theme: theme!,\n          className,\n          suggestionsClassName,\n          forceResolveButtonSelected: this.state.selectedActionType === SuggestionActionType.forceResolve,\n          searchForMoreButtonSelected: this.state.selectedActionType === SuggestionActionType.searchMore,\n        })\n      : {\n          root: css('ms-Suggestions', className, legacyStyles.root),\n          title: css('ms-Suggestions-title', legacyStyles.suggestionsTitle),\n          searchForMoreButton: css('ms-SearchMore-button', legacyStyles.actionButton, {\n            ['is-selected ' + legacyStyles.buttonSelected]:\n              this.state.selectedActionType === SuggestionActionType.searchMore,\n          }),\n          forceResolveButton: css('ms-forceResolve-button', legacyStyles.actionButton, {\n            ['is-selected ' + legacyStyles.buttonSelected]:\n              this.state.selectedActionType === SuggestionActionType.forceResolve,\n          }),\n          suggestionsAvailable: css('ms-Suggestions-suggestionsAvailable', legacyStyles.suggestionsAvailable),\n          suggestionsContainer: css(\n            'ms-Suggestions-container',\n            legacyStyles.suggestionsContainer,\n            suggestionsClassName,\n          ),\n          noSuggestions: css('ms-Suggestions-none', legacyStyles.suggestionsNone),\n        };\n\n    const spinnerStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.spinner as IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>)\n      : undefined;\n\n    // TODO: cleanup after refactor of pickers to composition pattern and remove SASS support.\n    const spinnerClassNameOrStyles = styles\n      ? { styles: spinnerStyles }\n      : {\n          className: css('ms-Suggestions-spinner', legacyStyles.suggestionsSpinner),\n        };\n\n    const noResults = () => {\n      const defaultRender = () => {\n        return <div className={this._classNames.noSuggestions}>{noResultsFoundText}</div>;\n      };\n\n      return (\n        // This ID can be used by the parent to set aria-activedescendant to this\n        <div id=\"sug-noResultsFound\" role=\"option\">\n          {onRenderNoResultFound ? onRenderNoResultFound(undefined, defaultRender) : defaultRender()}\n        </div>\n      );\n    };\n\n    // MostRecently Used text should supercede the header text if it's there and available.\n    let headerText: string | undefined = suggestionsHeaderText;\n    if (isMostRecentlyUsedVisible && mostRecentlyUsedHeaderText) {\n      headerText = mostRecentlyUsedHeaderText;\n    }\n\n    let footerTitle: ((props: ISuggestionsProps<T>) => JSX.Element) | undefined = undefined;\n    if (isResultsFooterVisible) {\n      footerTitle = suggestions.length >= (resultsMaximumNumber as number) ? resultsFooterFull : resultsFooter;\n    }\n\n    const hasNoSuggestions = (!suggestions || !suggestions.length) && !isLoading;\n\n    const forceResolveId =\n      this.state.selectedActionType === SuggestionActionType.forceResolve ? 'sug-selectedAction' : undefined;\n    const searchForMoreId =\n      this.state.selectedActionType === SuggestionActionType.searchMore ? 'sug-selectedAction' : undefined;\n\n    return (\n      <div\n        className={this._classNames.root}\n        aria-label={suggestionsContainerAriaLabel || headerText}\n        id={suggestionsListId}\n        role=\"listbox\"\n      >\n        <Announced message={this._getAlertText()} aria-live=\"polite\" />\n\n        {headerText ? <div className={this._classNames.title}>{headerText}</div> : null}\n        {forceResolveText && this._shouldShowForceResolve() && (\n          <CommandButton\n            componentRef={this._forceResolveButton}\n            className={this._classNames.forceResolveButton}\n            id={forceResolveId}\n            onClick={this._forceResolve}\n            data-automationid={'sug-forceResolve'}\n          >\n            {forceResolveText}\n          </CommandButton>\n        )}\n        {isLoading && <Spinner {...spinnerClassNameOrStyles} ariaLabel={loadingText} label={loadingText} />}\n        {hasNoSuggestions ? noResults() : this._renderSuggestions()}\n        {searchForMoreText && moreSuggestionsAvailable && (\n          <CommandButton\n            componentRef={this._searchForMoreButton}\n            className={this._classNames.searchForMoreButton}\n            iconProps={searchForMoreIcon || { iconName: 'Search' }}\n            id={searchForMoreId}\n            onClick={this._getMoreResults}\n            data-automationid={'sug-searchForMore'}\n            role={'option'}\n          >\n            {searchForMoreText}\n          </CommandButton>\n        )}\n        {isSearching ? <Spinner {...spinnerClassNameOrStyles} ariaLabel={searchingText} label={searchingText} /> : null}\n        {footerTitle && !moreSuggestionsAvailable && !isMostRecentlyUsedVisible && !isSearching ? (\n          <div className={this._classNames.title}>{footerTitle(this.props)}</div>\n        ) : null}\n      </div>\n    );\n  }\n\n  /**\n   * Returns true if the event was handled, false otherwise\n   */\n  public tryHandleKeyDown = (keyCode: number, currentSuggestionIndex: number): boolean => {\n    let isEventHandled = false;\n    let newSelectedActionType = null;\n    const currentSelectedAction = this.state.selectedActionType;\n    const suggestionLength = this.props.suggestions.length;\n    if (keyCode === KeyCodes.down) {\n      switch (currentSelectedAction) {\n        case SuggestionActionType.forceResolve:\n          if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else if (this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          } else {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n        case SuggestionActionType.searchMore:\n          if (this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          } else if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          }\n          break;\n        case SuggestionActionType.none:\n          if (currentSuggestionIndex === -1 && this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n      }\n    } else if (keyCode === KeyCodes.up) {\n      switch (currentSelectedAction) {\n        case SuggestionActionType.forceResolve:\n          if (this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          } else if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          }\n          break;\n        case SuggestionActionType.searchMore:\n          if (suggestionLength > 0) {\n            this._refocusOnSuggestions(keyCode);\n            newSelectedActionType = SuggestionActionType.none;\n          } else if (this._forceResolveButton.current) {\n            newSelectedActionType = SuggestionActionType.forceResolve;\n          }\n          break;\n        case SuggestionActionType.none:\n          if (currentSuggestionIndex === -1 && this._searchForMoreButton.current) {\n            newSelectedActionType = SuggestionActionType.searchMore;\n          }\n          break;\n      }\n    }\n\n    if (newSelectedActionType !== null) {\n      this.setState({ selectedActionType: newSelectedActionType });\n      isEventHandled = true;\n    }\n\n    return isEventHandled;\n  };\n\n  public hasSuggestedAction(): boolean {\n    return !!this._searchForMoreButton.current || !!this._forceResolveButton.current;\n  }\n\n  public hasSuggestedActionSelected(): boolean {\n    return this.state.selectedActionType !== SuggestionActionType.none;\n  }\n\n  public executeSelectedAction(): void {\n    switch (this.state.selectedActionType) {\n      case SuggestionActionType.forceResolve:\n        this._forceResolve();\n        break;\n      case SuggestionActionType.searchMore:\n        this._getMoreResults();\n        break;\n    }\n  }\n\n  public focusAboveSuggestions(): void {\n    if (this._forceResolveButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.forceResolve });\n    } else if (this._searchForMoreButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.searchMore });\n    }\n  }\n\n  public focusBelowSuggestions(): void {\n    if (this._searchForMoreButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.searchMore });\n    } else if (this._forceResolveButton.current) {\n      this.setState({ selectedActionType: SuggestionActionType.forceResolve });\n    }\n  }\n\n  public focusSearchForMoreButton(): void {\n    if (this._searchForMoreButton.current) {\n      this._searchForMoreButton.current.focus();\n    }\n  }\n\n  public scrollSelected(): void {\n    if (\n      this._selectedElement.current &&\n      this._scrollContainer.current &&\n      this._scrollContainer.current.scrollTo !== undefined\n    ) {\n      const { offsetHeight, offsetTop } = this._selectedElement.current;\n      const { offsetHeight: parentOffsetHeight, scrollTop } = this._scrollContainer.current;\n\n      const isAbove = offsetTop < scrollTop;\n      const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;\n\n      if (isAbove) {\n        this._scrollContainer.current.scrollTo(0, offsetTop);\n      } else if (isBelow) {\n        this._scrollContainer.current.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);\n      }\n    }\n  }\n\n  private _getAlertText = () => {\n    const {\n      isLoading,\n      isSearching,\n      suggestions,\n      suggestionsAvailableAlertText,\n      noResultsFoundText,\n      isExtendedLoading,\n      loadingText,\n    } = this.props;\n\n    if (!isLoading && !isSearching) {\n      if (suggestions.length > 0) {\n        return suggestionsAvailableAlertText || '';\n      }\n      if (noResultsFoundText) {\n        return noResultsFoundText;\n      }\n    } else if (isLoading && isExtendedLoading) {\n      return loadingText || '';\n    }\n    return '';\n  };\n\n  private _renderSuggestions(): JSX.Element | null {\n    const {\n      onRenderSuggestion,\n      removeSuggestionAriaLabel,\n      suggestionsItemClassName,\n      resultsMaximumNumber,\n      showRemoveButtons,\n      removeButtonIconProps,\n    } = this.props;\n\n    let { suggestions } = this.props;\n\n    const StyledTypedSuggestionsItem: React.FunctionComponent<ISuggestionItemProps<T>> = StyledSuggestionsItem;\n\n    let selectedIndex = -1;\n    suggestions.some((element, index) => {\n      if (element.selected) {\n        selectedIndex = index;\n        return true;\n      }\n      return false;\n    });\n\n    if (resultsMaximumNumber) {\n      suggestions =\n        selectedIndex >= resultsMaximumNumber\n          ? suggestions.slice(selectedIndex - resultsMaximumNumber + 1, selectedIndex + 1)\n          : suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    if (suggestions.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.suggestionsContainer} ref={this._scrollContainer} role=\"presentation\">\n        {suggestions.map((suggestion, index) => (\n          <div\n            ref={suggestion.selected ? this._selectedElement : undefined}\n            key={(suggestion.item as any).key ? (suggestion.item as any).key : index}\n            role=\"presentation\"\n          >\n            <StyledTypedSuggestionsItem\n              suggestionModel={suggestion}\n              RenderSuggestion={onRenderSuggestion}\n              onClick={this._onClickTypedSuggestionsItem(suggestion.item, index)}\n              className={suggestionsItemClassName}\n              showRemoveButton={showRemoveButtons}\n              removeButtonAriaLabel={removeSuggestionAriaLabel}\n              onRemoveItem={this._onRemoveTypedSuggestionsItem(suggestion.item, index)}\n              id={'sug-' + index}\n              removeButtonIconProps={removeButtonIconProps}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  private _getMoreResults = (): void => {\n    if (this.props.onGetMoreResults) {\n      this.props.onGetMoreResults();\n\n      // Reset selected action type as it will be of type SuggestionActionType.none after more results are gotten\n      this.setState({ selectedActionType: SuggestionActionType.none });\n    }\n  };\n\n  private _forceResolve = (): void => {\n    if (this.props.createGenericItem) {\n      this.props.createGenericItem();\n    }\n  };\n\n  private _shouldShowForceResolve = (): boolean => {\n    return this.props.showForceResolve ? this.props.showForceResolve() : false;\n  };\n\n  private _onClickTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      this.props.onSuggestionClick(ev, item, index);\n    };\n  };\n\n  private _refocusOnSuggestions = (keyCode: number): void => {\n    if (typeof this.props.refocusSuggestions === 'function') {\n      this.props.refocusSuggestions(keyCode);\n    }\n  };\n\n  private _onRemoveTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      const onSuggestionRemove = this.props.onSuggestionRemove!;\n      onSuggestionRemove(ev, item, index);\n      ev.stopPropagation();\n    };\n  };\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,sBAAsB,EAAEC,QAAQ,EAAEC,kBAAkB,EAAEC,GAAG,EAAEC,MAAM,QAAQ,oBAAoB;AACtG,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,oBAAoB,QAAQ,qBAAqB;AAC1D,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,SAAS,IAAIC,qBAAqB,QAAQ,0BAA0B;AAC7E,OAAO,KAAKC,YAAY,MAAM,oBAAoB;AAQlD,IAAMC,YAAY,GAAQD,YAAY;AAEtC,IAAME,aAAa,GAAGZ,kBAAkB,EAA8C;AAMtF,IAAMa,qBAAqB,GAAGX,MAAM,CAClCK,eAAe,EACfE,qBAAqB,EACrBK,SAAS,EACT;EACEC,KAAK,EAAE;CACR,CACF;AAED;;;AAGA,IAAAC,WAAA,0BAAAC,MAAA;EAAoCC,SAAA,CAAAF,WAAA,EAAAC,MAAA;EAQlC,SAAAD,YAAYG,gBAAsC;IAAlD,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAMF,gBAAgB,CAAC;IARfC,KAAA,CAAAE,mBAAmB,GAAGzB,KAAK,CAAC0B,SAAS,EAAW;IAChDH,KAAA,CAAAI,oBAAoB,GAAG3B,KAAK,CAAC0B,SAAS,EAAW;IACjDH,KAAA,CAAAK,gBAAgB,GAAG5B,KAAK,CAAC0B,SAAS,EAAkB;IACpDH,KAAA,CAAAM,gBAAgB,GAAG7B,KAAK,CAAC0B,SAAS,EAAkB;IAsL9D;;;IAGOH,KAAA,CAAAO,gBAAgB,GAAG,UAACC,OAAe,EAAEC,sBAA8B;MACxE,IAAIC,cAAc,GAAG,KAAK;MAC1B,IAAIC,qBAAqB,GAAG,IAAI;MAChC,IAAMC,qBAAqB,GAAGZ,KAAI,CAACa,KAAK,CAACC,kBAAkB;MAC3D,IAAMC,gBAAgB,GAAGf,KAAI,CAACgB,KAAK,CAACC,WAAW,CAACC,MAAM;MACtD,IAAIV,OAAO,KAAK7B,QAAQ,CAACwC,IAAI,EAAE;QAC7B,QAAQP,qBAAqB;UAC3B,KAAK1B,oBAAoB,CAACkC,YAAY;YACpC,IAAIL,gBAAgB,GAAG,CAAC,EAAE;cACxBf,KAAI,CAACqB,qBAAqB,CAACb,OAAO,CAAC;cACnCG,qBAAqB,GAAGzB,oBAAoB,CAACoC,IAAI;aAClD,MAAM,IAAItB,KAAI,CAACI,oBAAoB,CAACmB,OAAO,EAAE;cAC5CZ,qBAAqB,GAAGzB,oBAAoB,CAACsC,UAAU;aACxD,MAAM;cACLb,qBAAqB,GAAGzB,oBAAoB,CAACkC,YAAY;;YAE3D;UACF,KAAKlC,oBAAoB,CAACsC,UAAU;YAClC,IAAIxB,KAAI,CAACE,mBAAmB,CAACqB,OAAO,EAAE;cACpCZ,qBAAqB,GAAGzB,oBAAoB,CAACkC,YAAY;aAC1D,MAAM,IAAIL,gBAAgB,GAAG,CAAC,EAAE;cAC/Bf,KAAI,CAACqB,qBAAqB,CAACb,OAAO,CAAC;cACnCG,qBAAqB,GAAGzB,oBAAoB,CAACoC,IAAI;aAClD,MAAM;cACLX,qBAAqB,GAAGzB,oBAAoB,CAACsC,UAAU;;YAEzD;UACF,KAAKtC,oBAAoB,CAACoC,IAAI;YAC5B,IAAIb,sBAAsB,KAAK,CAAC,CAAC,IAAIT,KAAI,CAACE,mBAAmB,CAACqB,OAAO,EAAE;cACrEZ,qBAAqB,GAAGzB,oBAAoB,CAACkC,YAAY;;YAE3D;;OAEL,MAAM,IAAIZ,OAAO,KAAK7B,QAAQ,CAAC8C,EAAE,EAAE;QAClC,QAAQb,qBAAqB;UAC3B,KAAK1B,oBAAoB,CAACkC,YAAY;YACpC,IAAIpB,KAAI,CAACI,oBAAoB,CAACmB,OAAO,EAAE;cACrCZ,qBAAqB,GAAGzB,oBAAoB,CAACsC,UAAU;aACxD,MAAM,IAAIT,gBAAgB,GAAG,CAAC,EAAE;cAC/Bf,KAAI,CAACqB,qBAAqB,CAACb,OAAO,CAAC;cACnCG,qBAAqB,GAAGzB,oBAAoB,CAACoC,IAAI;;YAEnD;UACF,KAAKpC,oBAAoB,CAACsC,UAAU;YAClC,IAAIT,gBAAgB,GAAG,CAAC,EAAE;cACxBf,KAAI,CAACqB,qBAAqB,CAACb,OAAO,CAAC;cACnCG,qBAAqB,GAAGzB,oBAAoB,CAACoC,IAAI;aAClD,MAAM,IAAItB,KAAI,CAACE,mBAAmB,CAACqB,OAAO,EAAE;cAC3CZ,qBAAqB,GAAGzB,oBAAoB,CAACkC,YAAY;;YAE3D;UACF,KAAKlC,oBAAoB,CAACoC,IAAI;YAC5B,IAAIb,sBAAsB,KAAK,CAAC,CAAC,IAAIT,KAAI,CAACI,oBAAoB,CAACmB,OAAO,EAAE;cACtEZ,qBAAqB,GAAGzB,oBAAoB,CAACsC,UAAU;;YAEzD;;;MAIN,IAAIb,qBAAqB,KAAK,IAAI,EAAE;QAClCX,KAAI,CAAC0B,QAAQ,CAAC;UAAEZ,kBAAkB,EAAEH;QAAqB,CAAE,CAAC;QAC5DD,cAAc,GAAG,IAAI;;MAGvB,OAAOA,cAAc;IACvB,CAAC;IA+DOV,KAAA,CAAA2B,aAAa,GAAG;MAChB,IAAAC,EAAA,GAQF5B,KAAI,CAACgB,KAAK;QAPZa,SAAS,GAAAD,EAAA,CAAAC,SAAA;QACTC,WAAW,GAAAF,EAAA,CAAAE,WAAA;QACXb,WAAW,GAAAW,EAAA,CAAAX,WAAA;QACXc,6BAA6B,GAAAH,EAAA,CAAAG,6BAAA;QAC7BC,kBAAkB,GAAAJ,EAAA,CAAAI,kBAAA;QAClBC,iBAAiB,GAAAL,EAAA,CAAAK,iBAAA;QACjBC,WAAW,GAAAN,EAAA,CAAAM,WACC;MAEd,IAAI,CAACL,SAAS,IAAI,CAACC,WAAW,EAAE;QAC9B,IAAIb,WAAW,CAACC,MAAM,GAAG,CAAC,EAAE;UAC1B,OAAOa,6BAA6B,IAAI,EAAE;;QAE5C,IAAIC,kBAAkB,EAAE;UACtB,OAAOA,kBAAkB;;OAE5B,MAAM,IAAIH,SAAS,IAAII,iBAAiB,EAAE;QACzC,OAAOC,WAAW,IAAI,EAAE;;MAE1B,OAAO,EAAE;IACX,CAAC;IA6DOlC,KAAA,CAAAmC,eAAe,GAAG;MACxB,IAAInC,KAAI,CAACgB,KAAK,CAACoB,gBAAgB,EAAE;QAC/BpC,KAAI,CAACgB,KAAK,CAACoB,gBAAgB,EAAE;QAE7B;QACApC,KAAI,CAAC0B,QAAQ,CAAC;UAAEZ,kBAAkB,EAAE5B,oBAAoB,CAACoC;QAAI,CAAE,CAAC;;IAEpE,CAAC;IAEOtB,KAAA,CAAAqC,aAAa,GAAG;MACtB,IAAIrC,KAAI,CAACgB,KAAK,CAACsB,iBAAiB,EAAE;QAChCtC,KAAI,CAACgB,KAAK,CAACsB,iBAAiB,EAAE;;IAElC,CAAC;IAEOtC,KAAA,CAAAuC,uBAAuB,GAAG;MAChC,OAAOvC,KAAI,CAACgB,KAAK,CAACwB,gBAAgB,GAAGxC,KAAI,CAACgB,KAAK,CAACwB,gBAAgB,EAAE,GAAG,KAAK;IAC5E,CAAC;IAEOxC,KAAA,CAAAyC,4BAA4B,GAAG,UAACC,IAAO,EAAEC,KAAa;MAC5D,OAAO,UAACC,EAAiC;QACvC5C,KAAI,CAACgB,KAAK,CAAC6B,iBAAiB,CAACD,EAAE,EAAEF,IAAI,EAAEC,KAAK,CAAC;MAC/C,CAAC;IACH,CAAC;IAEO3C,KAAA,CAAAqB,qBAAqB,GAAG,UAACb,OAAe;MAC9C,IAAI,OAAOR,KAAI,CAACgB,KAAK,CAAC8B,kBAAkB,KAAK,UAAU,EAAE;QACvD9C,KAAI,CAACgB,KAAK,CAAC8B,kBAAkB,CAACtC,OAAO,CAAC;;IAE1C,CAAC;IAEOR,KAAA,CAAA+C,6BAA6B,GAAG,UAACL,IAAO,EAAEC,KAAa;MAC7D,OAAO,UAACC,EAAiC;QACvC,IAAMI,kBAAkB,GAAGhD,KAAI,CAACgB,KAAK,CAACgC,kBAAmB;QACzDA,kBAAkB,CAACJ,EAAE,EAAEF,IAAI,EAAEC,KAAK,CAAC;QACnCC,EAAE,CAACK,eAAe,EAAE;MACtB,CAAC;IACH,CAAC;IA1aCvE,sBAAsB,CAACsB,KAAI,CAAC;IAE5BA,KAAI,CAACa,KAAK,GAAG;MACXC,kBAAkB,EAAE5B,oBAAoB,CAACoC;KAC1C;;EACH;EAEO1B,WAAA,CAAAsD,SAAA,CAAAC,iBAAiB,GAAxB;IACE,IAAI,CAACC,cAAc,EAAE;IACrB,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAAChD,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACkB,OAAO,GAAG,IAAI;EAC3F,CAAC;EAEM3B,WAAA,CAAAsD,SAAA,CAAAI,kBAAkB,GAAzB;IACE;IACA;IACA;IACA,IAAI,IAAI,CAACjD,gBAAgB,CAACkB,OAAO,IAAI,IAAI,CAAC8B,qBAAqB,KAAK,IAAI,CAAChD,gBAAgB,CAACkB,OAAO,EAAE;MACjG,IAAI,CAAC6B,cAAc,EAAE;MACrB,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAAChD,gBAAgB,CAACkB,OAAO;;EAE9D,CAAC;EAEM3B,WAAA,CAAAsD,SAAA,CAAAK,MAAM,GAAb;;IAAA,IAAAvD,KAAA;IACQ,IAAAwD,EAAA,GAyBF,IAAI,CAACxC,KAAK;MAxBZyC,gBAAgB,GAAAD,EAAA,CAAAC,gBAAA;MAChBC,0BAA0B,GAAAF,EAAA,CAAAE,0BAAA;MAC1BC,iBAAiB,GAAAH,EAAA,CAAAG,iBAAA;MACjBC,iBAAiB,GAAAJ,EAAA,CAAAI,iBAAA;MACjBC,SAAS,GAAAL,EAAA,CAAAK,SAAA;MACTC,wBAAwB,GAAAN,EAAA,CAAAM,wBAAA;MACxB9B,kBAAkB,GAAAwB,EAAA,CAAAxB,kBAAA;MAClBf,WAAW,GAAAuC,EAAA,CAAAvC,WAAA;MACXY,SAAS,GAAA2B,EAAA,CAAA3B,SAAA;MACTC,WAAW,GAAA0B,EAAA,CAAA1B,WAAA;MACXI,WAAW,GAAAsB,EAAA,CAAAtB,WAAA;MACX6B,qBAAqB,GAAAP,EAAA,CAAAO,qBAAA;MACrBC,aAAa,GAAAR,EAAA,CAAAQ,aAAA;MACbC,yBAAyB,GAAAT,EAAA,CAAAS,yBAAA;MACzBC,oBAAoB,GAAAV,EAAA,CAAAU,oBAAA;MACpBC,iBAAiB,GAAAX,EAAA,CAAAW,iBAAA;MACjBC,aAAa,GAAAZ,EAAA,CAAAY,aAAA;MACbC,EAAA,GAAAb,EAAA,CAAAc,sBAA6B;MAA7BA,sBAAsB,GAAAD,EAAA,cAAG,IAAI,GAAAA,EAAA;MAC7BE,qBAAqB,GAAAf,EAAA,CAAAe,qBAAA;MACrBC,oBAAoB,GAAAhB,EAAA,CAAAgB,oBAAA;MACpBC,KAAK,GAAAjB,EAAA,CAAAiB,KAAA;MACLC,MAAM,GAAAlB,EAAA,CAAAkB,MAAA;MACNC,iBAAiB,GAAAnB,EAAA,CAAAmB,iBAAA;MACjBC,6BAA6B,GAAApB,EAAA,CAAAoB,6BACjB;IAEd;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACC,WAAW,GAAGH,MAAM,GACrBlF,aAAa,CAACkF,MAAM,EAAE;MACpBD,KAAK,EAAEA,KAAM;MACbZ,SAAS,EAAAA,SAAA;MACTW,oBAAoB,EAAAA,oBAAA;MACpBM,0BAA0B,EAAE,IAAI,CAACjE,KAAK,CAACC,kBAAkB,KAAK5B,oBAAoB,CAACkC,YAAY;MAC/F2D,2BAA2B,EAAE,IAAI,CAAClE,KAAK,CAACC,kBAAkB,KAAK5B,oBAAoB,CAACsC;KACrF,CAAC,GACF;MACEwD,IAAI,EAAEnG,GAAG,CAAC,gBAAgB,EAAEgF,SAAS,EAAEtE,YAAY,CAACyF,IAAI,CAAC;MACzDC,KAAK,EAAEpG,GAAG,CAAC,sBAAsB,EAAEU,YAAY,CAAC2F,gBAAgB,CAAC;MACjEC,mBAAmB,EAAEtG,GAAG,CAAC,sBAAsB,EAAEU,YAAY,CAAC6F,YAAY,GAAAxD,EAAA,OACxEA,EAAA,CAAC,cAAc,GAAGrC,YAAY,CAAC8F,cAAc,IAC3C,IAAI,CAACxE,KAAK,CAACC,kBAAkB,KAAK5B,oBAAoB,CAACsC,UAAU,E,IACnE;MACF8D,kBAAkB,EAAEzG,GAAG,CAAC,wBAAwB,EAAEU,YAAY,CAAC6F,YAAY,GAAAG,EAAA,OACzEA,EAAA,CAAC,cAAc,GAAGhG,YAAY,CAAC8F,cAAc,IAC3C,IAAI,CAACxE,KAAK,CAACC,kBAAkB,KAAK5B,oBAAoB,CAACkC,YAAY,E,IACrE;MACFoE,oBAAoB,EAAE3G,GAAG,CAAC,qCAAqC,EAAEU,YAAY,CAACiG,oBAAoB,CAAC;MACnGC,oBAAoB,EAAE5G,GAAG,CACvB,0BAA0B,EAC1BU,YAAY,CAACkG,oBAAoB,EACjCjB,oBAAoB,CACrB;MACDkB,aAAa,EAAE7G,GAAG,CAAC,qBAAqB,EAAEU,YAAY,CAACoG,eAAe;KACvE;IAEL,IAAMC,aAAa,GAAG,IAAI,CAACf,WAAW,CAACgB,kBAAkB,GACpD,IAAI,CAAChB,WAAW,CAACgB,kBAAkB,CAACC,OAAsE,GAC3GpG,SAAS;IAEb;IACA,IAAMqG,wBAAwB,GAAGrB,MAAM,GACnC;MAAEA,MAAM,EAAEkB;IAAa,CAAE,GACzB;MACE/B,SAAS,EAAEhF,GAAG,CAAC,wBAAwB,EAAEU,YAAY,CAACyG,kBAAkB;KACzE;IAEL,IAAMC,SAAS,GAAG,SAAAA,CAAA;MAChB,IAAMC,aAAa,GAAG,SAAAA,CAAA;QACpB,OAAOzH,KAAA,CAAA0H,aAAA;UAAKtC,SAAS,EAAE7D,KAAI,CAAC6E,WAAW,CAACa;QAAa,GAAG1D,kBAAkB,CAAO;MACnF,CAAC;MAED;QACE;QACAvD,KAAA,CAAA0H,aAAA;UAAKC,EAAE,EAAC,oBAAoB;UAACC,IAAI,EAAC;QAAQ,GACvCtC,qBAAqB,GAAGA,qBAAqB,CAACrE,SAAS,EAAEwG,aAAa,CAAC,GAAGA,aAAa,EAAE;MACtF;IAEV,CAAC;IAED;IACA,IAAII,UAAU,GAAuB/B,qBAAqB;IAC1D,IAAIN,yBAAyB,IAAIP,0BAA0B,EAAE;MAC3D4C,UAAU,GAAG5C,0BAA0B;;IAGzC,IAAI6C,WAAW,GAA+D7G,SAAS;IACvF,IAAI4E,sBAAsB,EAAE;MAC1BiC,WAAW,GAAGtF,WAAW,CAACC,MAAM,IAAKgD,oBAA+B,GAAGC,iBAAiB,GAAGC,aAAa;;IAG1G,IAAMoC,gBAAgB,GAAG,CAAC,CAACvF,WAAW,IAAI,CAACA,WAAW,CAACC,MAAM,KAAK,CAACW,SAAS;IAE5E,IAAM4E,cAAc,GAClB,IAAI,CAAC5F,KAAK,CAACC,kBAAkB,KAAK5B,oBAAoB,CAACkC,YAAY,GAAG,oBAAoB,GAAG1B,SAAS;IACxG,IAAMgH,eAAe,GACnB,IAAI,CAAC7F,KAAK,CAACC,kBAAkB,KAAK5B,oBAAoB,CAACsC,UAAU,GAAG,oBAAoB,GAAG9B,SAAS;IAEtG,OACEjB,KAAA,CAAA0H,aAAA;MACEtC,SAAS,EAAE,IAAI,CAACgB,WAAW,CAACG,IAAI;MAAA,cACpBJ,6BAA6B,IAAI0B,UAAU;MACvDF,EAAE,EAAEzB,iBAAiB;MACrB0B,IAAI,EAAC;IAAS,GAEd5H,KAAA,CAAA0H,aAAA,CAAClH,SAAS;MAAC0H,OAAO,EAAE,IAAI,CAAChF,aAAa,EAAE;MAAA,aAAY;IAAQ,EAAG,EAE9D2E,UAAU,GAAG7H,KAAA,CAAA0H,aAAA;MAAKtC,SAAS,EAAE,IAAI,CAACgB,WAAW,CAACI;IAAK,GAAGqB,UAAU,CAAO,GAAG,IAAI,EAC9E7C,gBAAgB,IAAI,IAAI,CAAClB,uBAAuB,EAAE,IACjD9D,KAAA,CAAA0H,aAAA,CAACpH,aAAa;MACZ6H,YAAY,EAAE,IAAI,CAAC1G,mBAAmB;MACtC2D,SAAS,EAAE,IAAI,CAACgB,WAAW,CAACS,kBAAkB;MAC9Cc,EAAE,EAAEK,cAAc;MAClBI,OAAO,EAAE,IAAI,CAACxE,aAAa;MAAA,qBACR;IAAkB,GAEpCoB,gBAAgB,CAEpB,EACA5B,SAAS,IAAIpD,KAAA,CAAA0H,aAAA,CAACnH,OAAO,EAAA8H,QAAA,KAAKf,wBAAwB;MAAEgB,SAAS,EAAE7E,WAAW;MAAE8E,KAAK,EAAE9E;IAAW,GAAI,EAClGsE,gBAAgB,GAAGP,SAAS,EAAE,GAAG,IAAI,CAACgB,kBAAkB,EAAE,EAC1DrD,iBAAiB,IAAIE,wBAAwB,IAC5CrF,KAAA,CAAA0H,aAAA,CAACpH,aAAa;MACZ6H,YAAY,EAAE,IAAI,CAACxG,oBAAoB;MACvCyD,SAAS,EAAE,IAAI,CAACgB,WAAW,CAACM,mBAAmB;MAC/C+B,SAAS,EAAEvD,iBAAiB,IAAI;QAAEwD,QAAQ,EAAE;MAAQ,CAAE;MACtDf,EAAE,EAAEM,eAAe;MACnBG,OAAO,EAAE,IAAI,CAAC1E,eAAe;MAAA,qBACV,mBAAmB;MACtCkE,IAAI,EAAE;IAAQ,GAEbzC,iBAAiB,CAErB,EACA9B,WAAW,GAAGrD,KAAA,CAAA0H,aAAA,CAACnH,OAAO,EAAA8H,QAAA,KAAKf,wBAAwB;MAAEgB,SAAS,EAAE/C,aAAa;MAAEgD,KAAK,EAAEhD;IAAa,GAAI,GAAG,IAAI,EAC9GuC,WAAW,IAAI,CAACzC,wBAAwB,IAAI,CAACG,yBAAyB,IAAI,CAACnC,WAAW,GACrFrD,KAAA,CAAA0H,aAAA;MAAKtC,SAAS,EAAE,IAAI,CAACgB,WAAW,CAACI;IAAK,GAAGsB,WAAW,CAAC,IAAI,CAACvF,KAAK,CAAC,CAAO,GACrE,IAAI,CACJ;EAEV,CAAC;EAwEMpB,WAAA,CAAAsD,SAAA,CAAAkE,kBAAkB,GAAzB;IACE,OAAO,CAAC,CAAC,IAAI,CAAChH,oBAAoB,CAACmB,OAAO,IAAI,CAAC,CAAC,IAAI,CAACrB,mBAAmB,CAACqB,OAAO;EAClF,CAAC;EAEM3B,WAAA,CAAAsD,SAAA,CAAAmE,0BAA0B,GAAjC;IACE,OAAO,IAAI,CAACxG,KAAK,CAACC,kBAAkB,KAAK5B,oBAAoB,CAACoC,IAAI;EACpE,CAAC;EAEM1B,WAAA,CAAAsD,SAAA,CAAAoE,qBAAqB,GAA5B;IACE,QAAQ,IAAI,CAACzG,KAAK,CAACC,kBAAkB;MACnC,KAAK5B,oBAAoB,CAACkC,YAAY;QACpC,IAAI,CAACiB,aAAa,EAAE;QACpB;MACF,KAAKnD,oBAAoB,CAACsC,UAAU;QAClC,IAAI,CAACW,eAAe,EAAE;QACtB;;EAEN,CAAC;EAEMvC,WAAA,CAAAsD,SAAA,CAAAqE,qBAAqB,GAA5B;IACE,IAAI,IAAI,CAACrH,mBAAmB,CAACqB,OAAO,EAAE;MACpC,IAAI,CAACG,QAAQ,CAAC;QAAEZ,kBAAkB,EAAE5B,oBAAoB,CAACkC;MAAY,CAAE,CAAC;KACzE,MAAM,IAAI,IAAI,CAAChB,oBAAoB,CAACmB,OAAO,EAAE;MAC5C,IAAI,CAACG,QAAQ,CAAC;QAAEZ,kBAAkB,EAAE5B,oBAAoB,CAACsC;MAAU,CAAE,CAAC;;EAE1E,CAAC;EAEM5B,WAAA,CAAAsD,SAAA,CAAAsE,qBAAqB,GAA5B;IACE,IAAI,IAAI,CAACpH,oBAAoB,CAACmB,OAAO,EAAE;MACrC,IAAI,CAACG,QAAQ,CAAC;QAAEZ,kBAAkB,EAAE5B,oBAAoB,CAACsC;MAAU,CAAE,CAAC;KACvE,MAAM,IAAI,IAAI,CAACtB,mBAAmB,CAACqB,OAAO,EAAE;MAC3C,IAAI,CAACG,QAAQ,CAAC;QAAEZ,kBAAkB,EAAE5B,oBAAoB,CAACkC;MAAY,CAAE,CAAC;;EAE5E,CAAC;EAEMxB,WAAA,CAAAsD,SAAA,CAAAuE,wBAAwB,GAA/B;IACE,IAAI,IAAI,CAACrH,oBAAoB,CAACmB,OAAO,EAAE;MACrC,IAAI,CAACnB,oBAAoB,CAACmB,OAAO,CAACmG,KAAK,EAAE;;EAE7C,CAAC;EAEM9H,WAAA,CAAAsD,SAAA,CAAAE,cAAc,GAArB;IACE,IACE,IAAI,CAAC/C,gBAAgB,CAACkB,OAAO,IAC7B,IAAI,CAACjB,gBAAgB,CAACiB,OAAO,IAC7B,IAAI,CAACjB,gBAAgB,CAACiB,OAAO,CAACoG,QAAQ,KAAKjI,SAAS,EACpD;MACM,IAAAkC,EAAA,GAA8B,IAAI,CAACvB,gBAAgB,CAACkB,OAAO;QAAzDqG,YAAY,GAAAhG,EAAA,CAAAgG,YAAA;QAAEC,SAAS,GAAAjG,EAAA,CAAAiG,SAAkC;MAC3D,IAAAtC,EAAA,GAAkD,IAAI,CAACjF,gBAAgB,CAACiB,OAAO;QAA/DuG,kBAAkB,GAAAvC,EAAA,CAAAqC,YAAA;QAAEG,SAAS,GAAAxC,EAAA,CAAAwC,SAAkC;MAErF,IAAMC,OAAO,GAAGH,SAAS,GAAGE,SAAS;MACrC,IAAME,OAAO,GAAGJ,SAAS,GAAGD,YAAY,GAAGG,SAAS,GAAGD,kBAAkB;MAEzE,IAAIE,OAAO,EAAE;QACX,IAAI,CAAC1H,gBAAgB,CAACiB,OAAO,CAACoG,QAAQ,CAAC,CAAC,EAAEE,SAAS,CAAC;OACrD,MAAM,IAAII,OAAO,EAAE;QAClB,IAAI,CAAC3H,gBAAgB,CAACiB,OAAO,CAACoG,QAAQ,CAAC,CAAC,EAAEE,SAAS,GAAGC,kBAAkB,GAAGF,YAAY,CAAC;;;EAG9F,CAAC;EA0BOhI,WAAA,CAAAsD,SAAA,CAAA+D,kBAAkB,GAA1B;IAAA,IAAAjH,KAAA;IACQ,IAAA4B,EAAA,GAOF,IAAI,CAACZ,KAAK;MANZkH,kBAAkB,GAAAtG,EAAA,CAAAsG,kBAAA;MAClBC,yBAAyB,GAAAvG,EAAA,CAAAuG,yBAAA;MACzBC,wBAAwB,GAAAxG,EAAA,CAAAwG,wBAAA;MACxBlE,oBAAoB,GAAAtC,EAAA,CAAAsC,oBAAA;MACpBmE,iBAAiB,GAAAzG,EAAA,CAAAyG,iBAAA;MACjBC,qBAAqB,GAAA1G,EAAA,CAAA0G,qBACT;IAER,IAAArH,WAAW,GAAK,IAAI,CAACD,KAAK,CAAAC,WAAf;IAEjB,IAAMsH,0BAA0B,GAAqD9I,qBAAqB;IAE1G,IAAI+I,aAAa,GAAG,CAAC,CAAC;IACtBvH,WAAW,CAACwH,IAAI,CAAC,UAACC,OAAO,EAAE/F,KAAK;MAC9B,IAAI+F,OAAO,CAACC,QAAQ,EAAE;QACpBH,aAAa,GAAG7F,KAAK;QACrB,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC;IAEF,IAAIuB,oBAAoB,EAAE;MACxBjD,WAAW,GACTuH,aAAa,IAAItE,oBAAoB,GACjCjD,WAAW,CAAC2H,KAAK,CAACJ,aAAa,GAAGtE,oBAAoB,GAAG,CAAC,EAAEsE,aAAa,GAAG,CAAC,CAAC,GAC9EvH,WAAW,CAAC2H,KAAK,CAAC,CAAC,EAAE1E,oBAAoB,CAAC;;IAGlD,IAAIjD,WAAW,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5B,OAAO,IAAI;;IAGb,OACEzC,KAAA,CAAA0H,aAAA;MAAKtC,SAAS,EAAE,IAAI,CAACgB,WAAW,CAACY,oBAAoB;MAAEoD,GAAG,EAAE,IAAI,CAACvI,gBAAgB;MAAE+F,IAAI,EAAC;IAAc,GACnGpF,WAAW,CAAC6H,GAAG,CAAC,UAACC,UAAU,EAAEpG,KAAK;MAAK,OACtClE,KAAA,CAAA0H,aAAA;QACE0C,GAAG,EAAEE,UAAU,CAACJ,QAAQ,GAAG3I,KAAI,CAACK,gBAAgB,GAAGX,SAAS;QAC5DsJ,GAAG,EAAGD,UAAU,CAACrG,IAAY,CAACsG,GAAG,GAAID,UAAU,CAACrG,IAAY,CAACsG,GAAG,GAAGrG,KAAK;QACxE0D,IAAI,EAAC;MAAc,GAEnB5H,KAAA,CAAA0H,aAAA,CAACoC,0BAA0B;QACzBU,eAAe,EAAEF,UAAU;QAC3BG,gBAAgB,EAAEhB,kBAAkB;QACpCrB,OAAO,EAAE7G,KAAI,CAACyC,4BAA4B,CAACsG,UAAU,CAACrG,IAAI,EAAEC,KAAK,CAAC;QAClEkB,SAAS,EAAEuE,wBAAwB;QACnCe,gBAAgB,EAAEd,iBAAiB;QACnCe,qBAAqB,EAAEjB,yBAAyB;QAChDkB,YAAY,EAAErJ,KAAI,CAAC+C,6BAA6B,CAACgG,UAAU,CAACrG,IAAI,EAAEC,KAAK,CAAC;QACxEyD,EAAE,EAAE,MAAM,GAAGzD,KAAK;QAClB2F,qBAAqB,EAAEA;MAAqB,EAC5C,CACE;IAjBgC,CAkBvC,CAAC,CACE;EAEV,CAAC;EAwCH,OAAA1I,WAAC;AAAD,CAAC,CAtbmCnB,KAAK,CAAC6K,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}