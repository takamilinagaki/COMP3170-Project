{"ast":null,"code":"import { canUseDOM } from './canUseDOM';\nvar _window = undefined;\n// Note: Accessing \"window\" in IE11 is somewhat expensive, and calling \"typeof window\"\n// hits a memory leak, whereas aliasing it and calling \"typeof _window\" does not.\n// Caching the window value at the file scope lets us minimize the impact.\ntry {\n  _window = window;\n} catch (e) {\n  /* no-op */\n}\n/**\n * Helper to get the window object. The helper will make sure to use a cached variable\n * of \"window\", to avoid overhead and memory leaks in IE11. Note that in popup scenarios the\n * window object won't match the \"global\" window object, and for these scenarios, you should\n * pass in an element hosted within the popup.\n *\n * @public\n */\nexport function getWindow(rootElement) {\n  if (!canUseDOM() || typeof _window === 'undefined') {\n    return undefined;\n  } else {\n    var el = rootElement;\n    return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;\n  }\n}","map":{"version":3,"names":["canUseDOM","_window","undefined","window","e","getWindow","rootElement","el","ownerDocument","defaultView"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/lib/src/dom/getWindow.ts"],"sourcesContent":["import { canUseDOM } from './canUseDOM';\n\nlet _window: Window | undefined = undefined;\n\n// Note: Accessing \"window\" in IE11 is somewhat expensive, and calling \"typeof window\"\n// hits a memory leak, whereas aliasing it and calling \"typeof _window\" does not.\n// Caching the window value at the file scope lets us minimize the impact.\ntry {\n  _window = window;\n} catch (e) {\n  /* no-op */\n}\n\n/**\n * Helper to get the window object. The helper will make sure to use a cached variable\n * of \"window\", to avoid overhead and memory leaks in IE11. Note that in popup scenarios the\n * window object won't match the \"global\" window object, and for these scenarios, you should\n * pass in an element hosted within the popup.\n *\n * @public\n */\nexport function getWindow(rootElement?: Element | null): Window | undefined {\n  if (!canUseDOM() || typeof _window === 'undefined') {\n    return undefined;\n  } else {\n    const el = rootElement as Element;\n\n    return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,aAAa;AAEvC,IAAIC,OAAO,GAAuBC,SAAS;AAE3C;AACA;AACA;AACA,IAAI;EACFD,OAAO,GAAGE,MAAM;CACjB,CAAC,OAAOC,CAAC,EAAE;EACV;AAAA;AAGF;;;;;;;;AAQA,OAAM,SAAUC,SAASA,CAACC,WAA4B;EACpD,IAAI,CAACN,SAAS,EAAE,IAAI,OAAOC,OAAO,KAAK,WAAW,EAAE;IAClD,OAAOC,SAAS;GACjB,MAAM;IACL,IAAMK,EAAE,GAAGD,WAAsB;IAEjC,OAAOC,EAAE,IAAIA,EAAE,CAACC,aAAa,IAAID,EAAE,CAACC,aAAa,CAACC,WAAW,GAAGF,EAAE,CAACC,aAAa,CAACC,WAAW,GAAGR,OAAO;;AAE1G"},"metadata":{},"sourceType":"module","externalDependencies":[]}