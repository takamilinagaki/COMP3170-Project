{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { getThemedContext } from '@fluentui/style-utilities';\nimport { Customizer } from '@fluentui/utilities';\n/**\n * Theme provider is a simplified version of Customizer that activates the appropriate theme data\n * for a given scheme name.\n *\n * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.\n * @deprecated This is an old ThemeProvider implementation. New code should use the ThemeProvider exported from\n * `@fluentui/react` (or `@fluentui/react/lib/Theme`) instead.\n */\nexport var ThemeProvider = function (props) {\n  var scheme = props.scheme,\n    theme = props.theme,\n    rest = __rest(props, [\"scheme\", \"theme\"]);\n  // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme\n  //   in context and uses quick global store accessor to trigger change by passing in theme object as child and\n  //   triggering re-render. (perf benefits need verification)\n  var contextTransform = function (context) {\n    return getThemedContext(context, scheme, theme);\n  };\n  // eslint-disable-next-line react/jsx-no-bind, deprecation/deprecation\n  return React.createElement(Customizer, __assign({}, rest, {\n    contextTransform: contextTransform\n  }));\n};","map":{"version":3,"names":["React","getThemedContext","Customizer","ThemeProvider","props","scheme","theme","rest","__rest","contextTransform","context","createElement","__assign"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/foundation-legacy/src/ThemeProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getThemedContext, ISchemeNames, ITheme } from '@fluentui/style-utilities';\nimport { Customizer, ICustomizerProps } from '@fluentui/utilities';\n\nexport interface IThemeProviderProps {\n  scheme?: ISchemeNames;\n  theme?: ITheme;\n}\n\n/**\n * Theme provider is a simplified version of Customizer that activates the appropriate theme data\n * for a given scheme name.\n *\n * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.\n * @deprecated This is an old ThemeProvider implementation. New code should use the ThemeProvider exported from\n * `@fluentui/react` (or `@fluentui/react/lib/Theme`) instead.\n */\nexport const ThemeProvider: React.FunctionComponent<IThemeProviderProps> = (props: IThemeProviderProps) => {\n  const { scheme, theme, ...rest } = props;\n\n  // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme\n  //   in context and uses quick global store accessor to trigger change by passing in theme object as child and\n  //   triggering re-render. (perf benefits need verification)\n  const contextTransform: ICustomizerProps['contextTransform'] = context => {\n    return getThemedContext(context, scheme, theme);\n  };\n\n  // eslint-disable-next-line react/jsx-no-bind, deprecation/deprecation\n  return <Customizer {...rest} contextTransform={contextTransform} />;\n};\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,gBAAgB,QAA8B,2BAA2B;AAClF,SAASC,UAAU,QAA0B,qBAAqB;AAOlE;;;;;;;;AAQA,OAAO,IAAMC,aAAa,GAAiD,SAAAA,CAACC,KAA0B;EAC5F,IAAAC,MAAM,GAAqBD,KAAK,CAAAC,MAA1B;IAAEC,KAAK,GAAcF,KAAK,CAAAE,KAAnB;IAAKC,IAAI,GAAAC,MAAA,CAAKJ,KAAK,EAAlC,mBAA0B,CAAF;EAE9B;EACA;EACA;EACA,IAAMK,gBAAgB,GAAyC,SAAAA,CAAAC,OAAO;IACpE,OAAOT,gBAAgB,CAACS,OAAO,EAAEL,MAAM,EAAEC,KAAK,CAAC;EACjD,CAAC;EAED;EACA,OAAON,KAAA,CAAAW,aAAA,CAACT,UAAU,EAAAU,QAAA,KAAKL,IAAI;IAAEE,gBAAgB,EAAEA;EAAgB,GAAI;AACrE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}