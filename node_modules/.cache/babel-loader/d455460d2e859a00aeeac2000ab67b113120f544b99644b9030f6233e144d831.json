{"ast":null,"code":"var DEFAULT_HEIGHT = '50%';\nvar DEFAULT_WIDTH = 20;\n/**\n * - Generates a style used to fade out an overflowing content by defining a style for an :after pseudo element.\n * - Apply it to the :after selector for all combination of states the parent of content might have (normal, hover,\n * selected, focus).\n * - Requires the target to have position set to relative and overflow set to hidden.\n *\n * @example\n * ```tsx\n * // Assuming the following DOM structure and the different background colors coming from\n * // the parent holding the content.\n * <div className={classNames.parent}>\n *   <span className={classNames.content}>Overflown Content</span>\n * </div>\n * ```\n * ```ts\n * // This is how the style set would look in Component.styles.ts\n * const { bodyBackground } = theme.semanticColors;\n * const { neutralLighter } = theme.palette;\n *\n * // The second argument of getFadedOverflowStyle function is a string representing a key of\n * // ISemanticColors or IPalette.\n *\n * const styles = {\n *   parent: [\n *     backgroundColor: bodyBackground,\n *     selectors: {\n *       '&:hover: {\n *         backgroundColor: neutralLighter\n *       },\n *       '$content:after': {\n *         ...getFadedOverflowStyle(theme, 'bodyBackground')\n *       },\n *       '&:hover $content:after': {\n *         ...getFadedOverflowStyle(theme, 'neutralLighter')\n *       }\n *     }\n *   ],\n *   content: [\n *     width: '100%',\n *     display: 'inline-block',\n *     position: 'relative',\n *     overflow: 'hidden'\n *   ]\n * }\n * ```\n * @param theme - The theme object to use.\n * @param color - The background color to fade out to. Accepts only keys of ISemanticColors or IPalette.\n * Defaults to 'bodyBackground'.\n * @param direction - The direction of the overflow. Defaults to horizontal.\n * @param width - The width of the fading overflow. Vertical direction defaults it to 100% vs 20px when horizontal.\n * @param height - The Height of the fading overflow. Vertical direction defaults it to 50% vs 100% when horizontal.\n * @returns The style object.\n */\nexport function getFadedOverflowStyle(theme, color, direction, width, height) {\n  if (color === void 0) {\n    color = 'bodyBackground';\n  }\n  if (direction === void 0) {\n    direction = 'horizontal';\n  }\n  if (width === void 0) {\n    width = getDefaultValue('width', direction);\n  }\n  if (height === void 0) {\n    height = getDefaultValue('height', direction);\n  }\n  // Get the color value string from the theme semanticColors or palette.\n  var colorValue = theme.semanticColors[color] || theme.palette[color];\n  // Get the red, green, blue values of the colorValue.\n  var rgbColor = color2rgb(colorValue);\n  // Apply opacity 0 to serve as a start color of the gradient.\n  var rgba = \"rgba(\".concat(rgbColor.r, \", \").concat(rgbColor.g, \", \").concat(rgbColor.b, \", 0)\");\n  // Get the direction of the gradient. (mergeStyles takes care of RTL direction)\n  var gradientDirection = direction === 'vertical' ? 'to bottom' : 'to right';\n  return {\n    content: '\"\"',\n    position: 'absolute',\n    right: 0,\n    bottom: 0,\n    width: width,\n    height: height,\n    pointerEvents: 'none',\n    backgroundImage: \"linear-gradient(\".concat(gradientDirection, \", \").concat(rgba, \" 0%, \").concat(colorValue, \" 100%)\")\n  };\n}\n// TODO consider moving this to a separate module along with some more color functions from OUFR/utilities.\n/**\n * Helper function to convert a string hex color to an RGB object.\n *\n * @param colorValue - Color to be converted from hex to rgba.\n */\nfunction color2rgb(colorValue) {\n  if (colorValue[0] === '#') {\n    // If it's a hex code\n    return {\n      r: parseInt(colorValue.slice(1, 3), 16),\n      g: parseInt(colorValue.slice(3, 5), 16),\n      b: parseInt(colorValue.slice(5, 7), 16)\n    };\n  } else if (colorValue.indexOf('rgba(') === 0) {\n    // If it's an rgba color string\n    colorValue = colorValue.match(/rgba\\(([^)]+)\\)/)[1];\n    var parts = colorValue.split(/ *, */).map(Number);\n    return {\n      r: parts[0],\n      g: parts[1],\n      b: parts[2]\n    };\n  }\n  // The only remaining possibility is transparent.\n  return {\n    r: 255,\n    g: 255,\n    b: 255\n  };\n}\n/**\n * Helper function to get the default values for parameters of main function.\n *\n * @param style - Which style to get the default value for.\n * @param direction - What direction to take into consideration.\n */\nfunction getDefaultValue(style, direction) {\n  if (style === 'width') {\n    return direction === 'horizontal' ? DEFAULT_WIDTH : '100%';\n  } else {\n    return direction === 'vertical' ? DEFAULT_HEIGHT : '100%';\n  }\n}","map":{"version":3,"names":["DEFAULT_HEIGHT","DEFAULT_WIDTH","getFadedOverflowStyle","theme","color","direction","width","height","getDefaultValue","colorValue","semanticColors","palette","rgbColor","color2rgb","rgba","concat","r","g","b","gradientDirection","content","position","right","bottom","pointerEvents","backgroundImage","parseInt","slice","indexOf","match","parts","split","map","Number","style"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/style-utilities/lib/src/styles/getFadedOverflowStyle.ts"],"sourcesContent":["import type { IRawStyle } from '@fluentui/merge-styles';\nimport type { ITheme, ISemanticColors, IPalette } from '../interfaces/index';\n\ninterface IRGB {\n  r: number;\n  g: number;\n  b: number;\n}\n\nconst DEFAULT_HEIGHT = '50%';\nconst DEFAULT_WIDTH = 20;\n\n/**\n * - Generates a style used to fade out an overflowing content by defining a style for an :after pseudo element.\n * - Apply it to the :after selector for all combination of states the parent of content might have (normal, hover,\n * selected, focus).\n * - Requires the target to have position set to relative and overflow set to hidden.\n *\n * @example\n * ```tsx\n * // Assuming the following DOM structure and the different background colors coming from\n * // the parent holding the content.\n * <div className={classNames.parent}>\n *   <span className={classNames.content}>Overflown Content</span>\n * </div>\n * ```\n * ```ts\n * // This is how the style set would look in Component.styles.ts\n * const { bodyBackground } = theme.semanticColors;\n * const { neutralLighter } = theme.palette;\n *\n * // The second argument of getFadedOverflowStyle function is a string representing a key of\n * // ISemanticColors or IPalette.\n *\n * const styles = {\n *   parent: [\n *     backgroundColor: bodyBackground,\n *     selectors: {\n *       '&:hover: {\n *         backgroundColor: neutralLighter\n *       },\n *       '$content:after': {\n *         ...getFadedOverflowStyle(theme, 'bodyBackground')\n *       },\n *       '&:hover $content:after': {\n *         ...getFadedOverflowStyle(theme, 'neutralLighter')\n *       }\n *     }\n *   ],\n *   content: [\n *     width: '100%',\n *     display: 'inline-block',\n *     position: 'relative',\n *     overflow: 'hidden'\n *   ]\n * }\n * ```\n * @param theme - The theme object to use.\n * @param color - The background color to fade out to. Accepts only keys of ISemanticColors or IPalette.\n * Defaults to 'bodyBackground'.\n * @param direction - The direction of the overflow. Defaults to horizontal.\n * @param width - The width of the fading overflow. Vertical direction defaults it to 100% vs 20px when horizontal.\n * @param height - The Height of the fading overflow. Vertical direction defaults it to 50% vs 100% when horizontal.\n * @returns The style object.\n */\nexport function getFadedOverflowStyle(\n  theme: ITheme,\n  color: keyof ISemanticColors | keyof IPalette = 'bodyBackground',\n  direction: 'horizontal' | 'vertical' = 'horizontal',\n  width: string | number = getDefaultValue('width', direction),\n  height: string | number = getDefaultValue('height', direction),\n): IRawStyle {\n  // Get the color value string from the theme semanticColors or palette.\n  const colorValue: string =\n    theme.semanticColors[color as keyof ISemanticColors] || theme.palette[color as keyof IPalette];\n  // Get the red, green, blue values of the colorValue.\n  const rgbColor: IRGB = color2rgb(colorValue);\n  // Apply opacity 0 to serve as a start color of the gradient.\n  const rgba = `rgba(${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}, 0)`;\n  // Get the direction of the gradient. (mergeStyles takes care of RTL direction)\n  const gradientDirection = direction === 'vertical' ? 'to bottom' : 'to right';\n\n  return {\n    content: '\"\"',\n    position: 'absolute',\n    right: 0,\n    bottom: 0,\n    width: width,\n    height: height,\n    pointerEvents: 'none',\n    backgroundImage: `linear-gradient(${gradientDirection}, ${rgba} 0%, ${colorValue} 100%)`,\n  };\n}\n\n// TODO consider moving this to a separate module along with some more color functions from OUFR/utilities.\n/**\n * Helper function to convert a string hex color to an RGB object.\n *\n * @param colorValue - Color to be converted from hex to rgba.\n */\nfunction color2rgb(colorValue: string): IRGB {\n  if (colorValue[0] === '#') {\n    // If it's a hex code\n    return {\n      r: parseInt(colorValue.slice(1, 3), 16),\n      g: parseInt(colorValue.slice(3, 5), 16),\n      b: parseInt(colorValue.slice(5, 7), 16),\n    };\n  } else if (colorValue.indexOf('rgba(') === 0) {\n    // If it's an rgba color string\n    colorValue = colorValue.match(/rgba\\(([^)]+)\\)/)![1];\n    const parts = colorValue.split(/ *, */).map(Number);\n\n    return {\n      r: parts[0],\n      g: parts[1],\n      b: parts[2],\n    };\n  }\n  // The only remaining possibility is transparent.\n  return {\n    r: 255,\n    g: 255,\n    b: 255,\n  };\n}\n\n/**\n * Helper function to get the default values for parameters of main function.\n *\n * @param style - Which style to get the default value for.\n * @param direction - What direction to take into consideration.\n */\nfunction getDefaultValue(style: 'width' | 'height', direction: string): number | string {\n  if (style === 'width') {\n    return direction === 'horizontal' ? DEFAULT_WIDTH : '100%';\n  } else {\n    return direction === 'vertical' ? DEFAULT_HEIGHT : '100%';\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}