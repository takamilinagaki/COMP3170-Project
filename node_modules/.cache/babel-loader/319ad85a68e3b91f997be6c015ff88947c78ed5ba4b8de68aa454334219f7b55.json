{"ast":null,"code":"import { HighContrastSelector } from './CommonStyles';\nimport { IsFocusVisibleClassName } from '@fluentui/utilities';\nimport { ZIndexes } from './zIndexes';\nexport function getFocusStyle(theme, insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly, borderRadius) {\n  if (typeof insetOrOptions === 'number' || !insetOrOptions) {\n    return _getFocusStyleInternal(theme, {\n      inset: insetOrOptions,\n      position: position,\n      highContrastStyle: highContrastStyle,\n      borderColor: borderColor,\n      outlineColor: outlineColor,\n      isFocusedOnly: isFocusedOnly,\n      borderRadius: borderRadius\n    });\n  } else {\n    return _getFocusStyleInternal(theme, insetOrOptions);\n  }\n}\nfunction _getFocusStyleInternal(theme, options) {\n  var _a, _b;\n  if (options === void 0) {\n    options = {};\n  }\n  var borderRadius = options.borderRadius,\n    _c = options.inset,\n    inset = _c === void 0 ? 0 : _c,\n    _d = options.width,\n    width = _d === void 0 ? 1 : _d,\n    _e = options.position,\n    position = _e === void 0 ? 'relative' : _e,\n    highContrastStyle = options.highContrastStyle,\n    _f = options.borderColor,\n    borderColor = _f === void 0 ? theme.palette.white : _f,\n    _g = options.outlineColor,\n    outlineColor = _g === void 0 ? theme.palette.neutralSecondary : _g,\n    _h = options.isFocusedOnly,\n    isFocusedOnly = _h === void 0 ? true : _h,\n    pointerEvents = options.pointerEvents;\n  return {\n    // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.\n    outline: 'transparent',\n    // Requirement because pseudo-element is absolutely positioned.\n    position: position,\n    selectors: (_a = {\n      // Clear the focus border in Firefox.\n      // Reference: http://stackoverflow.com/a/199319/1436671\n      '::-moz-focus-inner': {\n        border: '0'\n      }\n    },\n    // When the element that uses this mixin is in a :focus state, add a pseudo-element to\n    // create a border.\n    _a[\".\".concat(IsFocusVisibleClassName, \" &\").concat(isFocusedOnly ? ':focus' : '', \":after\")] = {\n      content: '\"\"',\n      position: 'absolute',\n      pointerEvents: pointerEvents,\n      left: inset + 1,\n      top: inset + 1,\n      bottom: inset + 1,\n      right: inset + 1,\n      border: \"\".concat(width, \"px solid \").concat(borderColor),\n      outline: \"\".concat(width, \"px solid \").concat(outlineColor),\n      zIndex: ZIndexes.FocusStyle,\n      borderRadius: borderRadius,\n      selectors: (_b = {}, _b[HighContrastSelector] = highContrastStyle, _b)\n    }, _a)\n  };\n}\n/**\n * Generates style to clear browser specific focus styles.\n */\nexport function focusClear() {\n  return {\n    selectors: {\n      '&::-moz-focus-inner': {\n        // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671\n        border: 0\n      },\n      '&': {\n        // Clear browser specific focus styles and use transparent as placeholder for focus style\n        outline: 'transparent'\n      }\n    }\n  };\n}\n/**\n * Generates a style which can be used to set a border on focus.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border (default 0)\n * @param width - The border width in pixels (default 1)\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\n * @returns The style object.\n */\nexport function getFocusOutlineStyle(theme, inset, width, color) {\n  var _a;\n  if (inset === void 0) {\n    inset = 0;\n  }\n  if (width === void 0) {\n    width = 1;\n  }\n  return {\n    selectors: (_a = {}, _a[\":global(\".concat(IsFocusVisibleClassName, \") &:focus\")] = {\n      outline: \"\".concat(width, \" solid \").concat(color || theme.palette.neutralSecondary),\n      outlineOffset: \"\".concat(-inset, \"px\")\n    }, _a)\n  };\n}\n/**\n * Generates text input border styles on focus.\n *\n * @param borderColor - Color of the border.\n * @param borderRadius - Radius of the border.\n * @param borderType - Type of the border.\n * @param borderPosition - Position of the border relative to the input element (default to -1\n * as it's the most common border width of the input element)\n * @returns The style object.\n */\nexport var getInputFocusStyle = function (borderColor, borderRadius, borderType, borderPosition) {\n  var _a, _b, _c;\n  if (borderType === void 0) {\n    borderType = 'border';\n  }\n  if (borderPosition === void 0) {\n    borderPosition = -1;\n  }\n  var isBorderBottom = borderType === 'borderBottom';\n  return {\n    borderColor: borderColor,\n    selectors: {\n      ':after': (_a = {\n        pointerEvents: 'none',\n        content: \"''\",\n        position: 'absolute',\n        left: isBorderBottom ? 0 : borderPosition,\n        top: borderPosition,\n        bottom: borderPosition,\n        right: isBorderBottom ? 0 : borderPosition\n      }, _a[borderType] = \"2px solid \".concat(borderColor), _a.borderRadius = borderRadius, _a.width = borderType === 'borderBottom' ? '100%' : undefined, _a.selectors = (_b = {}, _b[HighContrastSelector] = (_c = {}, _c[borderType === 'border' ? 'borderColor' : 'borderBottomColor'] = 'Highlight', _c), _b), _a)\n    }\n  };\n};","map":{"version":3,"names":["HighContrastSelector","IsFocusVisibleClassName","ZIndexes","getFocusStyle","theme","insetOrOptions","position","highContrastStyle","borderColor","outlineColor","isFocusedOnly","borderRadius","_getFocusStyleInternal","inset","options","_c","_d","width","_e","_f","palette","white","_g","neutralSecondary","_h","pointerEvents","outline","selectors","_a","border","concat","content","left","top","bottom","right","zIndex","FocusStyle","_b","focusClear","getFocusOutlineStyle","color","outlineOffset","getInputFocusStyle","borderType","borderPosition","isBorderBottom","undefined"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/style-utilities/lib/src/styles/getFocusStyle.ts"],"sourcesContent":["import { HighContrastSelector } from './CommonStyles';\nimport { IsFocusVisibleClassName } from '@fluentui/utilities';\nimport { ZIndexes } from './zIndexes';\nimport type { IRawStyle } from '@fluentui/merge-styles';\nimport type { IGetFocusStylesOptions, ITheme } from '../interfaces/index';\n\n/**\n * Generates a focus style which can be used to define an :after focus border.\n *\n * @param theme - The theme object to use.\n * @param options - Options to customize the focus border.\n * @returns The style object.\n */\nexport function getFocusStyle(theme: ITheme, options?: IGetFocusStylesOptions): IRawStyle;\n/**\n * Generates a focus style which can be used to define an :after focus border.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border.\n * @param position - The positioning applied to the container. Must\n * be 'relative' or 'absolute' so that the focus border can live around it.\n * @param highContrastStyle - Style for high contrast mode.\n * @param borderColor - Color of the border.\n * @param outlineColor - Color of the outline.\n * @param isFocusedOnly - If the styles should apply on focus or not.\n * @param borderRadius - If the style should include a rounded border.\n * @returns The style object.\n * @deprecated Use the object parameter version instead.\n */\nexport function getFocusStyle(\n  theme: ITheme,\n  inset?: number,\n  position?: 'relative' | 'absolute',\n  highContrastStyle?: IRawStyle | undefined,\n  borderColor?: string,\n  outlineColor?: string,\n  isFocusedOnly?: boolean,\n  borderRadius?: string | number | undefined,\n): IRawStyle;\nexport function getFocusStyle(\n  theme: ITheme,\n  insetOrOptions?: number | IGetFocusStylesOptions,\n  position?: 'relative' | 'absolute',\n  highContrastStyle?: IRawStyle,\n  borderColor?: string,\n  outlineColor?: string,\n  isFocusedOnly?: boolean,\n  borderRadius?: string | number | undefined,\n): IRawStyle {\n  if (typeof insetOrOptions === 'number' || !insetOrOptions) {\n    return _getFocusStyleInternal(theme, {\n      inset: insetOrOptions,\n      position,\n      highContrastStyle,\n      borderColor,\n      outlineColor,\n      isFocusedOnly,\n      borderRadius,\n    });\n  } else {\n    return _getFocusStyleInternal(theme, insetOrOptions);\n  }\n}\n\nfunction _getFocusStyleInternal(theme: ITheme, options: IGetFocusStylesOptions = {}): IRawStyle {\n  const {\n    borderRadius,\n    inset = 0,\n    width = 1,\n    position = 'relative',\n    highContrastStyle,\n    borderColor = theme.palette.white,\n    outlineColor = theme.palette.neutralSecondary,\n    isFocusedOnly = true,\n    pointerEvents,\n  } = options;\n\n  return {\n    // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.\n    outline: 'transparent',\n    // Requirement because pseudo-element is absolutely positioned.\n    position,\n\n    selectors: {\n      // Clear the focus border in Firefox.\n      // Reference: http://stackoverflow.com/a/199319/1436671\n      '::-moz-focus-inner': {\n        border: '0',\n      },\n\n      // When the element that uses this mixin is in a :focus state, add a pseudo-element to\n      // create a border.\n      [`.${IsFocusVisibleClassName} &${isFocusedOnly ? ':focus' : ''}:after`]: {\n        content: '\"\"',\n        position: 'absolute',\n        pointerEvents,\n        left: inset + 1,\n        top: inset + 1,\n        bottom: inset + 1,\n        right: inset + 1,\n        border: `${width}px solid ${borderColor}`,\n        outline: `${width}px solid ${outlineColor}`,\n        zIndex: ZIndexes.FocusStyle,\n        borderRadius: borderRadius,\n        selectors: {\n          [HighContrastSelector]: highContrastStyle,\n        },\n      },\n    },\n  };\n}\n\n/**\n * Generates style to clear browser specific focus styles.\n */\nexport function focusClear(): IRawStyle {\n  return {\n    selectors: {\n      '&::-moz-focus-inner': {\n        // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671\n        border: 0,\n      },\n      '&': {\n        // Clear browser specific focus styles and use transparent as placeholder for focus style\n        outline: 'transparent',\n      },\n    },\n  };\n}\n\n/**\n * Generates a style which can be used to set a border on focus.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border (default 0)\n * @param width - The border width in pixels (default 1)\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\n * @returns The style object.\n */\nexport function getFocusOutlineStyle(theme: ITheme, inset: number = 0, width: number = 1, color?: string): IRawStyle {\n  return {\n    selectors: {\n      [`:global(${IsFocusVisibleClassName}) &:focus`]: {\n        outline: `${width} solid ${color || theme.palette.neutralSecondary}`,\n        outlineOffset: `${-inset}px`,\n      },\n    },\n  };\n}\n\n/**\n * Generates text input border styles on focus.\n *\n * @param borderColor - Color of the border.\n * @param borderRadius - Radius of the border.\n * @param borderType - Type of the border.\n * @param borderPosition - Position of the border relative to the input element (default to -1\n * as it's the most common border width of the input element)\n * @returns The style object.\n */\nexport const getInputFocusStyle = (\n  borderColor: string,\n  borderRadius: string | number,\n  borderType: 'border' | 'borderBottom' = 'border',\n  borderPosition: number = -1,\n): IRawStyle => {\n  const isBorderBottom = borderType === 'borderBottom';\n\n  return {\n    borderColor,\n    selectors: {\n      ':after': {\n        pointerEvents: 'none',\n        content: \"''\",\n        position: 'absolute',\n        left: isBorderBottom ? 0 : borderPosition,\n        top: borderPosition,\n        bottom: borderPosition,\n        right: isBorderBottom ? 0 : borderPosition,\n        [borderType]: `2px solid ${borderColor}`,\n        borderRadius,\n        width: borderType === 'borderBottom' ? '100%' : undefined,\n        selectors: {\n          [HighContrastSelector]: {\n            [borderType === 'border' ? 'borderColor' : 'borderBottomColor']: 'Highlight',\n          },\n        },\n      },\n    },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}