{"ast":null,"code":"import { merge } from '@fluentui/utilities';\nimport { getSemanticColors } from './utilities/makeSemanticColors';\n/**\n * Merge a partial/full theme into a full theme and returns a merged full theme.\n */\nexport function mergeThemes(theme, partialTheme) {\n  var _a, _b, _c;\n  if (partialTheme === void 0) {\n    partialTheme = {};\n  }\n  var mergedTheme = merge({}, theme, partialTheme, {\n    semanticColors: getSemanticColors(partialTheme.palette, partialTheme.effects, partialTheme.semanticColors, partialTheme.isInverted === undefined ? theme.isInverted : partialTheme.isInverted)\n  });\n  if (((_a = partialTheme.palette) === null || _a === void 0 ? void 0 : _a.themePrimary) && !((_b = partialTheme.palette) === null || _b === void 0 ? void 0 : _b.accent)) {\n    mergedTheme.palette.accent = partialTheme.palette.themePrimary;\n  }\n  if (partialTheme.defaultFontStyle) {\n    for (var _i = 0, _d = Object.keys(mergedTheme.fonts); _i < _d.length; _i++) {\n      var fontStyle = _d[_i];\n      mergedTheme.fonts[fontStyle] = merge(mergedTheme.fonts[fontStyle], partialTheme.defaultFontStyle, (_c = partialTheme === null || partialTheme === void 0 ? void 0 : partialTheme.fonts) === null || _c === void 0 ? void 0 : _c[fontStyle]);\n    }\n  }\n  return mergedTheme;\n}","map":{"version":3,"names":["merge","getSemanticColors","mergeThemes","theme","partialTheme","mergedTheme","semanticColors","palette","effects","isInverted","undefined","_a","themePrimary","_b","accent","defaultFontStyle","_i","_d","Object","keys","fonts","length","fontStyle","_c"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/theme/src/mergeThemes.ts"],"sourcesContent":["import { merge } from '@fluentui/utilities';\nimport { getSemanticColors } from './utilities/makeSemanticColors';\nimport type { IFontStyles, PartialTheme, Theme } from './types/index';\n\n/**\n * Merge a partial/full theme into a full theme and returns a merged full theme.\n */\nexport function mergeThemes(theme: Theme, partialTheme: PartialTheme = {}): Theme {\n  const mergedTheme = merge<Theme | PartialTheme>({}, theme, partialTheme, {\n    semanticColors: getSemanticColors(\n      partialTheme.palette,\n      partialTheme.effects,\n      partialTheme.semanticColors,\n      partialTheme.isInverted === undefined ? theme.isInverted : partialTheme.isInverted,\n    ),\n  }) as Theme;\n\n  if (partialTheme.palette?.themePrimary && !partialTheme.palette?.accent) {\n    mergedTheme.palette.accent = partialTheme.palette.themePrimary;\n  }\n\n  if (partialTheme.defaultFontStyle) {\n    for (const fontStyle of Object.keys(mergedTheme.fonts) as (keyof IFontStyles)[]) {\n      mergedTheme.fonts[fontStyle] = merge(\n        mergedTheme.fonts[fontStyle],\n        partialTheme.defaultFontStyle,\n        partialTheme?.fonts?.[fontStyle],\n      );\n    }\n  }\n\n  return mergedTheme;\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,iBAAiB,QAAQ,gCAAgC;AAGlE;;;AAGA,OAAM,SAAUC,WAAWA,CAACC,KAAY,EAAEC,YAA+B;;EAA/B,IAAAA,YAAA;IAAAA,YAAA,KAA+B;EAAA;EACvE,IAAMC,WAAW,GAAGL,KAAK,CAAuB,EAAE,EAAEG,KAAK,EAAEC,YAAY,EAAE;IACvEE,cAAc,EAAEL,iBAAiB,CAC/BG,YAAY,CAACG,OAAO,EACpBH,YAAY,CAACI,OAAO,EACpBJ,YAAY,CAACE,cAAc,EAC3BF,YAAY,CAACK,UAAU,KAAKC,SAAS,GAAGP,KAAK,CAACM,UAAU,GAAGL,YAAY,CAACK,UAAU;GAErF,CAAU;EAEX,IAAI,EAAAE,EAAA,GAAAP,YAAY,CAACG,OAAO,cAAAI,EAAA,uBAAAA,EAAA,CAAEC,YAAY,KAAI,EAAC,CAAAC,EAAA,GAAAT,YAAY,CAACG,OAAO,cAAAM,EAAA,uBAAAA,EAAA,CAAEC,MAAM,GAAE;IACvET,WAAW,CAACE,OAAO,CAACO,MAAM,GAAGV,YAAY,CAACG,OAAO,CAACK,YAAY;;EAGhE,IAAIR,YAAY,CAACW,gBAAgB,EAAE;IACjC,KAAwB,IAAAC,EAAA,IAAuD,EAAvDC,EAAA,GAAAC,MAAM,CAACC,IAAI,CAACd,WAAW,CAACe,KAAK,CAA0B,EAAvDJ,EAAA,GAAAC,EAAA,CAAAI,MAAuD,EAAvDL,EAAA,EAAuD,EAAE;MAA5E,IAAMM,SAAS,GAAAL,EAAA,CAAAD,EAAA;MAClBX,WAAW,CAACe,KAAK,CAACE,SAAS,CAAC,GAAGtB,KAAK,CAClCK,WAAW,CAACe,KAAK,CAACE,SAAS,CAAC,EAC5BlB,YAAY,CAACW,gBAAgB,EAC7B,CAAAQ,EAAA,GAAAnB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEgB,KAAK,cAAAG,EAAA,uBAAAA,EAAA,CAAGD,SAAS,CAAC,CACjC;;;EAIL,OAAOjB,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}