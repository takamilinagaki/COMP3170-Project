{"ast":null,"code":"import * as React from 'react';\nimport { FocusRectsContext } from './useFocusRects';\nexport var FocusRectsProvider = function (props) {\n  var providerRef = props.providerRef,\n    layerRoot = props.layerRoot;\n  var registeredProviders = React.useState([])[0];\n  var parentContext = React.useContext(FocusRectsContext);\n  // Inherit the parent context if it exists, unless this is a layer root.\n  // This allows the topmost provider element in the DOM tree to handle the focus events.\n  // Since layers are in a separate HTML tree from their parent, they shouldn't use the parent's providerRef.\n  var inheritParentContext = parentContext !== undefined && !layerRoot;\n  var context = React.useMemo(function () {\n    return inheritParentContext ? undefined : {\n      providerRef: providerRef,\n      registeredProviders: registeredProviders,\n      registerProvider: function (ref) {\n        // Register this child provider with the current context, and any parent contexts\n        registeredProviders.push(ref);\n        parentContext === null || parentContext === void 0 ? void 0 : parentContext.registerProvider(ref);\n      },\n      unregisterProvider: function (ref) {\n        parentContext === null || parentContext === void 0 ? void 0 : parentContext.unregisterProvider(ref);\n        var i = registeredProviders.indexOf(ref);\n        if (i >= 0) {\n          registeredProviders.splice(i, 1);\n        }\n      }\n    };\n  }, [providerRef, registeredProviders, parentContext, inheritParentContext]);\n  React.useEffect(function () {\n    if (context) {\n      context.registerProvider(context.providerRef);\n      return function () {\n        return context.unregisterProvider(context.providerRef);\n      };\n    }\n  }, [context]);\n  // Create a new context provider if this is not inheriting from the parent.\n  if (context) {\n    return React.createElement(FocusRectsContext.Provider, {\n      value: context\n    }, props.children);\n  } else {\n    return React.createElement(React.Fragment, null, props.children);\n  }\n};","map":{"version":3,"names":["React","FocusRectsContext","FocusRectsProvider","props","providerRef","layerRoot","registeredProviders","useState","parentContext","useContext","inheritParentContext","undefined","context","useMemo","registerProvider","ref","push","unregisterProvider","i","indexOf","splice","useEffect","createElement","Provider","value","children","Fragment"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/src/FocusRectsProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FocusRectsContext } from './useFocusRects';\n\nexport type FocusRectsProviderProps = {\n  /**\n   * Ref to the root element that this is providing focus rects for.\n   */\n  providerRef: React.RefObject<HTMLElement>;\n\n  /**\n   * Indicates that this is the root of a layer, and should not inherit the providerRef from a parent context.\n   */\n  layerRoot?: boolean;\n};\n\nexport const FocusRectsProvider: React.FC<FocusRectsProviderProps> = props => {\n  const { providerRef, layerRoot } = props;\n  const [registeredProviders] = React.useState<React.RefObject<HTMLElement>[]>([]);\n  const parentContext = React.useContext(FocusRectsContext);\n\n  // Inherit the parent context if it exists, unless this is a layer root.\n  // This allows the topmost provider element in the DOM tree to handle the focus events.\n  // Since layers are in a separate HTML tree from their parent, they shouldn't use the parent's providerRef.\n  const inheritParentContext = parentContext !== undefined && !layerRoot;\n\n  const context = React.useMemo(\n    () =>\n      inheritParentContext\n        ? undefined\n        : {\n            providerRef,\n            registeredProviders,\n            registerProvider: (ref: React.RefObject<HTMLElement>) => {\n              // Register this child provider with the current context, and any parent contexts\n              registeredProviders.push(ref);\n              parentContext?.registerProvider(ref);\n            },\n            unregisterProvider: (ref: React.RefObject<HTMLElement>) => {\n              parentContext?.unregisterProvider(ref);\n              const i = registeredProviders.indexOf(ref);\n              if (i >= 0) {\n                registeredProviders.splice(i, 1);\n              }\n            },\n          },\n    [providerRef, registeredProviders, parentContext, inheritParentContext],\n  );\n\n  React.useEffect(() => {\n    if (context) {\n      context.registerProvider(context.providerRef);\n      return () => context.unregisterProvider(context.providerRef);\n    }\n  }, [context]);\n\n  // Create a new context provider if this is not inheriting from the parent.\n  if (context) {\n    return <FocusRectsContext.Provider value={context}>{props.children}</FocusRectsContext.Provider>;\n  } else {\n    return <>{props.children}</>;\n  }\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,iBAAiB,QAAQ,iBAAiB;AAcnD,OAAO,IAAMC,kBAAkB,GAAsC,SAAAA,CAAAC,KAAK;EAChE,IAAAC,WAAW,GAAgBD,KAAK,CAAAC,WAArB;IAAEC,SAAS,GAAKF,KAAK,CAAAE,SAAV;EACvB,IAAAC,mBAAmB,GAAIN,KAAK,CAACO,QAAQ,CAAiC,EAAE,CAAC,GAAtD;EAC1B,IAAMC,aAAa,GAAGR,KAAK,CAACS,UAAU,CAACR,iBAAiB,CAAC;EAEzD;EACA;EACA;EACA,IAAMS,oBAAoB,GAAGF,aAAa,KAAKG,SAAS,IAAI,CAACN,SAAS;EAEtE,IAAMO,OAAO,GAAGZ,KAAK,CAACa,OAAO,CAC3B;IACE,OAAAH,oBAAoB,GAChBC,SAAS,GACT;MACEP,WAAW,EAAAA,WAAA;MACXE,mBAAmB,EAAAA,mBAAA;MACnBQ,gBAAgB,EAAE,SAAAA,CAACC,GAAiC;QAClD;QACAT,mBAAmB,CAACU,IAAI,CAACD,GAAG,CAAC;QAC7BP,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEM,gBAAgB,CAACC,GAAG,CAAC;MACtC,CAAC;MACDE,kBAAkB,EAAE,SAAAA,CAACF,GAAiC;QACpDP,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAES,kBAAkB,CAACF,GAAG,CAAC;QACtC,IAAMG,CAAC,GAAGZ,mBAAmB,CAACa,OAAO,CAACJ,GAAG,CAAC;QAC1C,IAAIG,CAAC,IAAI,CAAC,EAAE;UACVZ,mBAAmB,CAACc,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC;;MAEpC;KACD;EAjBL,CAiBK,EACP,CAACd,WAAW,EAAEE,mBAAmB,EAAEE,aAAa,EAAEE,oBAAoB,CAAC,CACxE;EAEDV,KAAK,CAACqB,SAAS,CAAC;IACd,IAAIT,OAAO,EAAE;MACXA,OAAO,CAACE,gBAAgB,CAACF,OAAO,CAACR,WAAW,CAAC;MAC7C,OAAO;QAAM,OAAAQ,OAAO,CAACK,kBAAkB,CAACL,OAAO,CAACR,WAAW,CAAC;MAA/C,CAA+C;;EAEhE,CAAC,EAAE,CAACQ,OAAO,CAAC,CAAC;EAEb;EACA,IAAIA,OAAO,EAAE;IACX,OAAOZ,KAAA,CAAAsB,aAAA,CAACrB,iBAAiB,CAACsB,QAAQ;MAACC,KAAK,EAAEZ;IAAO,GAAGT,KAAK,CAACsB,QAAQ,CAA8B;GACjG,MAAM;IACL,OAAOzB,KAAA,CAAAsB,aAAA,CAAAtB,KAAA,CAAA0B,QAAA,QAAGvB,KAAK,CAACsB,QAAQ,CAAI;;AAEhC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}