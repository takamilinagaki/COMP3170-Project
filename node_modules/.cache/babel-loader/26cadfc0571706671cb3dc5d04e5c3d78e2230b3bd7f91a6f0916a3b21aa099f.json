{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { KTP_SEPARATOR, KTP_PREFIX, DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, KTP_LAYER_ID } from './KeytipConstants';\nimport { addElementAtIndex } from '../../Utilities';\n/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\n * keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n * @returns String to use for the keytip ID.\n */\nexport function sequencesToID(keySequences) {\n  return keySequences.reduce(function (prevValue, keySequence) {\n    return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\n  }, KTP_PREFIX);\n}\n/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n * @param overflowKeySequences - Full overflow keytip sequence.\n * @returns Sequence that will be used by the keytip when in the overflow.\n */\nexport function mergeOverflows(keySequences, overflowKeySequences) {\n  var overflowSequenceLen = overflowKeySequences.length;\n  var overflowSequence = __spreadArray([], overflowKeySequences, true).pop();\n  var newKeySequences = __spreadArray([], keySequences, true);\n  return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence);\n}\n/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n * @returns String selector to use to query for the keytip target.\n */\nexport function ktpTargetFromSequences(keySequences) {\n  return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\n}\n/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n * @returns String selector to use to query for the keytip execute target.\n */\nexport function ktpTargetFromId(keytipId) {\n  return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\n}\n/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n * @returns The aria-describedby value to set on the component with this keytip.\n */\nexport function getAriaDescribedBy(keySequences) {\n  var describedby = ' ' + KTP_LAYER_ID;\n  if (!keySequences.length) {\n    // Return just the layer ID\n    return describedby;\n  }\n  return describedby + ' ' + sequencesToID(keySequences);\n}","map":{"version":3,"names":["KTP_SEPARATOR","KTP_PREFIX","DATAKTP_TARGET","DATAKTP_EXECUTE_TARGET","KTP_LAYER_ID","addElementAtIndex","sequencesToID","keySequences","reduce","prevValue","keySequence","split","join","mergeOverflows","overflowKeySequences","overflowSequenceLen","length","overflowSequence","__spreadArray","pop","newKeySequences","ktpTargetFromSequences","ktpTargetFromId","keytipId","getAriaDescribedBy","describedby"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/keytips/KeytipUtils.ts"],"sourcesContent":["import { KTP_SEPARATOR, KTP_PREFIX, DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, KTP_LAYER_ID } from './KeytipConstants';\nimport { addElementAtIndex } from '../../Utilities';\n\n/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\n * keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n * @returns String to use for the keytip ID.\n */\nexport function sequencesToID(keySequences: string[]): string {\n  return keySequences.reduce((prevValue: string, keySequence: string): string => {\n    return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\n  }, KTP_PREFIX);\n}\n\n/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n * @param overflowKeySequences - Full overflow keytip sequence.\n * @returns Sequence that will be used by the keytip when in the overflow.\n */\nexport function mergeOverflows(keySequences: string[], overflowKeySequences: string[]): string[] {\n  const overflowSequenceLen = overflowKeySequences.length;\n  const overflowSequence = [...overflowKeySequences].pop();\n  const newKeySequences = [...keySequences];\n  return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence!);\n}\n\n/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n * @returns String selector to use to query for the keytip target.\n */\nexport function ktpTargetFromSequences(keySequences: string[]): string {\n  return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\n}\n\n/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n * @returns String selector to use to query for the keytip execute target.\n */\nexport function ktpTargetFromId(keytipId: string): string {\n  return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\n}\n\n/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n * @returns The aria-describedby value to set on the component with this keytip.\n */\nexport function getAriaDescribedBy(keySequences: string[]): string {\n  const describedby = ' ' + KTP_LAYER_ID;\n  if (!keySequences.length) {\n    // Return just the layer ID\n    return describedby;\n  }\n\n  return describedby + ' ' + sequencesToID(keySequences);\n}\n"],"mappings":";AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,cAAc,EAAEC,sBAAsB,EAAEC,YAAY,QAAQ,mBAAmB;AACnH,SAASC,iBAAiB,QAAQ,iBAAiB;AAEnD;;;;;;;AAOA,OAAM,SAAUC,aAAaA,CAACC,YAAsB;EAClD,OAAOA,YAAY,CAACC,MAAM,CAAC,UAACC,SAAiB,EAAEC,WAAmB;IAChE,OAAOD,SAAS,GAAGT,aAAa,GAAGU,WAAW,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAACZ,aAAa,CAAC;EAC9E,CAAC,EAAEC,UAAU,CAAC;AAChB;AAEA;;;;;;;AAOA,OAAM,SAAUY,cAAcA,CAACN,YAAsB,EAAEO,oBAA8B;EACnF,IAAMC,mBAAmB,GAAGD,oBAAoB,CAACE,MAAM;EACvD,IAAMC,gBAAgB,GAAGC,aAAA,KAAIJ,oBAAoB,QAAEK,GAAG,EAAE;EACxD,IAAMC,eAAe,GAAAF,aAAA,KAAOX,YAAY,OAAC;EACzC,OAAOF,iBAAiB,CAACe,eAAe,EAAEL,mBAAmB,GAAG,CAAC,EAAEE,gBAAiB,CAAC;AACvF;AAEA;;;;;;AAMA,OAAM,SAAUI,sBAAsBA,CAACd,YAAsB;EAC3D,OAAO,GAAG,GAAGL,cAAc,GAAG,IAAI,GAAGI,aAAa,CAACC,YAAY,CAAC,GAAG,IAAI;AACzE;AAEA;;;;;;AAMA,OAAM,SAAUe,eAAeA,CAACC,QAAgB;EAC9C,OAAO,GAAG,GAAGpB,sBAAsB,GAAG,IAAI,GAAGoB,QAAQ,GAAG,IAAI;AAC9D;AAEA;;;;;;AAMA,OAAM,SAAUC,kBAAkBA,CAACjB,YAAsB;EACvD,IAAMkB,WAAW,GAAG,GAAG,GAAGrB,YAAY;EACtC,IAAI,CAACG,YAAY,CAACS,MAAM,EAAE;IACxB;IACA,OAAOS,WAAW;;EAGpB,OAAOA,WAAW,GAAG,GAAG,GAAGnB,aAAa,CAACC,YAAY,CAAC;AACxD"},"metadata":{},"sourceType":"module","externalDependencies":[]}