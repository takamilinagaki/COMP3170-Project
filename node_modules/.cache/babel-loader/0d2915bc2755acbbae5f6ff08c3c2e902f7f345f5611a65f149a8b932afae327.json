{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport { KeyCodes, calculatePrecision, classNamesFunction, precisionRound, getNativeProps, getPropsWithDefaults, divProperties } from '../../Utilities';\nimport { getArrowButtonStyles } from './SpinButton.styles';\nimport { KeyboardSpinDirection } from './SpinButton.types';\nimport { Position } from '../../Positioning';\nimport { useAsync, useControllableValue, useWarnings, useId, usePrevious } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'SpinButton';\nvar DEFAULT_PROPS = {\n  disabled: false,\n  label: '',\n  step: 1,\n  labelPosition: Position.start,\n  incrementButtonIcon: {\n    iconName: 'ChevronUpSmall'\n  },\n  decrementButtonIcon: {\n    iconName: 'ChevronDownSmall'\n  }\n};\nvar INITIAL_STEP_DELAY = 400;\nvar STEP_DELAY = 75;\nvar useComponentRef = function (props, input, value) {\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      get value() {\n        return value;\n      },\n      focus: function () {\n        if (input.current) {\n          input.current.focus();\n        }\n      }\n    };\n  }, [input, value]);\n};\nvar noOp = function () {\n  /**\n   * A noop input change handler. Using onInput instead of onChange was meant to address an issue\n   * which apparently has been resolved in React 16 (https://github.com/facebook/react/issues/7027).\n   * The no-op onChange handler was still needed because React gives console errors if an input\n   * doesn't have onChange.\n   *\n   * TODO (Fabric 8?) - switch to just calling onChange (this is a breaking change for any tests,\n   * ours or 3rd-party, which simulate entering text in a SpinButton)\n   */\n};\n/** Clamp the value to the provided min and/or max */\nvar clampValue = function (value, _a) {\n  var min = _a.min,\n    max = _a.max;\n  if (typeof max === 'number') {\n    value = Math.min(value, max);\n  }\n  if (typeof min === 'number') {\n    value = Math.max(value, min);\n  }\n  return value;\n};\nexport var SpinButtonBase = React.forwardRef(function (propsWithoutDefaults, ref) {\n  var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);\n  var disabled = props.disabled,\n    label = props.label,\n    min = props.min,\n    max = props.max,\n    step = props.step,\n    defaultValue = props.defaultValue,\n    valueFromProps = props.value,\n    precisionFromProps = props.precision,\n    labelPosition = props.labelPosition,\n    iconProps = props.iconProps,\n    incrementButtonIcon = props.incrementButtonIcon,\n    incrementButtonAriaLabel = props.incrementButtonAriaLabel,\n    decrementButtonIcon = props.decrementButtonIcon,\n    decrementButtonAriaLabel = props.decrementButtonAriaLabel,\n    ariaLabel = props.ariaLabel,\n    ariaDescribedBy = props.ariaDescribedBy,\n    customUpArrowButtonStyles = props.upArrowButtonStyles,\n    customDownArrowButtonStyles = props.downArrowButtonStyles,\n    theme = props.theme,\n    ariaPositionInSet = props.ariaPositionInSet,\n    ariaSetSize = props.ariaSetSize,\n    ariaValueNow = props.ariaValueNow,\n    ariaValueText = props.ariaValueText,\n    className = props.className,\n    inputProps = props.inputProps,\n    onDecrement = props.onDecrement,\n    onIncrement = props.onIncrement,\n    iconButtonProps = props.iconButtonProps,\n    onValidate = props.onValidate,\n    onChange = props.onChange,\n    styles = props.styles;\n  var input = React.useRef(null);\n  var inputId = useId('input');\n  var labelId = useId('Label');\n  var _a = React.useState(false),\n    isFocused = _a[0],\n    setIsFocused = _a[1];\n  var _b = React.useState(KeyboardSpinDirection.notSpinning),\n    keyboardSpinDirection = _b[0],\n    setKeyboardSpinDirection = _b[1];\n  var async = useAsync();\n  var precision = React.useMemo(function () {\n    return precisionFromProps !== null && precisionFromProps !== void 0 ? precisionFromProps : Math.max(calculatePrecision(step), 0);\n  }, [precisionFromProps, step]);\n  /**\n   * Actual current value. If `props.value` is provided (controlled), it will always be used.\n   * If not (uncontrolled), this tracks the current value based on user modifications.\n   * Note that while the user is editing text in the field, this will not be updated until \"commit\"\n   * (blur or press enter).\n   */\n  var _c = useControllableValue(valueFromProps, defaultValue !== null && defaultValue !== void 0 ? defaultValue : String(min || 0), onChange),\n    value = _c[0],\n    setValue = _c[1];\n  /**\n   * \"Uncommitted\" internal value while the user is editing text in the field. This lets us wait to\n   * call `onChange` (and possibly update the real value) until the user \"commits\" the value by\n   * pressing enter or blurring the field.\n   */\n  var _d = React.useState(),\n    intermediateValue = _d[0],\n    setIntermediateValue = _d[1];\n  var internalState = React.useRef({\n    stepTimeoutHandle: -1,\n    latestValue: undefined,\n    latestIntermediateValue: undefined\n  }).current;\n  // On each render, update this saved value used by callbacks. (This should be safe even if render\n  // is called multiple times, because an event handler or timeout callback will only run once.)\n  internalState.latestValue = value;\n  internalState.latestIntermediateValue = intermediateValue;\n  var previousValueFromProps = usePrevious(valueFromProps);\n  React.useEffect(function () {\n    // If props.value changes while editing, clear the intermediate value\n    if (valueFromProps !== previousValueFromProps && intermediateValue !== undefined) {\n      setIntermediateValue(undefined);\n    }\n  }, [valueFromProps, previousValueFromProps, intermediateValue]);\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    disabled: disabled,\n    isFocused: isFocused,\n    keyboardSpinDirection: keyboardSpinDirection,\n    labelPosition: labelPosition,\n    className: className\n  });\n  var nativeProps = getNativeProps(props, divProperties, ['onBlur', 'onFocus', 'className', 'onChange']);\n  /** Validate (commit) function called on blur or enter keypress. */\n  var validate = React.useCallback(function (ev) {\n    // Only run validation if the value changed\n    var enteredValue = internalState.latestIntermediateValue;\n    if (enteredValue !== undefined && enteredValue !== internalState.latestValue) {\n      var newValue = void 0;\n      if (onValidate) {\n        newValue = onValidate(enteredValue, ev);\n      } else if (enteredValue && enteredValue.trim().length && !isNaN(Number(enteredValue))) {\n        // default validation handling\n        newValue = String(clampValue(Number(enteredValue), {\n          min: min,\n          max: max\n        }));\n      }\n      if (newValue !== undefined && newValue !== internalState.latestValue) {\n        // Commit the value if it changed\n        setValue(newValue, ev);\n      }\n    }\n    // Done validating, so clear the intermediate typed value (if any)\n    setIntermediateValue(undefined);\n  }, [internalState, max, min, onValidate, setValue]);\n  /**\n   * Stop spinning (clear any currently pending update and set spinning to false)\n   */\n  var stop = React.useCallback(function () {\n    if (internalState.stepTimeoutHandle >= 0) {\n      async.clearTimeout(internalState.stepTimeoutHandle);\n      internalState.stepTimeoutHandle = -1;\n    }\n    if (internalState.spinningByMouse || keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\n      internalState.spinningByMouse = false;\n      setKeyboardSpinDirection(KeyboardSpinDirection.notSpinning);\n    }\n  }, [internalState, keyboardSpinDirection, async]);\n  /**\n   * Update the value with the given stepFunction.\n   * Also starts spinning for mousedown events by scheduling another update with setTimeout.\n   * @param stepFunction - function to use to step by\n   * @param event - The event that triggered the updateValue\n   */\n  var updateValue = React.useCallback(function (stepFunction, ev) {\n    ev.persist();\n    if (internalState.latestIntermediateValue !== undefined) {\n      // Edge case: if intermediateValue is set, this means that the user was editing the input\n      // text and then started spinning (either with mouse or keyboard). We need to validate and\n      // call onChange before starting to spin.\n      if (ev.type === 'keydown' || ev.type === 'mousedown') {\n        // For the arrow keys, we have to manually trigger validation.\n        // (For the buttons, validation will happen automatically since the input's onBlur will\n        // be triggered after mousedown on the button completes.)\n        validate(ev);\n      }\n      async.requestAnimationFrame(function () {\n        // After handling any value updates, do the spinning update\n        updateValue(stepFunction, ev);\n      });\n      return;\n    }\n    // Call the step function and update the value.\n    // (Note: we access the latest value via internalState (not directly) to ensure we don't use\n    // a stale captured value. This is mainly important for spinning by mouse, where we trigger\n    // additional calls to the original updateValue function via setTimeout. It also lets us\n    // avoid useCallback deps on frequently changing values.)\n    var newValue = stepFunction(internalState.latestValue || '', ev);\n    if (newValue !== undefined && newValue !== internalState.latestValue) {\n      setValue(newValue, ev);\n    }\n    // Schedule the next spin if applicable\n    // (will be canceled if there's a mouseup before the timeout runs)\n    var wasSpinning = internalState.spinningByMouse;\n    internalState.spinningByMouse = ev.type === 'mousedown';\n    if (internalState.spinningByMouse) {\n      internalState.stepTimeoutHandle = async.setTimeout(function () {\n        updateValue(stepFunction, ev);\n      }, wasSpinning ? STEP_DELAY : INITIAL_STEP_DELAY);\n    }\n  }, [internalState, async, validate, setValue]);\n  /** Composed increment handler (uses `props.onIncrement` or default) */\n  var handleIncrement = React.useCallback(function (newValue) {\n    if (onIncrement) {\n      return onIncrement(newValue);\n    } else {\n      var numericValue = clampValue(Number(newValue) + Number(step), {\n        max: max\n      });\n      numericValue = precisionRound(numericValue, precision);\n      return String(numericValue);\n    }\n  }, [precision, max, onIncrement, step]);\n  /** Composed decrement handler (uses `props.onDecrement` or default) */\n  var handleDecrement = React.useCallback(function (newValue) {\n    if (onDecrement) {\n      return onDecrement(newValue);\n    } else {\n      var numericValue = clampValue(Number(newValue) - Number(step), {\n        min: min\n      });\n      numericValue = precisionRound(numericValue, precision);\n      return String(numericValue);\n    }\n  }, [precision, min, onDecrement, step]);\n  /** Handles when the user types in the input */\n  var handleInputChange = function (ev) {\n    setIntermediateValue(ev.target.value);\n  };\n  /** Composed focus handler (does internal stuff and calls `props.onFocus`) */\n  var handleFocus = function (ev) {\n    var _a;\n    // We can't set focus on a non-existing element\n    if (!input.current) {\n      return;\n    }\n    if (internalState.spinningByMouse || keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\n      stop();\n    }\n    input.current.select();\n    setIsFocused(true);\n    (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, ev);\n  };\n  /** Composed blur handler (does internal stuff and calls `props.onBlur`) */\n  var handleBlur = function (ev) {\n    var _a;\n    validate(ev);\n    setIsFocused(false);\n    (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, ev);\n  };\n  /** Update value when arrow keys are pressed, commit on enter, or revert on escape */\n  var handleKeyDown = function (ev) {\n    // eat the up and down arrow keys to keep focus in the spinButton\n    // (especially when a spinButton is inside of a FocusZone)\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.up || ev.which === KeyCodes.down || ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n    if (disabled) {\n      stop();\n      return;\n    }\n    var spinDirection = KeyboardSpinDirection.notSpinning;\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.up:\n        spinDirection = KeyboardSpinDirection.up;\n        updateValue(handleIncrement, ev);\n        break;\n      case KeyCodes.down:\n        spinDirection = KeyboardSpinDirection.down;\n        updateValue(handleDecrement, ev);\n        break;\n      case KeyCodes.enter:\n        // Commit the edited value\n        validate(ev);\n        break;\n      case KeyCodes.escape:\n        // Revert to previous value\n        setIntermediateValue(undefined);\n        break;\n    }\n    // style the increment/decrement button to look active\n    // when the corresponding up/down arrow keys trigger a step\n    if (keyboardSpinDirection !== spinDirection) {\n      setKeyboardSpinDirection(spinDirection);\n    }\n  };\n  /** Stop spinning on keyUp if the up or down arrow key fired this event */\n  var handleKeyUp = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (disabled || ev.which === KeyCodes.up || ev.which === KeyCodes.down) {\n      stop();\n      return;\n    }\n  }, [disabled, stop]);\n  var handleIncrementMouseDown = React.useCallback(function (ev) {\n    updateValue(handleIncrement, ev);\n  }, [handleIncrement, updateValue]);\n  var handleDecrementMouseDown = React.useCallback(function (ev) {\n    updateValue(handleDecrement, ev);\n  }, [handleDecrement, updateValue]);\n  useComponentRef(props, input, value);\n  useDebugWarnings(props);\n  var valueIsNumber = !!value && !isNaN(Number(value)); // Number('') is 0 which may not be desirable\n  var labelContent = (iconProps || label) && React.createElement(\"div\", {\n    className: classNames.labelWrapper\n  }, iconProps && React.createElement(Icon, __assign({}, iconProps, {\n    className: classNames.icon,\n    \"aria-hidden\": \"true\"\n  })), label && React.createElement(Label, {\n    id: labelId,\n    htmlFor: inputId,\n    className: classNames.label,\n    disabled: disabled\n  }, label));\n  return React.createElement(\"div\", {\n    className: classNames.root,\n    ref: ref\n  }, labelPosition !== Position.bottom && labelContent, React.createElement(\"div\", __assign({}, nativeProps, {\n    className: classNames.spinButtonWrapper,\n    \"aria-label\": ariaLabel && ariaLabel,\n    \"aria-posinset\": ariaPositionInSet,\n    \"aria-setsize\": ariaSetSize,\n    \"data-ktp-target\": true\n  }), React.createElement(\"input\", __assign({\n    // Display intermediateValue while editing the text (before commit)\n    value: intermediateValue !== null && intermediateValue !== void 0 ? intermediateValue : value,\n    id: inputId,\n    onChange: noOp,\n    onInput: handleInputChange,\n    className: classNames.input,\n    type: \"text\",\n    autoComplete: \"off\",\n    role: \"spinbutton\",\n    \"aria-labelledby\": label && labelId,\n    \"aria-valuenow\": ariaValueNow !== null && ariaValueNow !== void 0 ? ariaValueNow : valueIsNumber ? Number(value) : undefined,\n    \"aria-valuetext\": ariaValueText !== null && ariaValueText !== void 0 ? ariaValueText : valueIsNumber ? undefined : value,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    \"aria-describedby\": ariaDescribedBy,\n    onBlur: handleBlur,\n    ref: input,\n    onFocus: handleFocus,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    disabled: disabled,\n    \"aria-disabled\": disabled,\n    \"data-lpignore\": true,\n    \"data-ktp-execute-target\": true\n  }, inputProps)), React.createElement(\"span\", {\n    className: classNames.arrowButtonsContainer\n  }, React.createElement(IconButton, __assign({\n    styles: getArrowButtonStyles(theme, true, customUpArrowButtonStyles),\n    className: 'ms-UpButton',\n    checked: keyboardSpinDirection === KeyboardSpinDirection.up,\n    disabled: disabled,\n    iconProps: incrementButtonIcon,\n    onMouseDown: handleIncrementMouseDown,\n    onMouseLeave: stop,\n    onMouseUp: stop,\n    tabIndex: -1,\n    ariaLabel: incrementButtonAriaLabel,\n    \"data-is-focusable\": false\n  }, iconButtonProps)), React.createElement(IconButton, __assign({\n    styles: getArrowButtonStyles(theme, false, customDownArrowButtonStyles),\n    className: 'ms-DownButton',\n    checked: keyboardSpinDirection === KeyboardSpinDirection.down,\n    disabled: disabled,\n    iconProps: decrementButtonIcon,\n    onMouseDown: handleDecrementMouseDown,\n    onMouseLeave: stop,\n    onMouseUp: stop,\n    tabIndex: -1,\n    ariaLabel: decrementButtonAriaLabel,\n    \"data-is-focusable\": false\n  }, iconButtonProps)))), labelPosition === Position.bottom && labelContent);\n});\nSpinButtonBase.displayName = COMPONENT_NAME;\nvar useDebugWarnings = function (props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props: props,\n      mutuallyExclusive: {\n        value: 'defaultValue'\n      }\n    });\n  }\n};","map":{"version":3,"names":["React","IconButton","Label","Icon","KeyCodes","calculatePrecision","classNamesFunction","precisionRound","getNativeProps","getPropsWithDefaults","divProperties","getArrowButtonStyles","KeyboardSpinDirection","Position","useAsync","useControllableValue","useWarnings","useId","usePrevious","getClassNames","COMPONENT_NAME","DEFAULT_PROPS","disabled","label","step","labelPosition","start","incrementButtonIcon","iconName","decrementButtonIcon","INITIAL_STEP_DELAY","STEP_DELAY","useComponentRef","props","input","value","useImperativeHandle","componentRef","focus","current","noOp","clampValue","_a","min","max","Math","SpinButtonBase","forwardRef","propsWithoutDefaults","ref","defaultValue","valueFromProps","precisionFromProps","precision","iconProps","incrementButtonAriaLabel","decrementButtonAriaLabel","ariaLabel","ariaDescribedBy","customUpArrowButtonStyles","upArrowButtonStyles","customDownArrowButtonStyles","downArrowButtonStyles","theme","ariaPositionInSet","ariaSetSize","ariaValueNow","ariaValueText","className","inputProps","onDecrement","onIncrement","iconButtonProps","onValidate","onChange","styles","useRef","inputId","labelId","useState","isFocused","setIsFocused","_b","notSpinning","keyboardSpinDirection","setKeyboardSpinDirection","async","useMemo","_c","String","setValue","_d","intermediateValue","setIntermediateValue","internalState","stepTimeoutHandle","latestValue","undefined","latestIntermediateValue","previousValueFromProps","useEffect","classNames","nativeProps","validate","useCallback","ev","enteredValue","newValue","trim","length","isNaN","Number","stop","clearTimeout","spinningByMouse","updateValue","stepFunction","persist","type","requestAnimationFrame","wasSpinning","setTimeout","handleIncrement","numericValue","handleDecrement","handleInputChange","target","handleFocus","select","onFocus","call","handleBlur","onBlur","handleKeyDown","which","up","down","enter","preventDefault","stopPropagation","spinDirection","escape","handleKeyUp","handleIncrementMouseDown","handleDecrementMouseDown","useDebugWarnings","valueIsNumber","labelContent","createElement","labelWrapper","__assign","icon","id","htmlFor","root","bottom","spinButtonWrapper","onInput","autoComplete","role","onKeyDown","onKeyUp","arrowButtonsContainer","checked","onMouseDown","onMouseLeave","onMouseUp","tabIndex","displayName","process","env","NODE_ENV","name","mutuallyExclusive"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/SpinButton/SpinButton.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  KeyCodes,\n  calculatePrecision,\n  classNamesFunction,\n  precisionRound,\n  getNativeProps,\n  getPropsWithDefaults,\n  divProperties,\n} from '../../Utilities';\nimport { getArrowButtonStyles } from './SpinButton.styles';\nimport { KeyboardSpinDirection } from './SpinButton.types';\nimport { Position } from '../../Positioning';\nimport { useAsync, useControllableValue, useWarnings, useId, usePrevious } from '@fluentui/react-hooks';\nimport type { ISpinButtonProps, ISpinButtonStyleProps, ISpinButtonStyles } from './SpinButton.types';\n\ninterface ISpinButtonInternalState {\n  spinningByMouse?: boolean;\n  stepTimeoutHandle: number;\n  /** Allows access to the latest `value` inside reused callbacks (to avoid stale capture issues) */\n  latestValue: string | undefined;\n  /** Allows access to the latest `intermediateValue` inside reused callbacks (to avoid stale capture issues) */\n  latestIntermediateValue: string | undefined;\n}\n\nconst getClassNames = classNamesFunction<ISpinButtonStyleProps, ISpinButtonStyles>();\n\nconst COMPONENT_NAME = 'SpinButton';\nconst DEFAULT_PROPS: Required<\n  Pick<\n    ISpinButtonProps,\n    // These are explicitly specified so that only the things which actually have defaults\n    // get marked as required in ISpinButtonPropsWithDefaults below\n    'disabled' | 'label' | 'step' | 'labelPosition' | 'incrementButtonIcon' | 'decrementButtonIcon'\n  >\n> = {\n  disabled: false,\n  label: '',\n  step: 1,\n  labelPosition: Position.start,\n  incrementButtonIcon: { iconName: 'ChevronUpSmall' },\n  decrementButtonIcon: { iconName: 'ChevronDownSmall' },\n};\ntype ISpinButtonPropsWithDefaults = ISpinButtonProps & typeof DEFAULT_PROPS;\n\nconst INITIAL_STEP_DELAY = 400;\nconst STEP_DELAY = 75;\n\nconst useComponentRef = (\n  props: ISpinButtonProps,\n  input: React.RefObject<HTMLDivElement>,\n  value: string | undefined,\n) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      get value() {\n        return value;\n      },\n      focus() {\n        if (input.current) {\n          input.current.focus();\n        }\n      },\n    }),\n    [input, value],\n  );\n};\n\nconst noOp = (): void => {\n  /**\n   * A noop input change handler. Using onInput instead of onChange was meant to address an issue\n   * which apparently has been resolved in React 16 (https://github.com/facebook/react/issues/7027).\n   * The no-op onChange handler was still needed because React gives console errors if an input\n   * doesn't have onChange.\n   *\n   * TODO (Fabric 8?) - switch to just calling onChange (this is a breaking change for any tests,\n   * ours or 3rd-party, which simulate entering text in a SpinButton)\n   */\n};\n\n/** Clamp the value to the provided min and/or max */\nconst clampValue = (value: number, { min, max }: { max?: number; min?: number }) => {\n  if (typeof max === 'number') {\n    value = Math.min(value, max);\n  }\n  if (typeof min === 'number') {\n    value = Math.max(value, min);\n  }\n  return value;\n};\n\nexport const SpinButtonBase: React.FunctionComponent<ISpinButtonProps> = React.forwardRef<\n  HTMLDivElement,\n  ISpinButtonProps\n>((propsWithoutDefaults, ref) => {\n  const props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults) as ISpinButtonPropsWithDefaults;\n  const {\n    disabled,\n    label,\n    min,\n    max,\n    step,\n    defaultValue,\n    value: valueFromProps,\n    precision: precisionFromProps,\n    labelPosition,\n    iconProps,\n    incrementButtonIcon,\n    incrementButtonAriaLabel,\n    decrementButtonIcon,\n    decrementButtonAriaLabel,\n    ariaLabel,\n    ariaDescribedBy,\n    upArrowButtonStyles: customUpArrowButtonStyles,\n    downArrowButtonStyles: customDownArrowButtonStyles,\n    theme,\n    ariaPositionInSet,\n    ariaSetSize,\n    ariaValueNow,\n    ariaValueText,\n    className,\n    inputProps,\n    onDecrement,\n    onIncrement,\n    iconButtonProps,\n    onValidate,\n    onChange,\n    styles,\n  } = props;\n\n  const input = React.useRef<HTMLInputElement>(null);\n  const inputId = useId('input');\n  const labelId = useId('Label');\n\n  const [isFocused, setIsFocused] = React.useState(false);\n  const [keyboardSpinDirection, setKeyboardSpinDirection] = React.useState(KeyboardSpinDirection.notSpinning);\n  const async = useAsync();\n\n  const precision = React.useMemo(() => {\n    return precisionFromProps ?? Math.max(calculatePrecision(step), 0);\n  }, [precisionFromProps, step]);\n\n  /**\n   * Actual current value. If `props.value` is provided (controlled), it will always be used.\n   * If not (uncontrolled), this tracks the current value based on user modifications.\n   * Note that while the user is editing text in the field, this will not be updated until \"commit\"\n   * (blur or press enter).\n   */\n  const [value, setValue] = useControllableValue(valueFromProps, defaultValue ?? String(min || 0), onChange);\n  /**\n   * \"Uncommitted\" internal value while the user is editing text in the field. This lets us wait to\n   * call `onChange` (and possibly update the real value) until the user \"commits\" the value by\n   * pressing enter or blurring the field.\n   */\n  const [intermediateValue, setIntermediateValue] = React.useState<string>();\n\n  const { current: internalState } = React.useRef<ISpinButtonInternalState>({\n    stepTimeoutHandle: -1,\n    latestValue: undefined,\n    latestIntermediateValue: undefined,\n  });\n  // On each render, update this saved value used by callbacks. (This should be safe even if render\n  // is called multiple times, because an event handler or timeout callback will only run once.)\n  internalState.latestValue = value;\n  internalState.latestIntermediateValue = intermediateValue;\n\n  const previousValueFromProps = usePrevious(valueFromProps);\n  React.useEffect(() => {\n    // If props.value changes while editing, clear the intermediate value\n    if (valueFromProps !== previousValueFromProps && intermediateValue !== undefined) {\n      setIntermediateValue(undefined);\n    }\n  }, [valueFromProps, previousValueFromProps, intermediateValue]);\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    disabled,\n    isFocused,\n    keyboardSpinDirection,\n    labelPosition,\n    className,\n  });\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, divProperties, [\n    'onBlur',\n    'onFocus',\n    'className',\n    'onChange',\n  ]);\n\n  /** Validate (commit) function called on blur or enter keypress. */\n  const validate = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLElement>): void => {\n      // Only run validation if the value changed\n      const enteredValue = internalState.latestIntermediateValue;\n      if (enteredValue !== undefined && enteredValue !== internalState.latestValue) {\n        let newValue: string | undefined;\n        if (onValidate) {\n          newValue = onValidate(enteredValue, ev) as string | undefined;\n        } else if (enteredValue && enteredValue.trim().length && !isNaN(Number(enteredValue))) {\n          // default validation handling\n          newValue = String(clampValue(Number(enteredValue), { min, max }));\n        }\n        if (newValue !== undefined && newValue !== internalState.latestValue) {\n          // Commit the value if it changed\n          setValue(newValue, ev);\n        }\n      }\n\n      // Done validating, so clear the intermediate typed value (if any)\n      setIntermediateValue(undefined);\n    },\n    [internalState, max, min, onValidate, setValue],\n  );\n\n  /**\n   * Stop spinning (clear any currently pending update and set spinning to false)\n   */\n  const stop = React.useCallback((): void => {\n    if (internalState.stepTimeoutHandle >= 0) {\n      async.clearTimeout(internalState.stepTimeoutHandle);\n      internalState.stepTimeoutHandle = -1;\n    }\n    if (internalState.spinningByMouse || keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\n      internalState.spinningByMouse = false;\n      setKeyboardSpinDirection(KeyboardSpinDirection.notSpinning);\n    }\n  }, [internalState, keyboardSpinDirection, async]);\n\n  /**\n   * Update the value with the given stepFunction.\n   * Also starts spinning for mousedown events by scheduling another update with setTimeout.\n   * @param stepFunction - function to use to step by\n   * @param event - The event that triggered the updateValue\n   */\n  const updateValue = React.useCallback(\n    (\n      stepFunction: Required<ISpinButtonProps>['onIncrement'],\n      ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLInputElement>,\n    ): void => {\n      ev.persist();\n\n      if (internalState.latestIntermediateValue !== undefined) {\n        // Edge case: if intermediateValue is set, this means that the user was editing the input\n        // text and then started spinning (either with mouse or keyboard). We need to validate and\n        // call onChange before starting to spin.\n        if (ev.type === 'keydown' || ev.type === 'mousedown') {\n          // For the arrow keys, we have to manually trigger validation.\n          // (For the buttons, validation will happen automatically since the input's onBlur will\n          // be triggered after mousedown on the button completes.)\n          validate(ev);\n        }\n        async.requestAnimationFrame(() => {\n          // After handling any value updates, do the spinning update\n          updateValue(stepFunction, ev);\n        });\n        return;\n      }\n\n      // Call the step function and update the value.\n      // (Note: we access the latest value via internalState (not directly) to ensure we don't use\n      // a stale captured value. This is mainly important for spinning by mouse, where we trigger\n      // additional calls to the original updateValue function via setTimeout. It also lets us\n      // avoid useCallback deps on frequently changing values.)\n      const newValue = stepFunction(internalState.latestValue || '', ev) as string | undefined;\n      if (newValue !== undefined && newValue !== internalState.latestValue) {\n        setValue(newValue, ev);\n      }\n\n      // Schedule the next spin if applicable\n      // (will be canceled if there's a mouseup before the timeout runs)\n      const wasSpinning = internalState.spinningByMouse;\n      internalState.spinningByMouse = ev.type === 'mousedown';\n      if (internalState.spinningByMouse) {\n        internalState.stepTimeoutHandle = async.setTimeout(\n          () => {\n            updateValue(stepFunction, ev);\n          },\n          wasSpinning ? STEP_DELAY : INITIAL_STEP_DELAY, // the first step is slower\n        );\n      }\n    },\n    [internalState, async, validate, setValue],\n  );\n\n  /** Composed increment handler (uses `props.onIncrement` or default) */\n  const handleIncrement = React.useCallback(\n    (newValue: string): string | void => {\n      if (onIncrement) {\n        return onIncrement(newValue);\n      } else {\n        let numericValue = clampValue(Number(newValue) + Number(step), { max });\n        numericValue = precisionRound(numericValue, precision);\n        return String(numericValue);\n      }\n    },\n    [precision, max, onIncrement, step],\n  );\n\n  /** Composed decrement handler (uses `props.onDecrement` or default) */\n  const handleDecrement = React.useCallback(\n    (newValue: string): string | void => {\n      if (onDecrement) {\n        return onDecrement(newValue);\n      } else {\n        let numericValue = clampValue(Number(newValue) - Number(step), { min });\n        numericValue = precisionRound(numericValue, precision);\n        return String(numericValue);\n      }\n    },\n    [precision, min, onDecrement, step],\n  );\n\n  /** Handles when the user types in the input */\n  const handleInputChange = (ev: React.FormEvent<HTMLInputElement>): void => {\n    setIntermediateValue((ev.target as HTMLInputElement).value);\n  };\n\n  /** Composed focus handler (does internal stuff and calls `props.onFocus`) */\n  const handleFocus = (ev: React.FocusEvent<HTMLInputElement>): void => {\n    // We can't set focus on a non-existing element\n    if (!input.current) {\n      return;\n    }\n    if (internalState.spinningByMouse || keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\n      stop();\n    }\n    input.current.select();\n    setIsFocused(true);\n    props.onFocus?.(ev);\n  };\n\n  /** Composed blur handler (does internal stuff and calls `props.onBlur`) */\n  const handleBlur = (ev: React.FocusEvent<HTMLInputElement>): void => {\n    validate(ev);\n    setIsFocused(false);\n    props.onBlur?.(ev);\n  };\n\n  /** Update value when arrow keys are pressed, commit on enter, or revert on escape */\n  const handleKeyDown = (ev: React.KeyboardEvent<HTMLInputElement>): void => {\n    // eat the up and down arrow keys to keep focus in the spinButton\n    // (especially when a spinButton is inside of a FocusZone)\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.up || ev.which === KeyCodes.down || ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n    if (disabled) {\n      stop();\n      return;\n    }\n\n    let spinDirection = KeyboardSpinDirection.notSpinning;\n\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.up:\n        spinDirection = KeyboardSpinDirection.up;\n        updateValue(handleIncrement, ev);\n        break;\n      case KeyCodes.down:\n        spinDirection = KeyboardSpinDirection.down;\n        updateValue(handleDecrement, ev);\n        break;\n      case KeyCodes.enter:\n        // Commit the edited value\n        validate(ev);\n        break;\n      case KeyCodes.escape:\n        // Revert to previous value\n        setIntermediateValue(undefined);\n        break;\n    }\n    // style the increment/decrement button to look active\n    // when the corresponding up/down arrow keys trigger a step\n    if (keyboardSpinDirection !== spinDirection) {\n      setKeyboardSpinDirection(spinDirection);\n    }\n  };\n\n  /** Stop spinning on keyUp if the up or down arrow key fired this event */\n  const handleKeyUp = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (disabled || ev.which === KeyCodes.up || ev.which === KeyCodes.down) {\n        stop();\n        return;\n      }\n    },\n    [disabled, stop],\n  );\n\n  const handleIncrementMouseDown = React.useCallback(\n    (ev: React.MouseEvent<HTMLElement>): void => {\n      updateValue(handleIncrement, ev);\n    },\n    [handleIncrement, updateValue],\n  );\n\n  const handleDecrementMouseDown = React.useCallback(\n    (ev: React.MouseEvent<HTMLElement>): void => {\n      updateValue(handleDecrement, ev);\n    },\n    [handleDecrement, updateValue],\n  );\n\n  useComponentRef(props, input, value);\n  useDebugWarnings(props);\n\n  const valueIsNumber = !!value && !isNaN(Number(value)); // Number('') is 0 which may not be desirable\n\n  const labelContent = (iconProps || label) && (\n    <div className={classNames.labelWrapper}>\n      {iconProps && <Icon {...iconProps} className={classNames.icon} aria-hidden=\"true\" />}\n      {label && (\n        <Label id={labelId} htmlFor={inputId} className={classNames.label} disabled={disabled}>\n          {label}\n        </Label>\n      )}\n    </div>\n  );\n\n  return (\n    <div className={classNames.root} ref={ref}>\n      {labelPosition !== Position.bottom && labelContent}\n      <div\n        {...nativeProps}\n        className={classNames.spinButtonWrapper}\n        aria-label={ariaLabel && ariaLabel}\n        aria-posinset={ariaPositionInSet}\n        aria-setsize={ariaSetSize}\n        data-ktp-target={true}\n      >\n        <input\n          // Display intermediateValue while editing the text (before commit)\n          value={intermediateValue ?? value}\n          id={inputId}\n          onChange={noOp}\n          onInput={handleInputChange}\n          className={classNames.input}\n          type=\"text\"\n          autoComplete=\"off\"\n          role=\"spinbutton\"\n          aria-labelledby={label && labelId}\n          // TODO: test what happens while editing\n          aria-valuenow={ariaValueNow ?? (valueIsNumber ? Number(value) : undefined)}\n          aria-valuetext={ariaValueText ?? (valueIsNumber ? undefined : value)}\n          aria-valuemin={min}\n          aria-valuemax={max}\n          aria-describedby={ariaDescribedBy}\n          onBlur={handleBlur}\n          ref={input}\n          onFocus={handleFocus}\n          onKeyDown={handleKeyDown}\n          onKeyUp={handleKeyUp}\n          disabled={disabled}\n          aria-disabled={disabled}\n          data-lpignore\n          data-ktp-execute-target={true}\n          {...inputProps}\n        />\n        <span className={classNames.arrowButtonsContainer}>\n          <IconButton\n            styles={getArrowButtonStyles(theme!, true, customUpArrowButtonStyles)}\n            className={'ms-UpButton'}\n            checked={keyboardSpinDirection === KeyboardSpinDirection.up}\n            disabled={disabled}\n            iconProps={incrementButtonIcon}\n            onMouseDown={handleIncrementMouseDown}\n            onMouseLeave={stop}\n            onMouseUp={stop}\n            tabIndex={-1}\n            ariaLabel={incrementButtonAriaLabel}\n            data-is-focusable={false}\n            {...iconButtonProps}\n          />\n          <IconButton\n            styles={getArrowButtonStyles(theme!, false, customDownArrowButtonStyles)}\n            className={'ms-DownButton'}\n            checked={keyboardSpinDirection === KeyboardSpinDirection.down}\n            disabled={disabled}\n            iconProps={decrementButtonIcon}\n            onMouseDown={handleDecrementMouseDown}\n            onMouseLeave={stop}\n            onMouseUp={stop}\n            tabIndex={-1}\n            ariaLabel={decrementButtonAriaLabel}\n            data-is-focusable={false}\n            {...iconButtonProps}\n          />\n        </span>\n      </div>\n      {labelPosition === Position.bottom && labelContent}\n    </div>\n  );\n});\nSpinButtonBase.displayName = COMPONENT_NAME;\n\nconst useDebugWarnings = (props: ISpinButtonProps) => {\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props,\n      mutuallyExclusive: { value: 'defaultValue' },\n    });\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}