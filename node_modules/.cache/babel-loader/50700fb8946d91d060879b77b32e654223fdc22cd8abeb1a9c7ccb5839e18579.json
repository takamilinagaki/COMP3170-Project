{"ast":null,"code":"import { getWindow } from './dom/getWindow';\nimport { Stylesheet } from '@fluentui/merge-styles';\n// Initialize global window id.\nvar CURRENT_ID_PROPERTY = '__currentId__';\nvar DEFAULT_ID_STRING = 'id__';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar _global = getWindow() || {};\nif (_global[CURRENT_ID_PROPERTY] === undefined) {\n  _global[CURRENT_ID_PROPERTY] = 0;\n}\nvar _initializedStylesheetResets = false;\n/**\n * Generates a unique id in the global scope (this spans across duplicate copies of the same library.)\n *\n * @public\n */\nexport function getId(prefix) {\n  if (!_initializedStylesheetResets) {\n    // Configure ids to reset on stylesheet resets.\n    var stylesheet = Stylesheet.getInstance();\n    if (stylesheet && stylesheet.onReset) {\n      stylesheet.onReset(resetIds);\n    }\n    _initializedStylesheetResets = true;\n  }\n  var index = _global[CURRENT_ID_PROPERTY]++;\n  return (prefix === undefined ? DEFAULT_ID_STRING : prefix) + index;\n}\n/**\n * Resets id counter to an (optional) number.\n *\n * @public\n */\nexport function resetIds(counter) {\n  if (counter === void 0) {\n    counter = 0;\n  }\n  _global[CURRENT_ID_PROPERTY] = counter;\n}","map":{"version":3,"names":["getWindow","Stylesheet","CURRENT_ID_PROPERTY","DEFAULT_ID_STRING","_global","undefined","_initializedStylesheetResets","getId","prefix","stylesheet","getInstance","onReset","resetIds","index","counter"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/src/getId.ts"],"sourcesContent":["import { getWindow } from './dom/getWindow';\nimport { Stylesheet } from '@fluentui/merge-styles';\n\n// Initialize global window id.\nconst CURRENT_ID_PROPERTY = '__currentId__';\nconst DEFAULT_ID_STRING = 'id__';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet _global: any = getWindow() || {};\n\nif (_global[CURRENT_ID_PROPERTY] === undefined) {\n  _global[CURRENT_ID_PROPERTY] = 0;\n}\n\nlet _initializedStylesheetResets = false;\n\n/**\n * Generates a unique id in the global scope (this spans across duplicate copies of the same library.)\n *\n * @public\n */\nexport function getId(prefix?: string): string {\n  if (!_initializedStylesheetResets) {\n    // Configure ids to reset on stylesheet resets.\n    const stylesheet = Stylesheet.getInstance();\n\n    if (stylesheet && stylesheet.onReset) {\n      stylesheet.onReset(resetIds);\n    }\n    _initializedStylesheetResets = true;\n  }\n\n  let index = _global[CURRENT_ID_PROPERTY]++;\n\n  return (prefix === undefined ? DEFAULT_ID_STRING : prefix) + index;\n}\n\n/**\n * Resets id counter to an (optional) number.\n *\n * @public\n */\nexport function resetIds(counter: number = 0): void {\n  _global[CURRENT_ID_PROPERTY] = counter;\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,UAAU,QAAQ,wBAAwB;AAEnD;AACA,IAAMC,mBAAmB,GAAG,eAAe;AAC3C,IAAMC,iBAAiB,GAAG,MAAM;AAEhC;AACA,IAAIC,OAAO,GAAQJ,SAAS,EAAE,IAAI,EAAE;AAEpC,IAAII,OAAO,CAACF,mBAAmB,CAAC,KAAKG,SAAS,EAAE;EAC9CD,OAAO,CAACF,mBAAmB,CAAC,GAAG,CAAC;;AAGlC,IAAII,4BAA4B,GAAG,KAAK;AAExC;;;;;AAKA,OAAM,SAAUC,KAAKA,CAACC,MAAe;EACnC,IAAI,CAACF,4BAA4B,EAAE;IACjC;IACA,IAAMG,UAAU,GAAGR,UAAU,CAACS,WAAW,EAAE;IAE3C,IAAID,UAAU,IAAIA,UAAU,CAACE,OAAO,EAAE;MACpCF,UAAU,CAACE,OAAO,CAACC,QAAQ,CAAC;;IAE9BN,4BAA4B,GAAG,IAAI;;EAGrC,IAAIO,KAAK,GAAGT,OAAO,CAACF,mBAAmB,CAAC,EAAE;EAE1C,OAAO,CAACM,MAAM,KAAKH,SAAS,GAAGF,iBAAiB,GAAGK,MAAM,IAAIK,KAAK;AACpE;AAEA;;;;;AAKA,OAAM,SAAUD,QAAQA,CAACE,OAAmB;EAAnB,IAAAA,OAAA;IAAAA,OAAA,IAAmB;EAAA;EAC1CV,OAAO,CAACF,mBAAmB,CAAC,GAAGY,OAAO;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}