{"ast":null,"code":"import { concatStyleSets } from './concatStyleSets';\n/**\n * Concatenates style sets into one, but resolves functional sets using the given props.\n * @param styleProps - Props used to resolve functional sets.\n * @param allStyles - Style sets, which can be functions or objects.\n */\nexport function concatStyleSetsWithProps(styleProps) {\n  var allStyles = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    allStyles[_i - 1] = arguments[_i];\n  }\n  var result = [];\n  for (var _a = 0, allStyles_1 = allStyles; _a < allStyles_1.length; _a++) {\n    var styles = allStyles_1[_a];\n    if (styles) {\n      result.push(typeof styles === 'function' ? styles(styleProps) : styles);\n    }\n  }\n  if (result.length === 1) {\n    return result[0];\n  } else if (result.length) {\n    // cliffkoh: I cannot figure out how to avoid the cast to any here.\n    // It is something to do with the use of Omit in IStyleSet.\n    // It might not be necessary once  Omit becomes part of lib.d.ts (when we remove our own Omit and rely on\n    // the official version).\n    return concatStyleSets.apply(void 0, result);\n  }\n  return {};\n}","map":{"version":3,"names":["concatStyleSets","concatStyleSetsWithProps","styleProps","allStyles","_i","arguments","length","result","_a","allStyles_1","styles","push","apply"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/merge-styles/src/concatStyleSetsWithProps.ts"],"sourcesContent":["import { concatStyleSets } from './concatStyleSets';\nimport { IStyleSet } from './IStyleSet';\nimport { IStyleFunctionOrObject } from './IStyleFunction';\nimport { DeepPartial } from './DeepPartial';\n\n/**\n * Concatenates style sets into one, but resolves functional sets using the given props.\n * @param styleProps - Props used to resolve functional sets.\n * @param allStyles - Style sets, which can be functions or objects.\n */\nexport function concatStyleSetsWithProps<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>>(\n  styleProps: TStyleProps,\n  ...allStyles: (IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined)[]\n): DeepPartial<TStyleSet> {\n  const result: DeepPartial<TStyleSet>[] = [];\n  for (const styles of allStyles) {\n    if (styles) {\n      result.push(typeof styles === 'function' ? styles(styleProps) : styles);\n    }\n  }\n  if (result.length === 1) {\n    return result[0] as DeepPartial<TStyleSet>;\n  } else if (result.length) {\n    // cliffkoh: I cannot figure out how to avoid the cast to any here.\n    // It is something to do with the use of Omit in IStyleSet.\n    // It might not be necessary once  Omit becomes part of lib.d.ts (when we remove our own Omit and rely on\n    // the official version).\n    return concatStyleSets(...(result as any)) as any;\n  }\n\n  return {};\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,mBAAmB;AAKnD;;;;;AAKA,OAAM,SAAUC,wBAAwBA,CACtCC,UAAuB;EACvB,IAAAC,SAAA;OAAA,IAAAC,EAAA,IAA4E,EAA5EA,EAAA,GAAAC,SAAA,CAAAC,MAA4E,EAA5EF,EAAA,EAA4E;IAA5ED,SAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;EAEA,IAAMG,MAAM,GAA6B,EAAE;EAC3C,KAAqB,IAAAC,EAAA,IAAS,EAATC,WAAA,GAAAN,SAAS,EAATK,EAAA,GAAAC,WAAA,CAAAH,MAAS,EAATE,EAAA,EAAS,EAAE;IAA3B,IAAME,MAAM,GAAAD,WAAA,CAAAD,EAAA;IACf,IAAIE,MAAM,EAAE;MACVH,MAAM,CAACI,IAAI,CAAC,OAAOD,MAAM,KAAK,UAAU,GAAGA,MAAM,CAACR,UAAU,CAAC,GAAGQ,MAAM,CAAC;;;EAG3E,IAAIH,MAAM,CAACD,MAAM,KAAK,CAAC,EAAE;IACvB,OAAOC,MAAM,CAAC,CAAC,CAA2B;GAC3C,MAAM,IAAIA,MAAM,CAACD,MAAM,EAAE;IACxB;IACA;IACA;IACA;IACA,OAAON,eAAe,CAAAY,KAAA,SAAKL,MAAc,CAAQ;;EAGnD,OAAO,EAAE;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}