{"ast":null,"code":"import { getDocument } from './dom/getDocument';\nimport * as localStorage from './localStorage';\nimport * as sessionStorage from './sessionStorage';\n// Default to undefined so that we initialize on first read.\nvar _language;\nvar STORAGE_KEY = 'language';\n/**\n * Gets the language set for the page.\n * @param persistenceType - Where to persist the value. Default is `sessionStorage` if available.\n */\nexport function getLanguage(persistenceType) {\n  if (persistenceType === void 0) {\n    persistenceType = 'sessionStorage';\n  }\n  if (_language === undefined) {\n    var doc = getDocument();\n    var savedLanguage = persistenceType === 'localStorage' ? localStorage.getItem(STORAGE_KEY) : persistenceType === 'sessionStorage' ? sessionStorage.getItem(STORAGE_KEY) : undefined;\n    if (savedLanguage) {\n      _language = savedLanguage;\n    }\n    if (_language === undefined && doc) {\n      _language = doc.documentElement.getAttribute('lang');\n    }\n    if (_language === undefined) {\n      _language = 'en';\n    }\n  }\n  return _language;\n}\nexport function setLanguage(language, persistenceParam) {\n  var doc = getDocument();\n  if (doc) {\n    doc.documentElement.setAttribute('lang', language);\n  }\n  var persistenceType = persistenceParam === true ? 'none' : !persistenceParam ? 'sessionStorage' : persistenceParam;\n  if (persistenceType === 'localStorage') {\n    localStorage.setItem(STORAGE_KEY, language);\n  } else if (persistenceType === 'sessionStorage') {\n    sessionStorage.setItem(STORAGE_KEY, language);\n  }\n  _language = language;\n}","map":{"version":3,"names":["getDocument","localStorage","sessionStorage","_language","STORAGE_KEY","getLanguage","persistenceType","undefined","doc","savedLanguage","getItem","documentElement","getAttribute","setLanguage","language","persistenceParam","setAttribute","setItem"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/src/language.ts"],"sourcesContent":["import { getDocument } from './dom/getDocument';\nimport * as localStorage from './localStorage';\nimport * as sessionStorage from './sessionStorage';\n\n// Default to undefined so that we initialize on first read.\nlet _language: string | null;\n\nconst STORAGE_KEY = 'language';\n\n/**\n * Gets the language set for the page.\n * @param persistenceType - Where to persist the value. Default is `sessionStorage` if available.\n */\nexport function getLanguage(\n  persistenceType: 'localStorage' | 'sessionStorage' | 'none' = 'sessionStorage',\n): string | null {\n  if (_language === undefined) {\n    let doc = getDocument();\n    const savedLanguage =\n      persistenceType === 'localStorage'\n        ? localStorage.getItem(STORAGE_KEY)\n        : persistenceType === 'sessionStorage'\n        ? sessionStorage.getItem(STORAGE_KEY)\n        : undefined;\n\n    if (savedLanguage) {\n      _language = savedLanguage;\n    }\n\n    if (_language === undefined && doc) {\n      _language = doc.documentElement.getAttribute('lang');\n    }\n\n    if (_language === undefined) {\n      _language = 'en';\n    }\n  }\n\n  return _language;\n}\n\n/**\n * Sets the language for the page (by adjusting the lang attribute of the html element).\n * @param language - Language to set.\n * @param persistenceType - Where to persist the value. Default is `sessionStorage` if available.\n */\nexport function setLanguage(language: string, persistenceType?: 'localStorage' | 'sessionStorage' | 'none'): void;\n/**\n * Sets the language for the page (by adjusting the lang attribute of the html element).\n * @deprecated Use string parameter version.\n * @param language - Language to set.\n * @param avoidPersisting - If true, don't store the value.\n */\nexport function setLanguage(language: string, avoidPersisting?: boolean): void;\nexport function setLanguage(\n  language: string,\n  persistenceParam?: 'localStorage' | 'sessionStorage' | 'none' | boolean,\n): void {\n  let doc = getDocument();\n\n  if (doc) {\n    doc.documentElement.setAttribute('lang', language);\n  }\n\n  const persistenceType = persistenceParam === true ? 'none' : !persistenceParam ? 'sessionStorage' : persistenceParam;\n  if (persistenceType === 'localStorage') {\n    localStorage.setItem(STORAGE_KEY, language);\n  } else if (persistenceType === 'sessionStorage') {\n    sessionStorage.setItem(STORAGE_KEY, language);\n  }\n\n  _language = language;\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,mBAAmB;AAC/C,OAAO,KAAKC,YAAY,MAAM,gBAAgB;AAC9C,OAAO,KAAKC,cAAc,MAAM,kBAAkB;AAElD;AACA,IAAIC,SAAwB;AAE5B,IAAMC,WAAW,GAAG,UAAU;AAE9B;;;;AAIA,OAAM,SAAUC,WAAWA,CACzBC,eAA8E;EAA9E,IAAAA,eAAA;IAAAA,eAAA,mBAA8E;EAAA;EAE9E,IAAIH,SAAS,KAAKI,SAAS,EAAE;IAC3B,IAAIC,GAAG,GAAGR,WAAW,EAAE;IACvB,IAAMS,aAAa,GACjBH,eAAe,KAAK,cAAc,GAC9BL,YAAY,CAACS,OAAO,CAACN,WAAW,CAAC,GACjCE,eAAe,KAAK,gBAAgB,GACpCJ,cAAc,CAACQ,OAAO,CAACN,WAAW,CAAC,GACnCG,SAAS;IAEf,IAAIE,aAAa,EAAE;MACjBN,SAAS,GAAGM,aAAa;;IAG3B,IAAIN,SAAS,KAAKI,SAAS,IAAIC,GAAG,EAAE;MAClCL,SAAS,GAAGK,GAAG,CAACG,eAAe,CAACC,YAAY,CAAC,MAAM,CAAC;;IAGtD,IAAIT,SAAS,KAAKI,SAAS,EAAE;MAC3BJ,SAAS,GAAG,IAAI;;;EAIpB,OAAOA,SAAS;AAClB;AAeA,OAAM,SAAUU,WAAWA,CACzBC,QAAgB,EAChBC,gBAAuE;EAEvE,IAAIP,GAAG,GAAGR,WAAW,EAAE;EAEvB,IAAIQ,GAAG,EAAE;IACPA,GAAG,CAACG,eAAe,CAACK,YAAY,CAAC,MAAM,EAAEF,QAAQ,CAAC;;EAGpD,IAAMR,eAAe,GAAGS,gBAAgB,KAAK,IAAI,GAAG,MAAM,GAAG,CAACA,gBAAgB,GAAG,gBAAgB,GAAGA,gBAAgB;EACpH,IAAIT,eAAe,KAAK,cAAc,EAAE;IACtCL,YAAY,CAACgB,OAAO,CAACb,WAAW,EAAEU,QAAQ,CAAC;GAC5C,MAAM,IAAIR,eAAe,KAAK,gBAAgB,EAAE;IAC/CJ,cAAc,CAACe,OAAO,CAACb,WAAW,EAAEU,QAAQ,CAAC;;EAG/CX,SAAS,GAAGW,QAAQ;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}