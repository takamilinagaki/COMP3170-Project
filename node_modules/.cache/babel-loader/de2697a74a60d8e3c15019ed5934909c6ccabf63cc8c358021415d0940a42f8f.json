{"ast":null,"code":"import { __assign, __decorate, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, FocusRects, Async, KeyCodes, elementContains, getRTLSafeKeyCode, classNamesFunction, css, memoizeFunction, warnMutuallyExclusive } from '../../Utilities';\nimport { CheckboxVisibility, ColumnActionsMode, ConstrainMode, DetailsListLayoutMode, ColumnDragEndLocation } from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\nimport { DragDropHelper } from '../../DragDrop';\nimport { GroupedList } from '../../GroupedList';\nimport { List } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeComponentAs, composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'DetailsList';\nvar MIN_COLUMN_WIDTH = 100; // this is the global min width\nvar DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nvar DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nvar rowFocusZoneAddTabIndexProps = {\n  tabIndex: 0\n};\nvar rowFocusZoneNoTabIndexProps = {};\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nvar DetailsListInner = function (props) {\n  var selection = props.selection;\n  var ariaLabelForListHeader = props.ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox = props.ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn = props.ariaLabelForSelectionColumn,\n    className = props.className,\n    checkboxVisibility = props.checkboxVisibility,\n    compact = props.compact,\n    constrainMode = props.constrainMode,\n    dragDropEvents = props.dragDropEvents,\n    groups = props.groups,\n    groupProps = props.groupProps,\n    indentWidth = props.indentWidth,\n    items = props.items,\n    isPlaceholderData = props.isPlaceholderData,\n    isHeaderVisible = props.isHeaderVisible,\n    layoutMode = props.layoutMode,\n    onItemInvoked = props.onItemInvoked,\n    onItemContextMenu = props.onItemContextMenu,\n    onColumnHeaderClick = props.onColumnHeaderClick,\n    onColumnHeaderContextMenu = props.onColumnHeaderContextMenu,\n    _a = props.selectionMode,\n    selectionMode = _a === void 0 ? selection.mode : _a,\n    selectionPreservedOnEmptyClick = props.selectionPreservedOnEmptyClick,\n    selectionZoneProps = props.selectionZoneProps,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaLabel = props.ariaLabel,\n    ariaLabelForGrid = props.ariaLabelForGrid,\n    rowElementEventMap = props.rowElementEventMap,\n    // eslint-disable-next-line deprecation/deprecation\n    _b = props.shouldApplyApplicationRole,\n    // eslint-disable-next-line deprecation/deprecation\n    shouldApplyApplicationRole = _b === void 0 ? false : _b,\n    getKey = props.getKey,\n    listProps = props.listProps,\n    usePageCache = props.usePageCache,\n    onShouldVirtualize = props.onShouldVirtualize,\n    viewport = props.viewport,\n    minimumPixelsForDrag = props.minimumPixelsForDrag,\n    getGroupHeight = props.getGroupHeight,\n    styles = props.styles,\n    theme = props.theme,\n    _c = props.cellStyleProps,\n    cellStyleProps = _c === void 0 ? DEFAULT_CELL_STYLE_PROPS : _c,\n    onRenderCheckbox = props.onRenderCheckbox,\n    useFastIcons = props.useFastIcons,\n    dragDropHelper = props.dragDropHelper,\n    adjustedColumns = props.adjustedColumns,\n    isCollapsed = props.isCollapsed,\n    isSizing = props.isSizing,\n    isSomeGroupExpanded = props.isSomeGroupExpanded,\n    version = props.version,\n    rootRef = props.rootRef,\n    listRef = props.listRef,\n    focusZoneRef = props.focusZoneRef,\n    columnReorderOptions = props.columnReorderOptions,\n    groupedListRef = props.groupedListRef,\n    headerRef = props.headerRef,\n    onGroupExpandStateChanged = props.onGroupExpandStateChanged,\n    onColumnIsSizingChanged = props.onColumnIsSizingChanged,\n    onRowDidMount = props.onRowDidMount,\n    onRowWillUnmount = props.onRowWillUnmount,\n    disableSelectionZone = props.disableSelectionZone,\n    _d = props.isSelectedOnFocus,\n    isSelectedOnFocus = _d === void 0 ? true : _d,\n    onColumnResized = props.onColumnResized,\n    onColumnAutoResized = props.onColumnAutoResized,\n    onToggleCollapse = props.onToggleCollapse,\n    onActiveRowChanged = props.onActiveRowChanged,\n    onBlur = props.onBlur,\n    eventsToRegister = props.rowElementEventMap,\n    onRenderMissingItem = props.onRenderMissingItem,\n    onRenderItemColumn = props.onRenderItemColumn,\n    onRenderField = props.onRenderField,\n    getCellValueKey = props.getCellValueKey,\n    getRowAriaLabel = props.getRowAriaLabel,\n    getRowAriaDescribedBy = props.getRowAriaDescribedBy,\n    checkButtonAriaLabel = props.checkButtonAriaLabel,\n    checkButtonGroupAriaLabel = props.checkButtonGroupAriaLabel,\n    checkboxCellClassName = props.checkboxCellClassName,\n    useReducedRowRenderer = props.useReducedRowRenderer,\n    enableUpdateAnimations = props.enableUpdateAnimations,\n    enterModalSelectionOnTouch = props.enterModalSelectionOnTouch,\n    onRenderDefaultRow = props.onRenderDefaultRow,\n    selectionZoneRef = props.selectionZoneRef,\n    focusZoneProps = props.focusZoneProps;\n  var defaultRole = 'grid';\n  var role = props.role ? props.role : defaultRole;\n  var rowId = getId('row');\n  var groupNestingDepth = getGroupNestingDepth(groups);\n  var groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n  var additionalListProps = React.useMemo(function () {\n    return __assign({\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey: getKey,\n      version: version\n    }, listProps);\n  }, [isSizing, getKey, version, listProps]);\n  var selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    var isCollapsedGroupSelectVisible = groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    var isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n  var defaultOnRenderDetailsHeader = React.useCallback(function (detailsHeaderProps) {\n    return React.createElement(DetailsHeader, __assign({}, detailsHeaderProps));\n  }, []);\n  var defaultOnRenderDetailsFooter = React.useCallback(function () {\n    return null;\n  }, []);\n  var propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n  var onRenderDetailsHeader = React.useMemo(function () {\n    return propsOnRenderDetailsHeader ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader) : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n  var propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n  var onRenderDetailsFooter = React.useMemo(function () {\n    return propsOnRenderDetailsFooter ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter) : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n  var detailsFooterProps = React.useMemo(function () {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth: groupNestingDepth,\n      selection: selection,\n      selectionMode: selectionMode,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps\n    };\n  }, [adjustedColumns, groupNestingDepth, selection, selectionMode, viewport, checkboxVisibility, indentWidth, cellStyleProps]);\n  var columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n  var onColumnDragEnd = React.useCallback(function (_a, event) {\n    var dropLocation = _a.dropLocation;\n    var finalDropLocation = ColumnDragEndLocation.outside;\n    if (columnReorderOnDragEnd) {\n      if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n        finalDropLocation = dropLocation;\n      } else if (rootRef.current) {\n        var clientRect = rootRef.current.getBoundingClientRect();\n        if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n          finalDropLocation = ColumnDragEndLocation.surface;\n        }\n      }\n      columnReorderOnDragEnd(finalDropLocation);\n    }\n  }, [columnReorderOnDragEnd, rootRef]);\n  var columnReorderProps = React.useMemo(function () {\n    if (columnReorderOptions) {\n      return __assign(__assign({}, columnReorderOptions), {\n        onColumnDragEnd: onColumnDragEnd\n      });\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n  var rowCount = (isHeaderVisible ? 1 : 0) + (props.onRenderDetailsFooter ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  var colCount = (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) + (adjustedColumns ? adjustedColumns.length : 0) + (groups ? 1 : 0);\n  var classNames = React.useMemo(function () {\n    return getClassNames(styles, {\n      theme: theme,\n      compact: compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className: className\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n  var onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n  var finalOnRenderDetailsGroupFooter = React.useMemo(function () {\n    return onRenderDetailsGroupFooter ? function (groupFooterProps, defaultRender) {\n      return onRenderDetailsGroupFooter(__assign(__assign({}, groupFooterProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: selectionMode,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps\n      }), defaultRender);\n    } : undefined;\n  }, [onRenderDetailsGroupFooter, adjustedColumns, groupNestingDepth, indentWidth, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps]);\n  var onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n  var finalOnRenderDetailsGroupHeader = React.useMemo(function () {\n    return onRenderDetailsGroupHeader ? function (groupHeaderProps, defaultRender) {\n      var _a, _b;\n      var groupIndex = groupHeaderProps.groupIndex;\n      var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;\n      var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].totalRowCount : 0;\n      return onRenderDetailsGroupHeader(__assign(__assign({}, groupHeaderProps), {\n        columns: adjustedColumns,\n        groupNestingDepth: groupNestingDepth,\n        indentWidth: indentWidth,\n        selection: selection,\n        selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n        viewport: viewport,\n        checkboxVisibility: checkboxVisibility,\n        cellStyleProps: cellStyleProps,\n        ariaColSpan: adjustedColumns.length,\n        ariaLevel: undefined,\n        ariaPosInSet: undefined,\n        ariaSetSize: undefined,\n        ariaRowCount: undefined,\n        ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined\n      }), defaultRender);\n    } : function (groupHeaderProps, defaultRender) {\n      var _a, _b;\n      var groupIndex = groupHeaderProps.groupIndex;\n      var groupKey = groupIndex !== undefined ? (_b = (_a = groupHeaderProps.groups) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.key : undefined;\n      var totalRowCount = groupKey !== undefined && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].totalRowCount : 0;\n      return defaultRender(__assign(__assign({}, groupHeaderProps), {\n        ariaColSpan: adjustedColumns.length,\n        ariaLevel: undefined,\n        ariaPosInSet: undefined,\n        ariaSetSize: undefined,\n        ariaRowCount: undefined,\n        ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined\n      }));\n    };\n  }, [onRenderDetailsGroupHeader, adjustedColumns, groupNestingDepth, indentWidth, isHeaderVisible, selection, selectionMode, viewport, checkboxVisibility, cellStyleProps, groupedDetailsListIndexMap]);\n  var finalGroupProps = React.useMemo(function () {\n    var _a;\n    return __assign(__assign({}, groupProps), {\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: __assign(__assign({}, groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps), {\n        selectAllButtonProps: __assign({\n          'aria-label': checkButtonGroupAriaLabel\n        }, (_a = groupProps === null || groupProps === void 0 ? void 0 : groupProps.headerProps) === null || _a === void 0 ? void 0 : _a.selectAllButtonProps)\n      })\n    });\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n  var sumColumnWidths = useConst(function () {\n    return memoizeFunction(function (columns) {\n      var totalWidth = 0;\n      columns.forEach(function (column) {\n        return totalWidth += column.calculatedWidth || column.minWidth;\n      });\n      return totalWidth;\n    });\n  });\n  var collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n  var rowWidth = React.useMemo(function () {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n  var onRenderCell = React.useCallback(function (nestingDepth, item, index, group) {\n    var finalOnRenderRow = props.onRenderRow ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow) : onRenderDefaultRow;\n    var groupKey = group ? group.key : undefined;\n    var numOfGroupHeadersBeforeItem = groupKey && groupedDetailsListIndexMap[groupKey] ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem : 0;\n    var rowRole = role === defaultRole ? undefined : 'presentation';\n    // add tabindex=\"0\" to first row if no header exists, to ensure the focuszone is in the tab order\n    var rowFocusZoneProps = isHeaderVisible || index > 0 ? rowFocusZoneNoTabIndexProps : rowFocusZoneAddTabIndexProps;\n    var rowProps = {\n      item: item,\n      itemIndex: index,\n      flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n      compact: compact,\n      columns: adjustedColumns,\n      groupNestingDepth: nestingDepth,\n      id: \"\".concat(rowId, \"-\").concat(index),\n      selectionMode: selectionMode,\n      selection: selection,\n      onDidMount: onRowDidMount,\n      onWillUnmount: onRowWillUnmount,\n      onRenderItemColumn: onRenderItemColumn,\n      onRenderField: onRenderField,\n      getCellValueKey: getCellValueKey,\n      eventsToRegister: eventsToRegister,\n      dragDropEvents: dragDropEvents,\n      dragDropHelper: dragDropHelper,\n      viewport: viewport,\n      checkboxVisibility: checkboxVisibility,\n      collapseAllVisibility: collapseAllVisibility,\n      getRowAriaLabel: getRowAriaLabel,\n      getRowAriaDescribedBy: getRowAriaDescribedBy,\n      checkButtonAriaLabel: checkButtonAriaLabel,\n      checkboxCellClassName: checkboxCellClassName,\n      useReducedRowRenderer: useReducedRowRenderer,\n      indentWidth: indentWidth,\n      cellStyleProps: cellStyleProps,\n      onRenderDetailsCheckbox: onRenderCheckbox,\n      enableUpdateAnimations: enableUpdateAnimations,\n      rowWidth: rowWidth,\n      useFastIcons: useFastIcons,\n      role: rowRole,\n      isGridRow: true,\n      focusZoneProps: rowFocusZoneProps\n    };\n    if (!item) {\n      if (onRenderMissingItem) {\n        return onRenderMissingItem(index, rowProps);\n      }\n      return null;\n    }\n    return finalOnRenderRow(rowProps);\n  }, [compact, adjustedColumns, selectionMode, selection, rowId, onRowDidMount, onRowWillUnmount, onRenderItemColumn, onRenderField, getCellValueKey, eventsToRegister, dragDropEvents, dragDropHelper, viewport, checkboxVisibility, collapseAllVisibility, getRowAriaLabel, getRowAriaDescribedBy, isHeaderVisible, checkButtonAriaLabel, checkboxCellClassName, useReducedRowRenderer, indentWidth, cellStyleProps, onRenderCheckbox, enableUpdateAnimations, useFastIcons, onRenderDefaultRow, onRenderMissingItem, props.onRenderRow, rowWidth, role, groupedDetailsListIndexMap]);\n  var onRenderListCell = React.useCallback(function (nestingDepth) {\n    return function (item, itemIndex) {\n      return onRenderCell(nestingDepth, item, itemIndex);\n    };\n  }, [onRenderCell]);\n  var isRightArrow = React.useCallback(function (event) {\n    // eslint-disable-next-line deprecation/deprecation\n    return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n  }, [theme]);\n  var focusZoneInnerProps = __assign(__assign({}, focusZoneProps), {\n    componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef,\n    className: focusZoneProps && focusZoneProps.className ? css(classNames.focusZone, focusZoneProps.className) : classNames.focusZone,\n    direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical,\n    shouldEnterInnerZone: focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow,\n    onActiveElementChanged: focusZoneProps && focusZoneProps.onActiveElementChanged ? focusZoneProps.onActiveElementChanged : onActiveRowChanged,\n    shouldRaiseClicksOnEnter: false,\n    onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur\n  });\n  var FinalGroupedList = groups && (groupProps === null || groupProps === void 0 ? void 0 : groupProps.groupedListAs) ? composeComponentAs(groupProps.groupedListAs, GroupedList) : GroupedList;\n  var list = groups ? React.createElement(FinalGroupedList, {\n    focusZoneProps: focusZoneInnerProps,\n    componentRef: groupedListRef,\n    groups: groups,\n    groupProps: finalGroupProps,\n    items: items,\n    onRenderCell: onRenderCell,\n    role: \"presentation\",\n    selection: selection,\n    selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n    dragDropEvents: dragDropEvents,\n    dragDropHelper: dragDropHelper,\n    eventsToRegister: rowElementEventMap,\n    listProps: additionalListProps,\n    onGroupExpandStateChanged: onGroupExpandStateChanged,\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize,\n    getGroupHeight: getGroupHeight,\n    compact: compact\n  }) : React.createElement(FocusZone, __assign({}, focusZoneInnerProps), React.createElement(List, __assign({\n    ref: listRef,\n    role: \"presentation\",\n    items: items,\n    onRenderCell: onRenderListCell(0),\n    usePageCache: usePageCache,\n    onShouldVirtualize: onShouldVirtualize\n  }, additionalListProps)));\n  var onHeaderKeyDown = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.down) {\n      if (focusZoneRef.current && focusZoneRef.current.focus()) {\n        // select the first item in list after down arrow key event\n        // only if nothing was selected; otherwise start with the already-selected item\n        if (isSelectedOnFocus && selection.getSelectedIndices().length === 0) {\n          selection.setIndexSelected(0, true, false);\n        }\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [selection, focusZoneRef, isSelectedOnFocus]);\n  var onContentKeyDown = React.useCallback(function (ev) {\n    // eslint-disable-next-line deprecation/deprecation\n    if (ev.which === KeyCodes.up && !ev.altKey) {\n      if (headerRef.current && headerRef.current.focus()) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  }, [headerRef]);\n  return React.createElement(\"div\", __assign({\n    ref: rootRef,\n    className: classNames.root,\n    \"data-automationid\": \"DetailsList\",\n    \"data-is-scrollable\": \"false\"\n  }, shouldApplyApplicationRole ? {\n    role: 'application'\n  } : {}), React.createElement(FocusRects, null), React.createElement(\"div\", {\n    role: role,\n    \"aria-label\": ariaLabelForGrid || ariaLabel,\n    \"aria-rowcount\": isPlaceholderData ? 0 : rowCount,\n    \"aria-colcount\": colCount,\n    \"aria-busy\": isPlaceholderData\n  }, React.createElement(\"div\", {\n    onKeyDown: onHeaderKeyDown,\n    role: \"presentation\",\n    className: classNames.headerWrapper\n  }, isHeaderVisible && onRenderDetailsHeader({\n    componentRef: headerRef,\n    selectionMode: selectionMode,\n    layoutMode: layoutMode,\n    selection: selection,\n    columns: adjustedColumns,\n    onColumnClick: onColumnHeaderClick,\n    onColumnContextMenu: onColumnHeaderContextMenu,\n    onColumnResized: onColumnResized,\n    onColumnIsSizingChanged: onColumnIsSizingChanged,\n    onColumnAutoResized: onColumnAutoResized,\n    groupNestingDepth: groupNestingDepth,\n    isAllCollapsed: isCollapsed,\n    onToggleCollapseAll: onToggleCollapse,\n    ariaLabel: ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n    selectAllVisibility: selectAllVisibility,\n    collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n    viewport: viewport,\n    columnReorderProps: columnReorderProps,\n    minimumPixelsForDrag: minimumPixelsForDrag,\n    cellStyleProps: cellStyleProps,\n    checkboxVisibility: checkboxVisibility,\n    indentWidth: indentWidth,\n    onRenderDetailsCheckbox: onRenderCheckbox,\n    rowWidth: sumColumnWidths(adjustedColumns),\n    useFastIcons: useFastIcons\n  }, onRenderDetailsHeader)), React.createElement(\"div\", {\n    onKeyDown: onContentKeyDown,\n    role: \"presentation\",\n    className: classNames.contentWrapper\n  }, !disableSelectionZone ? React.createElement(SelectionZone, __assign({\n    ref: selectionZoneRef,\n    selection: selection,\n    selectionPreservedOnEmptyClick: selectionPreservedOnEmptyClick,\n    selectionMode: selectionMode,\n    isSelectedOnFocus: isSelectedOnFocus,\n    selectionClearedOnEscapePress: isSelectedOnFocus,\n    toggleWithoutModifierPressed: !isSelectedOnFocus,\n    onItemInvoked: onItemInvoked,\n    onItemContextMenu: onItemContextMenu,\n    enterModalOnTouch: enterModalSelectionOnTouch\n  }, selectionZoneProps || {}), list) : list), onRenderDetailsFooter(__assign({}, detailsFooterProps))));\n};\nvar DetailsListBase = /** @class */function (_super) {\n  __extends(DetailsListBase, _super);\n  function DetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    _this._header = React.createRef();\n    _this._groupedList = React.createRef();\n    _this._list = React.createRef();\n    _this._focusZone = React.createRef();\n    _this._selectionZone = React.createRef();\n    _this._onRenderRow = function (props, defaultRender) {\n      return React.createElement(DetailsRow, __assign({}, props));\n    };\n    _this._getDerivedStateFromProps = function (nextProps, previousState) {\n      var _a = _this.props,\n        checkboxVisibility = _a.checkboxVisibility,\n        items = _a.items,\n        setKey = _a.setKey,\n        _b = _a.selectionMode,\n        selectionMode = _b === void 0 ? _this._selection.mode : _b,\n        columns = _a.columns,\n        viewport = _a.viewport,\n        compact = _a.compact,\n        dragDropEvents = _a.dragDropEvents;\n      var _c = (_this.props.groupProps || {}).isAllGroupsCollapsed,\n        isAllGroupsCollapsed = _c === void 0 ? undefined : _c;\n      var newViewportWidth = nextProps.viewport && nextProps.viewport.width || 0;\n      var oldViewportWidth = viewport && viewport.width || 0;\n      var shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n      var shouldForceUpdates = false;\n      if (nextProps.layoutMode !== _this.props.layoutMode) {\n        shouldForceUpdates = true;\n      }\n      var nextState = previousState;\n      if (shouldResetSelection) {\n        _this._initialFocusedIndex = nextProps.initialFocusedIndex;\n        // reset focusedItemIndex when setKey changes\n        nextState = __assign(__assign({}, nextState), {\n          focusedItemIndex: _this._initialFocusedIndex !== undefined ? _this._initialFocusedIndex : -1\n        });\n      }\n      if (!_this.props.disableSelectionZone && nextProps.items !== items) {\n        _this._selection.setItems(nextProps.items, shouldResetSelection);\n      }\n      if (nextProps.checkboxVisibility !== checkboxVisibility || nextProps.columns !== columns || newViewportWidth !== oldViewportWidth || nextProps.compact !== compact) {\n        shouldForceUpdates = true;\n      }\n      nextState = __assign(__assign({}, nextState), _this._adjustColumns(nextProps, nextState, true));\n      if (nextProps.selectionMode !== selectionMode) {\n        shouldForceUpdates = true;\n      }\n      if (isAllGroupsCollapsed === undefined && nextProps.groupProps && nextProps.groupProps.isAllGroupsCollapsed !== undefined) {\n        nextState = __assign(__assign({}, nextState), {\n          isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n          isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed\n        });\n      }\n      if (nextProps.dragDropEvents !== dragDropEvents) {\n        _this._dragDropHelper && _this._dragDropHelper.dispose();\n        _this._dragDropHelper = nextProps.dragDropEvents ? new DragDropHelper({\n          selection: _this._selection,\n          minimumPixelsForDrag: nextProps.minimumPixelsForDrag\n        }) : undefined;\n        shouldForceUpdates = true;\n      }\n      if (shouldForceUpdates) {\n        nextState = __assign(__assign({}, nextState), {\n          version: {}\n        });\n      }\n      return nextState;\n    };\n    _this._onGroupExpandStateChanged = function (isSomeGroupExpanded) {\n      _this.setState({\n        isSomeGroupExpanded: isSomeGroupExpanded\n      });\n    };\n    _this._onColumnIsSizingChanged = function (column, isSizing) {\n      _this.setState({\n        isSizing: isSizing\n      });\n    };\n    _this._onRowDidMount = function (row) {\n      var _a = row.props,\n        item = _a.item,\n        itemIndex = _a.itemIndex;\n      var itemKey = _this._getItemKey(item, itemIndex);\n      _this._activeRows[itemKey] = row; // this is used for column auto resize\n      _this._setFocusToRowIfPending(row);\n      var onRowDidMount = _this.props.onRowDidMount;\n      if (onRowDidMount) {\n        onRowDidMount(item, itemIndex);\n      }\n    };\n    _this._onRowWillUnmount = function (row) {\n      var onRowWillUnmount = _this.props.onRowWillUnmount;\n      var _a = row.props,\n        item = _a.item,\n        itemIndex = _a.itemIndex;\n      var itemKey = _this._getItemKey(item, itemIndex);\n      delete _this._activeRows[itemKey];\n      if (onRowWillUnmount) {\n        onRowWillUnmount(item, itemIndex);\n      }\n    };\n    _this._onToggleCollapse = function (collapsed) {\n      _this.setState({\n        isCollapsed: collapsed\n      });\n      if (_this._groupedList.current) {\n        _this._groupedList.current.toggleCollapseAll(collapsed);\n      }\n    };\n    _this._onColumnResized = function (resizingColumn, newWidth, resizingColumnIndex) {\n      var newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n      if (_this.props.onColumnResize) {\n        _this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n      }\n      _this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n      _this.setState(__assign(__assign({}, _this._adjustColumns(_this.props, _this.state, true, resizingColumnIndex)), {\n        version: {}\n      }));\n    };\n    /**\n     * Callback function when double clicked on the details header column resizer\n     * which will measure the column cells of all the active rows and resize the\n     * column to the max cell width.\n     *\n     * @param column - double clicked column definition\n     * @param columnIndex - double clicked column index\n     * TODO: min width 100 should be changed to const value and should be consistent with the\n     * value used on _onSizerMove method in DetailsHeader\n     */\n    _this._onColumnAutoResized = function (column, columnIndex) {\n      var max = 0;\n      var count = 0;\n      var totalCount = Object.keys(_this._activeRows).length;\n      for (var key in _this._activeRows) {\n        if (_this._activeRows.hasOwnProperty(key)) {\n          var currentRow = _this._activeRows[key];\n          currentRow.measureCell(columnIndex, function (width) {\n            max = Math.max(max, width);\n            count++;\n            if (count === totalCount) {\n              _this._onColumnResized(column, max, columnIndex);\n            }\n          });\n        }\n      }\n    };\n    /**\n     * Call back function when an element in FocusZone becomes active. It will translate it into item\n     * and call onActiveItemChanged callback if specified.\n     *\n     * @param row - element that became active in Focus Zone\n     * @param focus - event from Focus Zone\n     */\n    _this._onActiveRowChanged = function (el, ev) {\n      var _a = _this.props,\n        items = _a.items,\n        onActiveItemChanged = _a.onActiveItemChanged;\n      if (!el) {\n        return;\n      }\n      // Check and assign index only if the event was raised from any DetailsRow element\n      if (el.getAttribute('data-item-index')) {\n        var index = Number(el.getAttribute('data-item-index'));\n        if (index >= 0) {\n          if (onActiveItemChanged) {\n            onActiveItemChanged(items[index], index, ev);\n          }\n          _this.setState({\n            focusedItemIndex: index\n          });\n        }\n      }\n    };\n    _this._onBlur = function (event) {\n      _this.setState({\n        focusedItemIndex: -1\n      });\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._activeRows = {};\n    _this._columnOverrides = {};\n    _this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: _this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: _this._getDerivedStateFromProps\n    };\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      selection: 'getKey'\n    });\n    _this._selection = props.selection || new Selection({\n      onSelectionChanged: undefined,\n      getKey: props.getKey,\n      selectionMode: props.selectionMode\n    });\n    if (!_this.props.disableSelectionZone) {\n      _this._selection.setItems(props.items, false);\n    }\n    _this._dragDropHelper = props.dragDropEvents ? new DragDropHelper({\n      selection: _this._selection,\n      minimumPixelsForDrag: props.minimumPixelsForDrag\n    }) : undefined;\n    _this._initialFocusedIndex = props.initialFocusedIndex;\n    return _this;\n  }\n  DetailsListBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  };\n  DetailsListBase.prototype.scrollToIndex = function (index, measureItem, scrollToMode) {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  };\n  DetailsListBase.prototype.focusIndex = function (index, forceIntoFirstElement, measureItem, scrollToMode) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n    var item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n      var itemKey = this._getItemKey(item, index);\n      var row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  };\n  DetailsListBase.prototype.getStartItemIndexInView = function () {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  };\n  DetailsListBase.prototype.updateColumn = function (column, options) {\n    var _a, _b;\n    var NO_COLUMNS = [];\n    var _c = this.props,\n      _d = _c.columns,\n      columns = _d === void 0 ? NO_COLUMNS : _d,\n      selectionMode = _c.selectionMode,\n      checkboxVisibility = _c.checkboxVisibility,\n      columnReorderOptions = _c.columnReorderOptions;\n    var width = options.width,\n      newColumnIndex = options.newColumnIndex;\n    var index = columns.findIndex(function (col) {\n      return col.key === column.key;\n    });\n    if (width) {\n      this._onColumnResized(column, width, index);\n    }\n    if (newColumnIndex !== undefined && columnReorderOptions) {\n      var isCheckboxColumnHidden = selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n      var showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;\n      var columnIndex = (showCheckbox ? 2 : 1) + index;\n      var draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;\n      var targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;\n      var frozenColumnCountFromStart = (_a = columnReorderOptions.frozenColumnCountFromStart) !== null && _a !== void 0 ? _a : 0;\n      var frozenColumnCountFromEnd = (_b = columnReorderOptions.frozenColumnCountFromEnd) !== null && _b !== void 0 ? _b : 0;\n      var isValidTargetIndex = targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;\n      if (isValidTargetIndex) {\n        if (columnReorderOptions.onColumnDrop) {\n          var dragDropDetails = {\n            draggedIndex: draggedIndex,\n            targetIndex: targetIndex\n          };\n          columnReorderOptions.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderOptions.handleColumnReorder) {\n          columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n  };\n\n  DetailsListBase.prototype.componentWillUnmount = function () {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  };\n  DetailsListBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    this._notifyColumnsResized();\n    if (this._initialFocusedIndex !== undefined) {\n      var item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        var itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        var row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n    if (this.props.items !== prevProps.items && this.props.items.length > 0 && this.state.focusedItemIndex !== -1 && !elementContains(this._root.current, document.activeElement, false)) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      var index = this.state.focusedItemIndex < this.props.items.length ? this.state.focusedItemIndex : this.props.items.length - 1;\n      var item = this.props.items[index];\n      var itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      var row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  };\n  DetailsListBase.prototype.render = function () {\n    return React.createElement(DetailsListInner, __assign({}, this.props, this.state, {\n      selection: this._selection,\n      dragDropHelper: this._dragDropHelper,\n      rootRef: this._root,\n      listRef: this._list,\n      groupedListRef: this._groupedList,\n      focusZoneRef: this._focusZone,\n      headerRef: this._header,\n      selectionZoneRef: this._selectionZone,\n      onGroupExpandStateChanged: this._onGroupExpandStateChanged,\n      onColumnIsSizingChanged: this._onColumnIsSizingChanged,\n      onRowDidMount: this._onRowDidMount,\n      onRowWillUnmount: this._onRowWillUnmount,\n      onColumnResized: this._onColumnResized,\n      onColumnAutoResized: this._onColumnAutoResized,\n      onToggleCollapse: this._onToggleCollapse,\n      onActiveRowChanged: this._onActiveRowChanged,\n      onBlur: this._onBlur,\n      onRenderDefaultRow: this._onRenderRow\n    }));\n  };\n  DetailsListBase.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n    this._forceListUpdates();\n  };\n  DetailsListBase.prototype._getGroupNestingDepth = function () {\n    var groups = this.props.groups;\n    var level = 0;\n    var groupsInLevel = groups;\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n    return level;\n  };\n  DetailsListBase.prototype._setFocusToRowIfPending = function (row) {\n    var itemIndex = row.props.itemIndex;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  };\n  DetailsListBase.prototype._setFocusToRow = function (row, forceIntoFirstElement) {\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout(function () {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  };\n  DetailsListBase.prototype._forceListUpdates = function () {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  };\n  DetailsListBase.prototype._notifyColumnsResized = function () {\n    this.state.adjustedColumns.forEach(function (column) {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  };\n  DetailsListBase.prototype._adjustColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    var viewport = this.props.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    return __assign(__assign({}, previousState), {\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth\n    });\n  };\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  DetailsListBase.prototype._getAdjustedColumns = function (newProps, previousState, forceUpdate, resizingColumnIndex) {\n    var _this = this;\n    var newItems = newProps.items,\n      layoutMode = newProps.layoutMode,\n      selectionMode = newProps.selectionMode,\n      viewport = newProps.viewport;\n    var viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    var newColumns = newProps.columns;\n    var columns = this.props ? this.props.columns : [];\n    var lastWidth = previousState ? previousState.lastWidth : -1;\n    var lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n    if (!forceUpdate && lastWidth === viewportWidth && lastSelectionMode === selectionMode && (!columns || newColumns === columns)) {\n      return newColumns || [];\n    }\n    newColumns = newColumns || buildColumns(newItems, true);\n    var adjustedColumns;\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(function (column) {\n        _this._rememberCalculatedWidth(column, column.calculatedWidth);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n      adjustedColumns.forEach(function (column) {\n        _this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n    return adjustedColumns;\n  };\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  DetailsListBase.prototype._getFixedColumns = function (newColumns, viewportWidth, props) {\n    var _this = this;\n    var _a = this.props,\n      _b = _a.selectionMode,\n      selectionMode = _b === void 0 ? this._selection.mode : _b,\n      checkboxVisibility = _a.checkboxVisibility,\n      flexMargin = _a.flexMargin,\n      skipViewportMeasures = _a.skipViewportMeasures;\n    var remainingWidth = viewportWidth - (flexMargin || 0);\n    var sumProportionalWidth = 0;\n    newColumns.forEach(function (col) {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    var groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n    var widthFraction = remainingWidth / sumProportionalWidth;\n    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n    if (!skipViewportMeasures) {\n      newColumns.forEach(function (column) {\n        var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]);\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          var fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          var shrinkWidth = fullWidth - newColumn.maxWidth;\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= shrinkWidth / (fullWidth - newColumn.minWidth) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n    return newColumns.map(function (column) {\n      var newColumn = __assign(__assign({}, column), _this._columnOverrides[column.key]);\n      // Delay computation until viewport width is available.\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n      return newColumn;\n    });\n  };\n  /** Builds a set of columns to fix within the viewport width. */\n  DetailsListBase.prototype._getJustifiedColumns = function (newColumns, viewportWidth, props) {\n    var _this = this;\n    var _a = props.selectionMode,\n      selectionMode = _a === void 0 ? this._selection.mode : _a,\n      checkboxVisibility = props.checkboxVisibility,\n      skipViewportMeasures = props.skipViewportMeasures;\n    var rowCheckWidth = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    var groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    var totalWidth = 0; // offset because we have one less inner padding.\n    var minimumWidth = 0;\n    var availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    var adjustedColumns = newColumns.map(function (column, i) {\n      var baseColumn = __assign(__assign({}, column), {\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH\n      });\n      var newColumn = __assign(__assign({}, baseColumn), _this._columnOverrides[column.key]);\n      // eslint-disable-next-line deprecation/deprecation\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n      totalWidth += getPaddedWidth(newColumn, props);\n      return newColumn;\n    });\n    if (skipViewportMeasures) {\n      return adjustedColumns;\n    }\n    var lastIndex = adjustedColumns.length - 1;\n    // Shrink or remove collapsable columns.\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      var column = adjustedColumns[lastIndex];\n      var minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      var overflowWidth = totalWidth - availableWidth;\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        var originalWidth = column.calculatedWidth;\n        if (minimumWidth < availableWidth) {\n          // Only adjust in cases where all the columns fit within the viewport\n          column.calculatedWidth = Math.max(column.calculatedWidth - overflowWidth, minWidth);\n        }\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (var i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      var column = adjustedColumns[i];\n      var isLast = i === adjustedColumns.length - 1;\n      var overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n      var spaceLeft = availableWidth - totalWidth;\n      var increment = void 0;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        var maxWidth = column.maxWidth;\n        var minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n      column.calculatedWidth = column.calculatedWidth + increment;\n      totalWidth += increment;\n    }\n    return adjustedColumns;\n  };\n  DetailsListBase.prototype._rememberCalculatedWidth = function (column, newCalculatedWidth) {\n    var overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  };\n  DetailsListBase.prototype._getColumnOverride = function (key) {\n    return this._columnOverrides[key] = this._columnOverrides[key] || {};\n  };\n  DetailsListBase.prototype._getItemKey = function (item, itemIndex) {\n    var getKey = this.props.getKey;\n    var itemKey = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n    return itemKey;\n  };\n  DetailsListBase.defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true\n  };\n  DetailsListBase = __decorate([withViewport], DetailsListBase);\n  return DetailsListBase;\n}(React.Component);\nexport { DetailsListBase };\nexport function buildColumns(items, canResizeColumns, onColumnClick, sortedColumnKey, isSortedDescending, groupedColumnKey, isMultiline, columnActionsMode) {\n  var columns = [];\n  if (items && items.length) {\n    var firstItem = items[0];\n    for (var propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: columnActionsMode !== null && columnActionsMode !== void 0 ? columnActionsMode : ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName\n        });\n      }\n    }\n  }\n  return columns;\n}\nfunction getPaddedWidth(column, props, paddingOnly) {\n  var _a = props.cellStyleProps,\n    cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n  return (paddingOnly ? 0 : column.calculatedWidth) + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n}\nfunction getGroupNestingDepth(groups) {\n  var level = 0;\n  var groupsInLevel = groups;\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n  return level;\n}\nfunction useGroupedDetailsListIndexMap(groups) {\n  return React.useMemo(function () {\n    var indexMap = {};\n    if (groups) {\n      var rowCount = 1;\n      var numGroupHeaders = 1;\n      for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {\n        var group = groups_1[_i];\n        var key = group.key;\n        indexMap[key] = {\n          numOfGroupHeadersBeforeItem: numGroupHeaders,\n          totalRowCount: rowCount\n        };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n    return indexMap;\n  }, [groups]);\n}","map":{"version":3,"names":["React","initializeComponentRef","FocusRects","Async","KeyCodes","elementContains","getRTLSafeKeyCode","classNamesFunction","css","memoizeFunction","warnMutuallyExclusive","CheckboxVisibility","ColumnActionsMode","ConstrainMode","DetailsListLayoutMode","ColumnDragEndLocation","DetailsHeader","SelectAllVisibility","DetailsRow","FocusZone","FocusZoneDirection","Selection","SelectionMode","SelectionZone","DragDropHelper","GroupedList","List","withViewport","GetGroupCount","DEFAULT_CELL_STYLE_PROPS","CHECK_CELL_WIDTH","CHECKBOX_WIDTH","SPACER_WIDTH","GROUP_EXPAND_WIDTH","composeComponentAs","composeRenderFunction","getId","useConst","getClassNames","COMPONENT_NAME","MIN_COLUMN_WIDTH","DEFAULT_RENDERED_WINDOWS_AHEAD","DEFAULT_RENDERED_WINDOWS_BEHIND","rowFocusZoneAddTabIndexProps","tabIndex","rowFocusZoneNoTabIndexProps","DetailsListInner","props","selection","ariaLabelForListHeader","ariaLabelForSelectAllCheckbox","ariaLabelForSelectionColumn","className","checkboxVisibility","compact","constrainMode","dragDropEvents","groups","groupProps","indentWidth","items","isPlaceholderData","isHeaderVisible","layoutMode","onItemInvoked","onItemContextMenu","onColumnHeaderClick","onColumnHeaderContextMenu","_a","selectionMode","mode","selectionPreservedOnEmptyClick","selectionZoneProps","ariaLabel","ariaLabelForGrid","rowElementEventMap","_b","shouldApplyApplicationRole","getKey","listProps","usePageCache","onShouldVirtualize","viewport","minimumPixelsForDrag","getGroupHeight","styles","theme","_c","cellStyleProps","onRenderCheckbox","useFastIcons","dragDropHelper","adjustedColumns","isCollapsed","isSizing","isSomeGroupExpanded","version","rootRef","listRef","focusZoneRef","columnReorderOptions","groupedListRef","headerRef","onGroupExpandStateChanged","onColumnIsSizingChanged","onRowDidMount","onRowWillUnmount","disableSelectionZone","_d","isSelectedOnFocus","onColumnResized","onColumnAutoResized","onToggleCollapse","onActiveRowChanged","onBlur","eventsToRegister","onRenderMissingItem","onRenderItemColumn","onRenderField","getCellValueKey","getRowAriaLabel","getRowAriaDescribedBy","checkButtonAriaLabel","checkButtonGroupAriaLabel","checkboxCellClassName","useReducedRowRenderer","enableUpdateAnimations","enterModalSelectionOnTouch","onRenderDefaultRow","selectionZoneRef","focusZoneProps","defaultRole","role","rowId","groupNestingDepth","getGroupNestingDepth","groupedDetailsListIndexMap","useGroupedDetailsListIndexMap","additionalListProps","useMemo","__assign","renderedWindowsAhead","renderedWindowsBehind","selectAllVisibility","none","single","hidden","multiple","isCollapsedGroupSelectVisible","headerProps","undefined","isSelectAllVisible","visible","defaultOnRenderDetailsHeader","useCallback","detailsHeaderProps","createElement","defaultOnRenderDetailsFooter","propsOnRenderDetailsHeader","onRenderDetailsHeader","propsOnRenderDetailsFooter","onRenderDetailsFooter","detailsFooterProps","columns","columnReorderOnDragEnd","onDragEnd","onColumnDragEnd","event","dropLocation","finalDropLocation","outside","header","current","clientRect","getBoundingClientRect","clientX","left","right","clientY","top","bottom","surface","columnReorderProps","rowCount","length","colCount","classNames","isFixed","fixedColumns","isHorizontalConstrained","horizontalConstrained","onRenderDetailsGroupFooter","onRenderFooter","finalOnRenderDetailsGroupFooter","groupFooterProps","defaultRender","onRenderDetailsGroupHeader","onRenderHeader","finalOnRenderDetailsGroupHeader","groupHeaderProps","groupIndex","groupKey","key","totalRowCount","ariaColSpan","ariaLevel","ariaPosInSet","ariaSetSize","ariaRowCount","ariaRowIndex","finalGroupProps","selectAllButtonProps","sumColumnWidths","totalWidth","forEach","column","calculatedWidth","minWidth","collapseAllVisibility","rowWidth","onRenderCell","nestingDepth","item","index","group","finalOnRenderRow","onRenderRow","numOfGroupHeadersBeforeItem","rowRole","rowFocusZoneProps","rowProps","itemIndex","flatIndexOffset","id","concat","onDidMount","onWillUnmount","onRenderDetailsCheckbox","isGridRow","onRenderListCell","isRightArrow","which","focusZoneInnerProps","componentRef","focusZone","direction","vertical","shouldEnterInnerZone","onActiveElementChanged","shouldRaiseClicksOnEnter","FinalGroupedList","groupedListAs","list","ref","onHeaderKeyDown","ev","down","focus","getSelectedIndices","setIndexSelected","preventDefault","stopPropagation","onContentKeyDown","up","altKey","root","onKeyDown","headerWrapper","onColumnClick","onColumnContextMenu","isAllCollapsed","onToggleCollapseAll","contentWrapper","selectionClearedOnEscapePress","toggleWithoutModifierPressed","enterModalOnTouch","DetailsListBase","_super","__extends","_this","call","_root","createRef","_header","_groupedList","_list","_focusZone","_selectionZone","_onRenderRow","_getDerivedStateFromProps","nextProps","previousState","setKey","_selection","isAllGroupsCollapsed","newViewportWidth","width","oldViewportWidth","shouldResetSelection","shouldForceUpdates","nextState","_initialFocusedIndex","initialFocusedIndex","focusedItemIndex","setItems","_adjustColumns","_dragDropHelper","dispose","_onGroupExpandStateChanged","setState","_onColumnIsSizingChanged","_onRowDidMount","row","itemKey","_getItemKey","_activeRows","_setFocusToRowIfPending","_onRowWillUnmount","_onToggleCollapse","collapsed","toggleCollapseAll","_onColumnResized","resizingColumn","newWidth","resizingColumnIndex","newCalculatedWidth","Math","max","onColumnResize","_rememberCalculatedWidth","state","_onColumnAutoResized","columnIndex","count","totalCount","Object","keys","hasOwnProperty","currentRow","measureCell","_onActiveRowChanged","el","onActiveItemChanged","getAttribute","Number","_onBlur","_async","_columnOverrides","lastWidth","_getAdjustedColumns","getDerivedStateFromProps","onSelectionChanged","prototype","scrollToIndex","measureItem","scrollToMode","focusIndex","forceIntoFirstElement","_setFocusToRow","getStartItemIndexInView","updateColumn","options","NO_COLUMNS","newColumnIndex","findIndex","col","isCheckboxColumnHidden","showCheckbox","draggedIndex","targetIndex","frozenColumnCountFromStart","frozenColumnCountFromEnd","isValidTargetIndex","onColumnDrop","dragDropDetails","handleColumnReorder","componentWillUnmount","componentDidUpdate","prevProps","prevState","_notifyColumnsResized","document","activeElement","onDidUpdate","render","forceUpdate","_forceListUpdates","_getGroupNestingDepth","level","groupsInLevel","children","ignoreNextFocus","setTimeout","currentWidth","newProps","viewportWidth","newItems","newColumns","lastSelectionMode","buildColumns","_getFixedColumns","_getJustifiedColumns","_getColumnOverride","flexMargin","skipViewportMeasures","remainingWidth","sumProportionalWidth","flexGrow","maxWidth","getPaddedWidth","rowCheckWidth","groupExpandWidth","widthFraction","newColumn","fullWidth","shrinkWidth","map","min","MAX_VALUE","minimumWidth","availableWidth","i","baseColumn","isCollapsible","isCollapsable","lastIndex","overflowWidth","originalWidth","splice","isLast","overrides","spaceLeft","increment","defaultProps","justified","onHover","__decorate","Component","canResizeColumns","sortedColumnKey","isSortedDescending","groupedColumnKey","isMultiline","columnActionsMode","firstItem","propName","push","name","fieldName","isSorted","isRowHeader","clickable","isResizable","isGrouped","paddingOnly","cellLeftPadding","cellRightPadding","isPadded","cellExtraRightPadding","indexMap","numGroupHeaders","_i","groups_1"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsList.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  classNamesFunction,\n  css,\n  memoizeFunction,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  ColumnDragEndLocation,\n  IColumnDragDropDetails,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport { SelectAllVisibility } from '../DetailsList/DetailsHeader.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Selection, SelectionMode, SelectionZone } from '../../Selection';\n\nimport { DragDropHelper } from '../../DragDrop';\nimport { GroupedList } from '../../GroupedList';\nimport { List, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeComponentAs, composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nimport type { IRenderFunction } from '../../Utilities';\nimport type {\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n} from '../DetailsList/DetailsList.types';\nimport type {\n  IDetailsHeader,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport type { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport type { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport type { IFocusZone, IFocusZoneProps } from '../../FocusZone';\nimport type { IObjectWithKey, ISelection } from '../../Selection';\nimport type { IGroupedList, IGroupDividerProps, IGroupRenderProps, IGroup } from '../../GroupedList';\nimport type { IListProps } from '../../List';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\nconst COMPONENT_NAME = 'DetailsList';\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\nconst rowFocusZoneAddTabIndexProps = { tabIndex: 0 };\nconst rowFocusZoneNoTabIndexProps = {};\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    // eslint-disable-next-line deprecation/deprecation\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    // eslint-disable-next-line deprecation/deprecation\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    isSelectedOnFocus = true,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    onRenderField,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkButtonGroupAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n    focusZoneProps,\n  } = props;\n\n  const defaultRole = 'grid';\n  const role = props.role ? props.role : defaultRole;\n\n  const rowId = getId('row');\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n  const groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount =\n    (isHeaderVisible ? 1 : 0) +\n    (props.onRenderDetailsFooter ? 1 : 0) +\n    GetGroupCount(groups) +\n    (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaLevel: undefined,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: undefined,\n              ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaLevel: undefined,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: undefined,\n            ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n    groupedDetailsListIndexMap,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: {\n        ...groupProps?.headerProps,\n        selectAllButtonProps: {\n          'aria-label': checkButtonGroupAriaLabel,\n          ...groupProps?.headerProps?.selectAllButtonProps,\n        },\n      },\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number, group?: IGroup): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const groupKey: string | undefined = group ? group.key : undefined;\n      const numOfGroupHeadersBeforeItem: number =\n        groupKey && groupedDetailsListIndexMap[groupKey]\n          ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem\n          : 0;\n\n      const rowRole = role === defaultRole ? undefined : 'presentation';\n\n      // add tabindex=\"0\" to first row if no header exists, to ensure the focuszone is in the tab order\n      const rowFocusZoneProps =\n        isHeaderVisible || index > 0 ? rowFocusZoneNoTabIndexProps : rowFocusZoneAddTabIndexProps;\n\n      const rowProps: IDetailsRowProps = {\n        item,\n        itemIndex: index,\n        flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        id: `${rowId}-${index}`,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        onRenderField,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n        role: rowRole,\n        isGridRow: true,\n        focusZoneProps: rowFocusZoneProps,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      rowId,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      onRenderField,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      isHeaderVisible,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n      role,\n      groupedDetailsListIndexMap,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      // eslint-disable-next-line deprecation/deprecation\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneInnerProps: IFocusZoneProps = {\n    ...focusZoneProps,\n    componentRef: focusZoneProps && focusZoneProps.componentRef ? focusZoneProps.componentRef : focusZoneRef,\n    className:\n      focusZoneProps && focusZoneProps.className\n        ? css(classNames.focusZone, focusZoneProps.className)\n        : classNames.focusZone,\n    direction: focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.vertical,\n    shouldEnterInnerZone:\n      focusZoneProps && focusZoneProps.shouldEnterInnerZone ? focusZoneProps.shouldEnterInnerZone : isRightArrow,\n    onActiveElementChanged:\n      focusZoneProps && focusZoneProps.onActiveElementChanged\n        ? focusZoneProps.onActiveElementChanged\n        : onActiveRowChanged,\n    shouldRaiseClicksOnEnter: false,\n    onBlur: focusZoneProps && focusZoneProps.onBlur ? focusZoneProps.onBlur : onBlur,\n  };\n\n  const FinalGroupedList =\n    groups && groupProps?.groupedListAs ? composeComponentAs(groupProps.groupedListAs, GroupedList) : GroupedList;\n\n  const list = groups ? (\n    <FinalGroupedList\n      focusZoneProps={focusZoneInnerProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneInnerProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (isSelectedOnFocus && selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef, isSelectedOnFocus],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role={role}\n        // ariaLabel is a legacy prop that used to be applied on the root node, which has poor AT support\n        // it is now treated as a fallback to ariaLabelForGrid for legacy support\n        aria-label={ariaLabelForGrid || ariaLabel}\n        aria-rowcount={isPlaceholderData ? 0 : rowCount}\n        aria-colcount={colCount}\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode,\n                layoutMode: layoutMode!,\n                selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized,\n                onColumnIsSizingChanged,\n                onColumnAutoResized,\n                groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn,\n                selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport,\n                columnReorderProps,\n                minimumPixelsForDrag,\n                cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              isSelectedOnFocus={isSelectedOnFocus}\n              selectionClearedOnEscapePress={isSelectedOnFocus}\n              toggleWithoutModifierPressed={!isSelectedOnFocus}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    warnMutuallyExclusive(COMPONENT_NAME, props, {\n      selection: 'getKey',\n    });\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public updateColumn(column: IColumn, options: { width?: number; newColumnIndex?: number }) {\n    const NO_COLUMNS: IColumn[] = [];\n\n    const { columns = NO_COLUMNS, selectionMode, checkboxVisibility, columnReorderOptions } = this.props;\n    const { width, newColumnIndex } = options;\n    const index = columns.findIndex(col => col.key === column.key);\n\n    if (width) {\n      this._onColumnResized(column, width, index!);\n    }\n\n    if (newColumnIndex !== undefined && columnReorderOptions) {\n      const isCheckboxColumnHidden =\n        selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n\n      const showCheckbox = checkboxVisibility !== CheckboxVisibility.hidden;\n      const columnIndex = (showCheckbox ? 2 : 1) + index!;\n\n      const draggedIndex = isCheckboxColumnHidden ? columnIndex - 1 : columnIndex - 2;\n      const targetIndex = isCheckboxColumnHidden ? newColumnIndex - 1 : newColumnIndex - 2;\n\n      const frozenColumnCountFromStart = columnReorderOptions.frozenColumnCountFromStart ?? 0;\n      const frozenColumnCountFromEnd = columnReorderOptions.frozenColumnCountFromEnd ?? 0;\n      const isValidTargetIndex =\n        targetIndex >= frozenColumnCountFromStart && targetIndex < columns.length - frozenColumnCountFromEnd;\n\n      if (isValidTargetIndex) {\n        if (columnReorderOptions.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex,\n            targetIndex,\n          };\n          columnReorderOptions.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderOptions.handleColumnReorder) {\n          columnReorderOptions.handleColumnReorder(draggedIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, flexMargin, skipViewportMeasures } = this.props;\n    let remainingWidth = viewportWidth - (flexMargin || 0);\n    let sumProportionalWidth = 0;\n\n    newColumns.forEach((col: IColumn) => {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n\n    let widthFraction = remainingWidth / sumProportionalWidth;\n\n    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n    if (!skipViewportMeasures) {\n      newColumns.forEach((column: IColumn) => {\n        const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          const fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          const shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      // Delay computation until viewport width is available.\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, skipViewportMeasures } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    let minimumWidth = 0;\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const baseColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n      };\n\n      const newColumn = {\n        ...baseColumn,\n        ...this._columnOverrides[column.key],\n      };\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n\n      return newColumn;\n    });\n\n    if (skipViewportMeasures) {\n      return adjustedColumns;\n    }\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        if (minimumWidth < availableWidth) {\n          // Only adjust in cases where all the columns fit within the viewport\n          column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        }\n        totalWidth -= originalWidth - column.calculatedWidth!;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n  columnActionsMode?: ColumnActionsMode,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: columnActionsMode ?? ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, props: IDetailsListProps, paddingOnly?: true): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    (paddingOnly ? 0 : column.calculatedWidth!) +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n\ninterface IGroupedDetailsListIndexMap {\n  [key: string]: { numOfGroupHeadersBeforeItem: number; totalRowCount: number };\n}\n\nfunction useGroupedDetailsListIndexMap(groups: IDetailsListProps['groups']) {\n  return React.useMemo((): IGroupedDetailsListIndexMap => {\n    const indexMap: IGroupedDetailsListIndexMap = {};\n    if (groups) {\n      let rowCount = 1;\n      let numGroupHeaders = 1;\n      for (const group of groups) {\n        const { key } = group;\n        indexMap[key] = { numOfGroupHeadersBeforeItem: numGroupHeaders, totalRowCount: rowCount };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n    return indexMap;\n  }, [groups]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}