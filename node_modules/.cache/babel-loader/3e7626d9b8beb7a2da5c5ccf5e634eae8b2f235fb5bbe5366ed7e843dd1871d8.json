{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Builds a map of ID to IKeytipProps\n *\n * @param config - IKeytipConfig object\n * @returns Config map\n */\nexport function buildKeytipConfigMap(config) {\n  var configMap = {};\n  for (var _i = 0, _a = config.keytips; _i < _a.length; _i++) {\n    var keytip = _a[_i];\n    constructKeytip(configMap, [], keytip);\n  }\n  return configMap;\n}\n/**\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\n *\n * @param configMap - IKeytipConfigMap to store the keytip in\n * @param parentSequence - string of the parent keytip\n * @param keytip - IKeytipConfigItem data\n */\nexport function constructKeytip(configMap, parentSequence, keytip) {\n  // Compute full key sequence\n  var sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();\n  var keytipSequence = parentSequence.concat(sequence);\n  // Save props in configMap\n  var keytipProps = __assign(__assign({}, keytip.optionalProps), {\n    keySequences: keytipSequence,\n    content: keytip.content\n  });\n  configMap[keytip.id] = keytipProps;\n  if (keytip.children) {\n    for (var _i = 0, _a = keytip.children; _i < _a.length; _i++) {\n      var child = _a[_i];\n      // Create keytips for all children\n      constructKeytip(configMap, keytipSequence, child);\n    }\n  }\n}","map":{"version":3,"names":["buildKeytipConfigMap","config","configMap","_i","_a","keytips","length","keytip","constructKeytip","parentSequence","sequence","content","toLocaleLowerCase","keytipSequence","concat","keytipProps","__assign","optionalProps","keySequences","id","children","child"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/keytips/KeytipConfig.ts"],"sourcesContent":["import type { IKeytipProps } from '../../Keytip';\n\nexport interface IKeytipConfig {\n  keytips: IKeytipConfigItem[];\n}\n\nexport interface IKeytipConfigItem {\n  /**\n   * Key Sequence for this keytip only\n   * If sequence is not defined it will be derived from the content string\n   */\n  sequence?: string;\n\n  /**\n   * Content for the keytip\n   */\n  content: string;\n\n  /**\n   * Identifier for the keytip, to be used to access in the configMap\n   */\n  id: string;\n\n  /**\n   * Optional props in IKeytipProps\n   */\n  optionalProps?: Partial<IKeytipProps>;\n\n  /**\n   * Children keytips of this keytip\n   */\n  children?: IKeytipConfigItem[];\n}\n\nexport interface IKeytipConfigMap {\n  [id: string]: IKeytipProps;\n}\n\n/**\n * Builds a map of ID to IKeytipProps\n *\n * @param config - IKeytipConfig object\n * @returns Config map\n */\nexport function buildKeytipConfigMap(config: IKeytipConfig): IKeytipConfigMap {\n  const configMap: IKeytipConfigMap = {};\n\n  for (const keytip of config.keytips) {\n    constructKeytip(configMap, [], keytip);\n  }\n\n  return configMap;\n}\n\n/**\n * Constructs a keytip from an IKeytipConfigItem and puts it in the configMap\n *\n * @param configMap - IKeytipConfigMap to store the keytip in\n * @param parentSequence - string of the parent keytip\n * @param keytip - IKeytipConfigItem data\n */\nexport function constructKeytip(\n  configMap: IKeytipConfigMap,\n  parentSequence: string[],\n  keytip: IKeytipConfigItem,\n): void {\n  // Compute full key sequence\n  const sequence = keytip.sequence ? keytip.sequence : keytip.content.toLocaleLowerCase();\n  const keytipSequence = parentSequence.concat(sequence);\n\n  // Save props in configMap\n  const keytipProps: IKeytipProps = { ...keytip.optionalProps, keySequences: keytipSequence, content: keytip.content };\n  configMap[keytip.id] = keytipProps;\n\n  if (keytip.children) {\n    for (const child of keytip.children) {\n      // Create keytips for all children\n      constructKeytip(configMap, keytipSequence, child);\n    }\n  }\n}\n"],"mappings":";AAsCA;;;;;;AAMA,OAAM,SAAUA,oBAAoBA,CAACC,MAAqB;EACxD,IAAMC,SAAS,GAAqB,EAAE;EAEtC,KAAqB,IAAAC,EAAA,IAAc,EAAdC,EAAA,GAAAH,MAAM,CAACI,OAAO,EAAdF,EAAA,GAAAC,EAAA,CAAAE,MAAc,EAAdH,EAAA,EAAc,EAAE;IAAhC,IAAMI,MAAM,GAAAH,EAAA,CAAAD,EAAA;IACfK,eAAe,CAACN,SAAS,EAAE,EAAE,EAAEK,MAAM,CAAC;;EAGxC,OAAOL,SAAS;AAClB;AAEA;;;;;;;AAOA,OAAM,SAAUM,eAAeA,CAC7BN,SAA2B,EAC3BO,cAAwB,EACxBF,MAAyB;EAEzB;EACA,IAAMG,QAAQ,GAAGH,MAAM,CAACG,QAAQ,GAAGH,MAAM,CAACG,QAAQ,GAAGH,MAAM,CAACI,OAAO,CAACC,iBAAiB,EAAE;EACvF,IAAMC,cAAc,GAAGJ,cAAc,CAACK,MAAM,CAACJ,QAAQ,CAAC;EAEtD;EACA,IAAMK,WAAW,GAAAC,QAAA,CAAAA,QAAA,KAAsBT,MAAM,CAACU,aAAa;IAAEC,YAAY,EAAEL,cAAc;IAAEF,OAAO,EAAEJ,MAAM,CAACI;EAAO,EAAE;EACpHT,SAAS,CAACK,MAAM,CAACY,EAAE,CAAC,GAAGJ,WAAW;EAElC,IAAIR,MAAM,CAACa,QAAQ,EAAE;IACnB,KAAoB,IAAAjB,EAAA,IAAe,EAAfC,EAAA,GAAAG,MAAM,CAACa,QAAQ,EAAfjB,EAAA,GAAAC,EAAA,CAAAE,MAAe,EAAfH,EAAA,EAAe,EAAE;MAAhC,IAAMkB,KAAK,GAAAjB,EAAA,CAAAD,EAAA;MACd;MACAK,eAAe,CAACN,SAAS,EAAEW,cAAc,EAAEQ,KAAK,CAAC;;;AAGvD"},"metadata":{},"sourceType":"module","externalDependencies":[]}