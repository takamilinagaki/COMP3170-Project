{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, EventGroup, css, shallowCompare, getNativeProps, divProperties, composeComponentAs } from '../../Utilities';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { classNamesFunction } from '../../Utilities';\nimport { getId } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\nvar NO_COLUMNS = [];\nvar DetailsRowBase = /** @class */function (_super) {\n  __extends(DetailsRowBase, _super);\n  function DetailsRowBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    _this._cellMeasurer = React.createRef();\n    _this._focusZone = React.createRef();\n    _this._onSelectionChanged = function () {\n      var selectionState = getSelectionState(_this.props);\n      if (!shallowCompare(selectionState, _this.state.selectionState)) {\n        _this.setState({\n          selectionState: selectionState\n        });\n      }\n    };\n    /**\n     * update isDropping state based on the input value, which is used to change style during drag and drop\n     *\n     * when change to true, that means drag enter. we will add default dropping class name\n     * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n     *\n     * when change to false, that means drag leave. we will remove the dropping class name from root element.\n     *\n     * @param newValue - New isDropping state value\n     * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n     */\n    _this._updateDroppingState = function (newValue, event) {\n      var isDropping = _this.state.isDropping;\n      var _a = _this.props,\n        dragDropEvents = _a.dragDropEvents,\n        item = _a.item;\n      if (!newValue) {\n        if (dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(item, event);\n        }\n      } else if (dragDropEvents.onDragEnter) {\n        _this._droppingClassNames = dragDropEvents.onDragEnter(item, event);\n      }\n      if (isDropping !== newValue) {\n        _this.setState({\n          isDropping: newValue\n        });\n      }\n    };\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false\n    };\n    _this._droppingClassNames = '';\n    return _this;\n  }\n  DetailsRowBase.getDerivedStateFromProps = function (nextProps, previousState) {\n    return __assign(__assign({}, previousState), {\n      selectionState: getSelectionState(nextProps)\n    });\n  };\n  DetailsRowBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n      dragDropHelper = _a.dragDropHelper,\n      selection = _a.selection,\n      item = _a.item,\n      onDidMount = _a.onDidMount;\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());\n    }\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  };\n  DetailsRowBase.prototype.componentDidUpdate = function (previousProps) {\n    var state = this.state;\n    var _a = this.props,\n      item = _a.item,\n      onDidMount = _a.onDidMount;\n    var columnMeasureInfo = state.columnMeasureInfo;\n    if (this.props.itemIndex !== previousProps.itemIndex || this.props.item !== previousProps.item || this.props.dragDropHelper !== previousProps.dragDropHelper) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getRowDragDropOptions());\n      }\n    }\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      var newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n      columnMeasureInfo.onMeasureDone(newWidth);\n      this.setState({\n        columnMeasureInfo: undefined\n      });\n    }\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  };\n  DetailsRowBase.prototype.componentWillUnmount = function () {\n    var _a = this.props,\n      item = _a.item,\n      onWillUnmount = _a.onWillUnmount;\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n    this._events.dispose();\n  };\n  DetailsRowBase.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    if (this.props.useReducedRowRenderer) {\n      var newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  };\n  DetailsRowBase.prototype.render = function () {\n    var _a;\n    var _b = this.props,\n      className = _b.className,\n      _c = _b.columns,\n      columns = _c === void 0 ? NO_COLUMNS : _c,\n      dragDropEvents = _b.dragDropEvents,\n      item = _b.item,\n      itemIndex = _b.itemIndex,\n      id = _b.id,\n      _d = _b.flatIndexOffset,\n      flatIndexOffset = _d === void 0 ? 2 : _d,\n      _e = _b.onRenderCheck,\n      onRenderCheck = _e === void 0 ? this._onRenderCheck : _e,\n      onRenderDetailsCheckbox = _b.onRenderDetailsCheckbox,\n      onRenderItemColumn = _b.onRenderItemColumn,\n      onRenderField = _b.onRenderField,\n      getCellValueKey = _b.getCellValueKey,\n      selectionMode = _b.selectionMode,\n      checkboxVisibility = _b.checkboxVisibility,\n      getRowAriaLabel = _b.getRowAriaLabel,\n      getRowAriaDescription = _b.getRowAriaDescription,\n      getRowAriaDescribedBy = _b.getRowAriaDescribedBy,\n      isGridRow = _b.isGridRow,\n      checkButtonAriaLabel = _b.checkButtonAriaLabel,\n      checkboxCellClassName = _b.checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs = _b.rowFieldsAs,\n      selection = _b.selection,\n      indentWidth = _b.indentWidth,\n      enableUpdateAnimations = _b.enableUpdateAnimations,\n      compact = _b.compact,\n      theme = _b.theme,\n      styles = _b.styles,\n      cellsByColumn = _b.cellsByColumn,\n      groupNestingDepth = _b.groupNestingDepth,\n      _f = _b.useFastIcons,\n      useFastIcons = _f === void 0 ? true : _f,\n      cellStyleProps = _b.cellStyleProps,\n      group = _b.group,\n      focusZoneProps = _b.focusZoneProps,\n      _g = _b.disabled,\n      disabled = _g === void 0 ? false : _g;\n    var _h = this.state,\n      columnMeasureInfo = _h.columnMeasureInfo,\n      isDropping = _h.isDropping;\n    var _j = this.state.selectionState,\n      _k = _j.isSelected,\n      isSelected = _k === void 0 ? false : _k,\n      _l = _j.isSelectionModal,\n      isSelectionModal = _l === void 0 ? false : _l;\n    var isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    var droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    var ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    var ariaRowDescription = getRowAriaDescription ? getRowAriaDescription(item) : undefined;\n    var ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    var canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;\n    var isContentUnselectable = selectionMode === SelectionMode.multiple;\n    var showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    var ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    var ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;\n    var ariaSetSize = group ? group.count : undefined;\n    var focusZoneDirection = focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.horizontal;\n    this._classNames = __assign(__assign({}, this._classNames), getClassNames(styles, {\n      theme: theme,\n      isSelected: isSelected,\n      canSelect: !isContentUnselectable,\n      anySelected: isSelectionModal,\n      checkboxCellClassName: checkboxCellClassName,\n      droppingClassName: droppingClassName,\n      className: className,\n      compact: compact,\n      enableUpdateAnimations: enableUpdateAnimations,\n      cellStyleProps: cellStyleProps,\n      disabled: disabled\n    }));\n    var rowClassNames = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields\n    };\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n    var RowFields = rowFieldsAs ? composeComponentAs(rowFieldsAs, DetailsRowFields) : DetailsRowFields;\n    var rowFields = React.createElement(RowFields, {\n      rowClassNames: this._rowClassNames,\n      rowHeaderId: \"\".concat(id, \"-header\"),\n      cellsByColumn: cellsByColumn,\n      columns: columns,\n      item: item,\n      itemIndex: itemIndex,\n      isSelected: isSelected,\n      columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0),\n      onRenderItemColumn: onRenderItemColumn,\n      onRenderField: onRenderField,\n      getCellValueKey: getCellValueKey,\n      enableUpdateAnimations: enableUpdateAnimations,\n      cellStyleProps: cellStyleProps\n    });\n    var defaultRole = 'row';\n    var role = this.props.role ? this.props.role : defaultRole;\n    this._ariaRowDescriptionId = getId('DetailsRow-description');\n    // When the user does not specify any column is a row-header in the columns props,\n    // The aria-labelledby of the checkbox does not specify {id}-header.\n    var hasRowHeader = columns.some(function (column) {\n      return !!column.isRowHeader;\n    });\n    var ariaLabelledby = \"\".concat(id, \"-checkbox\") + (hasRowHeader ? \" \".concat(id, \"-header\") : '');\n    // additional props for rows within a GroupedList\n    // these are needed for treegrid row semantics, but not grid row semantics\n    var groupedListRowProps = isGridRow ? {} : {\n      'aria-level': groupNestingDepth && groupNestingDepth + 1 || undefined,\n      'aria-posinset': ariaPositionInSet,\n      'aria-setsize': ariaSetSize\n    };\n    return React.createElement(FocusZone, __assign({\n      \"data-is-focusable\": true\n    }, getNativeProps(this.props, divProperties), typeof isDraggable === 'boolean' ? {\n      'data-is-draggable': isDraggable,\n      draggable: isDraggable\n    } : {}, focusZoneProps, groupedListRowProps, {\n      direction: focusZoneDirection,\n      elementRef: this._root,\n      componentRef: this._focusZone,\n      role: role,\n      \"aria-label\": ariaLabel,\n      \"aria-disabled\": disabled || undefined,\n      \"aria-describedby\": ariaRowDescription ? this._ariaRowDescriptionId : ariaDescribedBy,\n      className: this._classNames.root,\n      \"data-selection-index\": itemIndex,\n      \"data-selection-touch-invoke\": true,\n      \"data-selection-disabled\": (_a = this.props['data-selection-disabled']) !== null && _a !== void 0 ? _a : disabled || undefined,\n      \"data-item-index\": itemIndex,\n      \"aria-rowindex\": ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined,\n      \"data-automationid\": \"DetailsRow\",\n      \"aria-selected\": ariaSelected,\n      allowFocusRoot: true\n    }), ariaRowDescription ? React.createElement(\"span\", {\n      key: \"description\",\n      role: \"presentation\",\n      hidden: true,\n      id: this._ariaRowDescriptionId\n    }, ariaRowDescription) : null, showCheckbox && React.createElement(\"div\", {\n      role: \"gridcell\",\n      \"data-selection-toggle\": true,\n      className: this._classNames.checkCell\n    }, onRenderCheck({\n      id: id ? \"\".concat(id, \"-checkbox\") : undefined,\n      selected: isSelected,\n      selectionMode: selectionMode,\n      anySelected: isSelectionModal,\n      'aria-label': checkButtonAriaLabel,\n      'aria-labelledby': id ? ariaLabelledby : undefined,\n      canSelect: canSelect,\n      compact: compact,\n      className: this._classNames.check,\n      theme: theme,\n      isVisible: checkboxVisibility === CheckboxVisibility.always,\n      onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n      useFastIcons: useFastIcons\n    })), React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      role: \"gridcell\",\n      count: groupNestingDepth === 0 ? -1 : groupNestingDepth\n    }), item && rowFields, columnMeasureInfo && React.createElement(\"span\", {\n      role: \"presentation\",\n      className: css(this._classNames.cellMeasurer, this._classNames.cell),\n      ref: this._cellMeasurer\n    }, React.createElement(RowFields, {\n      rowClassNames: this._rowClassNames,\n      rowHeaderId: \"\".concat(id, \"-header\"),\n      columns: [columnMeasureInfo.column],\n      item: item,\n      itemIndex: itemIndex,\n      columnStartIndex: (showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length,\n      onRenderItemColumn: onRenderItemColumn,\n      getCellValueKey: getCellValueKey\n    })));\n  };\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  DetailsRowBase.prototype.measureCell = function (index, onMeasureDone) {\n    var _a = this.props.columns,\n      columns = _a === void 0 ? NO_COLUMNS : _a;\n    var column = __assign({}, columns[index]);\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n    delete column.calculatedWidth;\n    this.setState({\n      columnMeasureInfo: {\n        index: index,\n        column: column,\n        onMeasureDone: onMeasureDone\n      }\n    });\n  };\n  DetailsRowBase.prototype.focus = function (forceIntoFirstElement) {\n    var _a;\n    if (forceIntoFirstElement === void 0) {\n      forceIntoFirstElement = false;\n    }\n    return !!((_a = this._focusZone.current) === null || _a === void 0 ? void 0 : _a.focus(forceIntoFirstElement));\n  };\n  DetailsRowBase.prototype._onRenderCheck = function (props) {\n    return React.createElement(DetailsRowCheck, __assign({}, props));\n  };\n  DetailsRowBase.prototype._getRowDragDropOptions = function () {\n    var _a = this.props,\n      item = _a.item,\n      itemIndex = _a.itemIndex,\n      dragDropEvents = _a.dragDropEvents,\n      eventsToRegister = _a.eventsToRegister;\n    var options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: {\n        data: item,\n        index: itemIndex\n      },\n      canDrag: dragDropEvents.canDrag,\n      canDrop: dragDropEvents.canDrop,\n      onDragStart: dragDropEvents.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents.onDrop,\n      onDragEnd: dragDropEvents.onDragEnd,\n      onDragOver: dragDropEvents.onDragOver\n    };\n    return options;\n  };\n  return DetailsRowBase;\n}(React.Component);\nexport { DetailsRowBase };\nfunction getSelectionState(props) {\n  var _a;\n  var itemIndex = props.itemIndex,\n    selection = props.selection;\n  return {\n    isSelected: !!(selection === null || selection === void 0 ? void 0 : selection.isIndexSelected(itemIndex)),\n    isSelectionModal: !!((_a = selection === null || selection === void 0 ? void 0 : selection.isModal) === null || _a === void 0 ? void 0 : _a.call(selection))\n  };\n}","map":{"version":3,"names":["React","initializeComponentRef","EventGroup","css","shallowCompare","getNativeProps","divProperties","composeComponentAs","CheckboxVisibility","DetailsRowCheck","GroupSpacer","DetailsRowFields","FocusZone","FocusZoneDirection","SelectionMode","SELECTION_CHANGE","classNamesFunction","getId","getClassNames","DEFAULT_DROPPING_CSS_CLASS","NO_COLUMNS","DetailsRowBase","_super","__extends","props","_this","call","_root","createRef","_cellMeasurer","_focusZone","_onSelectionChanged","selectionState","getSelectionState","state","setState","_updateDroppingState","newValue","event","isDropping","_a","dragDropEvents","item","onDragLeave","onDragEnter","_droppingClassNames","_events","columnMeasureInfo","undefined","getDerivedStateFromProps","nextProps","previousState","__assign","prototype","componentDidMount","dragDropHelper","selection","onDidMount","current","_dragDropSubscription","subscribe","_getRowDragDropOptions","on","_onDidMountCalled","componentDidUpdate","previousProps","itemIndex","dispose","index","newWidth","getBoundingClientRect","width","onMeasureDone","componentWillUnmount","onWillUnmount","shouldComponentUpdate","nextState","useReducedRowRenderer","newSelectionState","isSelected","render","_b","className","_c","columns","id","_d","flatIndexOffset","_e","onRenderCheck","_onRenderCheck","onRenderDetailsCheckbox","onRenderItemColumn","onRenderField","getCellValueKey","selectionMode","checkboxVisibility","getRowAriaLabel","getRowAriaDescription","getRowAriaDescribedBy","isGridRow","checkButtonAriaLabel","checkboxCellClassName","rowFieldsAs","indentWidth","enableUpdateAnimations","compact","theme","styles","cellsByColumn","groupNestingDepth","_f","useFastIcons","cellStyleProps","group","focusZoneProps","_g","disabled","_h","_j","_k","_l","isSelectionModal","isDraggable","canDrag","droppingClassName","ariaLabel","ariaRowDescription","ariaDescribedBy","canSelect","canSelectItem","isContentUnselectable","multiple","showCheckbox","none","hidden","ariaSelected","ariaPositionInSet","startIndex","ariaSetSize","count","focusZoneDirection","direction","horizontal","_classNames","anySelected","rowClassNames","isMultiline","isRowHeader","cell","cellAnimation","cellPadded","cellUnpadded","fields","_rowClassNames","RowFields","rowFields","createElement","rowHeaderId","concat","columnStartIndex","defaultRole","role","_ariaRowDescriptionId","hasRowHeader","some","column","ariaLabelledby","groupedListRowProps","draggable","elementRef","componentRef","root","allowFocusRoot","key","checkCell","selected","check","isVisible","always","cellMeasurer","ref","length","measureCell","minWidth","maxWidth","calculatedWidth","focus","forceIntoFirstElement","eventsToRegister","options","eventMap","selectionIndex","context","data","canDrop","onDragStart","updateDropState","onDrop","onDragEnd","onDragOver","Component","isIndexSelected","isModal"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRow.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n  composeComponentAs,\n} from '../../Utilities';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { classNamesFunction } from '../../Utilities';\nimport type { IDisposable } from '../../Utilities';\nimport type { IColumn } from './DetailsList.types';\nimport type { IFocusZone } from '../../FocusZone';\nimport type { IDragDropOptions } from '../../DragDrop';\nimport type { IDetailsRowBaseProps, IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport type { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport { getId } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLElement>();\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription?: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n  private _ariaRowDescriptionId: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsRowBaseProps,\n    previousState: IDetailsRowState,\n  ): IDetailsRowState {\n    return {\n      ...previousState,\n      selectionState: getSelectionState(nextProps),\n    };\n  }\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n  public componentDidMount(): void {\n    const { dragDropHelper, selection, item, onDidMount } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      id,\n      flatIndexOffset = 2,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      onRenderField,\n      getCellValueKey,\n      selectionMode,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescription,\n      getRowAriaDescribedBy,\n      isGridRow,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n      group,\n      focusZoneProps,\n      disabled = false,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaRowDescription = getRowAriaDescription ? getRowAriaDescription(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex) && !disabled;\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    const ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;\n    const ariaSetSize = group ? group.count : undefined;\n    const focusZoneDirection = focusZoneProps ? focusZoneProps.direction : FocusZoneDirection.horizontal;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n        disabled,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const RowFields = rowFieldsAs ? composeComponentAs(rowFieldsAs, DetailsRowFields) : DetailsRowFields;\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        rowHeaderId={`${id}-header`}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        isSelected={isSelected}\n        columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0)}\n        onRenderItemColumn={onRenderItemColumn}\n        onRenderField={onRenderField}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    const defaultRole = 'row';\n    const role = this.props.role ? this.props.role : defaultRole;\n    this._ariaRowDescriptionId = getId('DetailsRow-description');\n\n    // When the user does not specify any column is a row-header in the columns props,\n    // The aria-labelledby of the checkbox does not specify {id}-header.\n    const hasRowHeader = columns.some(column => {\n      return !!column.isRowHeader;\n    });\n    const ariaLabelledby = `${id}-checkbox` + (hasRowHeader ? ` ${id}-header` : '');\n\n    // additional props for rows within a GroupedList\n    // these are needed for treegrid row semantics, but not grid row semantics\n    const groupedListRowProps = isGridRow\n      ? {}\n      : {\n          'aria-level': (groupNestingDepth && groupNestingDepth + 1) || undefined,\n          'aria-posinset': ariaPositionInSet,\n          'aria-setsize': ariaSetSize,\n        };\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        {...focusZoneProps}\n        {...groupedListRowProps}\n        direction={focusZoneDirection}\n        elementRef={this._root}\n        componentRef={this._focusZone}\n        role={role}\n        aria-label={ariaLabel}\n        aria-disabled={disabled || undefined}\n        aria-describedby={ariaRowDescription ? this._ariaRowDescriptionId : ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-selection-touch-invoke={true}\n        data-selection-disabled={(this.props as any)['data-selection-disabled'] ?? (disabled || undefined)}\n        data-item-index={itemIndex}\n        aria-rowindex={ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined}\n        data-automationid=\"DetailsRow\"\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {ariaRowDescription ? (\n          <span key=\"description\" role=\"presentation\" hidden={true} id={this._ariaRowDescriptionId}>\n            {ariaRowDescription}\n          </span>\n        ) : null}\n        {showCheckbox && (\n          <div role=\"gridcell\" data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              id: id ? `${id}-checkbox` : undefined,\n              selected: isSelected,\n              selectionMode,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              'aria-labelledby': id ? ariaLabelledby : undefined,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          role=\"gridcell\"\n          count={groupNestingDepth! === 0 ? -1 : groupNestingDepth!}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              rowHeaderId={`${id}-header`}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current?.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({ selectionState });\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n\nfunction getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n  const { itemIndex, selection } = props;\n\n  return {\n    isSelected: !!selection?.isIndexSelected(itemIndex),\n    isSelectionModal: !!selection?.isModal?.(),\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}