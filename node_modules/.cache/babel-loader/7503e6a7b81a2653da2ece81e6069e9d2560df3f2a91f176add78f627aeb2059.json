{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { format } from '@fluentui/utilities';\nimport { getWeekNumbersInMonth } from '@fluentui/date-time-utilities';\nimport { CalendarGridDayCell } from './CalendarGridDayCell';\nexport var CalendarGridRow = function (props) {\n  var classNames = props.classNames,\n    week = props.week,\n    weeks = props.weeks,\n    weekIndex = props.weekIndex,\n    rowClassName = props.rowClassName,\n    ariaRole = props.ariaRole,\n    showWeekNumbers = props.showWeekNumbers,\n    firstDayOfWeek = props.firstDayOfWeek,\n    firstWeekOfYear = props.firstWeekOfYear,\n    navigatedDate = props.navigatedDate,\n    strings = props.strings;\n  var weekNumbers = showWeekNumbers ? getWeekNumbersInMonth(weeks.length, firstDayOfWeek, firstWeekOfYear, navigatedDate) : null;\n  var titleString = weekNumbers ? strings.weekNumberFormatString && format(strings.weekNumberFormatString, weekNumbers[weekIndex]) : '';\n  return React.createElement(\"tr\", {\n    role: ariaRole,\n    className: rowClassName,\n    key: weekIndex + '_' + week[0].key\n  }, showWeekNumbers && weekNumbers && React.createElement(\"th\", {\n    className: classNames.weekNumberCell,\n    key: weekIndex,\n    title: titleString,\n    \"aria-label\": titleString,\n    scope: \"row\"\n  }, React.createElement(\"span\", null, weekNumbers[weekIndex])), week.map(function (day, dayIndex) {\n    return React.createElement(CalendarGridDayCell, __assign({}, props, {\n      key: day.key,\n      day: day,\n      dayIndex: dayIndex\n    }));\n  }));\n};","map":{"version":3,"names":["React","format","getWeekNumbersInMonth","CalendarGridDayCell","CalendarGridRow","props","classNames","week","weeks","weekIndex","rowClassName","ariaRole","showWeekNumbers","firstDayOfWeek","firstWeekOfYear","navigatedDate","strings","weekNumbers","length","titleString","weekNumberFormatString","createElement","role","className","key","weekNumberCell","title","scope","map","day","dayIndex","__assign"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/CalendarDayGrid/CalendarGridRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { format } from '@fluentui/utilities';\nimport { getWeekNumbersInMonth } from '@fluentui/date-time-utilities';\nimport { CalendarGridDayCell } from './CalendarGridDayCell';\nimport type { ICalendarDayGridProps, ICalendarDayGridStyles } from './CalendarDayGrid.types';\nimport type { IProcessedStyleSet } from '@fluentui/style-utilities';\nimport type { IDayInfo, IWeekCorners } from './CalendarDayGrid.base';\n\nexport interface ICalendarGridRowProps extends ICalendarDayGridProps {\n  classNames: IProcessedStyleSet<ICalendarDayGridStyles>;\n  weeks: IDayInfo[][];\n  week: IDayInfo[];\n  weekIndex: number;\n  weekCorners?: IWeekCorners;\n  ariaHidden?: boolean;\n  rowClassName?: string;\n  ariaRole?: string;\n  navigatedDayRef: React.MutableRefObject<HTMLTableCellElement>;\n  activeDescendantId: string;\n  calculateRoundedStyles(\n    classNames: IProcessedStyleSet<ICalendarDayGridStyles>,\n    above: boolean,\n    below: boolean,\n    left: boolean,\n    right: boolean,\n  ): string;\n  getDayInfosInRangeOfDay(dayToCompare: IDayInfo): IDayInfo[];\n  getRefsFromDayInfos(dayInfosInRange: IDayInfo[]): (HTMLElement | null)[];\n}\n\nexport const CalendarGridRow: React.FunctionComponent<ICalendarGridRowProps> = props => {\n  const {\n    classNames,\n    week,\n    weeks,\n    weekIndex,\n    rowClassName,\n    ariaRole,\n    showWeekNumbers,\n    firstDayOfWeek,\n    firstWeekOfYear,\n    navigatedDate,\n    strings,\n  } = props;\n  const weekNumbers = showWeekNumbers\n    ? getWeekNumbersInMonth(weeks!.length, firstDayOfWeek, firstWeekOfYear, navigatedDate)\n    : null;\n\n  const titleString = weekNumbers\n    ? strings.weekNumberFormatString && format(strings.weekNumberFormatString, weekNumbers[weekIndex])\n    : '';\n\n  return (\n    <tr role={ariaRole} className={rowClassName} key={weekIndex + '_' + week[0].key}>\n      {showWeekNumbers && weekNumbers && (\n        <th\n          className={classNames.weekNumberCell}\n          key={weekIndex}\n          title={titleString}\n          aria-label={titleString}\n          scope=\"row\"\n        >\n          <span>{weekNumbers[weekIndex]}</span>\n        </th>\n      )}\n      {week.map((day: IDayInfo, dayIndex: number) => (\n        <CalendarGridDayCell {...props} key={day.key} day={day} dayIndex={dayIndex} />\n      ))}\n    </tr>\n  );\n};\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,qBAAqB;AAC5C,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE,SAASC,mBAAmB,QAAQ,uBAAuB;AA2B3D,OAAO,IAAMC,eAAe,GAAmD,SAAAA,CAAAC,KAAK;EAEhF,IAAAC,UAAU,GAWRD,KAAK,CAAAC,UAXG;IACVC,IAAI,GAUFF,KAAK,CAAAE,IAVH;IACJC,KAAK,GASHH,KAAK,CAAAG,KATF;IACLC,SAAS,GAQPJ,KAAK,CAAAI,SARE;IACTC,YAAY,GAOVL,KAAK,CAAAK,YAPK;IACZC,QAAQ,GAMNN,KAAK,CAAAM,QANC;IACRC,eAAe,GAKbP,KAAK,CAAAO,eALQ;IACfC,cAAc,GAIZR,KAAK,CAAAQ,cAJO;IACdC,eAAe,GAGbT,KAAK,CAAAS,eAHQ;IACfC,aAAa,GAEXV,KAAK,CAAAU,aAFM;IACbC,OAAO,GACLX,KAAK,CAAAW,OADA;EAET,IAAMC,WAAW,GAAGL,eAAe,GAC/BV,qBAAqB,CAACM,KAAM,CAACU,MAAM,EAAEL,cAAc,EAAEC,eAAe,EAAEC,aAAa,CAAC,GACpF,IAAI;EAER,IAAMI,WAAW,GAAGF,WAAW,GAC3BD,OAAO,CAACI,sBAAsB,IAAInB,MAAM,CAACe,OAAO,CAACI,sBAAsB,EAAEH,WAAW,CAACR,SAAS,CAAC,CAAC,GAChG,EAAE;EAEN,OACET,KAAA,CAAAqB,aAAA;IAAIC,IAAI,EAAEX,QAAQ;IAAEY,SAAS,EAAEb,YAAY;IAAEc,GAAG,EAAEf,SAAS,GAAG,GAAG,GAAGF,IAAI,CAAC,CAAC,CAAC,CAACiB;EAAG,GAC5EZ,eAAe,IAAIK,WAAW,IAC7BjB,KAAA,CAAAqB,aAAA;IACEE,SAAS,EAAEjB,UAAU,CAACmB,cAAc;IACpCD,GAAG,EAAEf,SAAS;IACdiB,KAAK,EAAEP,WAAW;IAAA,cACNA,WAAW;IACvBQ,KAAK,EAAC;EAAK,GAEX3B,KAAA,CAAAqB,aAAA,eAAOJ,WAAW,CAACR,SAAS,CAAC,CAAQ,CAExC,EACAF,IAAI,CAACqB,GAAG,CAAC,UAACC,GAAa,EAAEC,QAAgB;IAAK,OAC7C9B,KAAA,CAAAqB,aAAA,CAAClB,mBAAmB,EAAA4B,QAAA,KAAK1B,KAAK;MAAEmB,GAAG,EAAEK,GAAG,CAACL,GAAG;MAAEK,GAAG,EAAEA,GAAG;MAAEC,QAAQ,EAAEA;IAAQ,GAAI;EADjC,CAE9C,CAAC,CACC;AAET,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}