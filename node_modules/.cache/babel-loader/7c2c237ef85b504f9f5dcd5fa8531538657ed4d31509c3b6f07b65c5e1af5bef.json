{"ast":null,"code":"import * as React from 'react';\nimport { composeRenderFunction, css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nvar getCellText = function (item, column) {\n  var value = item && column && column.fieldName ? item[column.fieldName] : '';\n  if (value === null || value === undefined) {\n    value = '';\n  }\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n  return value;\n};\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport var DetailsRowFields = function (props) {\n  var columns = props.columns,\n    rowClassNames = props.rowClassNames,\n    _a = props.cellStyleProps,\n    cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a,\n    item = props.item,\n    itemIndex = props.itemIndex,\n    isSelected = props.isSelected,\n    onRenderItemColumn = props.onRenderItemColumn,\n    getCellValueKey = props.getCellValueKey,\n    propsOnRenderField = props.onRenderField,\n    cellsByColumn = props.cellsByColumn,\n    enableUpdateAnimations = props.enableUpdateAnimations,\n    rowHeaderId = props.rowHeaderId;\n  var cellValueKeysRef = React.useRef();\n  var cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n  var defaultOnRenderField = React.useCallback(function (fieldProps) {\n    var column = fieldProps.column,\n      cellValueKey = fieldProps.cellValueKey,\n      className = fieldProps.className,\n      onRender = fieldProps.onRender,\n      fieldItem = fieldProps.item,\n      fieldItemIndex = fieldProps.itemIndex;\n    var width = typeof column.calculatedWidth === 'undefined' ? 'auto' : column.calculatedWidth + cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n    var key = \"\".concat(column.key).concat(cellValueKey !== undefined ? \"-\".concat(cellValueKey) : '');\n    return React.createElement(\"div\", {\n      key: key,\n      id: column.isRowHeader ? rowHeaderId : undefined,\n      role: column.isRowHeader ? 'rowheader' : 'gridcell',\n      className: css(column.className, column.isMultiline && rowClassNames.isMultiline, column.isRowHeader && rowClassNames.isRowHeader, rowClassNames.cell, column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded, className),\n      style: {\n        width: width\n      },\n      \"data-automationid\": \"DetailsRowCell\",\n      \"data-automation-key\": column.key\n    }, onRender(fieldItem, fieldItemIndex, column));\n  }, [rowClassNames, cellStyleProps, rowHeaderId]);\n  return React.createElement(\"div\", {\n    className: rowClassNames.fields,\n    \"data-automationid\": \"DetailsRowFields\",\n    role: \"presentation\"\n  }, columns.map(function (column) {\n    var _a = column.getValueKey,\n      getValueKey = _a === void 0 ? getCellValueKey : _a;\n    var onRender = cellsByColumn && column.key in cellsByColumn && function () {\n      return cellsByColumn[column.key];\n    } || column.onRender || onRenderItemColumn || defaultOnRender;\n    var onRenderField = defaultOnRenderField;\n    if (column.onRenderField) {\n      onRenderField = composeRenderFunction(column.onRenderField, onRenderField);\n    }\n    if (propsOnRenderField) {\n      onRenderField = composeRenderFunction(propsOnRenderField, onRenderField);\n    }\n    var previousValueKey = cellValueKeys[column.key];\n    var cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n    var showAnimation = false;\n    if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n      showAnimation = true;\n    }\n    cellValueKeys[column.key] = cellValueKey;\n    return onRenderField({\n      item: item,\n      itemIndex: itemIndex,\n      isSelected: isSelected,\n      column: column,\n      cellValueKey: cellValueKey,\n      className: showAnimation ? rowClassNames.cellAnimation : undefined,\n      onRender: onRender\n    });\n  }));\n};\nfunction defaultOnRender(item, index, column) {\n  if (!item || !column) {\n    return null;\n  }\n  return getCellText(item, column);\n}","map":{"version":3,"names":["React","composeRenderFunction","css","DEFAULT_CELL_STYLE_PROPS","getCellText","item","column","value","fieldName","undefined","toString","DetailsRowFields","props","columns","rowClassNames","_a","cellStyleProps","itemIndex","isSelected","onRenderItemColumn","getCellValueKey","propsOnRenderField","onRenderField","cellsByColumn","enableUpdateAnimations","rowHeaderId","cellValueKeysRef","useRef","cellValueKeys","current","defaultOnRenderField","useCallback","fieldProps","cellValueKey","className","onRender","fieldItem","fieldItemIndex","width","calculatedWidth","cellLeftPadding","cellRightPadding","isPadded","cellExtraRightPadding","key","concat","createElement","id","isRowHeader","role","isMultiline","cell","cellPadded","cellUnpadded","style","fields","map","getValueKey","defaultOnRender","previousValueKey","showAnimation","cellAnimation","index"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/DetailsList/DetailsRowFields.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeRenderFunction, css } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport type { IColumn } from './DetailsList.types';\nimport type { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport type { IDetailsColumnFieldProps } from './DetailsColumn.types';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    isSelected,\n    onRenderItemColumn,\n    getCellValueKey,\n    onRenderField: propsOnRenderField,\n    cellsByColumn,\n    enableUpdateAnimations,\n    rowHeaderId,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  const defaultOnRenderField = React.useCallback(\n    (fieldProps: IDetailsColumnFieldProps): JSX.Element | null => {\n      const { column, cellValueKey, className, onRender, item: fieldItem, itemIndex: fieldItemIndex } = fieldProps;\n\n      const width: string | number =\n        typeof column.calculatedWidth === 'undefined'\n          ? 'auto'\n          : column.calculatedWidth +\n            cellStyleProps.cellLeftPadding +\n            cellStyleProps.cellRightPadding +\n            (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n      const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n\n      return (\n        <div\n          key={key}\n          id={column.isRowHeader ? rowHeaderId : undefined}\n          role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n          className={css(\n            column.className,\n            column.isMultiline && rowClassNames.isMultiline,\n            column.isRowHeader && rowClassNames.isRowHeader,\n            rowClassNames.cell,\n            column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n            className,\n          )}\n          style={{ width }}\n          data-automationid=\"DetailsRowCell\"\n          data-automation-key={column.key}\n        >\n          {onRender(fieldItem, fieldItemIndex, column)}\n        </div>\n      );\n    },\n    [rowClassNames, cellStyleProps, rowHeaderId],\n  );\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map(column => {\n        const { getValueKey = getCellValueKey } = column;\n\n        const onRender =\n          (cellsByColumn && column.key in cellsByColumn && (() => cellsByColumn[column.key])) ||\n          column.onRender ||\n          onRenderItemColumn ||\n          defaultOnRender;\n\n        let onRenderField = defaultOnRenderField;\n\n        if (column.onRenderField) {\n          onRenderField = composeRenderFunction(column.onRenderField, onRenderField);\n        }\n\n        if (propsOnRenderField) {\n          onRenderField = composeRenderFunction(propsOnRenderField, onRenderField);\n        }\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        return onRenderField({\n          item,\n          itemIndex,\n          isSelected,\n          column,\n          cellValueKey,\n          className: showAnimation ? rowClassNames.cellAnimation : undefined,\n          onRender,\n        });\n      })}\n    </div>\n  );\n};\n\nfunction defaultOnRender(item?: any, index?: number, column?: IColumn): React.ReactNode {\n  if (!item || !column) {\n    return null;\n  }\n\n  return getCellText(item, column);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}