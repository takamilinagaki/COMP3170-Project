{"ast":null,"code":"import { TimeConstants } from '../dateValues/timeConstants';\n/**\n * Returns a date offset from the given date by the specified number of minutes.\n * @param date - The origin date\n * @param minutes - The number of minutes to offset. 'minutes' can be negative.\n * @returns A new Date object offset from the origin date by the given number of minutes\n */\nexport var addMinutes = function (date, minutes) {\n  var result = new Date(date.getTime());\n  result.setTime(result.getTime() + minutes * TimeConstants.MinutesInOneHour * TimeConstants.MillisecondsIn1Sec);\n  return result;\n};\n/**\n * Rounds the date's minute up to the next available increment. For example, if `date` has time 1:21\n * and `increments` is 5, the resulting time will be 1:25.\n * @param date - Date to ceil minutes\n * @param increments - Time increments\n * @returns Date with ceiled minute\n */\nexport var ceilMinuteToIncrement = function (date, increments) {\n  var result = new Date(date.getTime());\n  var minute = result.getMinutes();\n  if (TimeConstants.MinutesInOneHour % increments) {\n    result.setMinutes(0);\n  } else {\n    var times = TimeConstants.MinutesInOneHour / increments;\n    for (var i = 1; i <= times; i++) {\n      if (minute > increments * (i - 1) && minute <= increments * i) {\n        minute = increments * i;\n        break;\n      }\n    }\n    result.setMinutes(minute);\n  }\n  return result;\n};\n/**\n * Returns a date object from the selected time.\n * @param useHour12 - If the time picker uses 12 or 24 hour formatting\n * @param dateStartAnchor - The baseline date to calculate the offset of the selected time\n * @param selectedTime - A string representing the user selected time\n * @returns A new date object offset from the baseDate using the selected time.\n */\nexport var getDateFromTimeSelection = function (useHour12, dateStartAnchor, selectedTime) {\n  var _a = TimeConstants.TimeFormatRegex.exec(selectedTime) || [],\n    selectedHours = _a[1],\n    selectedMinutes = _a[2],\n    selectedSeconds = _a[3],\n    selectedAp = _a[4];\n  var hours = +selectedHours;\n  var minutes = +selectedMinutes;\n  var seconds = selectedSeconds ? +selectedSeconds : 0;\n  if (useHour12 && selectedAp) {\n    if (selectedAp.toLowerCase() === 'pm' && hours !== TimeConstants.OffsetTo24HourFormat) {\n      hours += TimeConstants.OffsetTo24HourFormat;\n    } else if (selectedAp.toLowerCase() === 'am' && hours === TimeConstants.OffsetTo24HourFormat) {\n      hours -= TimeConstants.OffsetTo24HourFormat;\n    }\n  }\n  var hoursOffset;\n  if (dateStartAnchor.getHours() > hours || dateStartAnchor.getHours() === hours && dateStartAnchor.getMinutes() > minutes) {\n    hoursOffset = TimeConstants.HoursInOneDay - dateStartAnchor.getHours() + hours;\n  } else {\n    hoursOffset = Math.abs(dateStartAnchor.getHours() - hours);\n  }\n  var offset = TimeConstants.MillisecondsIn1Sec * TimeConstants.MinutesInOneHour * hoursOffset * TimeConstants.SecondsInOneMinute + seconds * TimeConstants.MillisecondsIn1Sec;\n  var date = new Date(dateStartAnchor.getTime() + offset);\n  date.setMinutes(minutes);\n  date.setSeconds(seconds);\n  return date;\n};","map":{"version":3,"names":["TimeConstants","addMinutes","date","minutes","result","Date","getTime","setTime","MinutesInOneHour","MillisecondsIn1Sec","ceilMinuteToIncrement","increments","minute","getMinutes","setMinutes","times","i","getDateFromTimeSelection","useHour12","dateStartAnchor","selectedTime","_a","TimeFormatRegex","exec","selectedHours","selectedMinutes","selectedSeconds","selectedAp","hours","seconds","toLowerCase","OffsetTo24HourFormat","hoursOffset","getHours","HoursInOneDay","Math","abs","offset","SecondsInOneMinute","setSeconds"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/date-time-utilities/lib/src/timeMath/timeMath.ts"],"sourcesContent":["import { TimeConstants } from '../dateValues/timeConstants';\n\n/**\n * Returns a date offset from the given date by the specified number of minutes.\n * @param date - The origin date\n * @param minutes - The number of minutes to offset. 'minutes' can be negative.\n * @returns A new Date object offset from the origin date by the given number of minutes\n */\nexport const addMinutes = (date: Date, minutes: number): Date => {\n  const result = new Date(date.getTime());\n  result.setTime(result.getTime() + minutes * TimeConstants.MinutesInOneHour * TimeConstants.MillisecondsIn1Sec);\n  return result;\n};\n\n/**\n * Rounds the date's minute up to the next available increment. For example, if `date` has time 1:21\n * and `increments` is 5, the resulting time will be 1:25.\n * @param date - Date to ceil minutes\n * @param increments - Time increments\n * @returns Date with ceiled minute\n */\nexport const ceilMinuteToIncrement = (date: Date, increments: number) => {\n  const result = new Date(date.getTime());\n  let minute = result.getMinutes();\n  if (TimeConstants.MinutesInOneHour % increments) {\n    result.setMinutes(0);\n  } else {\n    const times = TimeConstants.MinutesInOneHour / increments;\n    for (let i = 1; i <= times; i++) {\n      if (minute > increments * (i - 1) && minute <= increments * i) {\n        minute = increments * i;\n        break;\n      }\n    }\n    result.setMinutes(minute);\n  }\n  return result;\n};\n\n/**\n * Returns a date object from the selected time.\n * @param useHour12 - If the time picker uses 12 or 24 hour formatting\n * @param dateStartAnchor - The baseline date to calculate the offset of the selected time\n * @param selectedTime - A string representing the user selected time\n * @returns A new date object offset from the baseDate using the selected time.\n */\nexport const getDateFromTimeSelection = (useHour12: boolean, dateStartAnchor: Date, selectedTime: string): Date => {\n  const [, selectedHours, selectedMinutes, selectedSeconds, selectedAp] =\n    TimeConstants.TimeFormatRegex.exec(selectedTime) || [];\n\n  let hours = +selectedHours;\n  const minutes = +selectedMinutes;\n  const seconds = selectedSeconds ? +selectedSeconds : 0;\n\n  if (useHour12 && selectedAp) {\n    if (selectedAp.toLowerCase() === 'pm' && hours !== TimeConstants.OffsetTo24HourFormat) {\n      hours += TimeConstants.OffsetTo24HourFormat;\n    } else if (selectedAp.toLowerCase() === 'am' && hours === TimeConstants.OffsetTo24HourFormat) {\n      hours -= TimeConstants.OffsetTo24HourFormat;\n    }\n  }\n\n  let hoursOffset;\n  if (\n    dateStartAnchor.getHours() > hours ||\n    (dateStartAnchor.getHours() === hours && dateStartAnchor.getMinutes() > minutes)\n  ) {\n    hoursOffset = TimeConstants.HoursInOneDay - dateStartAnchor.getHours() + hours;\n  } else {\n    hoursOffset = Math.abs(dateStartAnchor.getHours() - hours);\n  }\n\n  const offset =\n    TimeConstants.MillisecondsIn1Sec * TimeConstants.MinutesInOneHour * hoursOffset * TimeConstants.SecondsInOneMinute +\n    seconds * TimeConstants.MillisecondsIn1Sec;\n\n  const date = new Date(dateStartAnchor.getTime() + offset);\n  date.setMinutes(minutes);\n  date.setSeconds(seconds);\n\n  return date;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}