{"ast":null,"code":"/**\n * {@docCategory Pickers}\n */\nvar SuggestionsController = /** @class */function () {\n  function SuggestionsController() {\n    var _this = this;\n    this._isSuggestionModel = function (value) {\n      return value.item !== undefined;\n    };\n    this._ensureSuggestionModel = function (suggestion) {\n      if (_this._isSuggestionModel(suggestion)) {\n        return suggestion;\n      } else {\n        return {\n          item: suggestion,\n          selected: false,\n          ariaLabel: suggestion.name || suggestion.primaryText\n        };\n      }\n    };\n    this.suggestions = [];\n    this.currentIndex = -1;\n  }\n  SuggestionsController.prototype.updateSuggestions = function (newSuggestions, selectedIndex, maxCount) {\n    if (newSuggestions && newSuggestions.length > 0) {\n      if (maxCount && newSuggestions.length > maxCount) {\n        var startIndex = selectedIndex && selectedIndex > maxCount ? selectedIndex + 1 - maxCount : 0;\n        newSuggestions = newSuggestions.slice(startIndex, startIndex + maxCount - 1);\n      }\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n      this.currentIndex = selectedIndex ? selectedIndex : 0;\n      if (selectedIndex === -1) {\n        this.currentSuggestion = undefined;\n      } else if (selectedIndex !== undefined) {\n        this.suggestions[selectedIndex].selected = true;\n        this.currentSuggestion = this.suggestions[selectedIndex];\n      }\n    } else {\n      this.suggestions = [];\n      this.currentIndex = -1;\n      this.currentSuggestion = undefined;\n    }\n  };\n  /**\n   * Increments the suggestion index and gets the next suggestion in the list.\n   */\n  SuggestionsController.prototype.nextSuggestion = function () {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex < this.suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.currentIndex === this.suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Decrements the suggestion index and gets the previous suggestion in the list.\n   */\n  SuggestionsController.prototype.previousSuggestion = function () {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.currentIndex === 0) {\n        this.setSelectedSuggestion(this.suggestions.length - 1);\n        return true;\n      }\n    }\n    return false;\n  };\n  SuggestionsController.prototype.getSuggestions = function () {\n    return this.suggestions;\n  };\n  SuggestionsController.prototype.getCurrentItem = function () {\n    return this.currentSuggestion;\n  };\n  SuggestionsController.prototype.getSuggestionAtIndex = function (index) {\n    return this.suggestions[index];\n  };\n  SuggestionsController.prototype.hasSelectedSuggestion = function () {\n    return this.currentSuggestion ? true : false;\n  };\n  SuggestionsController.prototype.removeSuggestion = function (index) {\n    this.suggestions.splice(index, 1);\n  };\n  SuggestionsController.prototype.createGenericSuggestion = function (itemToConvert) {\n    var itemToAdd = this.convertSuggestionsToSuggestionItems([itemToConvert])[0];\n    this.currentSuggestion = itemToAdd;\n  };\n  SuggestionsController.prototype.convertSuggestionsToSuggestionItems = function (suggestions) {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  };\n  SuggestionsController.prototype.deselectAllSuggestions = function () {\n    if (this.currentIndex > -1) {\n      this.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n    }\n  };\n  SuggestionsController.prototype.setSelectedSuggestion = function (index) {\n    if (index > this.suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion.selected = false;\n      this.currentSuggestion = this.suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1) {\n        this.suggestions[this.currentIndex].selected = false;\n      }\n      this.suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = this.suggestions[index];\n    }\n  };\n  return SuggestionsController;\n}();\nexport { SuggestionsController };","map":{"version":3,"names":["SuggestionsController","_this","_isSuggestionModel","value","item","undefined","_ensureSuggestionModel","suggestion","selected","ariaLabel","name","primaryText","suggestions","currentIndex","prototype","updateSuggestions","newSuggestions","selectedIndex","maxCount","length","startIndex","slice","convertSuggestionsToSuggestionItems","currentSuggestion","nextSuggestion","setSelectedSuggestion","previousSuggestion","getSuggestions","getCurrentItem","getSuggestionAtIndex","index","hasSelectedSuggestion","removeSuggestion","splice","createGenericSuggestion","itemToConvert","itemToAdd","Array","isArray","map","deselectAllSuggestions"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/pickers/src/components/pickers/Suggestions/SuggestionsController.ts"],"sourcesContent":["import type { ISuggestionModel } from './Suggestions.types';\n\n/**\n * {@docCategory Pickers}\n */\nexport class SuggestionsController<T> {\n  public currentIndex: number;\n  public currentSuggestion: ISuggestionModel<T> | undefined;\n  public suggestions: ISuggestionModel<T>[];\n\n  constructor() {\n    this.suggestions = [];\n    this.currentIndex = -1;\n  }\n\n  public updateSuggestions(newSuggestions: T[], selectedIndex?: number, maxCount?: number): void {\n    if (newSuggestions && newSuggestions.length > 0) {\n      if (maxCount && newSuggestions.length > maxCount) {\n        const startIndex = selectedIndex && selectedIndex > maxCount ? selectedIndex + 1 - maxCount : 0;\n        newSuggestions = newSuggestions.slice(startIndex, startIndex + maxCount - 1);\n      }\n      this.suggestions = this.convertSuggestionsToSuggestionItems(newSuggestions);\n      this.currentIndex = selectedIndex ? selectedIndex : 0;\n      if (selectedIndex! === -1) {\n        this.currentSuggestion = undefined;\n      } else if (selectedIndex !== undefined) {\n        this.suggestions[selectedIndex].selected = true;\n        this.currentSuggestion = this.suggestions[selectedIndex];\n      }\n    } else {\n      this.suggestions = [];\n      this.currentIndex = -1;\n      this.currentSuggestion = undefined;\n    }\n  }\n\n  /**\n   * Increments the suggestion index and gets the next suggestion in the list.\n   */\n  public nextSuggestion(): boolean {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex < this.suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.currentIndex === this.suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrements the suggestion index and gets the previous suggestion in the list.\n   */\n  public previousSuggestion(): boolean {\n    if (this.suggestions && this.suggestions.length) {\n      if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.currentIndex === 0) {\n        this.setSelectedSuggestion(this.suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getSuggestions(): ISuggestionModel<T>[] {\n    return this.suggestions;\n  }\n\n  public getCurrentItem(): ISuggestionModel<T> {\n    return this.currentSuggestion!;\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.suggestions[index];\n  }\n\n  public hasSelectedSuggestion(): boolean {\n    return this.currentSuggestion ? true : false;\n  }\n\n  public removeSuggestion(index: number): void {\n    this.suggestions.splice(index, 1);\n  }\n\n  public createGenericSuggestion(itemToConvert: ISuggestionModel<T> | T) {\n    const itemToAdd = this.convertSuggestionsToSuggestionItems([itemToConvert])[0];\n    this.currentSuggestion = itemToAdd;\n  }\n\n  public convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[] {\n    return Array.isArray(suggestions) ? suggestions.map(this._ensureSuggestionModel) : [];\n  }\n\n  public deselectAllSuggestions(): void {\n    if (this.currentIndex > -1) {\n      this.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n    }\n  }\n\n  public setSelectedSuggestion(index: number): void {\n    if (index > this.suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion!.selected = false;\n      this.currentSuggestion = this.suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1) {\n        this.suggestions[this.currentIndex].selected = false;\n      }\n      this.suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = this.suggestions[index];\n    }\n  }\n\n  private _isSuggestionModel = (value: ISuggestionModel<T> | T): value is ISuggestionModel<T> => {\n    return (<ISuggestionModel<T>>value).item !== undefined;\n  };\n\n  private _ensureSuggestionModel = (suggestion: ISuggestionModel<T> | T): ISuggestionModel<T> => {\n    if (this._isSuggestionModel(suggestion)) {\n      return suggestion as ISuggestionModel<T>;\n    } else {\n      return {\n        item: suggestion,\n        selected: false,\n        ariaLabel: (<any>suggestion).name || (<any>suggestion).primaryText,\n      } as ISuggestionModel<T>;\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}