{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Merge new and old settings, giving priority to new settings.\n * New settings is optional in which case oldSettings is returned as-is.\n * @param oldSettings - Old settings to fall back to.\n * @param newSettings - New settings that will be merged over oldSettings.\n * @returns Merged settings.\n */\nexport function mergeSettings(oldSettings, newSettings) {\n  if (oldSettings === void 0) {\n    oldSettings = {};\n  }\n  var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);\n  return mergeSettingsWith(oldSettings);\n}\nexport function mergeScopedSettings(oldSettings, newSettings) {\n  if (oldSettings === void 0) {\n    oldSettings = {};\n  }\n  var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);\n  return mergeSettingsWith(oldSettings);\n}\nfunction _isSettingsFunction(settings) {\n  return typeof settings === 'function';\n}\nfunction _settingsMergeWith(newSettings) {\n  return function (settings) {\n    return newSettings ? __assign(__assign({}, settings), newSettings) : settings;\n  };\n}\nfunction _scopedSettingsMergeWith(scopedSettingsFromProps) {\n  if (scopedSettingsFromProps === void 0) {\n    scopedSettingsFromProps = {};\n  }\n  return function (oldScopedSettings) {\n    var newScopedSettings = __assign({}, oldScopedSettings);\n    for (var scopeName in scopedSettingsFromProps) {\n      if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\n        newScopedSettings[scopeName] = __assign(__assign({}, oldScopedSettings[scopeName]), scopedSettingsFromProps[scopeName]);\n      }\n    }\n    return newScopedSettings;\n  };\n}","map":{"version":3,"names":["mergeSettings","oldSettings","newSettings","mergeSettingsWith","_isSettingsFunction","_settingsMergeWith","mergeScopedSettings","_scopedSettingsMergeWith","settings","__assign","scopedSettingsFromProps","oldScopedSettings","newScopedSettings","scopeName","hasOwnProperty"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/lib/src/customizations/mergeSettings.ts"],"sourcesContent":["import type { ISettings, ISettingsFunction } from './Customizations';\n\n/**\n * Merge new and old settings, giving priority to new settings.\n * New settings is optional in which case oldSettings is returned as-is.\n * @param oldSettings - Old settings to fall back to.\n * @param newSettings - New settings that will be merged over oldSettings.\n * @returns Merged settings.\n */\nexport function mergeSettings(oldSettings: ISettings = {}, newSettings?: ISettings | ISettingsFunction): ISettings {\n  const mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);\n\n  return mergeSettingsWith(oldSettings);\n}\n\nexport function mergeScopedSettings(\n  oldSettings: ISettings = {},\n  newSettings?: ISettings | ISettingsFunction,\n): ISettings {\n  const mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);\n\n  return mergeSettingsWith(oldSettings);\n}\n\nfunction _isSettingsFunction(settings?: ISettings | ISettingsFunction): settings is ISettingsFunction {\n  return typeof settings === 'function';\n}\n\nfunction _settingsMergeWith(newSettings?: object): (settings: ISettings) => ISettings {\n  return (settings: ISettings) => (newSettings ? { ...settings, ...newSettings } : settings);\n}\n\nfunction _scopedSettingsMergeWith(scopedSettingsFromProps: ISettings = {}): (scopedSettings: ISettings) => ISettings {\n  return (oldScopedSettings: ISettings): ISettings => {\n    const newScopedSettings: ISettings = { ...oldScopedSettings };\n\n    for (let scopeName in scopedSettingsFromProps) {\n      if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\n        newScopedSettings[scopeName] = { ...oldScopedSettings[scopeName], ...scopedSettingsFromProps[scopeName] };\n      }\n    }\n\n    return newScopedSettings;\n  };\n}\n"],"mappings":";AAEA;;;;;;;AAOA,OAAM,SAAUA,aAAaA,CAACC,WAA2B,EAAEC,WAA2C;EAAxE,IAAAD,WAAA;IAAAA,WAAA,KAA2B;EAAA;EACvD,IAAME,iBAAiB,GAAGC,mBAAmB,CAACF,WAAW,CAAC,GAAGA,WAAW,GAAGG,kBAAkB,CAACH,WAAW,CAAC;EAE1G,OAAOC,iBAAiB,CAACF,WAAW,CAAC;AACvC;AAEA,OAAM,SAAUK,mBAAmBA,CACjCL,WAA2B,EAC3BC,WAA2C;EAD3C,IAAAD,WAAA;IAAAA,WAAA,KAA2B;EAAA;EAG3B,IAAME,iBAAiB,GAAGC,mBAAmB,CAACF,WAAW,CAAC,GAAGA,WAAW,GAAGK,wBAAwB,CAACL,WAAW,CAAC;EAEhH,OAAOC,iBAAiB,CAACF,WAAW,CAAC;AACvC;AAEA,SAASG,mBAAmBA,CAACI,QAAwC;EACnE,OAAO,OAAOA,QAAQ,KAAK,UAAU;AACvC;AAEA,SAASH,kBAAkBA,CAACH,WAAoB;EAC9C,OAAO,UAACM,QAAmB;IAAK,OAACN,WAAW,GAAEO,QAAA,CAAAA,QAAA,KAAMD,QAAQ,GAAKN,WAAW,IAAKM,QAAQ;EAAzD,CAA0D;AAC5F;AAEA,SAASD,wBAAwBA,CAACG,uBAAuC;EAAvC,IAAAA,uBAAA;IAAAA,uBAAA,KAAuC;EAAA;EACvE,OAAO,UAACC,iBAA4B;IAClC,IAAMC,iBAAiB,GAAAH,QAAA,KAAmBE,iBAAiB,CAAE;IAE7D,KAAK,IAAIE,SAAS,IAAIH,uBAAuB,EAAE;MAC7C,IAAIA,uBAAuB,CAACI,cAAc,CAACD,SAAS,CAAC,EAAE;QACrDD,iBAAiB,CAACC,SAAS,CAAC,GAAAJ,QAAA,CAAAA,QAAA,KAAQE,iBAAiB,CAACE,SAAS,CAAC,GAAKH,uBAAuB,CAACG,SAAS,CAAC,CAAE;;;IAI7G,OAAOD,iBAAiB;EAC1B,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}