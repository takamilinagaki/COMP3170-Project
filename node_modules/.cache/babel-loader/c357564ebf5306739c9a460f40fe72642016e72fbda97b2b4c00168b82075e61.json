{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { useControllableValue, useId, useWarnings } from '@fluentui/react-hooks';\nimport { classNamesFunction, getNativeProps, inputProperties, useFocusRects } from '@fluentui/utilities';\nimport { Label } from '../Label/Label';\nvar getClassNames = classNamesFunction();\nvar COMPONENT_NAME = 'Toggle';\nexport var ToggleBase = React.forwardRef(function (props, forwardedRef) {\n  var _a = props.as,\n    RootType = _a === void 0 ? 'div' : _a,\n    ariaLabel = props.ariaLabel,\n    controlledChecked = props.checked,\n    className = props.className,\n    _b = props.defaultChecked,\n    defaultChecked = _b === void 0 ? false : _b,\n    disabled = props.disabled,\n    inlineLabel = props.inlineLabel,\n    label = props.label,\n    // eslint-disable-next-line deprecation/deprecation\n    offAriaLabel = props.offAriaLabel,\n    offText = props.offText,\n    // eslint-disable-next-line deprecation/deprecation\n    onAriaLabel = props.onAriaLabel,\n    onChange = props.onChange,\n    // eslint-disable-next-line deprecation/deprecation\n    onChanged = props.onChanged,\n    onToggleClick = props.onClick,\n    onText = props.onText,\n    role = props.role,\n    styles = props.styles,\n    theme = props.theme;\n  var _c = useControllableValue(controlledChecked, defaultChecked, React.useCallback(function (ev, isChecked) {\n      onChange === null || onChange === void 0 ? void 0 : onChange(ev, isChecked);\n      onChanged === null || onChanged === void 0 ? void 0 : onChanged(isChecked);\n    }, [onChange, onChanged])),\n    checked = _c[0],\n    setChecked = _c[1];\n  var classNames = getClassNames(styles, {\n    theme: theme,\n    className: className,\n    disabled: disabled,\n    checked: checked,\n    inlineLabel: inlineLabel,\n    onOffMissing: !onText && !offText\n  });\n  var badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n  var id = useId(COMPONENT_NAME, props.id);\n  var labelId = \"\".concat(id, \"-label\");\n  var stateTextId = \"\".concat(id, \"-stateText\");\n  var stateText = checked ? onText : offText;\n  var toggleNativeProps = getNativeProps(props, inputProperties, ['defaultChecked']);\n  // The following properties take priority for what Narrator should read:\n  // 1. ariaLabel\n  // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n  // 3. label, if existent\n  var labelledById = undefined;\n  if (!ariaLabel && !badAriaLabel) {\n    if (label) {\n      labelledById = labelId;\n    }\n    if (stateText && !labelledById) {\n      labelledById = stateTextId;\n    }\n  }\n  var toggleButton = React.useRef(null);\n  useFocusRects(toggleButton);\n  useComponentRef(props, checked, toggleButton);\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n    useWarnings({\n      name: COMPONENT_NAME,\n      props: props,\n      deprecations: {\n        offAriaLabel: undefined,\n        onAriaLabel: 'ariaLabel',\n        onChanged: 'onChange'\n      },\n      mutuallyExclusive: {\n        checked: 'defaultChecked'\n      }\n    });\n  }\n  var onClick = function (ev) {\n    if (!disabled) {\n      setChecked(!checked, ev);\n      if (onToggleClick) {\n        onToggleClick(ev);\n      }\n    }\n  };\n  var slotProps = {\n    root: {\n      className: classNames.root,\n      hidden: toggleNativeProps.hidden\n    },\n    label: {\n      children: label,\n      className: classNames.label,\n      htmlFor: id,\n      id: labelId\n    },\n    container: {\n      className: classNames.container\n    },\n    pill: __assign(__assign({}, toggleNativeProps), {\n      'aria-disabled': disabled,\n      'aria-checked': checked,\n      'aria-label': ariaLabel ? ariaLabel : badAriaLabel,\n      'aria-labelledby': labelledById,\n      className: classNames.pill,\n      'data-is-focusable': true,\n      'data-ktp-target': true,\n      disabled: disabled,\n      id: id,\n      onClick: onClick,\n      ref: toggleButton,\n      role: role ? role : 'switch',\n      type: 'button'\n    }),\n    thumb: {\n      className: classNames.thumb\n    },\n    stateText: {\n      children: stateText,\n      className: classNames.text,\n      htmlFor: id,\n      id: stateTextId\n    }\n  };\n  return React.createElement(RootType, __assign({\n    ref: forwardedRef\n  }, slotProps.root), label && React.createElement(Label, __assign({}, slotProps.label)), React.createElement(\"div\", __assign({}, slotProps.container), React.createElement(\"button\", __assign({}, slotProps.pill), React.createElement(\"span\", __assign({}, slotProps.thumb))), (checked && onText || offText) && React.createElement(Label, __assign({}, slotProps.stateText))));\n});\nToggleBase.displayName = COMPONENT_NAME + 'Base';\nvar useComponentRef = function (props, isChecked, toggleButtonRef) {\n  React.useImperativeHandle(props.componentRef, function () {\n    return {\n      get checked() {\n        return !!isChecked;\n      },\n      focus: function () {\n        if (toggleButtonRef.current) {\n          toggleButtonRef.current.focus();\n        }\n      }\n    };\n  }, [isChecked, toggleButtonRef]);\n};","map":{"version":3,"names":["React","useControllableValue","useId","useWarnings","classNamesFunction","getNativeProps","inputProperties","useFocusRects","Label","getClassNames","COMPONENT_NAME","ToggleBase","forwardRef","props","forwardedRef","_a","as","RootType","ariaLabel","controlledChecked","checked","className","_b","defaultChecked","disabled","inlineLabel","label","offAriaLabel","offText","onAriaLabel","onChange","onChanged","onToggleClick","onClick","onText","role","styles","theme","_c","useCallback","ev","isChecked","setChecked","classNames","onOffMissing","badAriaLabel","id","labelId","concat","stateTextId","stateText","toggleNativeProps","labelledById","undefined","toggleButton","useRef","useComponentRef","process","env","NODE_ENV","name","deprecations","mutuallyExclusive","slotProps","root","hidden","children","htmlFor","container","pill","__assign","ref","type","thumb","text","createElement","displayName","toggleButtonRef","useImperativeHandle","componentRef","focus","current"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/Toggle/Toggle.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useControllableValue, useId, useWarnings } from '@fluentui/react-hooks';\nimport { classNamesFunction, getNativeProps, inputProperties, useFocusRects } from '@fluentui/utilities';\nimport { Label } from '../Label/Label';\nimport type { IToggleProps, IToggleStyleProps, IToggleStyles, IToggle } from './Toggle.types';\n\nconst getClassNames = classNamesFunction<IToggleStyleProps, IToggleStyles>();\n\nconst COMPONENT_NAME = 'Toggle';\n\nexport const ToggleBase: React.FunctionComponent<IToggleProps> = React.forwardRef<HTMLElement, IToggleProps>(\n  (props, forwardedRef) => {\n    const {\n      as: RootType = 'div',\n      ariaLabel,\n      checked: controlledChecked,\n      className,\n      defaultChecked = false,\n      disabled,\n      inlineLabel,\n      label,\n      // eslint-disable-next-line deprecation/deprecation\n      offAriaLabel,\n      offText,\n      // eslint-disable-next-line deprecation/deprecation\n      onAriaLabel,\n      onChange,\n      // eslint-disable-next-line deprecation/deprecation\n      onChanged,\n      onClick: onToggleClick,\n      onText,\n      role,\n      styles,\n      theme,\n    } = props;\n\n    const [checked, setChecked] = useControllableValue(\n      controlledChecked,\n      defaultChecked,\n      React.useCallback(\n        (ev: React.MouseEvent<HTMLElement>, isChecked: boolean) => {\n          onChange?.(ev, isChecked);\n          onChanged?.(isChecked);\n        },\n        [onChange, onChanged],\n      ),\n    );\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      checked,\n      inlineLabel,\n      onOffMissing: !onText && !offText,\n    });\n    const badAriaLabel = checked ? onAriaLabel : offAriaLabel;\n    const id = useId(COMPONENT_NAME, props.id);\n    const labelId = `${id}-label`;\n    const stateTextId = `${id}-stateText`;\n    const stateText = checked ? onText : offText;\n    const toggleNativeProps = getNativeProps<React.HTMLAttributes<HTMLButtonElement>>(props, inputProperties, [\n      'defaultChecked',\n    ]);\n\n    // The following properties take priority for what Narrator should read:\n    // 1. ariaLabel\n    // 2. onAriaLabel (if checked) or offAriaLabel (if not checked)\n    // 3. label, if existent\n\n    let labelledById: string | undefined = undefined;\n    if (!ariaLabel && !badAriaLabel) {\n      if (label) {\n        labelledById = labelId;\n      }\n      if (stateText && !labelledById) {\n        labelledById = stateTextId;\n      }\n    }\n\n    const toggleButton = React.useRef<HTMLButtonElement>(null);\n    useFocusRects(toggleButton);\n    useComponentRef(props, checked, toggleButton);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line react-hooks/rules-of-hooks -- build-time conditional\n      useWarnings({\n        name: COMPONENT_NAME,\n        props,\n        deprecations: {\n          offAriaLabel: undefined,\n          onAriaLabel: 'ariaLabel',\n          onChanged: 'onChange',\n        },\n        mutuallyExclusive: { checked: 'defaultChecked' },\n      });\n    }\n\n    const onClick = (ev: React.MouseEvent<HTMLElement>) => {\n      if (!disabled) {\n        setChecked(!checked, ev);\n        if (onToggleClick) {\n          onToggleClick(ev);\n        }\n      }\n    };\n\n    const slotProps = {\n      root: {\n        className: classNames.root,\n        hidden: toggleNativeProps.hidden,\n      },\n      label: {\n        children: label,\n        className: classNames.label,\n        htmlFor: id,\n        id: labelId,\n      },\n      container: {\n        className: classNames.container,\n      },\n      pill: {\n        ...toggleNativeProps,\n        'aria-disabled': disabled,\n        'aria-checked': checked,\n        'aria-label': ariaLabel ? ariaLabel : badAriaLabel,\n        'aria-labelledby': labelledById,\n        className: classNames.pill,\n        'data-is-focusable': true,\n        'data-ktp-target': true,\n        disabled,\n        id,\n        onClick,\n        ref: toggleButton,\n        role: role ? role : 'switch',\n        type: 'button' as React.ButtonHTMLAttributes<HTMLButtonElement>['type'],\n      },\n      thumb: {\n        className: classNames.thumb,\n      },\n      stateText: {\n        children: stateText,\n        className: classNames.text,\n        htmlFor: id,\n        id: stateTextId,\n      },\n    };\n\n    return (\n      <RootType ref={forwardedRef as React.Ref<HTMLDivElement>} {...slotProps.root}>\n        {label && <Label {...slotProps.label} />}\n        <div {...slotProps.container}>\n          <button {...slotProps.pill}>\n            <span {...slotProps.thumb} />\n          </button>\n          {((checked && onText) || offText) && <Label {...slotProps.stateText} />}\n        </div>\n      </RootType>\n    );\n  },\n);\n\nToggleBase.displayName = COMPONENT_NAME + 'Base';\n\nconst useComponentRef = (\n  props: IToggleProps,\n  isChecked: boolean | undefined,\n  toggleButtonRef: React.RefObject<IToggle>,\n) => {\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      get checked() {\n        return !!isChecked;\n      },\n      focus() {\n        if (toggleButtonRef.current) {\n          toggleButtonRef.current.focus();\n        }\n      },\n    }),\n    [isChecked, toggleButtonRef],\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}