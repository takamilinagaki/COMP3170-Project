{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, initializeComponentRef, on, KeyCodes, getWindow, warnDeprecations, warn } from '../../../Utilities';\nimport { clamp } from '../../../utilities/color/clamp';\nimport { MAX_COLOR_HUE, MAX_COLOR_ALPHA } from '../../../utilities/color/consts';\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory ColorPicker}\n */\nvar ColorSliderBase = /** @class */function (_super) {\n  __extends(ColorSliderBase, _super);\n  function ColorSliderBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._disposables = [];\n    _this._root = React.createRef();\n    _this._onKeyDown = function (ev) {\n      var currentValue = _this.value;\n      var maxValue = _this._maxValue;\n      var increment = ev.shiftKey ? 10 : 1;\n      // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n      // and getting all the math and styles flipped correctly is tricky\n      // eslint-disable-next-line deprecation/deprecation\n      switch (ev.which) {\n        case KeyCodes.left:\n          {\n            currentValue -= increment;\n            break;\n          }\n        case KeyCodes.right:\n          {\n            currentValue += increment;\n            break;\n          }\n        case KeyCodes.home:\n          {\n            currentValue = 0;\n            break;\n          }\n        case KeyCodes.end:\n          {\n            currentValue = maxValue;\n            break;\n          }\n        default:\n          {\n            return;\n          }\n      }\n      _this._updateValue(ev, clamp(currentValue, maxValue));\n    };\n    _this._onMouseDown = function (ev) {\n      var win = getWindow(_this);\n      if (win) {\n        _this._disposables.push(on(win, 'mousemove', _this._onMouseMove, true), on(win, 'mouseup', _this._disposeListeners, true));\n      }\n      _this._onMouseMove(ev);\n    };\n    _this._onMouseMove = function (ev) {\n      if (!_this._root.current) {\n        return;\n      }\n      var maxValue = _this._maxValue;\n      var rectSize = _this._root.current.getBoundingClientRect();\n      var currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n      var newValue = clamp(Math.round(currentPercentage * maxValue), maxValue);\n      _this._updateValue(ev, newValue);\n    };\n    _this._onTouchStart = function (ev) {\n      if (!_this._root.current) {\n        return;\n      }\n      // prevent touch from scrolling the page so that the touch can be dragged on the color rectangle.\n      ev.stopPropagation();\n    };\n    _this._onTouchMove = function (ev) {\n      if (!_this._root.current) {\n        return;\n      }\n      var lastTouch = ev.touches[ev.touches.length - 1];\n      if (lastTouch.clientX !== undefined) {\n        var maxValue = _this._maxValue;\n        var rectSize = _this._root.current.getBoundingClientRect();\n        var currentPercentage = (lastTouch.clientX - rectSize.left) / rectSize.width;\n        var newValue = clamp(Math.round(currentPercentage * maxValue), maxValue);\n        _this._updateValue(ev, newValue);\n      }\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n    _this._disposeListeners = function () {\n      _this._disposables.forEach(function (dispose) {\n        return dispose();\n      });\n      _this._disposables = [];\n    };\n    initializeComponentRef(_this);\n    warnDeprecations('ColorSlider', props, {\n      thumbColor: 'styles.sliderThumb',\n      overlayStyle: 'overlayColor',\n      isAlpha: 'type',\n      maxValue: 'type',\n      minValue: 'type'\n    });\n    // eslint-disable-next-line deprecation/deprecation\n    if (_this._type !== 'hue' && !(props.overlayColor || props.overlayStyle)) {\n      warn(\"ColorSlider: 'overlayColor' is required when 'type' is \\\"alpha\\\" or \\\"transparency\\\"\");\n    }\n    _this.state = {\n      currentValue: props.value || 0\n    };\n    return _this;\n  }\n  Object.defineProperty(ColorSliderBase.prototype, \"value\", {\n    get: function () {\n      return this.state.currentValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ColorSliderBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.value !== undefined) {\n      this.setState({\n        currentValue: this.props.value\n      });\n    }\n  };\n  ColorSliderBase.prototype.componentDidMount = function () {\n    if (this._root.current) {\n      // with Chrome's passive DOM listeners, stopPropagation and preventDefault only work if passive is false.\n      this._root.current.addEventListener('touchstart', this._onTouchStart, {\n        capture: true,\n        passive: false\n      });\n      this._root.current.addEventListener('touchmove', this._onTouchMove, {\n        capture: true,\n        passive: false\n      });\n    }\n  };\n  ColorSliderBase.prototype.componentWillUnmount = function () {\n    if (this._root.current) {\n      this._root.current.removeEventListener('touchstart', this._onTouchStart);\n      this._root.current.removeEventListener('touchmove', this._onTouchMove);\n    }\n    this._disposeListeners();\n  };\n  ColorSliderBase.prototype.render = function () {\n    var type = this._type;\n    var maxValue = this._maxValue;\n    var _a = this.props,\n      // eslint-disable-next-line deprecation/deprecation\n      overlayStyle = _a.overlayStyle,\n      overlayColor = _a.overlayColor,\n      theme = _a.theme,\n      className = _a.className,\n      styles = _a.styles,\n      _b = _a.ariaLabel,\n      ariaLabel = _b === void 0 ? type : _b;\n    var currentValue = this.value;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      type: type\n    });\n    var currentPercentage = 100 * currentValue / maxValue;\n    return React.createElement(\"div\", {\n      ref: this._root,\n      className: classNames.root,\n      tabIndex: 0,\n      onKeyDown: this._onKeyDown,\n      onMouseDown: this._onMouseDown,\n      role: \"slider\",\n      \"aria-valuenow\": currentValue,\n      \"aria-valuetext\": String(currentValue),\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": maxValue,\n      \"aria-label\": ariaLabel,\n      \"data-is-focusable\": true\n    }, !!(overlayColor || overlayStyle) && React.createElement(\"div\", {\n      className: classNames.sliderOverlay,\n      // this isn't included in getStyles because it may change frequently\n      style: overlayColor ? {\n        background: type === 'transparency' ? \"linear-gradient(to right, #\".concat(overlayColor, \", transparent)\") : \"linear-gradient(to right, transparent, #\".concat(overlayColor, \")\")\n      } : overlayStyle\n    }), React.createElement(\"div\", {\n      className: classNames.sliderThumb,\n      style: {\n        left: currentPercentage + '%'\n      }\n    }));\n  };\n  Object.defineProperty(ColorSliderBase.prototype, \"_type\", {\n    get: function () {\n      // eslint-disable-next-line deprecation/deprecation\n      var _a = this.props,\n        isAlpha = _a.isAlpha,\n        _b = _a.type,\n        type = _b === void 0 ? isAlpha ? 'alpha' : 'hue' : _b;\n      return type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ColorSliderBase.prototype, \"_maxValue\", {\n    get: function () {\n      return this._type === 'hue' ? MAX_COLOR_HUE : MAX_COLOR_ALPHA;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ColorSliderBase.prototype._updateValue = function (ev, newValue) {\n    if (newValue === this.value) {\n      return;\n    }\n    var onChange = this.props.onChange;\n    if (onChange) {\n      onChange(ev, newValue);\n    }\n    if (!ev.defaultPrevented) {\n      this.setState({\n        currentValue: newValue\n      });\n      ev.preventDefault();\n    }\n  };\n  ColorSliderBase.defaultProps = {\n    value: 0\n  };\n  return ColorSliderBase;\n}(React.Component);\nexport { ColorSliderBase };","map":{"version":3,"names":["React","classNamesFunction","initializeComponentRef","on","KeyCodes","getWindow","warnDeprecations","warn","clamp","MAX_COLOR_HUE","MAX_COLOR_ALPHA","getClassNames","ColorSliderBase","_super","__extends","props","_this","call","_disposables","_root","createRef","_onKeyDown","ev","currentValue","value","maxValue","_maxValue","increment","shiftKey","which","left","right","home","end","_updateValue","_onMouseDown","win","push","_onMouseMove","_disposeListeners","current","rectSize","getBoundingClientRect","currentPercentage","clientX","width","newValue","Math","round","_onTouchStart","stopPropagation","_onTouchMove","lastTouch","touches","length","undefined","preventDefault","forEach","dispose","thumbColor","overlayStyle","isAlpha","minValue","_type","overlayColor","state","Object","defineProperty","prototype","get","componentDidUpdate","prevProps","prevState","setState","componentDidMount","addEventListener","capture","passive","componentWillUnmount","removeEventListener","render","type","_a","theme","className","styles","_b","ariaLabel","classNames","createElement","ref","root","tabIndex","onKeyDown","onMouseDown","role","String","sliderOverlay","style","background","concat","sliderThumb","onChange","defaultPrevented","defaultProps","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/ColorPicker/src/components/ColorPicker/ColorSlider/ColorSlider.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  classNamesFunction,\n  initializeComponentRef,\n  on,\n  KeyCodes,\n  getWindow,\n  warnDeprecations,\n  warn,\n} from '../../../Utilities';\nimport { clamp } from '../../../utilities/color/clamp';\nimport { MAX_COLOR_HUE, MAX_COLOR_ALPHA } from '../../../utilities/color/consts';\nimport type { IColorSliderProps, IColorSliderStyleProps, IColorSliderStyles, IColorSlider } from './ColorSlider.types';\n\nconst getClassNames = classNamesFunction<IColorSliderStyleProps, IColorSliderStyles>();\n\nexport interface IColorSliderState {\n  currentValue: number;\n}\n\n/**\n * {@docCategory ColorPicker}\n */\nexport class ColorSliderBase extends React.Component<IColorSliderProps, IColorSliderState> implements IColorSlider {\n  public static defaultProps: Partial<IColorSliderProps> = {\n    value: 0,\n  };\n\n  private _disposables: (() => void)[] = [];\n  private _root = React.createRef<HTMLDivElement>();\n\n  constructor(props: IColorSliderProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    warnDeprecations('ColorSlider', props, {\n      thumbColor: 'styles.sliderThumb',\n      overlayStyle: 'overlayColor',\n      isAlpha: 'type',\n      maxValue: 'type',\n      minValue: 'type',\n    });\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._type !== 'hue' && !(props.overlayColor || props.overlayStyle)) {\n      warn(`ColorSlider: 'overlayColor' is required when 'type' is \"alpha\" or \"transparency\"`);\n    }\n\n    this.state = {\n      currentValue: props.value || 0,\n    };\n  }\n\n  public get value(): number {\n    return this.state.currentValue;\n  }\n\n  public componentDidUpdate(prevProps: Readonly<IColorSliderProps>, prevState: Readonly<IColorSliderState>): void {\n    // if props changed (as opposed to a state update), set the value\n    // TODO: switch to strict controlled pattern instead\n    if (prevProps !== this.props && this.props.value !== undefined) {\n      this.setState({ currentValue: this.props.value });\n    }\n  }\n\n  public componentDidMount(): void {\n    if (this._root.current) {\n      // with Chrome's passive DOM listeners, stopPropagation and preventDefault only work if passive is false.\n      this._root.current.addEventListener('touchstart', this._onTouchStart, { capture: true, passive: false });\n      this._root.current.addEventListener('touchmove', this._onTouchMove, { capture: true, passive: false });\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this._root.current) {\n      this._root.current.removeEventListener('touchstart', this._onTouchStart);\n      this._root.current.removeEventListener('touchmove', this._onTouchMove);\n    }\n    this._disposeListeners();\n  }\n\n  public render(): JSX.Element {\n    const type = this._type;\n    const maxValue = this._maxValue;\n    const {\n      // eslint-disable-next-line deprecation/deprecation\n      overlayStyle,\n      overlayColor,\n      theme,\n      className,\n      styles,\n      ariaLabel = type,\n    } = this.props;\n    const currentValue = this.value;\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      type,\n    });\n\n    const currentPercentage = (100 * currentValue) / maxValue;\n\n    return (\n      <div\n        ref={this._root}\n        className={classNames.root}\n        tabIndex={0}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        role=\"slider\"\n        aria-valuenow={currentValue}\n        // Narrator doesn't read aria-valuenow properly\n        aria-valuetext={String(currentValue)}\n        aria-valuemin={0}\n        aria-valuemax={maxValue}\n        aria-label={ariaLabel}\n        data-is-focusable={true}\n      >\n        {!!(overlayColor || overlayStyle) && (\n          <div\n            className={classNames.sliderOverlay}\n            // this isn't included in getStyles because it may change frequently\n            style={\n              overlayColor\n                ? {\n                    background:\n                      type === 'transparency'\n                        ? `linear-gradient(to right, #${overlayColor}, transparent)`\n                        : `linear-gradient(to right, transparent, #${overlayColor})`,\n                  }\n                : overlayStyle\n            }\n          />\n        )}\n        <div className={classNames.sliderThumb} style={{ left: currentPercentage + '%' }} />\n      </div>\n    );\n  }\n\n  private get _type(): IColorSliderProps['type'] {\n    // eslint-disable-next-line deprecation/deprecation\n    const { isAlpha, type = isAlpha ? 'alpha' : 'hue' } = this.props;\n    return type;\n  }\n\n  private get _maxValue(): number {\n    return this._type === 'hue' ? MAX_COLOR_HUE : MAX_COLOR_ALPHA;\n  }\n\n  private _onKeyDown = (ev: React.KeyboardEvent): void => {\n    let currentValue = this.value;\n    const maxValue = this._maxValue;\n    const increment = ev.shiftKey ? 10 : 1;\n\n    // Intentionally DO NOT flip the color picker in RTL: its orientation is not very meaningful,\n    // and getting all the math and styles flipped correctly is tricky\n    // eslint-disable-next-line deprecation/deprecation\n    switch (ev.which) {\n      case KeyCodes.left: {\n        currentValue -= increment;\n        break;\n      }\n      case KeyCodes.right: {\n        currentValue += increment;\n        break;\n      }\n      case KeyCodes.home: {\n        currentValue = 0;\n        break;\n      }\n      case KeyCodes.end: {\n        currentValue = maxValue;\n        break;\n      }\n      default: {\n        return;\n      }\n    }\n\n    this._updateValue(ev, clamp(currentValue, maxValue));\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    const win = getWindow(this as any);\n\n    if (win) {\n      this._disposables.push(\n        on(win, 'mousemove', this._onMouseMove as (ev: MouseEvent) => void, true),\n        on(win, 'mouseup', this._disposeListeners, true),\n      );\n    }\n\n    this._onMouseMove(ev);\n  };\n\n  private _onMouseMove = (ev: MouseEvent | React.MouseEvent): void => {\n    if (!this._root.current) {\n      return;\n    }\n\n    const maxValue = this._maxValue;\n    const rectSize = this._root.current.getBoundingClientRect();\n\n    const currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n    const newValue = clamp(Math.round(currentPercentage * maxValue), maxValue);\n\n    this._updateValue(ev, newValue);\n  };\n\n  private _onTouchStart = (ev: TouchEvent): void => {\n    if (!this._root.current) {\n      return;\n    }\n\n    // prevent touch from scrolling the page so that the touch can be dragged on the color rectangle.\n    ev.stopPropagation();\n  };\n\n  private _onTouchMove = (ev: TouchEvent): void => {\n    if (!this._root.current) {\n      return;\n    }\n\n    const lastTouch = ev.touches[ev.touches.length - 1];\n    if (lastTouch.clientX !== undefined) {\n      const maxValue = this._maxValue;\n      const rectSize = this._root.current.getBoundingClientRect();\n\n      const currentPercentage = (lastTouch.clientX - rectSize.left) / rectSize.width;\n      const newValue = clamp(Math.round(currentPercentage * maxValue), maxValue);\n\n      this._updateValue(ev, newValue);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _disposeListeners = (): void => {\n    this._disposables.forEach(dispose => dispose());\n    this._disposables = [];\n  };\n\n  private _updateValue(\n    ev: MouseEvent | KeyboardEvent | React.MouseEvent | React.KeyboardEvent | TouchEvent,\n    newValue: number,\n  ) {\n    if (newValue === this.value) {\n      return;\n    }\n\n    const { onChange } = this.props;\n\n    if (onChange) {\n      onChange(ev as React.MouseEvent | React.KeyboardEvent, newValue);\n    }\n\n    if (!ev.defaultPrevented) {\n      this.setState({\n        currentValue: newValue,\n      });\n      ev.preventDefault();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}