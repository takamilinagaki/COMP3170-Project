{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport { Async, classNamesFunction, DelayedRender, getId, getNativeProps, getWindow, initializeComponentRef, inputProperties, isControlled, isIE11, textAreaProperties, warn, warnControlledUsage, warnMutuallyExclusive } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_STATE_VALUE = '';\nvar COMPONENT_NAME = 'TextField';\nvar REVEAL_ICON_NAME = 'RedEye';\nvar HIDE_ICON_NAME = 'Hide';\nvar TextFieldBase = /** @class */function (_super) {\n  __extends(TextFieldBase, _super);\n  function TextFieldBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._textElement = React.createRef();\n    _this._onFocus = function (ev) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(ev);\n      }\n      _this.setState({\n        isFocused: true\n      }, function () {\n        if (_this.props.validateOnFocusIn) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n    _this._onBlur = function (ev) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n      _this.setState({\n        isFocused: false\n      }, function () {\n        if (_this.props.validateOnFocusOut) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n        required = props.required;\n      // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n      var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : undefined;\n      if (label) {\n        return React.createElement(Label, {\n          required: required,\n          htmlFor: _this._id,\n          styles: labelStyles,\n          disabled: props.disabled,\n          id: _this._labelId\n        }, props.label);\n      }\n      return null;\n    };\n    _this._onRenderDescription = function (props) {\n      if (props.description) {\n        return React.createElement(\"span\", {\n          className: _this._classNames.description\n        }, props.description);\n      }\n      return null;\n    };\n    _this._onRevealButtonClick = function (event) {\n      _this.setState(function (prevState) {\n        return {\n          isRevealingPassword: !prevState.isRevealingPassword\n        };\n      });\n    };\n    _this._onInputChange = function (event) {\n      // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n      // which have *probably* been fixed now:\n      // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n      // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n      var _a, _b;\n      // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n      // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n      var element = event.target;\n      var value = element.value;\n      // Ignore this event if any of the following are true:\n      // - the value is undefined (in case one of the IE bugs comes back)\n      // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n      // - it's the same as the previous value\n      var previousValue = _getValue(_this.props, _this.state) || '';\n      if (value === undefined || value === _this._lastChangeValue || value === previousValue) {\n        _this._lastChangeValue = undefined;\n        return;\n      }\n      _this._lastChangeValue = value;\n      (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, event, value);\n      if (!_this._isControlled) {\n        // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n        _this.setState({\n          uncontrolledValue: value\n        });\n      }\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage'\n      });\n    }\n    _this._fallbackId = getId(COMPONENT_NAME);\n    _this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    _this._labelId = getId(COMPONENT_NAME + 'Label');\n    _this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    _this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n    _this._warnControlledUsage();\n    var _a = props.defaultValue,\n      defaultValue = _a === void 0 ? DEFAULT_STATE_VALUE : _a;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    _this.state = {\n      uncontrolledValue: _this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: ''\n    };\n    _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);\n    _this._lastValidation = 0;\n    return _this;\n  }\n  Object.defineProperty(TextFieldBase.prototype, \"value\", {\n    /**\n     * Gets the current value of the text field.\n     */\n    get: function () {\n      return _getValue(this.props, this.state);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  TextFieldBase.prototype.componentDidMount = function () {\n    this._adjustInputHeight();\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  };\n  TextFieldBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n  TextFieldBase.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {\n    return {\n      selection: [this.selectionStart, this.selectionEnd]\n    };\n  };\n  TextFieldBase.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n    var props = this.props;\n    var _a = (snapshot || {}).selection,\n      selection = _a === void 0 ? [null, null] : _a;\n    var start = selection[0],\n      end = selection[1];\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n    var prevValue = _getValue(prevProps, prevState);\n    var value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({\n          errorMessage: ''\n        });\n      }\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  };\n  TextFieldBase.prototype.render = function () {\n    var _a = this.props,\n      borderless = _a.borderless,\n      className = _a.className,\n      disabled = _a.disabled,\n      invalid = _a.invalid,\n      iconProps = _a.iconProps,\n      inputClassName = _a.inputClassName,\n      label = _a.label,\n      multiline = _a.multiline,\n      required = _a.required,\n      underlined = _a.underlined,\n      prefix = _a.prefix,\n      resizable = _a.resizable,\n      suffix = _a.suffix,\n      theme = _a.theme,\n      styles = _a.styles,\n      autoAdjustHeight = _a.autoAdjustHeight,\n      canRevealPassword = _a.canRevealPassword,\n      revealPasswordAriaLabel = _a.revealPasswordAriaLabel,\n      type = _a.type,\n      _b = _a.onRenderPrefix,\n      onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b,\n      _c = _a.onRenderSuffix,\n      onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c,\n      _d = _a.onRenderLabel,\n      onRenderLabel = _d === void 0 ? this._onRenderLabel : _d,\n      _e = _a.onRenderDescription,\n      onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;\n    var _f = this.state,\n      isFocused = _f.isFocused,\n      isRevealingPassword = _f.isRevealingPassword;\n    var errorMessage = this._errorMessage;\n    var isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n    var hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n    var classNames = this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      focused: isFocused,\n      required: required,\n      multiline: multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless: borderless,\n      resizable: resizable,\n      hasIcon: !!iconProps,\n      underlined: underlined,\n      inputClassName: inputClassName,\n      autoAdjustHeight: autoAdjustHeight,\n      hasRevealButton: hasRevealButton\n    });\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      React.createElement(\"div\", {\n        ref: this.props.elementRef,\n        className: classNames.root\n      }, React.createElement(\"div\", {\n        className: classNames.wrapper\n      }, onRenderLabel(this.props, this._onRenderLabel), React.createElement(\"div\", {\n        className: classNames.fieldGroup\n      }, (prefix !== undefined || this.props.onRenderPrefix) && React.createElement(\"div\", {\n        className: classNames.prefix,\n        id: this._prefixId\n      }, onRenderPrefix(this.props, this._onRenderPrefix)), multiline ? this._renderTextArea() : this._renderInput(), iconProps && React.createElement(Icon, __assign({\n        className: classNames.icon\n      }, iconProps)), hasRevealButton &&\n      // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n      React.createElement(\"button\", {\n        \"aria-label\": revealPasswordAriaLabel,\n        className: classNames.revealButton,\n        onClick: this._onRevealButtonClick,\n        \"aria-pressed\": !!isRevealingPassword,\n        type: \"button\"\n      }, React.createElement(\"span\", {\n        className: classNames.revealSpan\n      }, React.createElement(Icon, {\n        className: classNames.revealIcon,\n        iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME\n      }))), (suffix !== undefined || this.props.onRenderSuffix) && React.createElement(\"div\", {\n        className: classNames.suffix,\n        id: this._suffixId\n      }, onRenderSuffix(this.props, this._onRenderSuffix)))), this._isDescriptionAvailable && React.createElement(\"span\", {\n        id: this._descriptionId\n      }, onRenderDescription(this.props, this._onRenderDescription), errorMessage && React.createElement(\"div\", {\n        role: \"alert\"\n      }, React.createElement(DelayedRender, null, this._renderErrorMessage()))))\n    );\n  };\n  /**\n   * Sets focus on the text field\n   */\n  TextFieldBase.prototype.focus = function () {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  };\n  /**\n   * Blurs the text field.\n   */\n  TextFieldBase.prototype.blur = function () {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  };\n  /**\n   * Selects the text field\n   */\n  TextFieldBase.prototype.select = function () {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  };\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  TextFieldBase.prototype.setSelectionStart = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  };\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  TextFieldBase.prototype.setSelectionEnd = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  };\n  Object.defineProperty(TextFieldBase.prototype, \"selectionStart\", {\n    /**\n     * Gets the selection start of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionStart : -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"selectionEnd\", {\n    /**\n     * Gets the selection end of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  TextFieldBase.prototype.setSelectionRange = function (start, end) {\n    if (this._textElement.current) {\n      this._textElement.current.setSelectionRange(start, end);\n    }\n  };\n  TextFieldBase.prototype._warnControlledUsage = function (prevProps) {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly'\n    });\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\"Warning: 'value' prop on '\".concat(COMPONENT_NAME, \"' should not be null. Consider using an \") + 'empty string to clear the component or undefined to indicate an uncontrolled component.');\n    }\n  };\n  Object.defineProperty(TextFieldBase.prototype, \"_id\", {\n    /** Returns `props.id` if available, or a fallback if not. */\n    get: function () {\n      return this.props.id || this._fallbackId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isControlled\", {\n    get: function () {\n      return isControlled(this.props, 'value');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  TextFieldBase.prototype._onRenderPrefix = function (props) {\n    var prefix = props.prefix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, prefix);\n  };\n  TextFieldBase.prototype._onRenderSuffix = function (props) {\n    var suffix = props.suffix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, suffix);\n  };\n  Object.defineProperty(TextFieldBase.prototype, \"_errorMessage\", {\n    /**\n     * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n     *\n     * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n     * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n     */\n    get: function () {\n      var _a = this.props.errorMessage,\n        errorMessage = _a === void 0 ? this.state.errorMessage : _a;\n      return errorMessage || '';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  TextFieldBase.prototype._renderErrorMessage = function () {\n    var errorMessage = this._errorMessage;\n    return errorMessage ? typeof errorMessage === 'string' ? React.createElement(\"p\", {\n      className: this._classNames.errorMessage\n    }, React.createElement(\"span\", {\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage)) : React.createElement(\"div\", {\n      className: this._classNames.errorMessage,\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage) : null;\n  };\n  Object.defineProperty(TextFieldBase.prototype, \"_isDescriptionAvailable\", {\n    /**\n     * If a custom description render function is supplied then treat description as always available.\n     * Otherwise defer to the presence of description or error message text.\n     */\n    get: function () {\n      var props = this.props;\n      return !!(props.onRenderDescription || props.description || this._errorMessage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  TextFieldBase.prototype._renderTextArea = function () {\n    var _a = this.props.invalid,\n      invalid = _a === void 0 ? !!this._errorMessage : _a;\n    var textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\n    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return React.createElement(\"textarea\", __assign({\n      id: this._id\n    }, textAreaProps, {\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": invalid,\n      \"aria-label\": this.props.ariaLabel,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n  TextFieldBase.prototype._renderInput = function () {\n    var _a = this.props,\n      ariaLabel = _a.ariaLabel,\n      _b = _a.invalid,\n      invalid = _b === void 0 ? !!this._errorMessage : _b,\n      onRenderPrefix = _a.onRenderPrefix,\n      onRenderSuffix = _a.onRenderSuffix,\n      prefix = _a.prefix,\n      suffix = _a.suffix,\n      _c = _a.type,\n      type = _c === void 0 ? 'text' : _c,\n      label = _a.label;\n    // build aria-labelledby list from label, prefix, and suffix\n    var labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n    var inputProps = __assign(__assign({\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id\n    }, getNativeProps(this.props, inputProperties, ['defaultValue', 'type'])), {\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    });\n    var defaultRender = function (updatedInputProps) {\n      return React.createElement(\"input\", __assign({}, updatedInputProps));\n    };\n    var onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  };\n  TextFieldBase.prototype._validate = function (value) {\n    var _this = this;\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n    this._latestValidateValue = value;\n    var onGetErrorMessage = this.props.onGetErrorMessage;\n    var result = onGetErrorMessage && onGetErrorMessage(value || '');\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({\n          errorMessage: result\n        });\n        this._notifyAfterValidate(value, result);\n      } else {\n        var currentValidation_1 = ++this._lastValidation;\n        result.then(function (errorMessage) {\n          if (currentValidation_1 === _this._lastValidation) {\n            _this.setState({\n              errorMessage: errorMessage\n            });\n          }\n          _this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  };\n  TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  };\n  TextFieldBase.prototype._adjustInputHeight = function () {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      var textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  };\n  TextFieldBase.defaultProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true\n  };\n  return TextFieldBase;\n}(React.Component);\nexport { TextFieldBase };\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props, state) {\n  var _a = props.value,\n    value = _a === void 0 ? state.uncontrolledValue : _a;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props) {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n// Only calculate this once across all TextFields, since will stay the same\nvar __browserNeedsRevealButton;\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    var win = getWindow();\n    if (win === null || win === void 0 ? void 0 : win.navigator) {\n      // Edge, Chromium Edge\n      var isEdge = /Edg/.test(win.navigator.userAgent || '');\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}","map":{"version":3,"names":["React","Label","Icon","Async","classNamesFunction","DelayedRender","getId","getNativeProps","getWindow","initializeComponentRef","inputProperties","isControlled","isIE11","textAreaProperties","warn","warnControlledUsage","warnMutuallyExclusive","getClassNames","DEFAULT_STATE_VALUE","COMPONENT_NAME","REVEAL_ICON_NAME","HIDE_ICON_NAME","TextFieldBase","_super","__extends","props","_this","call","_textElement","createRef","_onFocus","ev","onFocus","setState","isFocused","validateOnFocusIn","_validate","value","_onBlur","onBlur","validateOnFocusOut","_onRenderLabel","label","required","labelStyles","_classNames","subComponentStyles","undefined","createElement","htmlFor","_id","styles","disabled","id","_labelId","_onRenderDescription","description","className","_onRevealButtonClick","event","prevState","isRevealingPassword","_onInputChange","element","target","previousValue","_getValue","state","_lastChangeValue","_b","_a","onChange","_isControlled","uncontrolledValue","_async","process","env","NODE_ENV","errorMessage","_fallbackId","_descriptionId","_prefixId","_suffixId","_warnControlledUsage","defaultValue","String","_delayedValidate","debounce","deferredValidationTime","_lastValidation","Object","defineProperty","prototype","get","componentDidMount","_adjustInputHeight","validateOnLoad","componentWillUnmount","dispose","getSnapshotBeforeUpdate","prevProps","selection","selectionStart","selectionEnd","componentDidUpdate","snapshot","start","end","multiline","focus","setSelectionRange","prevValue","_shouldValidateAllChanges","render","borderless","invalid","iconProps","inputClassName","underlined","prefix","resizable","suffix","theme","autoAdjustHeight","canRevealPassword","revealPasswordAriaLabel","type","onRenderPrefix","_onRenderPrefix","_c","onRenderSuffix","_onRenderSuffix","_d","onRenderLabel","_e","onRenderDescription","_f","_errorMessage","isInvalid","hasRevealButton","_browserNeedsRevealButton","classNames","focused","hasLabel","hasErrorMessage","hasIcon","ref","elementRef","root","wrapper","fieldGroup","_renderTextArea","_renderInput","__assign","icon","revealButton","onClick","revealSpan","revealIcon","iconName","_isDescriptionAvailable","role","_renderErrorMessage","current","blur","select","setSelectionStart","setSelectionEnd","componentId","componentName","oldProps","valueProp","defaultValueProp","onChangeProp","readOnlyProp","_hasWarnedNullValue","concat","style","paddingBottom","textAreaProps","ariaLabelledBy","onInput","field","ariaLabel","readOnly","labelIds","push","inputProps","length","join","defaultRender","updatedInputProps","onRenderInput","_latestValidateValue","onGetErrorMessage","result","_notifyAfterValidate","currentValidation_1","then","onNotifyValidationResult","textField","height","scrollHeight","defaultProps","Component","__browserNeedsRevealButton","win","navigator","isEdge","test","userAgent"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  classNamesFunction,\n  DelayedRender,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from '../../Label';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase\n  extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField\n{\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _prefixId: string;\n  private _suffixId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n    this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      invalid,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      revealPasswordAriaLabel,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n    const isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div ref={this.props.elementRef} className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix} id={this._prefixId}>\n                {onRenderPrefix(this.props, this._onRenderPrefix)}\n              </div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button\n                aria-label={revealPasswordAriaLabel}\n                className={classNames.revealButton}\n                onClick={this._onRevealButtonClick}\n                aria-pressed={!!isRevealingPassword}\n                type=\"button\"\n              >\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix} id={this._suffixId}>\n                {onRenderSuffix(this.props, this._onRenderSuffix)}\n              </div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>{this._renderErrorMessage()}</DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  private _renderErrorMessage(): JSX.Element | null {\n    const errorMessage = this._errorMessage;\n\n    return errorMessage ? (\n      typeof errorMessage === 'string' ? (\n        <p className={this._classNames.errorMessage}>\n          <span data-automation-id=\"error-message\">{errorMessage}</span>\n        </p>\n      ) : (\n        <div className={this._classNames.errorMessage} data-automation-id=\"error-message\">\n          {errorMessage}\n        </div>\n      )\n    ) : null;\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const { invalid = !!this._errorMessage } = this.props;\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={invalid}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): JSX.Element | null {\n    const {\n      ariaLabel,\n      invalid = !!this._errorMessage,\n      onRenderPrefix,\n      onRenderSuffix,\n      prefix,\n      suffix,\n      type = 'text',\n      label,\n    } = this.props;\n\n    // build aria-labelledby list from label, prefix, and suffix\n    const labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement> = {\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id,\n      ...getNativeProps(this.props, inputProperties, ['defaultValue', 'type']),\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement as React.RefObject<HTMLInputElement>,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n    };\n\n    const defaultRender = (updatedInputProps: React.InputHTMLAttributes<HTMLInputElement>) => {\n      return <input {...updatedInputProps} />;\n    };\n    const onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if any of the following are true:\n    // - the value is undefined (in case one of the IE bugs comes back)\n    // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n    // - it's the same as the previous value\n    const previousValue = _getValue(this.props, this.state) || '';\n    if (value === undefined || value === this._lastChangeValue || value === previousValue) {\n      this._lastChangeValue = undefined;\n      return;\n    }\n    this._lastChangeValue = value;\n\n    this.props.onChange?.(event, value);\n\n    if (!this._isControlled) {\n      // ONLY if this is an uncontrolled component, update the displayed value.\n      // (Controlled components must update the `value` prop from `onChange`.)\n      this.setState({ uncontrolledValue: value });\n    }\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}