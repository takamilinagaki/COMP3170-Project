{"ast":null,"code":"import { __assign, __extends, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport { getLayerStyles } from './KeytipLayer.styles';\nimport { Keytip } from '../../Keytip';\nimport { Layer } from '../../Layer';\nimport { classNamesFunction, getDocument, arraysEqual, warn, isMac, EventGroup, Async, initializeComponentRef, KeyCodes, isElementVisibleAndNotHidden } from '../../Utilities';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { KeytipTree } from './KeytipTree';\nimport { ktpTargetFromId, ktpTargetFromSequences, sequencesToID, mergeOverflows } from '../../utilities/keytips/KeytipUtils';\nimport { transitionKeysContain } from '../../utilities/keytips/IKeytipTransitionKey';\nimport { KeytipEvents, KTP_LAYER_ID, KTP_ARIA_SEPARATOR } from '../../utilities/keytips/KeytipConstants';\n// Default sequence is Alt-Windows (Alt-Meta) in Windows, Option-Control (Alt-Control) in Mac\nvar defaultStartSequence = {\n  key: isMac() ? 'Control' : 'Meta',\n  modifierKeys: [KeyCodes.alt]\n};\n// Default exit sequence is the same as the start sequence\nvar defaultExitSequence = defaultStartSequence;\n// Default return sequence is Escape\nvar defaultReturnSequence = {\n  key: 'Escape'\n};\nvar getClassNames = classNamesFunction();\n/**\n * A layer that holds all keytip items\n * {@docCategory Keytips}\n */\nvar KeytipLayerBase = /** @class */function (_super) {\n  __extends(KeytipLayerBase, _super);\n  function KeytipLayerBase(props, context) {\n    var _this = _super.call(this, props, context) || this;\n    _this._keytipManager = KeytipManager.getInstance();\n    _this._delayedKeytipQueue = [];\n    _this._keyHandled = false;\n    _this._isKeytipInstanceTargetVisible = function (keySequences, instanceCount) {\n      var targetSelector = ktpTargetFromSequences(keySequences);\n      var matchingElements = document.querySelectorAll(targetSelector);\n      // If there are multiple elements for the keytip sequence, return true if the element instance\n      // that corresponds to the keytip instance is visible, otherwise return if there is only one instance\n      return matchingElements.length > 1 && instanceCount <= matchingElements.length ? isElementVisibleAndNotHidden(matchingElements[instanceCount - 1]) : instanceCount === 1;\n    };\n    _this._onDismiss = function (ev) {\n      // if we are in keytip mode, then exit keytip mode\n      if (_this.state.inKeytipMode) {\n        _this._exitKeytipMode(ev);\n      }\n    };\n    _this._onKeyDown = function (ev) {\n      _this._keyHandled = false;\n      // using key since which has been deprecated and key is now widely suporrted.\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which\n      var key = ev.key;\n      switch (key) {\n        case 'Tab':\n        case 'Enter':\n        case 'Spacebar':\n        case ' ':\n        case 'ArrowUp':\n        case 'Up':\n        case 'ArrowDown':\n        case 'Down':\n        case 'ArrowLeft':\n        case 'Left':\n        case 'ArrowRight':\n        case 'Right':\n          if (_this.state.inKeytipMode) {\n            _this._keyHandled = true;\n            _this._exitKeytipMode(ev);\n          }\n          break;\n        default:\n          // Special cases for browser-specific keys that are not at standard\n          // (according to http://www.w3.org/TR/uievents-key/#keys-navigation)\n          if (key === 'Esc') {\n            // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5290772/\n            key = 'Escape';\n          } else if (key === 'OS' || key === 'Win') {\n            // Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1232918\n            // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n            // and https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/16424492/\n            key = 'Meta';\n          }\n          var transitionKey = {\n            key: key\n          };\n          transitionKey.modifierKeys = _this._getModifierKey(key, ev);\n          _this.processTransitionInput(transitionKey, ev);\n          break;\n      }\n    };\n    _this._onKeyPress = function (ev) {\n      if (_this.state.inKeytipMode && !_this._keyHandled) {\n        // Call processInput\n        _this.processInput(ev.key.toLocaleLowerCase(), ev);\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    };\n    _this._onKeytipAdded = function (eventArgs) {\n      var _a;\n      var keytipProps = eventArgs.keytip;\n      var uniqueID = eventArgs.uniqueID;\n      _this._keytipTree.addNode(keytipProps, uniqueID);\n      _this._setKeytips();\n      // Add the keytip to the queue to show later\n      if (_this._keytipTree.isCurrentKeytipParent(keytipProps)) {\n        // Ensure existing children are still shown.\n        _this._delayedKeytipQueue = _this._delayedKeytipQueue.concat(((_a = _this._keytipTree.currentKeytip) === null || _a === void 0 ? void 0 : _a.children) || []);\n        _this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\n        // Ensure the child of currentKeytip is successfully added to currentKeytip's children and update it if not.\n        // Note: Added this condition because KeytipTree.addNode was not always reflecting updates made to a parent node\n        // in currentKeytip when that parent is the currentKeytip.\n        if (_this._keytipTree.currentKeytip && _this._keytipTree.currentKeytip.hasDynamicChildren && _this._keytipTree.currentKeytip.children.indexOf(keytipProps.id) < 0) {\n          var currNode = _this._keytipTree.getNode(_this._keytipTree.currentKeytip.id);\n          if (currNode) {\n            _this._keytipTree.currentKeytip = currNode;\n          }\n        }\n      }\n      _this._persistedKeytipChecks(keytipProps);\n    };\n    _this._onKeytipUpdated = function (eventArgs) {\n      var _a;\n      var keytipProps = eventArgs.keytip;\n      var uniqueID = eventArgs.uniqueID;\n      _this._keytipTree.updateNode(keytipProps, uniqueID);\n      _this._setKeytips();\n      if (_this._keytipTree.isCurrentKeytipParent(keytipProps)) {\n        // Ensure existing children are still shown.\n        _this._delayedKeytipQueue = _this._delayedKeytipQueue.concat(((_a = _this._keytipTree.currentKeytip) === null || _a === void 0 ? void 0 : _a.children) || []);\n        _this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\n      }\n      _this._persistedKeytipChecks(keytipProps);\n    };\n    /**\n     * Helper function to do checks related to persisted/overflow keytips\n     * Done on keytip added and keytip updated\n     *\n     * @param keytipProps - Keytip props\n     */\n    _this._persistedKeytipChecks = function (keytipProps) {\n      if (_this._newCurrentKeytipSequences && arraysEqual(keytipProps.keySequences, _this._newCurrentKeytipSequences)) {\n        _this._triggerKeytipImmediately(keytipProps);\n      }\n      if (_this._isCurrentKeytipAnAlias(keytipProps)) {\n        var keytipSequence = keytipProps.keySequences;\n        if (keytipProps.overflowSetSequence) {\n          keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\n        }\n        _this._keytipTree.currentKeytip = _this._keytipTree.getNode(sequencesToID(keytipSequence));\n      }\n    };\n    _this._onKeytipRemoved = function (eventArgs) {\n      var keytipProps = eventArgs.keytip;\n      var uniqueID = eventArgs.uniqueID;\n      // Remove keytip from the delayed queue\n      _this._removeKeytipFromQueue(sequencesToID(keytipProps.keySequences));\n      // Remove the node from the Tree\n      _this._keytipTree.removeNode(keytipProps, uniqueID);\n      _this._setKeytips();\n    };\n    _this._onPersistedKeytipAdded = function (eventArgs) {\n      var keytipProps = eventArgs.keytip;\n      var uniqueID = eventArgs.uniqueID;\n      _this._keytipTree.addNode(keytipProps, uniqueID, true);\n    };\n    _this._onPersistedKeytipRemoved = function (eventArgs) {\n      var keytipProps = eventArgs.keytip;\n      var uniqueID = eventArgs.uniqueID;\n      _this._keytipTree.removeNode(keytipProps, uniqueID);\n    };\n    _this._onPersistedKeytipExecute = function (eventArgs) {\n      _this._persistedKeytipExecute(eventArgs.overflowButtonSequences, eventArgs.keytipSequences);\n    };\n    /**\n     * Sets if we are in keytip mode.\n     * Note, this sets both the state for the layer as well as\n     * the value that the manager will expose externally.\n     * @param inKeytipMode - Boolean so set whether we are in keytip mode or not\n     */\n    _this._setInKeytipMode = function (inKeytipMode) {\n      _this.setState({\n        inKeytipMode: inKeytipMode\n      });\n      _this._keytipManager.inKeytipMode = inKeytipMode;\n    };\n    /**\n     * Emits a warning if duplicate keytips are found for the children of the current keytip\n     */\n    _this._warnIfDuplicateKeytips = function () {\n      var duplicateKeytips = _this._getDuplicateIds(_this._keytipTree.getChildren());\n      if (duplicateKeytips.length) {\n        warn('Duplicate keytips found for ' + duplicateKeytips.join(', '));\n      }\n    };\n    /**\n     * Returns duplicates among keytip IDs.\n     * If the returned array is empty, no duplicates were found.\n     *\n     * @param keytipIds - Array of keytip IDs to find duplicates for\n     * @returns - Array of duplicates that were found. Each duplicate will only be added once to this array.\n     */\n    _this._getDuplicateIds = function (keytipIds) {\n      var seenIds = {};\n      return keytipIds.filter(function (keytipId) {\n        seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\n        // Only add the first duplicate keytip seen\n        return seenIds[keytipId] === 2;\n      });\n    };\n    initializeComponentRef(_this);\n    _this._events = new EventGroup(_this);\n    _this._async = new Async(_this);\n    var keytips = _this._keytipManager.getKeytips();\n    _this.state = {\n      inKeytipMode: false,\n      keytips: keytips,\n      visibleKeytips: _this._getVisibleKeytips(keytips)\n    };\n    _this._buildTree();\n    _this._currentSequence = '';\n    // Add keytip listeners\n    _this._events.on(_this._keytipManager, KeytipEvents.KEYTIP_ADDED, _this._onKeytipAdded);\n    _this._events.on(_this._keytipManager, KeytipEvents.KEYTIP_UPDATED, _this._onKeytipUpdated);\n    _this._events.on(_this._keytipManager, KeytipEvents.KEYTIP_REMOVED, _this._onKeytipRemoved);\n    _this._events.on(_this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_ADDED, _this._onPersistedKeytipAdded);\n    _this._events.on(_this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_REMOVED, _this._onPersistedKeytipRemoved);\n    _this._events.on(_this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, _this._onPersistedKeytipExecute);\n    return _this;\n  }\n  KeytipLayerBase.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      content = _a.content,\n      styles = _a.styles;\n    var _b = this.state,\n      keytips = _b.keytips,\n      visibleKeytips = _b.visibleKeytips;\n    this._classNames = getClassNames(styles, {});\n    return React.createElement(Layer, {\n      styles: getLayerStyles\n    }, React.createElement(\"span\", {\n      id: KTP_LAYER_ID,\n      className: this._classNames.innerContent\n    }, \"\".concat(content).concat(KTP_ARIA_SEPARATOR)), keytips && keytips.map(function (keytipProps, index) {\n      return React.createElement(\"span\", {\n        key: index,\n        id: sequencesToID(keytipProps.keySequences),\n        className: _this._classNames.innerContent\n      }, keytipProps.keySequences.join(KTP_ARIA_SEPARATOR));\n    }), visibleKeytips && visibleKeytips.map(function (visibleKeytipProps) {\n      return React.createElement(Keytip, __assign({\n        key: sequencesToID(visibleKeytipProps.keySequences)\n      }, visibleKeytipProps));\n    }));\n  };\n  KeytipLayerBase.prototype.componentDidMount = function () {\n    // Add window listeners\n    this._events.on(window, 'mouseup', this._onDismiss, true /* useCapture */);\n    this._events.on(window, 'pointerup', this._onDismiss, true /* useCapture */);\n    this._events.on(window, 'resize', this._onDismiss);\n    this._events.on(window, 'keydown', this._onKeyDown, true /* useCapture */);\n    this._events.on(window, 'keypress', this._onKeyPress, true /* useCapture */);\n    this._events.on(window, 'scroll', this._onDismiss, true /* useCapture */);\n    // Add keytip listeners\n    this._events.on(this._keytipManager, KeytipEvents.ENTER_KEYTIP_MODE, this._enterKeytipMode);\n    this._events.on(this._keytipManager, KeytipEvents.EXIT_KEYTIP_MODE, this._exitKeytipMode);\n  };\n  KeytipLayerBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n    this._events.dispose();\n  };\n  // The below public functions are only public for testing purposes\n  // They are not intended to be used in app code by using a KeytipLayer reference\n  KeytipLayerBase.prototype.getCurrentSequence = function () {\n    return this._currentSequence;\n  };\n  KeytipLayerBase.prototype.getKeytipTree = function () {\n    return this._keytipTree;\n  };\n  /**\n   * Processes an IKeytipTransitionKey entered by the user\n   *\n   * @param transitionKey - IKeytipTransitionKey received by the layer to process\n   */\n  KeytipLayerBase.prototype.processTransitionInput = function (transitionKey, ev) {\n    var currKtp = this._keytipTree.currentKeytip;\n    if (transitionKeysContain(this.props.keytipExitSequences, transitionKey) && currKtp) {\n      // If key sequence is in 'exit sequences', exit keytip mode\n      this._keyHandled = true;\n      this._exitKeytipMode(ev);\n    } else if (transitionKeysContain(this.props.keytipReturnSequences, transitionKey)) {\n      // If key sequence is in return sequences, move currentKeytip to parent (or if currentKeytip is the root, exit)\n      if (currKtp) {\n        this._keyHandled = true;\n        if (currKtp.id === this._keytipTree.root.id) {\n          // We are at the root, exit keytip mode\n          this._exitKeytipMode(ev);\n        } else {\n          // If this keytip has a onReturn prop, we execute the func.\n          if (currKtp.onReturn) {\n            currKtp.onReturn(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\n          }\n          // Reset currentSequence\n          this._currentSequence = '';\n          // Return pointer to its parent\n          this._keytipTree.currentKeytip = this._keytipTree.getNode(currKtp.parent);\n          // Show children keytips of the new currentKeytip\n          this.showKeytips(this._keytipTree.getChildren());\n          this._warnIfDuplicateKeytips();\n        }\n      }\n    } else if (transitionKeysContain(this.props.keytipStartSequences, transitionKey) && !currKtp) {\n      // If key sequence is in 'entry sequences' and currentKeytip is null, we enter keytip mode\n      this._keyHandled = true;\n      this._enterKeytipMode(transitionKey);\n      this._warnIfDuplicateKeytips();\n    }\n  };\n  /**\n   * Processes inputs from the document listener and traverse the keytip tree\n   *\n   * @param key - Key pressed by the user\n   */\n  KeytipLayerBase.prototype.processInput = function (key, ev) {\n    // Concat the input key with the current sequence\n    var currSequence = this._currentSequence + key;\n    var currKtp = this._keytipTree.currentKeytip;\n    // currentKeytip must be defined, otherwise we haven't entered keytip mode yet\n    if (currKtp) {\n      var node = this._keytipTree.getExactMatchedNode(currSequence, currKtp);\n      if (node) {\n        this._keytipTree.currentKeytip = currKtp = node;\n        var currKtpChildren = this._keytipTree.getChildren();\n        // Execute this node's onExecute if defined\n        if (currKtp.onExecute) {\n          currKtp.onExecute(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\n          // Reset currKtp, this might have changed from the onExecute\n          currKtp = this._keytipTree.currentKeytip;\n        }\n        // To exit keytipMode after executing the keytip it must not have a menu or have dynamic children\n        if (currKtpChildren.length === 0 && !(currKtp.hasDynamicChildren || currKtp.hasMenu)) {\n          this._exitKeytipMode(ev);\n        } else {\n          // Show all children keytips\n          this.showKeytips(currKtpChildren);\n          this._warnIfDuplicateKeytips();\n        }\n        // Clear currentSequence\n        this._currentSequence = '';\n        return;\n      }\n      var partialNodes = this._keytipTree.getPartiallyMatchedNodes(currSequence, currKtp);\n      if (partialNodes.length > 0) {\n        // We found nodes that partially match the sequence, so we show only those\n        // Omit showing persisted nodes here\n        var ids = partialNodes.filter(function (partialNode) {\n          return !partialNode.persisted;\n        }).map(function (partialNode) {\n          return partialNode.id;\n        });\n        this.showKeytips(ids);\n        // Save currentSequence\n        this._currentSequence = currSequence;\n      }\n    }\n  };\n  /**\n   * Show the given keytips and hide all others\n   *\n   * @param ids - Keytip IDs to show\n   */\n  KeytipLayerBase.prototype.showKeytips = function (ids) {\n    // Update the visible prop in the manager\n    for (var _i = 0, _a = this._keytipManager.getKeytips(); _i < _a.length; _i++) {\n      var keytip = _a[_i];\n      var keytipId = sequencesToID(keytip.keySequences);\n      if (keytip.overflowSetSequence) {\n        // Check if the ID with the overflow is the keytip we're looking for\n        keytipId = sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence));\n      }\n      if (ids.indexOf(keytipId) >= 0) {\n        keytip.visible = true;\n      } else {\n        keytip.visible = false;\n      }\n    }\n    // Apply the manager changes to the Layer state\n    this._setKeytips();\n  };\n  /**\n   * Enters keytip mode for this layer\n   */\n  KeytipLayerBase.prototype._enterKeytipMode = function (transitionKey) {\n    if (this._keytipManager.shouldEnterKeytipMode) {\n      if (this._keytipManager.delayUpdatingKeytipChange) {\n        this._buildTree();\n        this._setKeytips();\n      }\n      this._keytipTree.currentKeytip = this._keytipTree.root;\n      // Show children of root\n      this.showKeytips(this._keytipTree.getChildren());\n      this._setInKeytipMode(true /* inKeytipMode */);\n      if (this.props.onEnterKeytipMode) {\n        this.props.onEnterKeytipMode(transitionKey);\n      }\n    }\n  };\n  KeytipLayerBase.prototype._buildTree = function () {\n    this._keytipTree = new KeytipTree();\n    // Add regular and persisted keytips to the tree\n    for (var _i = 0, _a = Object.keys(this._keytipManager.keytips); _i < _a.length; _i++) {\n      var id = _a[_i];\n      var uniqueKeytip = this._keytipManager.keytips[id];\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\n    }\n    for (var _b = 0, _c = Object.keys(this._keytipManager.persistedKeytips); _b < _c.length; _b++) {\n      var id = _c[_b];\n      var uniqueKeytip = this._keytipManager.persistedKeytips[id];\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\n    }\n  };\n  /**\n   * Exits keytip mode for this layer\n   */\n  KeytipLayerBase.prototype._exitKeytipMode = function (ev) {\n    this._keytipTree.currentKeytip = undefined;\n    this._currentSequence = '';\n    // Hide all keytips\n    this.showKeytips([]);\n    // Reset the delayed keytips if any\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n    this._delayedKeytipQueue = [];\n    this._setInKeytipMode(false /* inKeytipMode */);\n    if (this.props.onExitKeytipMode) {\n      this.props.onExitKeytipMode(ev);\n    }\n  };\n  /**\n   * Sets the keytips state property\n   *\n   * @param keytipProps - Keytips to set in this layer\n   */\n  KeytipLayerBase.prototype._setKeytips = function (keytipProps) {\n    if (keytipProps === void 0) {\n      keytipProps = this._keytipManager.getKeytips();\n    }\n    this.setState({\n      keytips: keytipProps,\n      visibleKeytips: this._getVisibleKeytips(keytipProps)\n    });\n  };\n  /**\n   * Callback function to use for persisted keytips\n   *\n   * @param overflowButtonSequences - The overflow button sequence to execute\n   * @param keytipSequences - The keytip that should become the 'currentKeytip' when it is registered\n   */\n  KeytipLayerBase.prototype._persistedKeytipExecute = function (overflowButtonSequences, keytipSequences) {\n    // Save newCurrentKeytip for later\n    this._newCurrentKeytipSequences = keytipSequences;\n    // Execute the overflow button's onExecute\n    var overflowKeytipNode = this._keytipTree.getNode(sequencesToID(overflowButtonSequences));\n    if (overflowKeytipNode && overflowKeytipNode.onExecute) {\n      overflowKeytipNode.onExecute(this._getKtpExecuteTarget(overflowKeytipNode), this._getKtpTarget(overflowKeytipNode));\n    }\n  };\n  KeytipLayerBase.prototype._getVisibleKeytips = function (keytips) {\n    var _this = this;\n    // Filter out non-visible keytips and duplicates\n    var seenIds = {};\n    return keytips.filter(function (keytip) {\n      var keytipId = sequencesToID(keytip.keySequences);\n      if (keytip.overflowSetSequence) {\n        // Account for overflow set sequences when checking for duplicates\n        keytipId = sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence));\n      }\n      seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\n      // Return true only if the keytip is visible and the corresponding target is also visible\n      return keytip.visible && _this._isKeytipInstanceTargetVisible(keytip.keySequences, seenIds[keytipId]);\n    });\n  };\n  /**\n   * Gets the ModifierKeyCodes based on the keyboard event\n   *\n   * @param ev - React.KeyboardEvent\n   * @returns List of ModifierKeyCodes that were pressed\n   */\n  KeytipLayerBase.prototype._getModifierKey = function (key, ev) {\n    var modifierKeys = [];\n    if (ev.altKey && key !== 'Alt') {\n      modifierKeys.push(KeyCodes.alt);\n    }\n    if (ev.ctrlKey && key !== 'Control') {\n      modifierKeys.push(KeyCodes.ctrl);\n    }\n    if (ev.shiftKey && key !== 'Shift') {\n      modifierKeys.push(KeyCodes.shift);\n    }\n    if (ev.metaKey && key !== 'Meta') {\n      modifierKeys.push(KeyCodes.leftWindow);\n    }\n    return modifierKeys.length ? modifierKeys : undefined;\n  };\n  /**\n   * Trigger a keytip immediately and set it as the current keytip\n   *\n   * @param keytipProps - Keytip to trigger immediately\n   */\n  KeytipLayerBase.prototype._triggerKeytipImmediately = function (keytipProps) {\n    // This keytip should become the currentKeytip and should execute right away\n    var keytipSequence = __spreadArray([], keytipProps.keySequences, true);\n    if (keytipProps.overflowSetSequence) {\n      keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\n    }\n    // Set currentKeytip\n    this._keytipTree.currentKeytip = this._keytipTree.getNode(sequencesToID(keytipSequence));\n    if (this._keytipTree.currentKeytip) {\n      // Show all children keytips if any\n      var children = this._keytipTree.getChildren();\n      if (children.length) {\n        this.showKeytips(children);\n      }\n      if (this._keytipTree.currentKeytip.onExecute) {\n        this._keytipTree.currentKeytip.onExecute(this._getKtpExecuteTarget(this._keytipTree.currentKeytip), this._getKtpTarget(this._keytipTree.currentKeytip));\n      }\n    }\n    // Unset _newCurrKtpSequences\n    this._newCurrentKeytipSequences = undefined;\n  };\n  KeytipLayerBase.prototype._addKeytipToQueue = function (keytipID) {\n    var _this = this;\n    // Add keytip\n    this._delayedKeytipQueue.push(keytipID);\n    // Clear timeout\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n    // Reset timeout\n    this._delayedQueueTimeout = this._async.setTimeout(function () {\n      if (_this._delayedKeytipQueue.length) {\n        _this.showKeytips(_this._delayedKeytipQueue);\n        _this._delayedKeytipQueue = [];\n      }\n    }, 300);\n  };\n  KeytipLayerBase.prototype._removeKeytipFromQueue = function (keytipID) {\n    var _this = this;\n    var index = this._delayedKeytipQueue.indexOf(keytipID);\n    if (index >= 0) {\n      // Remove keytip\n      this._delayedKeytipQueue.splice(index, 1);\n      // Clear timeout\n      this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n      // Reset timeout\n      this._delayedQueueTimeout = this._async.setTimeout(function () {\n        if (_this._delayedKeytipQueue.length) {\n          _this.showKeytips(_this._delayedKeytipQueue);\n          _this._delayedKeytipQueue = [];\n        }\n      }, 300);\n    }\n  };\n  KeytipLayerBase.prototype._getKtpExecuteTarget = function (currKtp) {\n    return getDocument().querySelector(ktpTargetFromId(currKtp.id));\n  };\n  KeytipLayerBase.prototype._getKtpTarget = function (currKtp) {\n    return getDocument().querySelector(ktpTargetFromSequences(currKtp.keySequences));\n  };\n  /**\n   * Returns T/F if the keytipProps keySequences match the currentKeytip, and the currentKeytip is in an overflow well\n   * This will make 'keytipProps' the new currentKeytip\n   *\n   * @param keytipProps - Keytip props to check\n   * @returns - T/F if this keytip should become the currentKeytip\n   */\n  KeytipLayerBase.prototype._isCurrentKeytipAnAlias = function (keytipProps) {\n    var currKtp = this._keytipTree.currentKeytip;\n    if (currKtp && (currKtp.overflowSetSequence || currKtp.persisted) && arraysEqual(keytipProps.keySequences, currKtp.keySequences)) {\n      return true;\n    }\n    return false;\n  };\n  KeytipLayerBase.defaultProps = {\n    keytipStartSequences: [defaultStartSequence],\n    keytipExitSequences: [defaultExitSequence],\n    keytipReturnSequences: [defaultReturnSequence],\n    content: ''\n  };\n  return KeytipLayerBase;\n}(React.Component);\nexport { KeytipLayerBase };","map":{"version":3,"names":["React","getLayerStyles","Keytip","Layer","classNamesFunction","getDocument","arraysEqual","warn","isMac","EventGroup","Async","initializeComponentRef","KeyCodes","isElementVisibleAndNotHidden","KeytipManager","KeytipTree","ktpTargetFromId","ktpTargetFromSequences","sequencesToID","mergeOverflows","transitionKeysContain","KeytipEvents","KTP_LAYER_ID","KTP_ARIA_SEPARATOR","defaultStartSequence","key","modifierKeys","alt","defaultExitSequence","defaultReturnSequence","getClassNames","KeytipLayerBase","_super","__extends","props","context","_this","call","_keytipManager","getInstance","_delayedKeytipQueue","_keyHandled","_isKeytipInstanceTargetVisible","keySequences","instanceCount","targetSelector","matchingElements","document","querySelectorAll","length","_onDismiss","ev","state","inKeytipMode","_exitKeytipMode","_onKeyDown","transitionKey","_getModifierKey","processTransitionInput","_onKeyPress","processInput","toLocaleLowerCase","preventDefault","stopPropagation","_onKeytipAdded","eventArgs","keytipProps","keytip","uniqueID","_keytipTree","addNode","_setKeytips","isCurrentKeytipParent","concat","_a","currentKeytip","children","_addKeytipToQueue","hasDynamicChildren","indexOf","id","currNode","getNode","_persistedKeytipChecks","_onKeytipUpdated","updateNode","_newCurrentKeytipSequences","_triggerKeytipImmediately","_isCurrentKeytipAnAlias","keytipSequence","overflowSetSequence","_onKeytipRemoved","_removeKeytipFromQueue","removeNode","_onPersistedKeytipAdded","_onPersistedKeytipRemoved","_onPersistedKeytipExecute","_persistedKeytipExecute","overflowButtonSequences","keytipSequences","_setInKeytipMode","setState","_warnIfDuplicateKeytips","duplicateKeytips","_getDuplicateIds","getChildren","join","keytipIds","seenIds","filter","keytipId","_events","_async","keytips","getKeytips","visibleKeytips","_getVisibleKeytips","_buildTree","_currentSequence","on","KEYTIP_ADDED","KEYTIP_UPDATED","KEYTIP_REMOVED","PERSISTED_KEYTIP_ADDED","PERSISTED_KEYTIP_REMOVED","PERSISTED_KEYTIP_EXECUTE","prototype","render","content","styles","_b","_classNames","createElement","className","innerContent","map","index","visibleKeytipProps","__assign","componentDidMount","window","ENTER_KEYTIP_MODE","_enterKeytipMode","EXIT_KEYTIP_MODE","componentWillUnmount","dispose","getCurrentSequence","getKeytipTree","currKtp","keytipExitSequences","keytipReturnSequences","root","onReturn","_getKtpExecuteTarget","_getKtpTarget","parent","showKeytips","keytipStartSequences","currSequence","node","getExactMatchedNode","currKtpChildren","onExecute","hasMenu","partialNodes","getPartiallyMatchedNodes","ids","partialNode","persisted","_i","visible","shouldEnterKeytipMode","delayUpdatingKeytipChange","onEnterKeytipMode","Object","keys","uniqueKeytip","_c","persistedKeytips","undefined","_delayedQueueTimeout","clearTimeout","onExitKeytipMode","overflowKeytipNode","altKey","push","ctrlKey","ctrl","shiftKey","shift","metaKey","leftWindow","__spreadArray","keytipID","setTimeout","splice","querySelector","defaultProps","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/KeytipLayer/KeytipLayer.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getLayerStyles } from './KeytipLayer.styles';\nimport { Keytip } from '../../Keytip';\nimport { Layer } from '../../Layer';\nimport {\n  classNamesFunction,\n  getDocument,\n  arraysEqual,\n  warn,\n  isMac,\n  EventGroup,\n  Async,\n  initializeComponentRef,\n  KeyCodes,\n  isElementVisibleAndNotHidden,\n} from '../../Utilities';\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\nimport { KeytipTree } from './KeytipTree';\nimport {\n  ktpTargetFromId,\n  ktpTargetFromSequences,\n  sequencesToID,\n  mergeOverflows,\n} from '../../utilities/keytips/KeytipUtils';\nimport { transitionKeysContain } from '../../utilities/keytips/IKeytipTransitionKey';\nimport { KeytipEvents, KTP_LAYER_ID, KTP_ARIA_SEPARATOR } from '../../utilities/keytips/KeytipConstants';\nimport type { IKeytipLayerProps, IKeytipLayerStyles, IKeytipLayerStyleProps } from './KeytipLayer.types';\nimport type { IKeytipProps } from '../../Keytip';\nimport type { IKeytipTreeNode } from './IKeytipTreeNode';\nimport type { KeytipTransitionModifier, IKeytipTransitionKey } from '../../utilities/keytips/IKeytipTransitionKey';\n\nexport interface IKeytipLayerState {\n  inKeytipMode: boolean;\n  keytips: IKeytipProps[];\n  visibleKeytips: IKeytipProps[];\n}\n\n// Default sequence is Alt-Windows (Alt-Meta) in Windows, Option-Control (Alt-Control) in Mac\nconst defaultStartSequence: IKeytipTransitionKey = {\n  key: isMac() ? 'Control' : 'Meta',\n  modifierKeys: [KeyCodes.alt],\n};\n\n// Default exit sequence is the same as the start sequence\nconst defaultExitSequence: IKeytipTransitionKey = defaultStartSequence;\n\n// Default return sequence is Escape\nconst defaultReturnSequence: IKeytipTransitionKey = {\n  key: 'Escape',\n};\n\nconst getClassNames = classNamesFunction<IKeytipLayerStyleProps, IKeytipLayerStyles>();\n\n/**\n * A layer that holds all keytip items\n * {@docCategory Keytips}\n */\nexport class KeytipLayerBase extends React.Component<IKeytipLayerProps, IKeytipLayerState> {\n  public static defaultProps: IKeytipLayerProps = {\n    keytipStartSequences: [defaultStartSequence],\n    keytipExitSequences: [defaultExitSequence],\n    keytipReturnSequences: [defaultReturnSequence],\n    content: '',\n  };\n\n  private _events: EventGroup;\n  private _async: Async;\n\n  private _keytipTree: KeytipTree;\n\n  private _keytipManager: KeytipManager = KeytipManager.getInstance();\n  private _classNames: { [key in keyof IKeytipLayerStyles]: string };\n  private _currentSequence: string;\n  private _newCurrentKeytipSequences?: string[];\n\n  private _delayedKeytipQueue: string[] = [];\n  private _delayedQueueTimeout: number;\n\n  private _keyHandled = false;\n\n  constructor(props: IKeytipLayerProps, context: any) {\n    super(props, context);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n\n    const keytips = this._keytipManager.getKeytips();\n\n    this.state = {\n      inKeytipMode: false,\n      keytips,\n      visibleKeytips: this._getVisibleKeytips(keytips),\n    };\n\n    this._buildTree();\n\n    this._currentSequence = '';\n\n    // Add keytip listeners\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_ADDED, this._onKeytipAdded);\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_UPDATED, this._onKeytipUpdated);\n    this._events.on(this._keytipManager, KeytipEvents.KEYTIP_REMOVED, this._onKeytipRemoved);\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_ADDED, this._onPersistedKeytipAdded);\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_REMOVED, this._onPersistedKeytipRemoved);\n    this._events.on(this._keytipManager, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, this._onPersistedKeytipExecute);\n  }\n\n  public render(): JSX.Element {\n    const { content, styles } = this.props;\n\n    const { keytips, visibleKeytips } = this.state;\n\n    this._classNames = getClassNames(styles, {});\n\n    return (\n      <Layer styles={getLayerStyles}>\n        <span id={KTP_LAYER_ID} className={this._classNames.innerContent}>{`${content}${KTP_ARIA_SEPARATOR}`}</span>\n        {keytips &&\n          keytips.map((keytipProps: IKeytipProps, index: number) => {\n            return (\n              <span key={index} id={sequencesToID(keytipProps.keySequences)} className={this._classNames.innerContent}>\n                {keytipProps.keySequences.join(KTP_ARIA_SEPARATOR)}\n              </span>\n            );\n          })}\n        {visibleKeytips &&\n          visibleKeytips.map((visibleKeytipProps: IKeytipProps) => {\n            return <Keytip key={sequencesToID(visibleKeytipProps.keySequences)} {...visibleKeytipProps} />;\n          })}\n      </Layer>\n    );\n  }\n\n  public componentDidMount(): void {\n    // Add window listeners\n    this._events.on(window, 'mouseup', this._onDismiss, true /* useCapture */);\n    this._events.on(window, 'pointerup', this._onDismiss, true /* useCapture */);\n    this._events.on(window, 'resize', this._onDismiss);\n    this._events.on(window, 'keydown', this._onKeyDown, true /* useCapture */);\n    this._events.on(window, 'keypress', this._onKeyPress, true /* useCapture */);\n    this._events.on(window, 'scroll', this._onDismiss, true /* useCapture */);\n\n    // Add keytip listeners\n    this._events.on(this._keytipManager, KeytipEvents.ENTER_KEYTIP_MODE, this._enterKeytipMode);\n    this._events.on(this._keytipManager, KeytipEvents.EXIT_KEYTIP_MODE, this._exitKeytipMode);\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  // The below public functions are only public for testing purposes\n  // They are not intended to be used in app code by using a KeytipLayer reference\n\n  public getCurrentSequence(): string {\n    return this._currentSequence;\n  }\n\n  public getKeytipTree(): KeytipTree {\n    return this._keytipTree;\n  }\n\n  /**\n   * Processes an IKeytipTransitionKey entered by the user\n   *\n   * @param transitionKey - IKeytipTransitionKey received by the layer to process\n   */\n  public processTransitionInput(transitionKey: IKeytipTransitionKey, ev?: React.KeyboardEvent<HTMLElement>): void {\n    const currKtp = this._keytipTree.currentKeytip;\n    if (transitionKeysContain(this.props.keytipExitSequences!, transitionKey) && currKtp) {\n      // If key sequence is in 'exit sequences', exit keytip mode\n      this._keyHandled = true;\n      this._exitKeytipMode(ev);\n    } else if (transitionKeysContain(this.props.keytipReturnSequences!, transitionKey)) {\n      // If key sequence is in return sequences, move currentKeytip to parent (or if currentKeytip is the root, exit)\n      if (currKtp) {\n        this._keyHandled = true;\n        if (currKtp.id === this._keytipTree.root.id) {\n          // We are at the root, exit keytip mode\n          this._exitKeytipMode(ev);\n        } else {\n          // If this keytip has a onReturn prop, we execute the func.\n          if (currKtp.onReturn) {\n            currKtp.onReturn(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\n          }\n\n          // Reset currentSequence\n          this._currentSequence = '';\n          // Return pointer to its parent\n          this._keytipTree.currentKeytip = this._keytipTree.getNode(currKtp.parent);\n          // Show children keytips of the new currentKeytip\n          this.showKeytips(this._keytipTree.getChildren());\n          this._warnIfDuplicateKeytips();\n        }\n      }\n    } else if (transitionKeysContain(this.props.keytipStartSequences!, transitionKey) && !currKtp) {\n      // If key sequence is in 'entry sequences' and currentKeytip is null, we enter keytip mode\n      this._keyHandled = true;\n      this._enterKeytipMode(transitionKey);\n      this._warnIfDuplicateKeytips();\n    }\n  }\n\n  /**\n   * Processes inputs from the document listener and traverse the keytip tree\n   *\n   * @param key - Key pressed by the user\n   */\n  public processInput(key: string, ev?: React.KeyboardEvent<HTMLElement>): void {\n    // Concat the input key with the current sequence\n    const currSequence: string = this._currentSequence + key;\n    let currKtp = this._keytipTree.currentKeytip;\n\n    // currentKeytip must be defined, otherwise we haven't entered keytip mode yet\n    if (currKtp) {\n      const node = this._keytipTree.getExactMatchedNode(currSequence, currKtp);\n      if (node) {\n        this._keytipTree.currentKeytip = currKtp = node;\n        const currKtpChildren = this._keytipTree.getChildren();\n\n        // Execute this node's onExecute if defined\n        if (currKtp.onExecute) {\n          currKtp.onExecute(this._getKtpExecuteTarget(currKtp), this._getKtpTarget(currKtp));\n          // Reset currKtp, this might have changed from the onExecute\n          currKtp = this._keytipTree.currentKeytip;\n        }\n\n        // To exit keytipMode after executing the keytip it must not have a menu or have dynamic children\n        if (currKtpChildren.length === 0 && !(currKtp.hasDynamicChildren || currKtp.hasMenu)) {\n          this._exitKeytipMode(ev);\n        } else {\n          // Show all children keytips\n          this.showKeytips(currKtpChildren);\n          this._warnIfDuplicateKeytips();\n        }\n\n        // Clear currentSequence\n        this._currentSequence = '';\n        return;\n      }\n\n      const partialNodes = this._keytipTree.getPartiallyMatchedNodes(currSequence, currKtp);\n      if (partialNodes.length > 0) {\n        // We found nodes that partially match the sequence, so we show only those\n        // Omit showing persisted nodes here\n        const ids = partialNodes\n          .filter((partialNode: IKeytipTreeNode) => {\n            return !partialNode.persisted;\n          })\n          .map((partialNode: IKeytipTreeNode) => {\n            return partialNode.id;\n          });\n        this.showKeytips(ids);\n\n        // Save currentSequence\n        this._currentSequence = currSequence;\n      }\n    }\n  }\n\n  /**\n   * Show the given keytips and hide all others\n   *\n   * @param ids - Keytip IDs to show\n   */\n  public showKeytips(ids: string[]): void {\n    // Update the visible prop in the manager\n    for (const keytip of this._keytipManager.getKeytips()) {\n      let keytipId = sequencesToID(keytip.keySequences);\n      if (keytip.overflowSetSequence) {\n        // Check if the ID with the overflow is the keytip we're looking for\n        keytipId = sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence));\n      }\n      if (ids.indexOf(keytipId) >= 0) {\n        keytip.visible = true;\n      } else {\n        keytip.visible = false;\n      }\n    }\n    // Apply the manager changes to the Layer state\n    this._setKeytips();\n  }\n\n  /**\n   * Enters keytip mode for this layer\n   */\n  private _enterKeytipMode(transitionKey?: IKeytipTransitionKey): void {\n    if (this._keytipManager.shouldEnterKeytipMode) {\n      if (this._keytipManager.delayUpdatingKeytipChange) {\n        this._buildTree();\n        this._setKeytips();\n      }\n      this._keytipTree.currentKeytip = this._keytipTree.root;\n      // Show children of root\n      this.showKeytips(this._keytipTree.getChildren());\n\n      this._setInKeytipMode(true /* inKeytipMode */);\n\n      if (this.props.onEnterKeytipMode) {\n        this.props.onEnterKeytipMode(transitionKey);\n      }\n    }\n  }\n\n  private _buildTree(): void {\n    this._keytipTree = new KeytipTree();\n    // Add regular and persisted keytips to the tree\n    for (const id of Object.keys(this._keytipManager.keytips)) {\n      const uniqueKeytip = this._keytipManager.keytips[id];\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\n    }\n\n    for (const id of Object.keys(this._keytipManager.persistedKeytips)) {\n      const uniqueKeytip = this._keytipManager.persistedKeytips[id];\n      this._keytipTree.addNode(uniqueKeytip.keytip, uniqueKeytip.uniqueID);\n    }\n  }\n\n  /**\n   * Exits keytip mode for this layer\n   */\n  private _exitKeytipMode(ev?: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._keytipTree.currentKeytip = undefined;\n    this._currentSequence = '';\n    // Hide all keytips\n    this.showKeytips([]);\n\n    // Reset the delayed keytips if any\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n    this._delayedKeytipQueue = [];\n\n    this._setInKeytipMode(false /* inKeytipMode */);\n\n    if (this.props.onExitKeytipMode) {\n      this.props.onExitKeytipMode(ev);\n    }\n  }\n\n  /**\n   * Sets the keytips state property\n   *\n   * @param keytipProps - Keytips to set in this layer\n   */\n  private _setKeytips(keytipProps: IKeytipProps[] = this._keytipManager.getKeytips()) {\n    this.setState({ keytips: keytipProps, visibleKeytips: this._getVisibleKeytips(keytipProps) });\n  }\n\n  /**\n   * Callback function to use for persisted keytips\n   *\n   * @param overflowButtonSequences - The overflow button sequence to execute\n   * @param keytipSequences - The keytip that should become the 'currentKeytip' when it is registered\n   */\n  private _persistedKeytipExecute(overflowButtonSequences: string[], keytipSequences: string[]) {\n    // Save newCurrentKeytip for later\n    this._newCurrentKeytipSequences = keytipSequences;\n\n    // Execute the overflow button's onExecute\n    const overflowKeytipNode = this._keytipTree.getNode(sequencesToID(overflowButtonSequences));\n    if (overflowKeytipNode && overflowKeytipNode.onExecute) {\n      overflowKeytipNode.onExecute(\n        this._getKtpExecuteTarget(overflowKeytipNode),\n        this._getKtpTarget(overflowKeytipNode),\n      );\n    }\n  }\n\n  private _getVisibleKeytips(keytips: IKeytipProps[]): IKeytipProps[] {\n    // Filter out non-visible keytips and duplicates\n    const seenIds: { [childSequence: string]: number } = {};\n    return keytips.filter(keytip => {\n      let keytipId = sequencesToID(keytip.keySequences);\n      if (keytip.overflowSetSequence) {\n        // Account for overflow set sequences when checking for duplicates\n        keytipId = sequencesToID(mergeOverflows(keytip.keySequences, keytip.overflowSetSequence));\n      }\n      seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\n\n      // Return true only if the keytip is visible and the corresponding target is also visible\n      return keytip.visible && this._isKeytipInstanceTargetVisible(keytip.keySequences, seenIds[keytipId]);\n    });\n  }\n\n  private _isKeytipInstanceTargetVisible = (keySequences: string[], instanceCount: number): boolean => {\n    const targetSelector = ktpTargetFromSequences(keySequences);\n    const matchingElements = document.querySelectorAll(targetSelector);\n\n    // If there are multiple elements for the keytip sequence, return true if the element instance\n    // that corresponds to the keytip instance is visible, otherwise return if there is only one instance\n    return matchingElements.length > 1 && instanceCount <= matchingElements.length\n      ? isElementVisibleAndNotHidden(matchingElements[instanceCount - 1] as HTMLElement)\n      : instanceCount === 1;\n  };\n\n  private _onDismiss = (ev?: React.MouseEvent<HTMLElement>): void => {\n    // if we are in keytip mode, then exit keytip mode\n    if (this.state.inKeytipMode) {\n      this._exitKeytipMode(ev);\n    }\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._keyHandled = false;\n    // using key since which has been deprecated and key is now widely suporrted.\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which\n    let key = ev.key;\n    switch (key) {\n      case 'Tab':\n      case 'Enter':\n      case 'Spacebar':\n      case ' ':\n      case 'ArrowUp':\n      case 'Up':\n      case 'ArrowDown':\n      case 'Down':\n      case 'ArrowLeft':\n      case 'Left':\n      case 'ArrowRight':\n      case 'Right':\n        if (this.state.inKeytipMode) {\n          this._keyHandled = true;\n          this._exitKeytipMode(ev);\n        }\n        break;\n      default:\n        // Special cases for browser-specific keys that are not at standard\n        // (according to http://www.w3.org/TR/uievents-key/#keys-navigation)\n        if (key === 'Esc') {\n          // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5290772/\n          key = 'Escape';\n        } else if (key === 'OS' || key === 'Win') {\n          // Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1232918\n          // Edge: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n          // and https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/16424492/\n          key = 'Meta';\n        }\n        const transitionKey: IKeytipTransitionKey = { key };\n        transitionKey.modifierKeys = this._getModifierKey(key, ev);\n        this.processTransitionInput(transitionKey, ev);\n        break;\n    }\n  };\n\n  /**\n   * Gets the ModifierKeyCodes based on the keyboard event\n   *\n   * @param ev - React.KeyboardEvent\n   * @returns List of ModifierKeyCodes that were pressed\n   */\n  private _getModifierKey(key: string, ev: React.KeyboardEvent<HTMLElement>): KeytipTransitionModifier[] | undefined {\n    const modifierKeys: KeytipTransitionModifier[] = [];\n    if (ev.altKey && key !== 'Alt') {\n      modifierKeys.push(KeyCodes.alt);\n    }\n    if (ev.ctrlKey && key !== 'Control') {\n      modifierKeys.push(KeyCodes.ctrl);\n    }\n    if (ev.shiftKey && key !== 'Shift') {\n      modifierKeys.push(KeyCodes.shift);\n    }\n    if (ev.metaKey && key !== 'Meta') {\n      modifierKeys.push(KeyCodes.leftWindow);\n    }\n    return modifierKeys.length ? modifierKeys : undefined;\n  }\n\n  private _onKeyPress = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    if (this.state.inKeytipMode && !this._keyHandled) {\n      // Call processInput\n      this.processInput(ev.key.toLocaleLowerCase(), ev);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  };\n\n  private _onKeytipAdded = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n\n    this._keytipTree.addNode(keytipProps, uniqueID);\n    this._setKeytips();\n\n    // Add the keytip to the queue to show later\n    if (this._keytipTree.isCurrentKeytipParent(keytipProps)) {\n      // Ensure existing children are still shown.\n      this._delayedKeytipQueue = this._delayedKeytipQueue.concat(this._keytipTree.currentKeytip?.children || []);\n\n      this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\n\n      // Ensure the child of currentKeytip is successfully added to currentKeytip's children and update it if not.\n      // Note: Added this condition because KeytipTree.addNode was not always reflecting updates made to a parent node\n      // in currentKeytip when that parent is the currentKeytip.\n      if (\n        this._keytipTree.currentKeytip &&\n        this._keytipTree.currentKeytip.hasDynamicChildren &&\n        this._keytipTree.currentKeytip.children.indexOf(keytipProps.id) < 0\n      ) {\n        const currNode = this._keytipTree.getNode(this._keytipTree.currentKeytip.id);\n        if (currNode) {\n          this._keytipTree.currentKeytip = currNode;\n        }\n      }\n    }\n\n    this._persistedKeytipChecks(keytipProps);\n  };\n\n  private _onKeytipUpdated = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n    this._keytipTree.updateNode(keytipProps, uniqueID);\n    this._setKeytips();\n    if (this._keytipTree.isCurrentKeytipParent(keytipProps)) {\n      // Ensure existing children are still shown.\n      this._delayedKeytipQueue = this._delayedKeytipQueue.concat(this._keytipTree.currentKeytip?.children || []);\n      this._addKeytipToQueue(sequencesToID(keytipProps.keySequences));\n    }\n\n    this._persistedKeytipChecks(keytipProps);\n  };\n\n  /**\n   * Helper function to do checks related to persisted/overflow keytips\n   * Done on keytip added and keytip updated\n   *\n   * @param keytipProps - Keytip props\n   */\n  private _persistedKeytipChecks = (keytipProps: IKeytipProps) => {\n    if (this._newCurrentKeytipSequences && arraysEqual(keytipProps.keySequences, this._newCurrentKeytipSequences)) {\n      this._triggerKeytipImmediately(keytipProps);\n    }\n\n    if (this._isCurrentKeytipAnAlias(keytipProps)) {\n      let keytipSequence = keytipProps.keySequences;\n      if (keytipProps.overflowSetSequence) {\n        keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\n      }\n      this._keytipTree.currentKeytip = this._keytipTree.getNode(sequencesToID(keytipSequence));\n    }\n  };\n\n  private _onKeytipRemoved = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n\n    // Remove keytip from the delayed queue\n    this._removeKeytipFromQueue(sequencesToID(keytipProps.keySequences));\n\n    // Remove the node from the Tree\n    this._keytipTree.removeNode(keytipProps, uniqueID);\n    this._setKeytips();\n  };\n\n  private _onPersistedKeytipAdded = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n    this._keytipTree.addNode(keytipProps, uniqueID, true);\n  };\n\n  private _onPersistedKeytipRemoved = (eventArgs: any) => {\n    const keytipProps = eventArgs.keytip;\n    const uniqueID = eventArgs.uniqueID;\n    this._keytipTree.removeNode(keytipProps, uniqueID);\n  };\n\n  private _onPersistedKeytipExecute = (eventArgs: any) => {\n    this._persistedKeytipExecute(eventArgs.overflowButtonSequences, eventArgs.keytipSequences);\n  };\n\n  /**\n   * Trigger a keytip immediately and set it as the current keytip\n   *\n   * @param keytipProps - Keytip to trigger immediately\n   */\n  private _triggerKeytipImmediately(keytipProps: IKeytipProps) {\n    // This keytip should become the currentKeytip and should execute right away\n    let keytipSequence = [...keytipProps.keySequences];\n    if (keytipProps.overflowSetSequence) {\n      keytipSequence = mergeOverflows(keytipSequence, keytipProps.overflowSetSequence);\n    }\n\n    // Set currentKeytip\n    this._keytipTree.currentKeytip = this._keytipTree.getNode(sequencesToID(keytipSequence));\n    if (this._keytipTree.currentKeytip) {\n      // Show all children keytips if any\n      const children = this._keytipTree.getChildren();\n      if (children.length) {\n        this.showKeytips(children);\n      }\n\n      if (this._keytipTree.currentKeytip.onExecute) {\n        this._keytipTree.currentKeytip.onExecute(\n          this._getKtpExecuteTarget(this._keytipTree.currentKeytip),\n          this._getKtpTarget(this._keytipTree.currentKeytip),\n        );\n      }\n    }\n\n    // Unset _newCurrKtpSequences\n    this._newCurrentKeytipSequences = undefined;\n  }\n\n  private _addKeytipToQueue(keytipID: string) {\n    // Add keytip\n    this._delayedKeytipQueue.push(keytipID);\n    // Clear timeout\n    this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n    // Reset timeout\n    this._delayedQueueTimeout = this._async.setTimeout(() => {\n      if (this._delayedKeytipQueue.length) {\n        this.showKeytips(this._delayedKeytipQueue);\n        this._delayedKeytipQueue = [];\n      }\n    }, 300);\n  }\n\n  private _removeKeytipFromQueue(keytipID: string) {\n    const index = this._delayedKeytipQueue.indexOf(keytipID);\n    if (index >= 0) {\n      // Remove keytip\n      this._delayedKeytipQueue.splice(index, 1);\n      // Clear timeout\n      this._delayedQueueTimeout && this._async.clearTimeout(this._delayedQueueTimeout);\n      // Reset timeout\n      this._delayedQueueTimeout = this._async.setTimeout(() => {\n        if (this._delayedKeytipQueue.length) {\n          this.showKeytips(this._delayedKeytipQueue);\n          this._delayedKeytipQueue = [];\n        }\n      }, 300);\n    }\n  }\n\n  private _getKtpExecuteTarget(currKtp: IKeytipTreeNode): HTMLElement | null {\n    return getDocument()!.querySelector(ktpTargetFromId(currKtp.id));\n  }\n\n  private _getKtpTarget(currKtp: IKeytipTreeNode): HTMLElement | null {\n    return getDocument()!.querySelector(ktpTargetFromSequences(currKtp.keySequences));\n  }\n\n  /**\n   * Returns T/F if the keytipProps keySequences match the currentKeytip, and the currentKeytip is in an overflow well\n   * This will make 'keytipProps' the new currentKeytip\n   *\n   * @param keytipProps - Keytip props to check\n   * @returns - T/F if this keytip should become the currentKeytip\n   */\n  private _isCurrentKeytipAnAlias(keytipProps: IKeytipProps): boolean {\n    const currKtp = this._keytipTree.currentKeytip;\n    if (\n      currKtp &&\n      (currKtp.overflowSetSequence || currKtp.persisted) &&\n      arraysEqual(keytipProps.keySequences, currKtp.keySequences)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Sets if we are in keytip mode.\n   * Note, this sets both the state for the layer as well as\n   * the value that the manager will expose externally.\n   * @param inKeytipMode - Boolean so set whether we are in keytip mode or not\n   */\n  private _setInKeytipMode = (inKeytipMode: boolean): void => {\n    this.setState({ inKeytipMode });\n    this._keytipManager.inKeytipMode = inKeytipMode;\n  };\n\n  /**\n   * Emits a warning if duplicate keytips are found for the children of the current keytip\n   */\n  private _warnIfDuplicateKeytips = (): void => {\n    const duplicateKeytips = this._getDuplicateIds(this._keytipTree.getChildren());\n    if (duplicateKeytips.length) {\n      warn('Duplicate keytips found for ' + duplicateKeytips.join(', '));\n    }\n  };\n\n  /**\n   * Returns duplicates among keytip IDs.\n   * If the returned array is empty, no duplicates were found.\n   *\n   * @param keytipIds - Array of keytip IDs to find duplicates for\n   * @returns - Array of duplicates that were found. Each duplicate will only be added once to this array.\n   */\n  private _getDuplicateIds = (keytipIds: string[]): string[] => {\n    const seenIds: { [id: string]: number } = {};\n    return keytipIds.filter(keytipId => {\n      seenIds[keytipId] = seenIds[keytipId] ? seenIds[keytipId] + 1 : 1;\n      // Only add the first duplicate keytip seen\n      return seenIds[keytipId] === 2;\n    });\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}