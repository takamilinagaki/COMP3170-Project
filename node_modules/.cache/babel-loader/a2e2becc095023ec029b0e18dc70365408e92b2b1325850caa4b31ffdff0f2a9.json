{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { divProperties, getNativeProps, getId, KeyCodes, getDocument, classNamesFunction, initializeComponentRef, EventGroup, Async } from '../../Utilities';\nimport { OpenCardMode, HoverCardType } from './HoverCard.types';\nimport { ExpandingCard } from './ExpandingCard';\nimport { ExpandingCardMode } from './ExpandingCard.types';\nimport { PlainCard } from './PlainCard/PlainCard';\nvar getClassNames = classNamesFunction();\nvar HoverCardBase = /** @class */function (_super) {\n  __extends(HoverCardBase, _super);\n  // Constructor\n  function HoverCardBase(props) {\n    var _this = _super.call(this, props) || this;\n    // The wrapping div that gets the hover events\n    _this._hoverCard = React.createRef();\n    _this.dismiss = function (withTimeOut) {\n      _this._async.clearTimeout(_this._openTimerId);\n      _this._async.clearTimeout(_this._dismissTimerId);\n      if (!withTimeOut) {\n        _this._setDismissedState();\n      } else {\n        _this._dismissTimerId = _this._async.setTimeout(function () {\n          _this._setDismissedState();\n        }, _this.props.cardDismissDelay);\n      }\n    };\n    // Show HoverCard\n    _this._cardOpen = function (ev) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (_this._shouldBlockHoverCard() || ev.type === 'keydown' && !(ev.which === _this.props.openHotKey)) {\n        return;\n      }\n      _this._async.clearTimeout(_this._dismissTimerId);\n      if (ev.type === 'mouseenter') {\n        _this._currentMouseTarget = ev.currentTarget;\n      }\n      _this._executeCardOpen(ev);\n    };\n    _this._executeCardOpen = function (ev) {\n      _this._async.clearTimeout(_this._openTimerId);\n      _this._openTimerId = _this._async.setTimeout(function () {\n        _this.setState(function (prevState) {\n          if (!prevState.isHoverCardVisible) {\n            return {\n              isHoverCardVisible: true,\n              mode: ExpandingCardMode.compact,\n              openMode: ev.type === 'keydown' ? OpenCardMode.hotKey : OpenCardMode.hover\n            };\n          }\n          return prevState;\n        });\n      }, _this.props.cardOpenDelay);\n    };\n    /**\n     * Hide HoverCard\n     * How we dismiss the card depends on where the callback is coming from.\n     * This is provided by the `isNativeEvent` argument.\n     *  true: Event is coming from event listeners set up in componentDidMount.\n     *  false: Event is coming from the `onLeave` prop from the HoverCard component.\n     */\n    _this._cardDismiss = function (isNativeEvent, ev) {\n      if (isNativeEvent) {\n        // We expect these to be MouseEvents, If not, return.\n        if (!(ev instanceof MouseEvent)) {\n          return;\n        }\n        // eslint-disable-next-line deprecation/deprecation\n        if (ev.type === 'keydown' && ev.which !== KeyCodes.escape) {\n          return;\n        }\n        // Dismiss if not sticky and currentTarget is the same element that mouse last entered\n        // eslint-disable-next-line deprecation/deprecation\n        if (!_this.props.sticky && (_this._currentMouseTarget === ev.currentTarget || ev.which === KeyCodes.escape)) {\n          _this.dismiss(true);\n        }\n      } else {\n        // If this is a mouseleave event and the component is sticky, do not dismiss.\n        if (_this.props.sticky && !(ev instanceof MouseEvent) && ev.nativeEvent instanceof MouseEvent && ev.type === 'mouseleave') {\n          return;\n        }\n        _this.dismiss(true);\n      }\n    };\n    _this._setDismissedState = function () {\n      _this.setState({\n        isHoverCardVisible: false,\n        mode: ExpandingCardMode.compact,\n        openMode: OpenCardMode.hover\n      });\n    };\n    _this._instantOpenAsExpanded = function (ev) {\n      _this._async.clearTimeout(_this._dismissTimerId);\n      _this.setState(function (prevState) {\n        if (!prevState.isHoverCardVisible) {\n          return {\n            isHoverCardVisible: true,\n            mode: ExpandingCardMode.expanded\n          };\n        }\n        return prevState;\n      });\n    };\n    _this._setEventListeners = function () {\n      var _a = _this.props,\n        trapFocus = _a.trapFocus,\n        instantOpenOnClick = _a.instantOpenOnClick,\n        eventListenerTarget = _a.eventListenerTarget;\n      var target = eventListenerTarget ? _this._getTargetElement(eventListenerTarget) : _this._getTargetElement(_this.props.target);\n      var nativeEventDismiss = _this._nativeDismissEvent;\n      // target can be undefined if ref isn't available, only assign\n      // events when defined to avoid throwing exception.\n      if (target) {\n        _this._events.on(target, 'mouseenter', _this._cardOpen);\n        _this._events.on(target, 'mouseleave', nativeEventDismiss);\n        if (trapFocus) {\n          _this._events.on(target, 'keydown', _this._cardOpen);\n        } else {\n          _this._events.on(target, 'focus', _this._cardOpen);\n          _this._events.on(target, 'blur', nativeEventDismiss);\n        }\n        if (instantOpenOnClick) {\n          _this._events.on(target, 'click', _this._instantOpenAsExpanded);\n        } else {\n          _this._events.on(target, 'mousedown', nativeEventDismiss);\n          _this._events.on(target, 'keydown', nativeEventDismiss);\n        }\n      }\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    _this._events = new EventGroup(_this);\n    _this._nativeDismissEvent = _this._cardDismiss.bind(_this, true);\n    _this._childDismissEvent = _this._cardDismiss.bind(_this, false);\n    _this.state = {\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover\n    };\n    return _this;\n  }\n  HoverCardBase.prototype.componentDidMount = function () {\n    this._setEventListeners();\n  };\n  HoverCardBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n    this._events.dispose();\n  };\n  HoverCardBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this;\n    if (prevProps.target !== this.props.target) {\n      this._events.off();\n      this._setEventListeners();\n    }\n    if (prevState.isHoverCardVisible !== this.state.isHoverCardVisible) {\n      if (this.state.isHoverCardVisible) {\n        this._async.setTimeout(function () {\n          _this.setState({\n            mode: ExpandingCardMode.expanded\n          }, function () {\n            _this.props.onCardExpand && _this.props.onCardExpand();\n          });\n        }, this.props.expandedCardOpenDelay);\n        this.props.onCardVisible && this.props.onCardVisible();\n      } else {\n        this.setState({\n          mode: ExpandingCardMode.compact\n        });\n        this.props.onCardHide && this.props.onCardHide();\n      }\n    }\n  };\n  // Render\n  HoverCardBase.prototype.render = function () {\n    var _a = this.props,\n      expandingCardProps = _a.expandingCardProps,\n      children = _a.children,\n      id = _a.id,\n      _b = _a.setAriaDescribedBy,\n      setAriaDescribedBy = _b === void 0 ? true : _b,\n      customStyles = _a.styles,\n      theme = _a.theme,\n      className = _a.className,\n      type = _a.type,\n      plainCardProps = _a.plainCardProps,\n      trapFocus = _a.trapFocus,\n      setInitialFocus = _a.setInitialFocus;\n    var _c = this.state,\n      isHoverCardVisible = _c.isHoverCardVisible,\n      mode = _c.mode,\n      openMode = _c.openMode;\n    var hoverCardId = id || getId('hoverCard');\n    this._classNames = getClassNames(customStyles, {\n      theme: theme,\n      className: className\n    });\n    // Common props for both card types.\n    var commonCardProps = __assign(__assign({}, getNativeProps(this.props, divProperties)), {\n      id: hoverCardId,\n      trapFocus: !!trapFocus,\n      firstFocus: setInitialFocus || openMode === OpenCardMode.hotKey,\n      targetElement: this._getTargetElement(this.props.target),\n      onEnter: this._cardOpen,\n      onLeave: this._childDismissEvent\n    });\n    var finalExpandedCardProps = __assign(__assign(__assign({}, expandingCardProps), commonCardProps), {\n      mode: mode\n    });\n    var finalPlainCardProps = __assign(__assign({}, plainCardProps), commonCardProps);\n    return React.createElement(\"div\", {\n      className: this._classNames.host,\n      ref: this._hoverCard,\n      \"aria-describedby\": setAriaDescribedBy && isHoverCardVisible ? hoverCardId : undefined,\n      \"data-is-focusable\": !this.props.target\n    }, children, isHoverCardVisible && (type === HoverCardType.expanding ? React.createElement(ExpandingCard, __assign({}, finalExpandedCardProps)) : React.createElement(PlainCard, __assign({}, finalPlainCardProps))));\n  };\n  HoverCardBase.prototype._getTargetElement = function (target) {\n    switch (typeof target) {\n      case 'string':\n        return getDocument().querySelector(target);\n      case 'object':\n        return target;\n      default:\n        return this._hoverCard.current || undefined;\n    }\n  };\n  HoverCardBase.prototype._shouldBlockHoverCard = function () {\n    return !!(this.props.shouldBlockHoverCard && this.props.shouldBlockHoverCard());\n  };\n  HoverCardBase.defaultProps = {\n    cardOpenDelay: 500,\n    cardDismissDelay: 100,\n    expandedCardOpenDelay: 1500,\n    instantOpenOnClick: false,\n    setInitialFocus: false,\n    openHotKey: KeyCodes.c,\n    type: HoverCardType.expanding\n  };\n  return HoverCardBase;\n}(React.Component);\nexport { HoverCardBase };","map":{"version":3,"names":["React","divProperties","getNativeProps","getId","KeyCodes","getDocument","classNamesFunction","initializeComponentRef","EventGroup","Async","OpenCardMode","HoverCardType","ExpandingCard","ExpandingCardMode","PlainCard","getClassNames","HoverCardBase","_super","__extends","props","_this","call","_hoverCard","createRef","dismiss","withTimeOut","_async","clearTimeout","_openTimerId","_dismissTimerId","_setDismissedState","setTimeout","cardDismissDelay","_cardOpen","ev","_shouldBlockHoverCard","type","which","openHotKey","_currentMouseTarget","currentTarget","_executeCardOpen","setState","prevState","isHoverCardVisible","mode","compact","openMode","hotKey","hover","cardOpenDelay","_cardDismiss","isNativeEvent","MouseEvent","escape","sticky","nativeEvent","_instantOpenAsExpanded","expanded","_setEventListeners","_a","trapFocus","instantOpenOnClick","eventListenerTarget","target","_getTargetElement","nativeEventDismiss","_nativeDismissEvent","_events","on","bind","_childDismissEvent","state","prototype","componentDidMount","componentWillUnmount","dispose","componentDidUpdate","prevProps","off","onCardExpand","expandedCardOpenDelay","onCardVisible","onCardHide","render","expandingCardProps","children","id","_b","setAriaDescribedBy","customStyles","styles","theme","className","plainCardProps","setInitialFocus","_c","hoverCardId","_classNames","commonCardProps","__assign","firstFocus","targetElement","onEnter","onLeave","finalExpandedCardProps","finalPlainCardProps","createElement","host","ref","undefined","expanding","querySelector","current","shouldBlockHoverCard","defaultProps","c","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/HoverCard/HoverCard.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  divProperties,\n  getNativeProps,\n  getId,\n  KeyCodes,\n  getDocument,\n  classNamesFunction,\n  initializeComponentRef,\n  EventGroup,\n  Async,\n} from '../../Utilities';\nimport { OpenCardMode, HoverCardType } from './HoverCard.types';\nimport { ExpandingCard } from './ExpandingCard';\nimport { ExpandingCardMode } from './ExpandingCard.types';\nimport { PlainCard } from './PlainCard/PlainCard';\nimport type { IHoverCardProps, IHoverCardStyles, IHoverCardStyleProps, IHoverCard } from './HoverCard.types';\nimport type { IExpandingCardProps } from './ExpandingCard.types';\nimport type { IPlainCardProps } from './PlainCard/PlainCard.types';\n\nconst getClassNames = classNamesFunction<IHoverCardStyleProps, IHoverCardStyles>();\n\nexport interface IHoverCardState {\n  isHoverCardVisible?: boolean;\n  mode?: ExpandingCardMode;\n  openMode?: OpenCardMode;\n}\n\nexport class HoverCardBase extends React.Component<IHoverCardProps, IHoverCardState> implements IHoverCard {\n  public static defaultProps = {\n    cardOpenDelay: 500,\n    cardDismissDelay: 100,\n    expandedCardOpenDelay: 1500,\n    instantOpenOnClick: false,\n    setInitialFocus: false,\n    openHotKey: KeyCodes.c as KeyCodes,\n    type: HoverCardType.expanding,\n  };\n\n  // The wrapping div that gets the hover events\n  private _hoverCard = React.createRef<HTMLDivElement>();\n  private _dismissTimerId: number;\n  private _openTimerId: number;\n  private _currentMouseTarget: EventTarget | null;\n\n  private _nativeDismissEvent: (ev?: any) => void;\n  private _childDismissEvent: (ev?: any) => void;\n\n  private _classNames: { [key in keyof IHoverCardStyles]: string };\n\n  private _async: Async;\n  private _events: EventGroup;\n\n  // Constructor\n  constructor(props: IHoverCardProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n\n    this._nativeDismissEvent = this._cardDismiss.bind(this, true);\n    this._childDismissEvent = this._cardDismiss.bind(this, false);\n\n    this.state = {\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover,\n    };\n  }\n\n  public componentDidMount(): void {\n    this._setEventListeners();\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IHoverCardProps, prevState: IHoverCardState) {\n    if (prevProps.target !== this.props.target) {\n      this._events.off();\n      this._setEventListeners();\n    }\n\n    if (prevState.isHoverCardVisible !== this.state.isHoverCardVisible) {\n      if (this.state.isHoverCardVisible) {\n        this._async.setTimeout(() => {\n          this.setState(\n            {\n              mode: ExpandingCardMode.expanded,\n            },\n            () => {\n              this.props.onCardExpand && this.props.onCardExpand();\n            },\n          );\n        }, this.props.expandedCardOpenDelay!);\n        this.props.onCardVisible && this.props.onCardVisible();\n      } else {\n        this.setState({\n          mode: ExpandingCardMode.compact,\n        });\n        this.props.onCardHide && this.props.onCardHide();\n      }\n    }\n  }\n\n  public dismiss = (withTimeOut?: boolean): void => {\n    this._async.clearTimeout(this._openTimerId);\n    this._async.clearTimeout(this._dismissTimerId);\n    if (!withTimeOut) {\n      this._setDismissedState();\n    } else {\n      this._dismissTimerId = this._async.setTimeout(() => {\n        this._setDismissedState();\n      }, this.props.cardDismissDelay!);\n    }\n  };\n\n  // Render\n  public render(): JSX.Element {\n    const {\n      expandingCardProps,\n      children,\n      id,\n      setAriaDescribedBy = true,\n      styles: customStyles,\n      theme,\n      className,\n      type,\n      plainCardProps,\n      trapFocus,\n      setInitialFocus,\n    } = this.props;\n    const { isHoverCardVisible, mode, openMode } = this.state;\n    const hoverCardId = id || getId('hoverCard');\n\n    this._classNames = getClassNames(customStyles, {\n      theme: theme!,\n      className,\n    });\n\n    // Common props for both card types.\n    const commonCardProps = {\n      ...getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties),\n      id: hoverCardId,\n      trapFocus: !!trapFocus,\n      firstFocus: setInitialFocus || openMode === OpenCardMode.hotKey,\n      targetElement: this._getTargetElement(this.props.target),\n      onEnter: this._cardOpen,\n      onLeave: this._childDismissEvent,\n    };\n\n    const finalExpandedCardProps: IExpandingCardProps = { ...expandingCardProps, ...commonCardProps, mode };\n    const finalPlainCardProps: IPlainCardProps = { ...plainCardProps, ...commonCardProps };\n\n    return (\n      <div\n        className={this._classNames.host}\n        ref={this._hoverCard}\n        aria-describedby={setAriaDescribedBy && isHoverCardVisible ? hoverCardId : undefined}\n        data-is-focusable={!this.props.target}\n      >\n        {children}\n        {isHoverCardVisible &&\n          (type === HoverCardType.expanding ? (\n            <ExpandingCard {...finalExpandedCardProps} />\n          ) : (\n            <PlainCard {...finalPlainCardProps} />\n          ))}\n      </div>\n    );\n  }\n\n  private _getTargetElement(target?: HTMLElement | string | null): HTMLElement | undefined {\n    switch (typeof target) {\n      case 'string':\n        return getDocument()!.querySelector(target as string) as HTMLElement;\n\n      case 'object':\n        return target as HTMLElement;\n\n      default:\n        return this._hoverCard.current || undefined;\n    }\n  }\n\n  private _shouldBlockHoverCard(): boolean {\n    return !!(this.props.shouldBlockHoverCard && this.props.shouldBlockHoverCard());\n  }\n\n  // Show HoverCard\n  private _cardOpen = (ev: MouseEvent): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._shouldBlockHoverCard() || (ev.type === 'keydown' && !(ev.which === this.props.openHotKey))) {\n      return;\n    }\n    this._async.clearTimeout(this._dismissTimerId);\n    if (ev.type === 'mouseenter') {\n      this._currentMouseTarget = ev.currentTarget;\n    }\n\n    this._executeCardOpen(ev);\n  };\n\n  private _executeCardOpen = (ev: MouseEvent): void => {\n    this._async.clearTimeout(this._openTimerId);\n    this._openTimerId = this._async.setTimeout(() => {\n      this.setState((prevState: IHoverCardState) => {\n        if (!prevState.isHoverCardVisible) {\n          return {\n            isHoverCardVisible: true,\n            mode: ExpandingCardMode.compact,\n            openMode: ev.type === 'keydown' ? OpenCardMode.hotKey : OpenCardMode.hover,\n          };\n        }\n\n        return prevState;\n      });\n    }, this.props.cardOpenDelay!);\n  };\n\n  /**\n   * Hide HoverCard\n   * How we dismiss the card depends on where the callback is coming from.\n   * This is provided by the `isNativeEvent` argument.\n   *  true: Event is coming from event listeners set up in componentDidMount.\n   *  false: Event is coming from the `onLeave` prop from the HoverCard component.\n   */\n  private _cardDismiss = (\n    isNativeEvent: boolean,\n    ev: MouseEvent | React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n  ) => {\n    if (isNativeEvent) {\n      // We expect these to be MouseEvents, If not, return.\n      if (!(ev instanceof MouseEvent)) {\n        return;\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.type === 'keydown' && ev.which !== KeyCodes.escape) {\n        return;\n      }\n\n      // Dismiss if not sticky and currentTarget is the same element that mouse last entered\n      // eslint-disable-next-line deprecation/deprecation\n      if (!this.props.sticky && (this._currentMouseTarget === ev.currentTarget || ev.which === KeyCodes.escape)) {\n        this.dismiss(true);\n      }\n    } else {\n      // If this is a mouseleave event and the component is sticky, do not dismiss.\n      if (\n        this.props.sticky &&\n        !(ev instanceof MouseEvent) &&\n        ev.nativeEvent instanceof MouseEvent &&\n        ev.type === 'mouseleave'\n      ) {\n        return;\n      }\n\n      this.dismiss(true);\n    }\n  };\n\n  private _setDismissedState = () => {\n    this.setState({\n      isHoverCardVisible: false,\n      mode: ExpandingCardMode.compact,\n      openMode: OpenCardMode.hover,\n    });\n  };\n\n  private _instantOpenAsExpanded = (ev: React.MouseEvent<HTMLDivElement>): void => {\n    this._async.clearTimeout(this._dismissTimerId);\n\n    this.setState((prevState: IHoverCardState) => {\n      if (!prevState.isHoverCardVisible) {\n        return {\n          isHoverCardVisible: true,\n          mode: ExpandingCardMode.expanded,\n        };\n      }\n\n      return prevState;\n    });\n  };\n\n  private _setEventListeners = (): void => {\n    const { trapFocus, instantOpenOnClick, eventListenerTarget } = this.props;\n    const target = eventListenerTarget\n      ? this._getTargetElement(eventListenerTarget)\n      : this._getTargetElement(this.props.target);\n    const nativeEventDismiss = this._nativeDismissEvent;\n\n    // target can be undefined if ref isn't available, only assign\n    // events when defined to avoid throwing exception.\n    if (target) {\n      this._events.on(target, 'mouseenter', this._cardOpen);\n      this._events.on(target, 'mouseleave', nativeEventDismiss);\n      if (trapFocus) {\n        this._events.on(target, 'keydown', this._cardOpen);\n      } else {\n        this._events.on(target, 'focus', this._cardOpen);\n        this._events.on(target, 'blur', nativeEventDismiss);\n      }\n      if (instantOpenOnClick) {\n        this._events.on(target, 'click', this._instantOpenAsExpanded);\n      } else {\n        this._events.on(target, 'mousedown', nativeEventDismiss);\n        this._events.on(target, 'keydown', nativeEventDismiss);\n      }\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}