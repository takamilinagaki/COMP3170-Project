{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Selection } from '../../Selection';\nimport { initializeComponentRef } from '../../Utilities';\nvar BaseSelectedItemsList = /** @class */function (_super) {\n  __extends(BaseSelectedItemsList, _super);\n  function BaseSelectedItemsList(basePickerProps) {\n    var _this = _super.call(this, basePickerProps) || this;\n    _this.addItems = function (items) {\n      var processedItems = _this.props.onItemSelected ? _this.props.onItemSelected(items) : items;\n      var processedItemObjects = processedItems;\n      var processedItemPromiseLikes = processedItems;\n      if (processedItemPromiseLikes && processedItemPromiseLikes.then) {\n        processedItemPromiseLikes.then(function (resolvedProcessedItems) {\n          var newItems = _this.state.items.concat(resolvedProcessedItems);\n          _this.updateItems(newItems);\n        });\n      } else {\n        var newItems = _this.state.items.concat(processedItemObjects);\n        _this.updateItems(newItems);\n      }\n    };\n    _this.removeItemAt = function (index) {\n      var items = _this.state.items;\n      if (_this._canRemoveItem(items[index])) {\n        if (index > -1) {\n          if (_this.props.onItemsDeleted) {\n            _this.props.onItemsDeleted([items[index]]);\n          }\n          var newItems = items.slice(0, index).concat(items.slice(index + 1));\n          _this.updateItems(newItems);\n        }\n      }\n    };\n    _this.removeItem = function (item) {\n      var items = _this.state.items;\n      var index = items.indexOf(item);\n      _this.removeItemAt(index);\n    };\n    _this.replaceItem = function (itemToReplace, itemsToReplaceWith) {\n      var items = _this.state.items;\n      var index = items.indexOf(itemToReplace);\n      if (index > -1) {\n        var newItems = items.slice(0, index).concat(itemsToReplaceWith).concat(items.slice(index + 1));\n        _this.updateItems(newItems);\n      }\n    };\n    _this.removeItems = function (itemsToRemove) {\n      var items = _this.state.items;\n      var itemsCanRemove = itemsToRemove.filter(function (item) {\n        return _this._canRemoveItem(item);\n      });\n      var newItems = items.filter(function (item) {\n        return itemsCanRemove.indexOf(item) === -1;\n      });\n      var firstItemToRemove = itemsCanRemove[0];\n      var index = items.indexOf(firstItemToRemove);\n      if (_this.props.onItemsDeleted) {\n        _this.props.onItemsDeleted(itemsCanRemove);\n      }\n      _this.updateItems(newItems, index);\n    };\n    _this.onCopy = function (ev) {\n      if (_this.props.onCopyItems && _this.selection.getSelectedCount() > 0) {\n        var selectedItems = _this.selection.getSelection();\n        _this.copyItems(selectedItems);\n      }\n    };\n    _this.renderItems = function () {\n      var removeButtonAriaLabel = _this.props.removeButtonAriaLabel;\n      var onRenderItem = _this.props.onRenderItem;\n      var items = _this.state.items;\n      return items.map(function (item, index) {\n        return onRenderItem({\n          item: item,\n          index: index,\n          key: item.key ? item.key : index,\n          selected: _this.selection.isIndexSelected(index),\n          onRemoveItem: function () {\n            return _this.removeItem(item);\n          },\n          onItemChange: _this.onItemChange,\n          removeButtonAriaLabel: removeButtonAriaLabel,\n          onCopyItem: function (itemToCopy) {\n            return _this.copyItems([itemToCopy]);\n          }\n        });\n      });\n    };\n    _this.onSelectionChanged = function () {\n      _this.forceUpdate();\n    };\n    _this.onItemChange = function (changedItem, index) {\n      var items = _this.state.items;\n      if (index >= 0) {\n        var newItems = items;\n        newItems[index] = changedItem;\n        _this.updateItems(newItems);\n      }\n    };\n    initializeComponentRef(_this);\n    var items = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n    _this.state = {\n      items: items\n    };\n    // Create a new selection if one is not specified\n    _this._defaultSelection = new Selection({\n      onSelectionChanged: _this.onSelectionChanged\n    });\n    return _this;\n  }\n  BaseSelectedItemsList.getDerivedStateFromProps = function (newProps) {\n    if (newProps.selectedItems) {\n      return {\n        items: newProps.selectedItems\n      };\n    }\n    return null;\n  };\n  Object.defineProperty(BaseSelectedItemsList.prototype, \"items\", {\n    get: function () {\n      return this.state.items;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BaseSelectedItemsList.prototype.removeSelectedItems = function () {\n    if (this.state.items.length && this.selection.getSelectedCount() > 0) {\n      this.removeItems(this.selection.getSelection());\n    }\n  };\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If selectedItems is provided, this will act as a controlled component and will not update its own state.\n   */\n  BaseSelectedItemsList.prototype.updateItems = function (items, focusIndex) {\n    var _this = this;\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to pass the new props\n      this.onChange(items);\n    } else {\n      this.setState({\n        items: items\n      }, function () {\n        _this._onSelectedItemsUpdated(items, focusIndex);\n      });\n    }\n  };\n  BaseSelectedItemsList.prototype.hasSelectedItems = function () {\n    return this.selection.getSelectedCount() > 0;\n  };\n  BaseSelectedItemsList.prototype.componentDidUpdate = function (oldProps, oldState) {\n    if (this.state.items && this.state.items !== oldState.items) {\n      this.selection.setItems(this.state.items);\n    }\n  };\n  BaseSelectedItemsList.prototype.unselectAll = function () {\n    this.selection.setAllSelected(false);\n  };\n  BaseSelectedItemsList.prototype.highlightedItems = function () {\n    return this.selection.getSelection();\n  };\n  BaseSelectedItemsList.prototype.componentDidMount = function () {\n    this.selection.setItems(this.state.items);\n  };\n  Object.defineProperty(BaseSelectedItemsList.prototype, \"selection\", {\n    get: function () {\n      var _a;\n      return (_a = this.props.selection) !== null && _a !== void 0 ? _a : this._defaultSelection;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BaseSelectedItemsList.prototype.render = function () {\n    return this.renderItems();\n  };\n  BaseSelectedItemsList.prototype.onChange = function (items) {\n    if (this.props.onChange) {\n      this.props.onChange(items);\n    }\n  };\n  BaseSelectedItemsList.prototype.copyItems = function (items) {\n    if (this.props.onCopyItems) {\n      var copyText = this.props.onCopyItems(items);\n      var copyInput = document.createElement('input');\n      document.body.appendChild(copyInput);\n      try {\n        // Try to copy the text directly to the clipboard\n        copyInput.value = copyText;\n        copyInput.select();\n        // eslint-disable-next-line deprecation/deprecation\n        if (!document.execCommand('copy')) {\n          // The command failed. Fallback to the method below.\n          throw new Error();\n        }\n      } catch (err) {\n        // no op\n      } finally {\n        document.body.removeChild(copyInput);\n      }\n    }\n  };\n  BaseSelectedItemsList.prototype._onSelectedItemsUpdated = function (items, focusIndex) {\n    this.onChange(items);\n  };\n  BaseSelectedItemsList.prototype._canRemoveItem = function (item) {\n    return !this.props.canRemoveItem || this.props.canRemoveItem(item);\n  };\n  return BaseSelectedItemsList;\n}(React.Component);\nexport { BaseSelectedItemsList };","map":{"version":3,"names":["React","Selection","initializeComponentRef","BaseSelectedItemsList","_super","__extends","basePickerProps","_this","call","addItems","items","processedItems","props","onItemSelected","processedItemObjects","processedItemPromiseLikes","then","resolvedProcessedItems","newItems","state","concat","updateItems","removeItemAt","index","_canRemoveItem","onItemsDeleted","slice","removeItem","item","indexOf","replaceItem","itemToReplace","itemsToReplaceWith","removeItems","itemsToRemove","itemsCanRemove","filter","firstItemToRemove","onCopy","ev","onCopyItems","selection","getSelectedCount","selectedItems","getSelection","copyItems","renderItems","removeButtonAriaLabel","onRenderItem","map","key","selected","isIndexSelected","onRemoveItem","onItemChange","onCopyItem","itemToCopy","onSelectionChanged","forceUpdate","changedItem","defaultSelectedItems","_defaultSelection","getDerivedStateFromProps","newProps","Object","defineProperty","prototype","get","removeSelectedItems","length","focusIndex","onChange","setState","_onSelectedItemsUpdated","hasSelectedItems","componentDidUpdate","oldProps","oldState","setItems","unselectAll","setAllSelected","highlightedItems","componentDidMount","_a","render","copyText","copyInput","document","createElement","body","appendChild","value","select","execCommand","Error","err","removeChild","canRemoveItem","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/SelectedItemsList/BaseSelectedItemsList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Selection } from '../../Selection';\nimport { initializeComponentRef } from '../../Utilities';\nimport type {\n  IBaseSelectedItemsList,\n  IBaseSelectedItemsListProps,\n  ISelectedItemProps,\n} from './BaseSelectedItemsList.types';\nimport type { IObjectWithKey } from '../../Utilities';\n\nexport interface IBaseSelectedItemsListState<T> {\n  items: T[];\n}\n\nexport class BaseSelectedItemsList<T, P extends IBaseSelectedItemsListProps<T>>\n  extends React.Component<P, IBaseSelectedItemsListState<T>>\n  implements IBaseSelectedItemsList<T>\n{\n  protected root: HTMLElement;\n  private _defaultSelection: Selection;\n\n  public static getDerivedStateFromProps(newProps: IBaseSelectedItemsListProps<any>) {\n    if (newProps.selectedItems) {\n      return { items: newProps.selectedItems };\n    }\n\n    return null;\n  }\n\n  constructor(basePickerProps: P) {\n    super(basePickerProps);\n\n    initializeComponentRef(this);\n    const items: T[] = basePickerProps.selectedItems || basePickerProps.defaultSelectedItems || [];\n    this.state = {\n      items,\n    };\n\n    // Create a new selection if one is not specified\n    this._defaultSelection = new Selection({ onSelectionChanged: this.onSelectionChanged });\n  }\n\n  public get items(): T[] {\n    return this.state.items;\n  }\n\n  public addItems = (items: T[]): void => {\n    const processedItems: T[] | PromiseLike<T[]> = this.props.onItemSelected\n      ? (this.props.onItemSelected as any)(items)\n      : items;\n\n    const processedItemObjects: T[] = processedItems as T[];\n    const processedItemPromiseLikes: PromiseLike<T[]> = processedItems as PromiseLike<T[]>;\n\n    if (processedItemPromiseLikes && processedItemPromiseLikes.then) {\n      processedItemPromiseLikes.then((resolvedProcessedItems: T[]) => {\n        const newItems: T[] = this.state.items.concat(resolvedProcessedItems);\n        this.updateItems(newItems);\n      });\n    } else {\n      const newItems: T[] = this.state.items.concat(processedItemObjects);\n      this.updateItems(newItems);\n    }\n  };\n\n  public removeItemAt = (index: number): void => {\n    const { items } = this.state;\n\n    if (this._canRemoveItem(items[index])) {\n      if (index > -1) {\n        if (this.props.onItemsDeleted) {\n          (this.props.onItemsDeleted as (item: T[]) => void)([items[index]]);\n        }\n\n        const newItems = items.slice(0, index).concat(items.slice(index + 1));\n        this.updateItems(newItems);\n      }\n    }\n  };\n\n  public removeItem = (item: T): void => {\n    const { items } = this.state;\n    const index: number = items.indexOf(item);\n\n    this.removeItemAt(index);\n  };\n\n  public replaceItem = (itemToReplace: T, itemsToReplaceWith: T[]): void => {\n    const { items } = this.state;\n    const index: number = items.indexOf(itemToReplace);\n    if (index > -1) {\n      const newItems = items\n        .slice(0, index)\n        .concat(itemsToReplaceWith)\n        .concat(items.slice(index + 1));\n      this.updateItems(newItems);\n    }\n  };\n\n  public removeItems = (itemsToRemove: any[]): void => {\n    const { items } = this.state;\n    const itemsCanRemove = itemsToRemove.filter(item => this._canRemoveItem(item));\n    const newItems: T[] = items.filter(item => itemsCanRemove.indexOf(item) === -1);\n    const firstItemToRemove = itemsCanRemove[0];\n    const index: number = items.indexOf(firstItemToRemove);\n\n    if (this.props.onItemsDeleted) {\n      (this.props.onItemsDeleted as (item: T[]) => void)(itemsCanRemove);\n    }\n\n    this.updateItems(newItems, index);\n  };\n\n  public removeSelectedItems(): void {\n    if (this.state.items.length && this.selection.getSelectedCount() > 0) {\n      this.removeItems(this.selection.getSelection());\n    }\n  }\n\n  /**\n   * Controls what happens whenever there is an action that impacts the selected items.\n   * If selectedItems is provided, this will act as a controlled component and will not update its own state.\n   */\n  public updateItems(items: T[], focusIndex?: number): void {\n    if (this.props.selectedItems) {\n      // If the component is a controlled component then the controlling component will need to pass the new props\n      this.onChange(items);\n    } else {\n      this.setState({ items }, () => {\n        this._onSelectedItemsUpdated(items, focusIndex);\n      });\n    }\n  }\n\n  public onCopy = (ev: React.ClipboardEvent<HTMLElement>): void => {\n    if (this.props.onCopyItems && this.selection.getSelectedCount() > 0) {\n      const selectedItems: T[] = this.selection.getSelection() as T[];\n      this.copyItems(selectedItems);\n    }\n  };\n\n  public hasSelectedItems(): boolean {\n    return this.selection.getSelectedCount() > 0;\n  }\n\n  public componentDidUpdate(oldProps: P, oldState: IBaseSelectedItemsListState<IObjectWithKey>): void {\n    if (this.state.items && this.state.items !== oldState.items) {\n      this.selection.setItems(this.state.items);\n    }\n  }\n\n  public unselectAll(): void {\n    this.selection.setAllSelected(false);\n  }\n\n  public highlightedItems(): T[] {\n    return this.selection.getSelection() as T[];\n  }\n\n  public componentDidMount(): void {\n    this.selection.setItems(this.state.items);\n  }\n\n  protected get selection(): Selection {\n    return this.props.selection ?? this._defaultSelection;\n  }\n\n  public render(): any {\n    return this.renderItems();\n  }\n\n  protected renderItems = (): JSX.Element[] => {\n    const { removeButtonAriaLabel } = this.props;\n    const onRenderItem = this.props.onRenderItem as (props: ISelectedItemProps<T>) => JSX.Element;\n\n    const { items } = this.state;\n    return items.map((item: any, index: number) =>\n      onRenderItem({\n        item,\n        index,\n        key: item.key ? item.key : index,\n        selected: this.selection.isIndexSelected(index),\n        onRemoveItem: () => this.removeItem(item),\n        onItemChange: this.onItemChange,\n        removeButtonAriaLabel,\n        onCopyItem: (itemToCopy: T) => this.copyItems([itemToCopy]),\n      }),\n    );\n  };\n\n  protected onSelectionChanged = (): void => {\n    this.forceUpdate();\n  };\n\n  protected onChange(items?: T[]): void {\n    if (this.props.onChange) {\n      (this.props.onChange as (items?: T[]) => void)(items);\n    }\n  }\n\n  protected onItemChange = (changedItem: T, index: number): void => {\n    const { items } = this.state;\n\n    if (index >= 0) {\n      const newItems: T[] = items;\n      newItems[index] = changedItem;\n\n      this.updateItems(newItems);\n    }\n  };\n\n  protected copyItems(items: T[]): void {\n    if (this.props.onCopyItems) {\n      const copyText = (this.props.onCopyItems as any)(items);\n\n      const copyInput = document.createElement('input') as HTMLInputElement;\n      document.body.appendChild(copyInput);\n\n      try {\n        // Try to copy the text directly to the clipboard\n        copyInput.value = copyText;\n        copyInput.select();\n        // eslint-disable-next-line deprecation/deprecation\n        if (!document.execCommand('copy')) {\n          // The command failed. Fallback to the method below.\n          throw new Error();\n        }\n      } catch (err) {\n        // no op\n      } finally {\n        document.body.removeChild(copyInput);\n      }\n    }\n  }\n\n  private _onSelectedItemsUpdated(items?: T[], focusIndex?: number): void {\n    this.onChange(items);\n  }\n\n  private _canRemoveItem(item: T): boolean {\n    return !this.props.canRemoveItem || this.props.canRemoveItem(item);\n  }\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,sBAAsB,QAAQ,iBAAiB;AAYxD,IAAAC,qBAAA,0BAAAC,MAAA;EACUC,SAAA,CAAAF,qBAAA,EAAAC,MAAA;EAcR,SAAAD,sBAAYG,eAAkB;IAA9B,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAMF,eAAe,CAAC;IAgBjBC,KAAA,CAAAE,QAAQ,GAAG,UAACC,KAAU;MAC3B,IAAMC,cAAc,GAA2BJ,KAAI,CAACK,KAAK,CAACC,cAAc,GACnEN,KAAI,CAACK,KAAK,CAACC,cAAsB,CAACH,KAAK,CAAC,GACzCA,KAAK;MAET,IAAMI,oBAAoB,GAAQH,cAAqB;MACvD,IAAMI,yBAAyB,GAAqBJ,cAAkC;MAEtF,IAAII,yBAAyB,IAAIA,yBAAyB,CAACC,IAAI,EAAE;QAC/DD,yBAAyB,CAACC,IAAI,CAAC,UAACC,sBAA2B;UACzD,IAAMC,QAAQ,GAAQX,KAAI,CAACY,KAAK,CAACT,KAAK,CAACU,MAAM,CAACH,sBAAsB,CAAC;UACrEV,KAAI,CAACc,WAAW,CAACH,QAAQ,CAAC;QAC5B,CAAC,CAAC;OACH,MAAM;QACL,IAAMA,QAAQ,GAAQX,KAAI,CAACY,KAAK,CAACT,KAAK,CAACU,MAAM,CAACN,oBAAoB,CAAC;QACnEP,KAAI,CAACc,WAAW,CAACH,QAAQ,CAAC;;IAE9B,CAAC;IAEMX,KAAA,CAAAe,YAAY,GAAG,UAACC,KAAa;MAC1B,IAAAb,KAAK,GAAKH,KAAI,CAACY,KAAK,CAAAT,KAAf;MAEb,IAAIH,KAAI,CAACiB,cAAc,CAACd,KAAK,CAACa,KAAK,CAAC,CAAC,EAAE;QACrC,IAAIA,KAAK,GAAG,CAAC,CAAC,EAAE;UACd,IAAIhB,KAAI,CAACK,KAAK,CAACa,cAAc,EAAE;YAC5BlB,KAAI,CAACK,KAAK,CAACa,cAAsC,CAAC,CAACf,KAAK,CAACa,KAAK,CAAC,CAAC,CAAC;;UAGpE,IAAML,QAAQ,GAAGR,KAAK,CAACgB,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC,CAACH,MAAM,CAACV,KAAK,CAACgB,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC,CAAC;UACrEhB,KAAI,CAACc,WAAW,CAACH,QAAQ,CAAC;;;IAGhC,CAAC;IAEMX,KAAA,CAAAoB,UAAU,GAAG,UAACC,IAAO;MAClB,IAAAlB,KAAK,GAAKH,KAAI,CAACY,KAAK,CAAAT,KAAf;MACb,IAAMa,KAAK,GAAWb,KAAK,CAACmB,OAAO,CAACD,IAAI,CAAC;MAEzCrB,KAAI,CAACe,YAAY,CAACC,KAAK,CAAC;IAC1B,CAAC;IAEMhB,KAAA,CAAAuB,WAAW,GAAG,UAACC,aAAgB,EAAEC,kBAAuB;MACrD,IAAAtB,KAAK,GAAKH,KAAI,CAACY,KAAK,CAAAT,KAAf;MACb,IAAMa,KAAK,GAAWb,KAAK,CAACmB,OAAO,CAACE,aAAa,CAAC;MAClD,IAAIR,KAAK,GAAG,CAAC,CAAC,EAAE;QACd,IAAML,QAAQ,GAAGR,KAAK,CACnBgB,KAAK,CAAC,CAAC,EAAEH,KAAK,CAAC,CACfH,MAAM,CAACY,kBAAkB,CAAC,CAC1BZ,MAAM,CAACV,KAAK,CAACgB,KAAK,CAACH,KAAK,GAAG,CAAC,CAAC,CAAC;QACjChB,KAAI,CAACc,WAAW,CAACH,QAAQ,CAAC;;IAE9B,CAAC;IAEMX,KAAA,CAAA0B,WAAW,GAAG,UAACC,aAAoB;MAChC,IAAAxB,KAAK,GAAKH,KAAI,CAACY,KAAK,CAAAT,KAAf;MACb,IAAMyB,cAAc,GAAGD,aAAa,CAACE,MAAM,CAAC,UAAAR,IAAI;QAAI,OAAArB,KAAI,CAACiB,cAAc,CAACI,IAAI,CAAC;MAAzB,CAAyB,CAAC;MAC9E,IAAMV,QAAQ,GAAQR,KAAK,CAAC0B,MAAM,CAAC,UAAAR,IAAI;QAAI,OAAAO,cAAc,CAACN,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC;MAAnC,CAAmC,CAAC;MAC/E,IAAMS,iBAAiB,GAAGF,cAAc,CAAC,CAAC,CAAC;MAC3C,IAAMZ,KAAK,GAAWb,KAAK,CAACmB,OAAO,CAACQ,iBAAiB,CAAC;MAEtD,IAAI9B,KAAI,CAACK,KAAK,CAACa,cAAc,EAAE;QAC5BlB,KAAI,CAACK,KAAK,CAACa,cAAsC,CAACU,cAAc,CAAC;;MAGpE5B,KAAI,CAACc,WAAW,CAACH,QAAQ,EAAEK,KAAK,CAAC;IACnC,CAAC;IAuBMhB,KAAA,CAAA+B,MAAM,GAAG,UAACC,EAAqC;MACpD,IAAIhC,KAAI,CAACK,KAAK,CAAC4B,WAAW,IAAIjC,KAAI,CAACkC,SAAS,CAACC,gBAAgB,EAAE,GAAG,CAAC,EAAE;QACnE,IAAMC,aAAa,GAAQpC,KAAI,CAACkC,SAAS,CAACG,YAAY,EAAS;QAC/DrC,KAAI,CAACsC,SAAS,CAACF,aAAa,CAAC;;IAEjC,CAAC;IAgCSpC,KAAA,CAAAuC,WAAW,GAAG;MACd,IAAAC,qBAAqB,GAAKxC,KAAI,CAACK,KAAK,CAAAmC,qBAAf;MAC7B,IAAMC,YAAY,GAAGzC,KAAI,CAACK,KAAK,CAACoC,YAA6D;MAErF,IAAAtC,KAAK,GAAKH,KAAI,CAACY,KAAK,CAAAT,KAAf;MACb,OAAOA,KAAK,CAACuC,GAAG,CAAC,UAACrB,IAAS,EAAEL,KAAa;QACxC,OAAAyB,YAAY,CAAC;UACXpB,IAAI,EAAAA,IAAA;UACJL,KAAK,EAAAA,KAAA;UACL2B,GAAG,EAAEtB,IAAI,CAACsB,GAAG,GAAGtB,IAAI,CAACsB,GAAG,GAAG3B,KAAK;UAChC4B,QAAQ,EAAE5C,KAAI,CAACkC,SAAS,CAACW,eAAe,CAAC7B,KAAK,CAAC;UAC/C8B,YAAY,EAAE,SAAAA,CAAA;YAAM,OAAA9C,KAAI,CAACoB,UAAU,CAACC,IAAI,CAAC;UAArB,CAAqB;UACzC0B,YAAY,EAAE/C,KAAI,CAAC+C,YAAY;UAC/BP,qBAAqB,EAAAA,qBAAA;UACrBQ,UAAU,EAAE,SAAAA,CAACC,UAAa;YAAK,OAAAjD,KAAI,CAACsC,SAAS,CAAC,CAACW,UAAU,CAAC,CAAC;UAA5B;SAChC,CAAC;MATF,CASE,CACH;IACH,CAAC;IAESjD,KAAA,CAAAkD,kBAAkB,GAAG;MAC7BlD,KAAI,CAACmD,WAAW,EAAE;IACpB,CAAC;IAQSnD,KAAA,CAAA+C,YAAY,GAAG,UAACK,WAAc,EAAEpC,KAAa;MAC7C,IAAAb,KAAK,GAAKH,KAAI,CAACY,KAAK,CAAAT,KAAf;MAEb,IAAIa,KAAK,IAAI,CAAC,EAAE;QACd,IAAML,QAAQ,GAAQR,KAAK;QAC3BQ,QAAQ,CAACK,KAAK,CAAC,GAAGoC,WAAW;QAE7BpD,KAAI,CAACc,WAAW,CAACH,QAAQ,CAAC;;IAE9B,CAAC;IAjLChB,sBAAsB,CAACK,KAAI,CAAC;IAC5B,IAAMG,KAAK,GAAQJ,eAAe,CAACqC,aAAa,IAAIrC,eAAe,CAACsD,oBAAoB,IAAI,EAAE;IAC9FrD,KAAI,CAACY,KAAK,GAAG;MACXT,KAAK,EAAAA;KACN;IAED;IACAH,KAAI,CAACsD,iBAAiB,GAAG,IAAI5D,SAAS,CAAC;MAAEwD,kBAAkB,EAAElD,KAAI,CAACkD;IAAkB,CAAE,CAAC;;EACzF;EAnBctD,qBAAA,CAAA2D,wBAAwB,GAAtC,UAAuCC,QAA0C;IAC/E,IAAIA,QAAQ,CAACpB,aAAa,EAAE;MAC1B,OAAO;QAAEjC,KAAK,EAAEqD,QAAQ,CAACpB;MAAa,CAAE;;IAG1C,OAAO,IAAI;EACb,CAAC;EAeDqB,MAAA,CAAAC,cAAA,CAAW9D,qBAAA,CAAA+D,SAAA,SAAK;SAAhB,SAAAC,CAAA;MACE,OAAO,IAAI,CAAChD,KAAK,CAACT,KAAK;IACzB,CAAC;;;;EAqEMP,qBAAA,CAAA+D,SAAA,CAAAE,mBAAmB,GAA1B;IACE,IAAI,IAAI,CAACjD,KAAK,CAACT,KAAK,CAAC2D,MAAM,IAAI,IAAI,CAAC5B,SAAS,CAACC,gBAAgB,EAAE,GAAG,CAAC,EAAE;MACpE,IAAI,CAACT,WAAW,CAAC,IAAI,CAACQ,SAAS,CAACG,YAAY,EAAE,CAAC;;EAEnD,CAAC;EAED;;;;EAIOzC,qBAAA,CAAA+D,SAAA,CAAA7C,WAAW,GAAlB,UAAmBX,KAAU,EAAE4D,UAAmB;IAAlD,IAAA/D,KAAA;IACE,IAAI,IAAI,CAACK,KAAK,CAAC+B,aAAa,EAAE;MAC5B;MACA,IAAI,CAAC4B,QAAQ,CAAC7D,KAAK,CAAC;KACrB,MAAM;MACL,IAAI,CAAC8D,QAAQ,CAAC;QAAE9D,KAAK,EAAAA;MAAA,CAAE,EAAE;QACvBH,KAAI,CAACkE,uBAAuB,CAAC/D,KAAK,EAAE4D,UAAU,CAAC;MACjD,CAAC,CAAC;;EAEN,CAAC;EASMnE,qBAAA,CAAA+D,SAAA,CAAAQ,gBAAgB,GAAvB;IACE,OAAO,IAAI,CAACjC,SAAS,CAACC,gBAAgB,EAAE,GAAG,CAAC;EAC9C,CAAC;EAEMvC,qBAAA,CAAA+D,SAAA,CAAAS,kBAAkB,GAAzB,UAA0BC,QAAW,EAAEC,QAAqD;IAC1F,IAAI,IAAI,CAAC1D,KAAK,CAACT,KAAK,IAAI,IAAI,CAACS,KAAK,CAACT,KAAK,KAAKmE,QAAQ,CAACnE,KAAK,EAAE;MAC3D,IAAI,CAAC+B,SAAS,CAACqC,QAAQ,CAAC,IAAI,CAAC3D,KAAK,CAACT,KAAK,CAAC;;EAE7C,CAAC;EAEMP,qBAAA,CAAA+D,SAAA,CAAAa,WAAW,GAAlB;IACE,IAAI,CAACtC,SAAS,CAACuC,cAAc,CAAC,KAAK,CAAC;EACtC,CAAC;EAEM7E,qBAAA,CAAA+D,SAAA,CAAAe,gBAAgB,GAAvB;IACE,OAAO,IAAI,CAACxC,SAAS,CAACG,YAAY,EAAS;EAC7C,CAAC;EAEMzC,qBAAA,CAAA+D,SAAA,CAAAgB,iBAAiB,GAAxB;IACE,IAAI,CAACzC,SAAS,CAACqC,QAAQ,CAAC,IAAI,CAAC3D,KAAK,CAACT,KAAK,CAAC;EAC3C,CAAC;EAEDsD,MAAA,CAAAC,cAAA,CAAc9D,qBAAA,CAAA+D,SAAA,aAAS;SAAvB,SAAAC,CAAA;;MACE,OAAO,CAAAgB,EAAA,OAAI,CAACvE,KAAK,CAAC6B,SAAS,cAAA0C,EAAA,cAAAA,EAAA,GAAI,IAAI,CAACtB,iBAAiB;IACvD,CAAC;;;;EAEM1D,qBAAA,CAAA+D,SAAA,CAAAkB,MAAM,GAAb;IACE,OAAO,IAAI,CAACtC,WAAW,EAAE;EAC3B,CAAC;EAyBS3C,qBAAA,CAAA+D,SAAA,CAAAK,QAAQ,GAAlB,UAAmB7D,KAAW;IAC5B,IAAI,IAAI,CAACE,KAAK,CAAC2D,QAAQ,EAAE;MACtB,IAAI,CAAC3D,KAAK,CAAC2D,QAAkC,CAAC7D,KAAK,CAAC;;EAEzD,CAAC;EAaSP,qBAAA,CAAA+D,SAAA,CAAArB,SAAS,GAAnB,UAAoBnC,KAAU;IAC5B,IAAI,IAAI,CAACE,KAAK,CAAC4B,WAAW,EAAE;MAC1B,IAAM6C,QAAQ,GAAI,IAAI,CAACzE,KAAK,CAAC4B,WAAmB,CAAC9B,KAAK,CAAC;MAEvD,IAAM4E,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAqB;MACrED,QAAQ,CAACE,IAAI,CAACC,WAAW,CAACJ,SAAS,CAAC;MAEpC,IAAI;QACF;QACAA,SAAS,CAACK,KAAK,GAAGN,QAAQ;QAC1BC,SAAS,CAACM,MAAM,EAAE;QAClB;QACA,IAAI,CAACL,QAAQ,CAACM,WAAW,CAAC,MAAM,CAAC,EAAE;UACjC;UACA,MAAM,IAAIC,KAAK,EAAE;;OAEpB,CAAC,OAAOC,GAAG,EAAE;QACZ;MAAA,CACD,SAAS;QACRR,QAAQ,CAACE,IAAI,CAACO,WAAW,CAACV,SAAS,CAAC;;;EAG1C,CAAC;EAEOnF,qBAAA,CAAA+D,SAAA,CAAAO,uBAAuB,GAA/B,UAAgC/D,KAAW,EAAE4D,UAAmB;IAC9D,IAAI,CAACC,QAAQ,CAAC7D,KAAK,CAAC;EACtB,CAAC;EAEOP,qBAAA,CAAA+D,SAAA,CAAA1C,cAAc,GAAtB,UAAuBI,IAAO;IAC5B,OAAO,CAAC,IAAI,CAAChB,KAAK,CAACqF,aAAa,IAAI,IAAI,CAACrF,KAAK,CAACqF,aAAa,CAACrE,IAAI,CAAC;EACpE,CAAC;EACH,OAAAzB,qBAAC;AAAD,CAAC,CAnOSH,KAAK,CAACkG,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}