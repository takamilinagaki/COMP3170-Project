{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { GlobalSettings } from '../GlobalSettings';\nvar CustomizationsGlobalKey = 'customizations';\nvar NO_CUSTOMIZATIONS = {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false\n};\nvar _allSettings = GlobalSettings.getValue(CustomizationsGlobalKey, {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false\n});\nvar _events = [];\nvar Customizations = /** @class */function () {\n  function Customizations() {}\n  Customizations.reset = function () {\n    _allSettings.settings = {};\n    _allSettings.scopedSettings = {};\n  };\n  /** Apply global Customization settings.\n   * @example Customizations.applySettings(\\{ theme: \\{...\\} \\});\n   */\n  Customizations.applySettings = function (settings) {\n    _allSettings.settings = __assign(__assign({}, _allSettings.settings), settings);\n    Customizations._raiseChange();\n  };\n  /** Apply Customizations to a particular named scope, like a component.\n   * @example Customizations.applyScopedSettings('Nav', \\{ styles: () =\\> \\{\\} \\});\n   */\n  Customizations.applyScopedSettings = function (scopeName, settings) {\n    _allSettings.scopedSettings[scopeName] = __assign(__assign({}, _allSettings.scopedSettings[scopeName]), settings);\n    Customizations._raiseChange();\n  };\n  Customizations.getSettings = function (properties, scopeName, localSettings) {\n    if (localSettings === void 0) {\n      localSettings = NO_CUSTOMIZATIONS;\n    }\n    var settings = {};\n    var localScopedSettings = scopeName && localSettings.scopedSettings[scopeName] || {};\n    var globalScopedSettings = scopeName && _allSettings.scopedSettings[scopeName] || {};\n    for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n      var property = properties_1[_i];\n      settings[property] = localScopedSettings[property] || localSettings.settings[property] || globalScopedSettings[property] || _allSettings.settings[property];\n    }\n    return settings;\n  };\n  /** Used to run some code that sets Customizations without triggering an update until the end.\n   * Useful for applying Customizations that don't affect anything currently rendered, or for\n   * applying many customizations at once.\n   * @param suppressUpdate - Do not raise the change event at the end, preventing all updates\n   */\n  Customizations.applyBatchedUpdates = function (code, suppressUpdate) {\n    Customizations._suppressUpdates = true;\n    try {\n      code();\n    } catch (_a) {\n      /* do nothing */\n    }\n    Customizations._suppressUpdates = false;\n    if (!suppressUpdate) {\n      Customizations._raiseChange();\n    }\n  };\n  Customizations.observe = function (onChange) {\n    _events.push(onChange);\n  };\n  Customizations.unobserve = function (onChange) {\n    _events = _events.filter(function (cb) {\n      return cb !== onChange;\n    });\n  };\n  Customizations._raiseChange = function () {\n    if (!Customizations._suppressUpdates) {\n      _events.forEach(function (cb) {\n        return cb();\n      });\n    }\n  };\n  return Customizations;\n}();\nexport { Customizations };","map":{"version":3,"names":["GlobalSettings","CustomizationsGlobalKey","NO_CUSTOMIZATIONS","settings","scopedSettings","inCustomizerContext","_allSettings","getValue","_events","Customizations","reset","applySettings","__assign","_raiseChange","applyScopedSettings","scopeName","getSettings","properties","localSettings","localScopedSettings","globalScopedSettings","_i","properties_1","length","property","applyBatchedUpdates","code","suppressUpdate","_suppressUpdates","_a","observe","onChange","push","unobserve","filter","cb","forEach"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/lib/src/customizations/Customizations.ts"],"sourcesContent":["import { GlobalSettings } from '../GlobalSettings';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ISettings = { [key: string]: any };\nexport type ISettingsFunction = (settings: ISettings) => ISettings;\n\n/**\n * @deprecated Use ISettings.\n */\nexport type Settings = ISettings;\n\n/**\n * @deprecated Use ISettingsFunction.\n */\nexport type SettingsFunction = ISettingsFunction;\n\nexport interface ICustomizations {\n  settings: ISettings;\n  scopedSettings: { [key: string]: ISettings };\n  inCustomizerContext?: boolean;\n}\n\nconst CustomizationsGlobalKey = 'customizations';\nconst NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };\n\nlet _allSettings = GlobalSettings.getValue<ICustomizations>(CustomizationsGlobalKey, {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false,\n});\n\nlet _events: (() => void)[] = [];\n\nexport class Customizations {\n  private static _suppressUpdates: boolean;\n\n  public static reset(): void {\n    _allSettings.settings = {};\n    _allSettings.scopedSettings = {};\n  }\n\n  /** Apply global Customization settings.\n   * @example Customizations.applySettings(\\{ theme: \\{...\\} \\});\n   */\n  public static applySettings(settings: ISettings): void {\n    _allSettings.settings = { ..._allSettings.settings, ...settings };\n    Customizations._raiseChange();\n  }\n\n  /** Apply Customizations to a particular named scope, like a component.\n   * @example Customizations.applyScopedSettings('Nav', \\{ styles: () =\\> \\{\\} \\});\n   */\n  public static applyScopedSettings(scopeName: string, settings: ISettings): void {\n    _allSettings.scopedSettings[scopeName] = { ..._allSettings.scopedSettings[scopeName], ...settings };\n    Customizations._raiseChange();\n  }\n\n  public static getSettings(\n    properties: string[],\n    scopeName?: string,\n    localSettings: ICustomizations = NO_CUSTOMIZATIONS,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any {\n    const settings: ISettings = {};\n    const localScopedSettings = (scopeName && localSettings.scopedSettings[scopeName]) || {};\n    const globalScopedSettings = (scopeName && _allSettings.scopedSettings[scopeName]) || {};\n\n    for (let property of properties) {\n      settings[property] =\n        localScopedSettings[property] ||\n        localSettings.settings[property] ||\n        globalScopedSettings[property] ||\n        _allSettings.settings[property];\n    }\n\n    return settings;\n  }\n\n  /** Used to run some code that sets Customizations without triggering an update until the end.\n   * Useful for applying Customizations that don't affect anything currently rendered, or for\n   * applying many customizations at once.\n   * @param suppressUpdate - Do not raise the change event at the end, preventing all updates\n   */\n  public static applyBatchedUpdates(code: () => void, suppressUpdate?: boolean): void {\n    Customizations._suppressUpdates = true;\n    try {\n      code();\n    } catch {\n      /* do nothing */\n    }\n    Customizations._suppressUpdates = false;\n    if (!suppressUpdate) {\n      Customizations._raiseChange();\n    }\n  }\n\n  public static observe(onChange: () => void): void {\n    _events.push(onChange);\n  }\n\n  public static unobserve(onChange: () => void): void {\n    _events = _events.filter((cb: () => void) => cb !== onChange);\n  }\n\n  private static _raiseChange(): void {\n    if (!Customizations._suppressUpdates) {\n      _events.forEach((cb: () => void) => cb());\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}