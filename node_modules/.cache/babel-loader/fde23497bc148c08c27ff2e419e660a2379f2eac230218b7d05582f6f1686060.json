{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { TextField } from '../TextField';\nimport { KeyCodes } from '../../../Utilities';\nimport { clearNext, clearPrev, clearRange, DEFAULT_MASK_FORMAT_CHARS, getLeftFormatIndex, getMaskDisplay, getRightFormatIndex, insertString, parseMask } from './inputMask';\nimport { useConst, useIsomorphicLayoutEffect } from '@fluentui/react-hooks';\nvar COMPONENT_NAME = 'MaskedTextField';\nvar useComponentRef = function (componentRef, internalState, textField) {\n  React.useImperativeHandle(componentRef, function () {\n    return {\n      get value() {\n        var value = '';\n        for (var i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            return undefined;\n          }\n          value += internalState.maskCharData[i].value;\n        }\n        return value;\n      },\n      get selectionStart() {\n        return textField.current && textField.current.selectionStart !== null ? textField.current.selectionStart : -1;\n      },\n      get selectionEnd() {\n        return textField.current && textField.current.selectionEnd ? textField.current.selectionEnd : -1;\n      },\n      focus: function () {\n        textField.current && textField.current.focus();\n      },\n      blur: function () {\n        textField.current && textField.current.blur();\n      },\n      select: function () {\n        textField.current && textField.current.select();\n      },\n      setSelectionStart: function (value) {\n        textField.current && textField.current.setSelectionStart(value);\n      },\n      setSelectionEnd: function (value) {\n        textField.current && textField.current.setSelectionEnd(value);\n      },\n      setSelectionRange: function (start, end) {\n        textField.current && textField.current.setSelectionRange(start, end);\n      }\n    };\n  }, [internalState, textField]);\n};\nexport var DEFAULT_MASK_CHAR = '_';\nexport var MaskedTextField = React.forwardRef(function (props, ref) {\n  var textField = React.useRef(null);\n  var componentRef = props.componentRef,\n    onFocus = props.onFocus,\n    onBlur = props.onBlur,\n    onMouseDown = props.onMouseDown,\n    onMouseUp = props.onMouseUp,\n    onChange = props.onChange,\n    onPaste = props.onPaste,\n    onKeyDown = props.onKeyDown,\n    mask = props.mask,\n    _a = props.maskChar,\n    maskChar = _a === void 0 ? DEFAULT_MASK_CHAR : _a,\n    _b = props.maskFormat,\n    maskFormat = _b === void 0 ? DEFAULT_MASK_FORMAT_CHARS : _b,\n    value = props.value;\n  var internalState = useConst(function () {\n    return {\n      maskCharData: parseMask(mask, maskFormat),\n      isFocused: false,\n      moveCursorOnMouseUp: false,\n      changeSelectionData: null\n    };\n  });\n  /** The index into the rendered value of the first unfilled format character */\n  var _c = React.useState(),\n    maskCursorPosition = _c[0],\n    setMaskCursorPosition = _c[1];\n  /**\n   * The mask string formatted with the input value.\n   * This is what is displayed inside the TextField\n   * @example\n   *  `Phone Number: 12_ - 4___`\n   */\n  var _d = React.useState(function () {\n      return getMaskDisplay(mask, internalState.maskCharData, maskChar);\n    }),\n    displayValue = _d[0],\n    setDisplayValue = _d[1];\n  var setValue = React.useCallback(function (newValue) {\n    var valueIndex = 0;\n    var charDataIndex = 0;\n    while (valueIndex < newValue.length && charDataIndex < internalState.maskCharData.length) {\n      // Test if the next character in the new value fits the next format character\n      var testVal = newValue[valueIndex];\n      if (internalState.maskCharData[charDataIndex].format.test(testVal)) {\n        internalState.maskCharData[charDataIndex].value = testVal;\n        charDataIndex++;\n      }\n      valueIndex++;\n    }\n  }, [internalState]);\n  var handleFocus = React.useCallback(function (ev) {\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(ev);\n    internalState.isFocused = true;\n    // Move the cursor position to the leftmost unfilled position\n    for (var i = 0; i < internalState.maskCharData.length; i++) {\n      if (!internalState.maskCharData[i].value) {\n        setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n        break;\n      }\n    }\n  }, [internalState, onFocus]);\n  var handleBlur = React.useCallback(function (ev) {\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(ev);\n    internalState.isFocused = false;\n    internalState.moveCursorOnMouseUp = true;\n  }, [internalState, onBlur]);\n  var handleMouseDown = React.useCallback(function (ev) {\n    onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(ev);\n    if (!internalState.isFocused) {\n      internalState.moveCursorOnMouseUp = true;\n    }\n  }, [internalState, onMouseDown]);\n  var handleMouseUp = React.useCallback(function (ev) {\n    onMouseUp === null || onMouseUp === void 0 ? void 0 : onMouseUp(ev);\n    // Move the cursor on mouseUp after focusing the textField\n    if (internalState.moveCursorOnMouseUp) {\n      internalState.moveCursorOnMouseUp = false;\n      // Move the cursor position to the rightmost unfilled position\n      for (var i = 0; i < internalState.maskCharData.length; i++) {\n        if (!internalState.maskCharData[i].value) {\n          setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n          break;\n        }\n      }\n    }\n  }, [internalState, onMouseUp]);\n  var handleInputChange = React.useCallback(function (ev, inputValue) {\n    if (internalState.changeSelectionData === null && textField.current) {\n      internalState.changeSelectionData = {\n        changeType: 'default',\n        selectionStart: textField.current.selectionStart !== null ? textField.current.selectionStart : -1,\n        selectionEnd: textField.current.selectionEnd !== null ? textField.current.selectionEnd : -1\n      };\n    }\n    if (!internalState.changeSelectionData) {\n      return;\n    }\n    // The initial value of cursorPos does not matter\n    var cursorPos = 0;\n    var _a = internalState.changeSelectionData,\n      changeType = _a.changeType,\n      selectionStart = _a.selectionStart,\n      selectionEnd = _a.selectionEnd;\n    if (changeType === 'textPasted') {\n      var charsSelected = selectionEnd - selectionStart;\n      var charCount = inputValue.length + charsSelected - displayValue.length;\n      var startPos = selectionStart;\n      // eslint-disable-next-line deprecation/deprecation\n      var pastedString = inputValue.substr(startPos, charCount);\n      // Clear any selected characters\n      if (charsSelected) {\n        internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charsSelected);\n      }\n      cursorPos = insertString(internalState.maskCharData, startPos, pastedString);\n    } else if (changeType === 'delete' || changeType === 'backspace') {\n      // isDel is true If the characters are removed LTR, otherwise RTL\n      var isDel = changeType === 'delete';\n      var charCount = selectionEnd - selectionStart;\n      if (charCount) {\n        // charCount is > 0 if range was deleted\n        internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charCount);\n        cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n      } else {\n        // If charCount === 0, there was no selection and a single character was deleted\n        if (isDel) {\n          internalState.maskCharData = clearNext(internalState.maskCharData, selectionStart);\n          cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n        } else {\n          internalState.maskCharData = clearPrev(internalState.maskCharData, selectionStart);\n          cursorPos = getLeftFormatIndex(internalState.maskCharData, selectionStart);\n        }\n      }\n    } else if (inputValue.length > displayValue.length) {\n      // This case is if the user added characters\n      var charCount = inputValue.length - displayValue.length;\n      var startPos = selectionEnd - charCount;\n      // eslint-disable-next-line deprecation/deprecation\n      var enteredString = inputValue.substr(startPos, charCount);\n      cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n    } else if (inputValue.length <= displayValue.length) {\n      /**\n       * This case is reached only if the user has selected a block of 1 or more\n       * characters and input a character replacing the characters they've selected.\n       */\n      var charCount = 1;\n      var selectCount = displayValue.length + charCount - inputValue.length;\n      var startPos = selectionEnd - charCount;\n      // eslint-disable-next-line deprecation/deprecation\n      var enteredString = inputValue.substr(startPos, charCount);\n      // Clear the selected range\n      internalState.maskCharData = clearRange(internalState.maskCharData, startPos, selectCount);\n      // Insert the printed character\n      cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n    }\n    internalState.changeSelectionData = null;\n    var newValue = getMaskDisplay(mask, internalState.maskCharData, maskChar);\n    setDisplayValue(newValue);\n    setMaskCursorPosition(cursorPos);\n    // Perform onChange after input has been processed. Return value is expected to be the displayed text\n    onChange === null || onChange === void 0 ? void 0 : onChange(ev, newValue);\n  }, [displayValue.length, internalState, mask, maskChar, onChange]);\n  var handleKeyDown = React.useCallback(function (ev) {\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(ev);\n    internalState.changeSelectionData = null;\n    if (textField.current && textField.current.value) {\n      // eslint-disable-next-line deprecation/deprecation\n      var keyCode = ev.keyCode,\n        ctrlKey = ev.ctrlKey,\n        metaKey = ev.metaKey;\n      // Ignore ctrl and meta keydown\n      if (ctrlKey || metaKey) {\n        return;\n      }\n      // On backspace or delete, store the selection and the keyCode\n      if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n        var selectionStart = ev.target.selectionStart;\n        var selectionEnd = ev.target.selectionEnd;\n        // Check if backspace or delete press is valid.\n        if (!(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) && !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < textField.current.value.length)) {\n          return;\n        }\n        internalState.changeSelectionData = {\n          changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n          selectionStart: selectionStart !== null ? selectionStart : -1,\n          selectionEnd: selectionEnd !== null ? selectionEnd : -1\n        };\n      }\n    }\n  }, [internalState, onKeyDown]);\n  var handlePaste = React.useCallback(function (ev) {\n    onPaste === null || onPaste === void 0 ? void 0 : onPaste(ev);\n    var selectionStart = ev.target.selectionStart;\n    var selectionEnd = ev.target.selectionEnd;\n    // Store the paste selection range\n    internalState.changeSelectionData = {\n      changeType: 'textPasted',\n      selectionStart: selectionStart !== null ? selectionStart : -1,\n      selectionEnd: selectionEnd !== null ? selectionEnd : -1\n    };\n  }, [internalState, onPaste]);\n  // Updates the display value if mask or value props change.\n  React.useEffect(function () {\n    internalState.maskCharData = parseMask(mask, maskFormat);\n    value !== undefined && setValue(value);\n    setDisplayValue(getMaskDisplay(mask, internalState.maskCharData, maskChar));\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only update when mask or value changes.\n  }, [mask, value]);\n  // Run before browser paint to avoid flickering from selection reset.\n  useIsomorphicLayoutEffect(function () {\n    // Move the cursor to position before paint.\n    if (maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  }, [maskCursorPosition]);\n  // Run after browser paint.\n  React.useEffect(function () {\n    // Move the cursor to the start of the mask format after values update.\n    if (internalState.isFocused && maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  });\n  useComponentRef(componentRef, internalState, textField);\n  return React.createElement(TextField, __assign({}, props, {\n    elementRef: ref,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onChange: handleInputChange,\n    onKeyDown: handleKeyDown,\n    onPaste: handlePaste,\n    value: displayValue || '',\n    componentRef: textField\n  }));\n});\nMaskedTextField.displayName = COMPONENT_NAME;","map":{"version":3,"names":["React","TextField","KeyCodes","clearNext","clearPrev","clearRange","DEFAULT_MASK_FORMAT_CHARS","getLeftFormatIndex","getMaskDisplay","getRightFormatIndex","insertString","parseMask","useConst","useIsomorphicLayoutEffect","COMPONENT_NAME","useComponentRef","componentRef","internalState","textField","useImperativeHandle","value","i","maskCharData","length","undefined","selectionStart","current","selectionEnd","focus","blur","select","setSelectionStart","setSelectionEnd","setSelectionRange","start","end","DEFAULT_MASK_CHAR","MaskedTextField","forwardRef","props","ref","useRef","onFocus","onBlur","onMouseDown","onMouseUp","onChange","onPaste","onKeyDown","mask","_a","maskChar","_b","maskFormat","isFocused","moveCursorOnMouseUp","changeSelectionData","_c","useState","maskCursorPosition","setMaskCursorPosition","_d","displayValue","setDisplayValue","setValue","useCallback","newValue","valueIndex","charDataIndex","testVal","format","test","handleFocus","ev","displayIndex","handleBlur","handleMouseDown","handleMouseUp","handleInputChange","inputValue","changeType","cursorPos","charsSelected","charCount","startPos","pastedString","substr","isDel","enteredString","selectCount","handleKeyDown","keyCode","ctrlKey","metaKey","backspace","del","target","handlePaste","useEffect","createElement","__assign","elementRef","displayName"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/TextField/src/components/TextField/MaskedTextField/MaskedTextField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { TextField } from '../TextField';\nimport { KeyCodes } from '../../../Utilities';\nimport {\n  clearNext,\n  clearPrev,\n  clearRange,\n  DEFAULT_MASK_FORMAT_CHARS,\n  getLeftFormatIndex,\n  getMaskDisplay,\n  getRightFormatIndex,\n  insertString,\n  parseMask,\n} from './inputMask';\nimport { useConst, useIsomorphicLayoutEffect } from '@fluentui/react-hooks';\nimport type { IMaskedTextFieldProps, IMaskedTextField } from '../TextField.types';\nimport type { IRefObject } from '../../../Utilities';\nimport type { IMaskValue } from './inputMask';\n\ninterface IMaskedTextFieldInternalState {\n  maskCharData: IMaskValue[];\n  isFocused: boolean;\n  moveCursorOnMouseUp: boolean;\n  changeSelectionData: {\n    changeType: 'default' | 'backspace' | 'delete' | 'textPasted';\n    selectionStart: number;\n    selectionEnd: number;\n  } | null;\n}\n\nconst COMPONENT_NAME = 'MaskedTextField';\n\nconst useComponentRef = (\n  componentRef: IRefObject<IMaskedTextField> | undefined,\n  internalState: IMaskedTextFieldInternalState,\n  textField: React.RefObject<IMaskedTextField>,\n) => {\n  React.useImperativeHandle(\n    componentRef,\n    (): IMaskedTextField => ({\n      get value() {\n        let value = '';\n\n        for (let i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            return undefined;\n          }\n          value += internalState.maskCharData[i].value;\n        }\n        return value;\n      },\n\n      get selectionStart(): number | null {\n        return textField.current && textField.current.selectionStart !== null ? textField.current.selectionStart : -1;\n      },\n\n      get selectionEnd(): number | null {\n        return textField.current && textField.current.selectionEnd ? textField.current.selectionEnd : -1;\n      },\n\n      focus(): void {\n        textField.current && textField.current.focus();\n      },\n\n      blur(): void {\n        textField.current && textField.current.blur();\n      },\n\n      select(): void {\n        textField.current && textField.current.select();\n      },\n\n      setSelectionStart(value: number): void {\n        textField.current && textField.current.setSelectionStart(value);\n      },\n\n      setSelectionEnd(value: number): void {\n        textField.current && textField.current.setSelectionEnd(value);\n      },\n\n      setSelectionRange(start: number, end: number): void {\n        textField.current && textField.current.setSelectionRange(start, end);\n      },\n    }),\n    [internalState, textField],\n  );\n};\n\nexport const DEFAULT_MASK_CHAR = '_';\n\nexport const MaskedTextField: React.FunctionComponent<IMaskedTextFieldProps> = React.forwardRef<\n  HTMLDivElement,\n  IMaskedTextFieldProps\n>((props, ref) => {\n  const textField = React.useRef<IMaskedTextField>(null);\n\n  const {\n    componentRef,\n    onFocus,\n    onBlur,\n    onMouseDown,\n    onMouseUp,\n    onChange,\n    onPaste,\n    onKeyDown,\n    mask,\n    maskChar = DEFAULT_MASK_CHAR,\n    maskFormat = DEFAULT_MASK_FORMAT_CHARS,\n    value,\n  } = props;\n\n  const internalState = useConst<IMaskedTextFieldInternalState>(() => ({\n    maskCharData: parseMask(mask, maskFormat),\n    isFocused: false,\n    moveCursorOnMouseUp: false,\n    changeSelectionData: null,\n  }));\n\n  /** The index into the rendered value of the first unfilled format character */\n  const [maskCursorPosition, setMaskCursorPosition] = React.useState<number | undefined>();\n\n  /**\n   * The mask string formatted with the input value.\n   * This is what is displayed inside the TextField\n   * @example\n   *  `Phone Number: 12_ - 4___`\n   */\n  const [displayValue, setDisplayValue] = React.useState<string>(() =>\n    getMaskDisplay(mask, internalState.maskCharData, maskChar),\n  );\n\n  const setValue = React.useCallback(\n    (newValue: string): void => {\n      let valueIndex = 0;\n      let charDataIndex = 0;\n\n      while (valueIndex < newValue.length && charDataIndex < internalState.maskCharData.length) {\n        // Test if the next character in the new value fits the next format character\n        const testVal = newValue[valueIndex];\n        if (internalState.maskCharData[charDataIndex].format.test(testVal)) {\n          internalState.maskCharData[charDataIndex].value = testVal;\n          charDataIndex++;\n        }\n        valueIndex++;\n      }\n    },\n    [internalState],\n  );\n\n  const handleFocus = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      onFocus?.(ev);\n      internalState.isFocused = true;\n\n      // Move the cursor position to the leftmost unfilled position\n      for (let i = 0; i < internalState.maskCharData.length; i++) {\n        if (!internalState.maskCharData[i].value) {\n          setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n          break;\n        }\n      }\n    },\n    [internalState, onFocus],\n  );\n\n  const handleBlur = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      onBlur?.(ev);\n      internalState.isFocused = false;\n      internalState.moveCursorOnMouseUp = true;\n    },\n    [internalState, onBlur],\n  );\n\n  const handleMouseDown = React.useCallback(\n    (ev: React.MouseEvent<HTMLInputElement>) => {\n      onMouseDown?.(ev);\n      if (!internalState.isFocused) {\n        internalState.moveCursorOnMouseUp = true;\n      }\n    },\n    [internalState, onMouseDown],\n  );\n\n  const handleMouseUp = React.useCallback(\n    (ev: React.MouseEvent<HTMLInputElement>) => {\n      onMouseUp?.(ev);\n      // Move the cursor on mouseUp after focusing the textField\n      if (internalState.moveCursorOnMouseUp) {\n        internalState.moveCursorOnMouseUp = false;\n        // Move the cursor position to the rightmost unfilled position\n        for (let i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n            break;\n          }\n        }\n      }\n    },\n    [internalState, onMouseUp],\n  );\n\n  const handleInputChange = React.useCallback(\n    (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, inputValue: string) => {\n      if (internalState.changeSelectionData === null && textField.current) {\n        internalState.changeSelectionData = {\n          changeType: 'default',\n          selectionStart: textField.current.selectionStart !== null ? textField.current.selectionStart : -1,\n          selectionEnd: textField.current.selectionEnd !== null ? textField.current.selectionEnd : -1,\n        };\n      }\n      if (!internalState.changeSelectionData) {\n        return;\n      }\n\n      // The initial value of cursorPos does not matter\n      let cursorPos = 0;\n      const { changeType, selectionStart, selectionEnd } = internalState.changeSelectionData;\n\n      if (changeType === 'textPasted') {\n        const charsSelected = selectionEnd - selectionStart;\n        const charCount = inputValue.length + charsSelected - displayValue.length;\n        const startPos = selectionStart;\n        // eslint-disable-next-line deprecation/deprecation\n        const pastedString = inputValue.substr(startPos, charCount);\n\n        // Clear any selected characters\n        if (charsSelected) {\n          internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charsSelected);\n        }\n        cursorPos = insertString(internalState.maskCharData, startPos, pastedString);\n      } else if (changeType === 'delete' || changeType === 'backspace') {\n        // isDel is true If the characters are removed LTR, otherwise RTL\n        const isDel = changeType === 'delete';\n        const charCount = selectionEnd - selectionStart;\n\n        if (charCount) {\n          // charCount is > 0 if range was deleted\n          internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charCount);\n          cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n        } else {\n          // If charCount === 0, there was no selection and a single character was deleted\n          if (isDel) {\n            internalState.maskCharData = clearNext(internalState.maskCharData, selectionStart);\n            cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n          } else {\n            internalState.maskCharData = clearPrev(internalState.maskCharData, selectionStart);\n            cursorPos = getLeftFormatIndex(internalState.maskCharData, selectionStart);\n          }\n        }\n      } else if (inputValue.length > displayValue.length) {\n        // This case is if the user added characters\n        const charCount = inputValue.length - displayValue.length;\n        const startPos = selectionEnd - charCount;\n        // eslint-disable-next-line deprecation/deprecation\n        const enteredString = inputValue.substr(startPos, charCount);\n\n        cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n      } else if (inputValue.length <= displayValue.length) {\n        /**\n         * This case is reached only if the user has selected a block of 1 or more\n         * characters and input a character replacing the characters they've selected.\n         */\n        const charCount = 1;\n        const selectCount = displayValue.length + charCount - inputValue.length;\n        const startPos = selectionEnd - charCount;\n        // eslint-disable-next-line deprecation/deprecation\n        const enteredString = inputValue.substr(startPos, charCount);\n\n        // Clear the selected range\n        internalState.maskCharData = clearRange(internalState.maskCharData, startPos, selectCount);\n        // Insert the printed character\n        cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n      }\n\n      internalState.changeSelectionData = null;\n\n      const newValue = getMaskDisplay(mask, internalState.maskCharData, maskChar);\n\n      setDisplayValue(newValue);\n      setMaskCursorPosition(cursorPos);\n\n      // Perform onChange after input has been processed. Return value is expected to be the displayed text\n      onChange?.(ev, newValue);\n    },\n    [displayValue.length, internalState, mask, maskChar, onChange],\n  );\n\n  const handleKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLInputElement>) => {\n      onKeyDown?.(ev);\n\n      internalState.changeSelectionData = null;\n      if (textField.current && textField.current.value) {\n        // eslint-disable-next-line deprecation/deprecation\n        const { keyCode, ctrlKey, metaKey } = ev;\n\n        // Ignore ctrl and meta keydown\n        if (ctrlKey || metaKey) {\n          return;\n        }\n\n        // On backspace or delete, store the selection and the keyCode\n        if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n          const selectionStart = (ev.target as HTMLInputElement).selectionStart;\n          const selectionEnd = (ev.target as HTMLInputElement).selectionEnd;\n\n          // Check if backspace or delete press is valid.\n          if (\n            !(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) &&\n            !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < textField.current.value.length)\n          ) {\n            return;\n          }\n\n          internalState.changeSelectionData = {\n            changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n            selectionStart: selectionStart !== null ? selectionStart : -1,\n            selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n          };\n        }\n      }\n    },\n    [internalState, onKeyDown],\n  );\n\n  const handlePaste = React.useCallback(\n    (ev: React.ClipboardEvent<HTMLInputElement>) => {\n      onPaste?.(ev);\n\n      const selectionStart = (ev.target as HTMLInputElement).selectionStart;\n      const selectionEnd = (ev.target as HTMLInputElement).selectionEnd;\n      // Store the paste selection range\n      internalState.changeSelectionData = {\n        changeType: 'textPasted',\n        selectionStart: selectionStart !== null ? selectionStart : -1,\n        selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n      };\n    },\n    [internalState, onPaste],\n  );\n\n  // Updates the display value if mask or value props change.\n  React.useEffect(() => {\n    internalState.maskCharData = parseMask(mask, maskFormat);\n    value !== undefined && setValue(value);\n    setDisplayValue(getMaskDisplay(mask, internalState.maskCharData, maskChar));\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only update when mask or value changes.\n  }, [mask, value]);\n\n  // Run before browser paint to avoid flickering from selection reset.\n  useIsomorphicLayoutEffect(() => {\n    // Move the cursor to position before paint.\n    if (maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  }, [maskCursorPosition]);\n\n  // Run after browser paint.\n  React.useEffect(() => {\n    // Move the cursor to the start of the mask format after values update.\n    if (internalState.isFocused && maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  });\n\n  useComponentRef(componentRef, internalState, textField);\n\n  return (\n    <TextField\n      {...props}\n      elementRef={ref}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onChange={handleInputChange}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      value={displayValue || ''}\n      componentRef={textField}\n    />\n  );\n});\nMaskedTextField.displayName = COMPONENT_NAME;\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SACEC,SAAS,EACTC,SAAS,EACTC,UAAU,EACVC,yBAAyB,EACzBC,kBAAkB,EAClBC,cAAc,EACdC,mBAAmB,EACnBC,YAAY,EACZC,SAAS,QACJ,aAAa;AACpB,SAASC,QAAQ,EAAEC,yBAAyB,QAAQ,uBAAuB;AAgB3E,IAAMC,cAAc,GAAG,iBAAiB;AAExC,IAAMC,eAAe,GAAG,SAAAA,CACtBC,YAAsD,EACtDC,aAA4C,EAC5CC,SAA4C;EAE5ClB,KAAK,CAACmB,mBAAmB,CACvBH,YAAY,EACZ;IAAwB,OAAC;MACvB,IAAII,KAAKA,CAAA;QACP,IAAIA,KAAK,GAAG,EAAE;QAEd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,aAAa,CAACK,YAAY,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;UAC1D,IAAI,CAACJ,aAAa,CAACK,YAAY,CAACD,CAAC,CAAC,CAACD,KAAK,EAAE;YACxC,OAAOI,SAAS;;UAElBJ,KAAK,IAAIH,aAAa,CAACK,YAAY,CAACD,CAAC,CAAC,CAACD,KAAK;;QAE9C,OAAOA,KAAK;MACd,CAAC;MAED,IAAIK,cAAcA,CAAA;QAChB,OAAOP,SAAS,CAACQ,OAAO,IAAIR,SAAS,CAACQ,OAAO,CAACD,cAAc,KAAK,IAAI,GAAGP,SAAS,CAACQ,OAAO,CAACD,cAAc,GAAG,CAAC,CAAC;MAC/G,CAAC;MAED,IAAIE,YAAYA,CAAA;QACd,OAAOT,SAAS,CAACQ,OAAO,IAAIR,SAAS,CAACQ,OAAO,CAACC,YAAY,GAAGT,SAAS,CAACQ,OAAO,CAACC,YAAY,GAAG,CAAC,CAAC;MAClG,CAAC;MAEDC,KAAK,EAAL,SAAAA,CAAA;QACEV,SAAS,CAACQ,OAAO,IAAIR,SAAS,CAACQ,OAAO,CAACE,KAAK,EAAE;MAChD,CAAC;MAEDC,IAAI,EAAJ,SAAAA,CAAA;QACEX,SAAS,CAACQ,OAAO,IAAIR,SAAS,CAACQ,OAAO,CAACG,IAAI,EAAE;MAC/C,CAAC;MAEDC,MAAM,EAAN,SAAAA,CAAA;QACEZ,SAAS,CAACQ,OAAO,IAAIR,SAAS,CAACQ,OAAO,CAACI,MAAM,EAAE;MACjD,CAAC;MAEDC,iBAAiB,EAAjB,SAAAA,CAAkBX,KAAa;QAC7BF,SAAS,CAACQ,OAAO,IAAIR,SAAS,CAACQ,OAAO,CAACK,iBAAiB,CAACX,KAAK,CAAC;MACjE,CAAC;MAEDY,eAAe,EAAf,SAAAA,CAAgBZ,KAAa;QAC3BF,SAAS,CAACQ,OAAO,IAAIR,SAAS,CAACQ,OAAO,CAACM,eAAe,CAACZ,KAAK,CAAC;MAC/D,CAAC;MAEDa,iBAAiB,EAAjB,SAAAA,CAAkBC,KAAa,EAAEC,GAAW;QAC1CjB,SAAS,CAACQ,OAAO,IAAIR,SAAS,CAACQ,OAAO,CAACO,iBAAiB,CAACC,KAAK,EAAEC,GAAG,CAAC;MACtE;KACD;EA5CuB,CA4CtB,EACF,CAAClB,aAAa,EAAEC,SAAS,CAAC,CAC3B;AACH,CAAC;AAED,OAAO,IAAMkB,iBAAiB,GAAG,GAAG;AAEpC,OAAO,IAAMC,eAAe,GAAmDrC,KAAK,CAACsC,UAAU,CAG7F,UAACC,KAAK,EAAEC,GAAG;EACX,IAAMtB,SAAS,GAAGlB,KAAK,CAACyC,MAAM,CAAmB,IAAI,CAAC;EAGpD,IAAAzB,YAAY,GAYVuB,KAAK,CAAAvB,YAZK;IACZ0B,OAAO,GAWLH,KAAK,CAAAG,OAXA;IACPC,MAAM,GAUJJ,KAAK,CAAAI,MAVD;IACNC,WAAW,GASTL,KAAK,CAAAK,WATI;IACXC,SAAS,GAQPN,KAAK,CAAAM,SARE;IACTC,QAAQ,GAONP,KAAK,CAAAO,QAPC;IACRC,OAAO,GAMLR,KAAK,CAAAQ,OANA;IACPC,SAAS,GAKPT,KAAK,CAAAS,SALE;IACTC,IAAI,GAIFV,KAAK,CAAAU,IAJH;IACJC,EAAA,GAGEX,KAAK,CAAAY,QAHqB;IAA5BA,QAAQ,GAAAD,EAAA,cAAGd,iBAAiB,GAAAc,EAAA;IAC5BE,EAAA,GAEEb,KAAK,CAAAc,UAF+B;IAAtCA,UAAU,GAAAD,EAAA,cAAG9C,yBAAyB,GAAA8C,EAAA;IACtChC,KAAK,GACHmB,KAAK,CAAAnB,KADF;EAGP,IAAMH,aAAa,GAAGL,QAAQ,CAAgC;IAAM,OAAC;MACnEU,YAAY,EAAEX,SAAS,CAACsC,IAAI,EAAEI,UAAU,CAAC;MACzCC,SAAS,EAAE,KAAK;MAChBC,mBAAmB,EAAE,KAAK;MAC1BC,mBAAmB,EAAE;KACtB;EALmE,CAKlE,CAAC;EAEH;EACM,IAAAC,EAAA,GAA8CzD,KAAK,CAAC0D,QAAQ,EAAsB;IAAjFC,kBAAkB,GAAAF,EAAA;IAAEG,qBAAqB,GAAAH,EAAA,GAAwC;EAExF;;;;;;EAMM,IAAAI,EAAA,GAAkC7D,KAAK,CAAC0D,QAAQ,CAAS;MAC7D,OAAAlD,cAAc,CAACyC,IAAI,EAAEhC,aAAa,CAACK,YAAY,EAAE6B,QAAQ,CAAC;IAA1D,CAA0D,CAC3D;IAFMW,YAAY,GAAAD,EAAA;IAAEE,eAAe,GAAAF,EAAA,GAEnC;EAED,IAAMG,QAAQ,GAAGhE,KAAK,CAACiE,WAAW,CAChC,UAACC,QAAgB;IACf,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAIC,aAAa,GAAG,CAAC;IAErB,OAAOD,UAAU,GAAGD,QAAQ,CAAC3C,MAAM,IAAI6C,aAAa,GAAGnD,aAAa,CAACK,YAAY,CAACC,MAAM,EAAE;MACxF;MACA,IAAM8C,OAAO,GAAGH,QAAQ,CAACC,UAAU,CAAC;MACpC,IAAIlD,aAAa,CAACK,YAAY,CAAC8C,aAAa,CAAC,CAACE,MAAM,CAACC,IAAI,CAACF,OAAO,CAAC,EAAE;QAClEpD,aAAa,CAACK,YAAY,CAAC8C,aAAa,CAAC,CAAChD,KAAK,GAAGiD,OAAO;QACzDD,aAAa,EAAE;;MAEjBD,UAAU,EAAE;;EAEhB,CAAC,EACD,CAAClD,aAAa,CAAC,CAChB;EAED,IAAMuD,WAAW,GAAGxE,KAAK,CAACiE,WAAW,CACnC,UAACQ,EAA4D;IAC3D/B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAG+B,EAAE,CAAC;IACbxD,aAAa,CAACqC,SAAS,GAAG,IAAI;IAE9B;IACA,KAAK,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,aAAa,CAACK,YAAY,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MAC1D,IAAI,CAACJ,aAAa,CAACK,YAAY,CAACD,CAAC,CAAC,CAACD,KAAK,EAAE;QACxCwC,qBAAqB,CAAC3C,aAAa,CAACK,YAAY,CAACD,CAAC,CAAC,CAACqD,YAAY,CAAC;QACjE;;;EAGN,CAAC,EACD,CAACzD,aAAa,EAAEyB,OAAO,CAAC,CACzB;EAED,IAAMiC,UAAU,GAAG3E,KAAK,CAACiE,WAAW,CAClC,UAACQ,EAA4D;IAC3D9B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAG8B,EAAE,CAAC;IACZxD,aAAa,CAACqC,SAAS,GAAG,KAAK;IAC/BrC,aAAa,CAACsC,mBAAmB,GAAG,IAAI;EAC1C,CAAC,EACD,CAACtC,aAAa,EAAE0B,MAAM,CAAC,CACxB;EAED,IAAMiC,eAAe,GAAG5E,KAAK,CAACiE,WAAW,CACvC,UAACQ,EAAsC;IACrC7B,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAG6B,EAAE,CAAC;IACjB,IAAI,CAACxD,aAAa,CAACqC,SAAS,EAAE;MAC5BrC,aAAa,CAACsC,mBAAmB,GAAG,IAAI;;EAE5C,CAAC,EACD,CAACtC,aAAa,EAAE2B,WAAW,CAAC,CAC7B;EAED,IAAMiC,aAAa,GAAG7E,KAAK,CAACiE,WAAW,CACrC,UAACQ,EAAsC;IACrC5B,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAG4B,EAAE,CAAC;IACf;IACA,IAAIxD,aAAa,CAACsC,mBAAmB,EAAE;MACrCtC,aAAa,CAACsC,mBAAmB,GAAG,KAAK;MACzC;MACA,KAAK,IAAIlC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,aAAa,CAACK,YAAY,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;QAC1D,IAAI,CAACJ,aAAa,CAACK,YAAY,CAACD,CAAC,CAAC,CAACD,KAAK,EAAE;UACxCwC,qBAAqB,CAAC3C,aAAa,CAACK,YAAY,CAACD,CAAC,CAAC,CAACqD,YAAY,CAAC;UACjE;;;;EAIR,CAAC,EACD,CAACzD,aAAa,EAAE4B,SAAS,CAAC,CAC3B;EAED,IAAMiC,iBAAiB,GAAG9E,KAAK,CAACiE,WAAW,CACzC,UAACQ,EAA2D,EAAEM,UAAkB;IAC9E,IAAI9D,aAAa,CAACuC,mBAAmB,KAAK,IAAI,IAAItC,SAAS,CAACQ,OAAO,EAAE;MACnET,aAAa,CAACuC,mBAAmB,GAAG;QAClCwB,UAAU,EAAE,SAAS;QACrBvD,cAAc,EAAEP,SAAS,CAACQ,OAAO,CAACD,cAAc,KAAK,IAAI,GAAGP,SAAS,CAACQ,OAAO,CAACD,cAAc,GAAG,CAAC,CAAC;QACjGE,YAAY,EAAET,SAAS,CAACQ,OAAO,CAACC,YAAY,KAAK,IAAI,GAAGT,SAAS,CAACQ,OAAO,CAACC,YAAY,GAAG,CAAC;OAC3F;;IAEH,IAAI,CAACV,aAAa,CAACuC,mBAAmB,EAAE;MACtC;;IAGF;IACA,IAAIyB,SAAS,GAAG,CAAC;IACX,IAAA/B,EAAA,GAA+CjC,aAAa,CAACuC,mBAAmB;MAA9EwB,UAAU,GAAA9B,EAAA,CAAA8B,UAAA;MAAEvD,cAAc,GAAAyB,EAAA,CAAAzB,cAAA;MAAEE,YAAY,GAAAuB,EAAA,CAAAvB,YAAsC;IAEtF,IAAIqD,UAAU,KAAK,YAAY,EAAE;MAC/B,IAAME,aAAa,GAAGvD,YAAY,GAAGF,cAAc;MACnD,IAAM0D,SAAS,GAAGJ,UAAU,CAACxD,MAAM,GAAG2D,aAAa,GAAGpB,YAAY,CAACvC,MAAM;MACzE,IAAM6D,QAAQ,GAAG3D,cAAc;MAC/B;MACA,IAAM4D,YAAY,GAAGN,UAAU,CAACO,MAAM,CAACF,QAAQ,EAAED,SAAS,CAAC;MAE3D;MACA,IAAID,aAAa,EAAE;QACjBjE,aAAa,CAACK,YAAY,GAAGjB,UAAU,CAACY,aAAa,CAACK,YAAY,EAAEG,cAAc,EAAEyD,aAAa,CAAC;;MAEpGD,SAAS,GAAGvE,YAAY,CAACO,aAAa,CAACK,YAAY,EAAE8D,QAAQ,EAAEC,YAAY,CAAC;KAC7E,MAAM,IAAIL,UAAU,KAAK,QAAQ,IAAIA,UAAU,KAAK,WAAW,EAAE;MAChE;MACA,IAAMO,KAAK,GAAGP,UAAU,KAAK,QAAQ;MACrC,IAAMG,SAAS,GAAGxD,YAAY,GAAGF,cAAc;MAE/C,IAAI0D,SAAS,EAAE;QACb;QACAlE,aAAa,CAACK,YAAY,GAAGjB,UAAU,CAACY,aAAa,CAACK,YAAY,EAAEG,cAAc,EAAE0D,SAAS,CAAC;QAC9FF,SAAS,GAAGxE,mBAAmB,CAACQ,aAAa,CAACK,YAAY,EAAEG,cAAc,CAAC;OAC5E,MAAM;QACL;QACA,IAAI8D,KAAK,EAAE;UACTtE,aAAa,CAACK,YAAY,GAAGnB,SAAS,CAACc,aAAa,CAACK,YAAY,EAAEG,cAAc,CAAC;UAClFwD,SAAS,GAAGxE,mBAAmB,CAACQ,aAAa,CAACK,YAAY,EAAEG,cAAc,CAAC;SAC5E,MAAM;UACLR,aAAa,CAACK,YAAY,GAAGlB,SAAS,CAACa,aAAa,CAACK,YAAY,EAAEG,cAAc,CAAC;UAClFwD,SAAS,GAAG1E,kBAAkB,CAACU,aAAa,CAACK,YAAY,EAAEG,cAAc,CAAC;;;KAG/E,MAAM,IAAIsD,UAAU,CAACxD,MAAM,GAAGuC,YAAY,CAACvC,MAAM,EAAE;MAClD;MACA,IAAM4D,SAAS,GAAGJ,UAAU,CAACxD,MAAM,GAAGuC,YAAY,CAACvC,MAAM;MACzD,IAAM6D,QAAQ,GAAGzD,YAAY,GAAGwD,SAAS;MACzC;MACA,IAAMK,aAAa,GAAGT,UAAU,CAACO,MAAM,CAACF,QAAQ,EAAED,SAAS,CAAC;MAE5DF,SAAS,GAAGvE,YAAY,CAACO,aAAa,CAACK,YAAY,EAAE8D,QAAQ,EAAEI,aAAa,CAAC;KAC9E,MAAM,IAAIT,UAAU,CAACxD,MAAM,IAAIuC,YAAY,CAACvC,MAAM,EAAE;MACnD;;;;MAIA,IAAM4D,SAAS,GAAG,CAAC;MACnB,IAAMM,WAAW,GAAG3B,YAAY,CAACvC,MAAM,GAAG4D,SAAS,GAAGJ,UAAU,CAACxD,MAAM;MACvE,IAAM6D,QAAQ,GAAGzD,YAAY,GAAGwD,SAAS;MACzC;MACA,IAAMK,aAAa,GAAGT,UAAU,CAACO,MAAM,CAACF,QAAQ,EAAED,SAAS,CAAC;MAE5D;MACAlE,aAAa,CAACK,YAAY,GAAGjB,UAAU,CAACY,aAAa,CAACK,YAAY,EAAE8D,QAAQ,EAAEK,WAAW,CAAC;MAC1F;MACAR,SAAS,GAAGvE,YAAY,CAACO,aAAa,CAACK,YAAY,EAAE8D,QAAQ,EAAEI,aAAa,CAAC;;IAG/EvE,aAAa,CAACuC,mBAAmB,GAAG,IAAI;IAExC,IAAMU,QAAQ,GAAG1D,cAAc,CAACyC,IAAI,EAAEhC,aAAa,CAACK,YAAY,EAAE6B,QAAQ,CAAC;IAE3EY,eAAe,CAACG,QAAQ,CAAC;IACzBN,qBAAqB,CAACqB,SAAS,CAAC;IAEhC;IACAnC,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAG2B,EAAE,EAAEP,QAAQ,CAAC;EAC1B,CAAC,EACD,CAACJ,YAAY,CAACvC,MAAM,EAAEN,aAAa,EAAEgC,IAAI,EAAEE,QAAQ,EAAEL,QAAQ,CAAC,CAC/D;EAED,IAAM4C,aAAa,GAAG1F,KAAK,CAACiE,WAAW,CACrC,UAACQ,EAAyC;IACxCzB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAGyB,EAAE,CAAC;IAEfxD,aAAa,CAACuC,mBAAmB,GAAG,IAAI;IACxC,IAAItC,SAAS,CAACQ,OAAO,IAAIR,SAAS,CAACQ,OAAO,CAACN,KAAK,EAAE;MAChD;MACQ,IAAAuE,OAAO,GAAuBlB,EAAE,CAAAkB,OAAzB;QAAEC,OAAO,GAAcnB,EAAE,CAAAmB,OAAhB;QAAEC,OAAO,GAAKpB,EAAE,CAAAoB,OAAP;MAEjC;MACA,IAAID,OAAO,IAAIC,OAAO,EAAE;QACtB;;MAGF;MACA,IAAIF,OAAO,KAAKzF,QAAQ,CAAC4F,SAAS,IAAIH,OAAO,KAAKzF,QAAQ,CAAC6F,GAAG,EAAE;QAC9D,IAAMtE,cAAc,GAAIgD,EAAE,CAACuB,MAA2B,CAACvE,cAAc;QACrE,IAAME,YAAY,GAAI8C,EAAE,CAACuB,MAA2B,CAACrE,YAAY;QAEjE;QACA,IACE,EAAEgE,OAAO,KAAKzF,QAAQ,CAAC4F,SAAS,IAAInE,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC,IACrE,EAAEgE,OAAO,KAAKzF,QAAQ,CAAC6F,GAAG,IAAItE,cAAc,KAAK,IAAI,IAAIA,cAAc,GAAGP,SAAS,CAACQ,OAAO,CAACN,KAAK,CAACG,MAAM,CAAC,EACzG;UACA;;QAGFN,aAAa,CAACuC,mBAAmB,GAAG;UAClCwB,UAAU,EAAEW,OAAO,KAAKzF,QAAQ,CAAC4F,SAAS,GAAG,WAAW,GAAG,QAAQ;UACnErE,cAAc,EAAEA,cAAc,KAAK,IAAI,GAAGA,cAAc,GAAG,CAAC,CAAC;UAC7DE,YAAY,EAAEA,YAAY,KAAK,IAAI,GAAGA,YAAY,GAAG,CAAC;SACvD;;;EAGP,CAAC,EACD,CAACV,aAAa,EAAE+B,SAAS,CAAC,CAC3B;EAED,IAAMiD,WAAW,GAAGjG,KAAK,CAACiE,WAAW,CACnC,UAACQ,EAA0C;IACzC1B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAG0B,EAAE,CAAC;IAEb,IAAMhD,cAAc,GAAIgD,EAAE,CAACuB,MAA2B,CAACvE,cAAc;IACrE,IAAME,YAAY,GAAI8C,EAAE,CAACuB,MAA2B,CAACrE,YAAY;IACjE;IACAV,aAAa,CAACuC,mBAAmB,GAAG;MAClCwB,UAAU,EAAE,YAAY;MACxBvD,cAAc,EAAEA,cAAc,KAAK,IAAI,GAAGA,cAAc,GAAG,CAAC,CAAC;MAC7DE,YAAY,EAAEA,YAAY,KAAK,IAAI,GAAGA,YAAY,GAAG,CAAC;KACvD;EACH,CAAC,EACD,CAACV,aAAa,EAAE8B,OAAO,CAAC,CACzB;EAED;EACA/C,KAAK,CAACkG,SAAS,CAAC;IACdjF,aAAa,CAACK,YAAY,GAAGX,SAAS,CAACsC,IAAI,EAAEI,UAAU,CAAC;IACxDjC,KAAK,KAAKI,SAAS,IAAIwC,QAAQ,CAAC5C,KAAK,CAAC;IACtC2C,eAAe,CAACvD,cAAc,CAACyC,IAAI,EAAEhC,aAAa,CAACK,YAAY,EAAE6B,QAAQ,CAAC,CAAC;IAC3E;EACF,CAAC,EAAE,CAACF,IAAI,EAAE7B,KAAK,CAAC,CAAC;EAEjB;EACAP,yBAAyB,CAAC;IACxB;IACA,IAAI8C,kBAAkB,KAAKnC,SAAS,IAAIN,SAAS,CAACQ,OAAO,EAAE;MACzDR,SAAS,CAACQ,OAAO,CAACO,iBAAiB,CAAC0B,kBAAkB,EAAEA,kBAAkB,CAAC;;EAE/E,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAExB;EACA3D,KAAK,CAACkG,SAAS,CAAC;IACd;IACA,IAAIjF,aAAa,CAACqC,SAAS,IAAIK,kBAAkB,KAAKnC,SAAS,IAAIN,SAAS,CAACQ,OAAO,EAAE;MACpFR,SAAS,CAACQ,OAAO,CAACO,iBAAiB,CAAC0B,kBAAkB,EAAEA,kBAAkB,CAAC;;EAE/E,CAAC,CAAC;EAEF5C,eAAe,CAACC,YAAY,EAAEC,aAAa,EAAEC,SAAS,CAAC;EAEvD,OACElB,KAAA,CAAAmG,aAAA,CAAClG,SAAS,EAAAmG,QAAA,KACJ7D,KAAK;IACT8D,UAAU,EAAE7D,GAAG;IACfE,OAAO,EAAE8B,WAAW;IACpB7B,MAAM,EAAEgC,UAAU;IAClB/B,WAAW,EAAEgC,eAAe;IAC5B/B,SAAS,EAAEgC,aAAa;IACxB/B,QAAQ,EAAEgC,iBAAiB;IAC3B9B,SAAS,EAAE0C,aAAa;IACxB3C,OAAO,EAAEkD,WAAW;IACpB7E,KAAK,EAAE0C,YAAY,IAAI,EAAE;IACzB9C,YAAY,EAAEE;EAAS,GACvB;AAEN,CAAC,CAAC;AACFmB,eAAe,CAACiE,WAAW,GAAGxF,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}