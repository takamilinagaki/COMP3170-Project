{"ast":null,"code":"import { Stylesheet } from '@fluentui/merge-styles';\nvar _initializedStylesheetResets = false;\nvar _resetCounter = 0;\nvar _emptyObject = {\n  empty: true\n};\nvar _dictionary = {};\nvar _weakMap = typeof WeakMap === 'undefined' ? null : WeakMap;\n/**\n *  Test utility for providing a custom weakmap.\n *\n * @internal\n * */\nexport function setMemoizeWeakMap(weakMap) {\n  _weakMap = weakMap;\n}\n/**\n * Reset memoizations.\n */\nexport function resetMemoizations() {\n  _resetCounter++;\n}\n/**\n * Memoize decorator to be used on class methods. WARNING: the `this` reference\n * will be inaccessible within a memoized method, given that a cached method's `this`\n * would not be instance-specific.\n *\n * @public\n */\nexport function memoize(_target, _key, descriptor) {\n  // We bind to \"null\" to prevent people from inadvertently pulling values from \"this\",\n  // rather than passing them in as input values which can be memoized.\n  var fn = memoizeFunction(descriptor.value && descriptor.value.bind(null));\n  return {\n    configurable: true,\n    get: function () {\n      return fn;\n    }\n  };\n}\n/**\n * Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result.\n * Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise\n * it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in\n * undefined for a value and relying on a default function will execute it the first time, but will not\n * re-evaluate subsequent times which may have been unexpected.\n *\n * By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is\n * unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard\n * by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter.\n *\n * @public\n * @param cb - The function to memoize.\n * @param maxCacheSize - Max results to cache. If the cache exceeds this value, it will reset on the next call.\n * @param ignoreNullOrUndefinedResult - Flag to decide whether to cache callback result if it is undefined/null.\n * If the flag is set to true, the callback result is recomputed every time till the callback result is\n * not undefined/null for the first time, and then the non-undefined/null version gets cached.\n * @returns A memoized version of the function.\n */\nexport function memoizeFunction(cb, maxCacheSize, ignoreNullOrUndefinedResult) {\n  if (maxCacheSize === void 0) {\n    maxCacheSize = 100;\n  }\n  if (ignoreNullOrUndefinedResult === void 0) {\n    ignoreNullOrUndefinedResult = false;\n  }\n  // Avoid breaking scenarios which don't have weak map.\n  if (!_weakMap) {\n    return cb;\n  }\n  if (!_initializedStylesheetResets) {\n    var stylesheet = Stylesheet.getInstance();\n    if (stylesheet && stylesheet.onReset) {\n      Stylesheet.getInstance().onReset(resetMemoizations);\n    }\n    _initializedStylesheetResets = true;\n  }\n  var rootNode;\n  var cacheSize = 0;\n  var localResetCounter = _resetCounter;\n  return function memoizedFunction() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var currentNode = rootNode;\n    if (rootNode === undefined || localResetCounter !== _resetCounter || maxCacheSize > 0 && cacheSize > maxCacheSize) {\n      rootNode = _createNode();\n      cacheSize = 0;\n      localResetCounter = _resetCounter;\n    }\n    currentNode = rootNode;\n    // Traverse the tree until we find the match.\n    for (var i = 0; i < args.length; i++) {\n      var arg = _normalizeArg(args[i]);\n      if (!currentNode.map.has(arg)) {\n        currentNode.map.set(arg, _createNode());\n      }\n      currentNode = currentNode.map.get(arg);\n    }\n    if (!currentNode.hasOwnProperty('value')) {\n      currentNode.value = cb.apply(void 0, args);\n      cacheSize++;\n    }\n    if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === undefined)) {\n      currentNode.value = cb.apply(void 0, args);\n    }\n    return currentNode.value;\n  };\n}\n/**\n * Creates a memoizer for a single-value function, backed by a WeakMap.\n * With a WeakMap, the memoized values are only kept as long as the source objects,\n * ensuring that there is no memory leak.\n *\n * This function assumes that the input values passed to the wrapped function will be\n * `function` or `object` types. To memoize functions which accept other inputs, use\n * `memoizeFunction`, which memoizes against arbitrary inputs using a lookup cache.\n *\n * @public\n */\nexport function createMemoizer(getValue) {\n  if (!_weakMap) {\n    // Without a `WeakMap` implementation, memoization is not possible.\n    return getValue;\n  }\n  var cache = new _weakMap();\n  function memoizedGetValue(input) {\n    if (!input || typeof input !== 'function' && typeof input !== 'object') {\n      // A WeakMap can only be used to test against reference values, i.e. 'function' and 'object'.\n      // All other inputs cannot be memoized against in this manner.\n      return getValue(input);\n    }\n    if (cache.has(input)) {\n      return cache.get(input);\n    }\n    var value = getValue(input);\n    cache.set(input, value);\n    return value;\n  }\n  return memoizedGetValue;\n}\nfunction _normalizeArg(val) {\n  if (!val) {\n    return _emptyObject;\n  } else if (typeof val === 'object' || typeof val === 'function') {\n    return val;\n  } else if (!_dictionary[val]) {\n    _dictionary[val] = {\n      val: val\n    };\n  }\n  return _dictionary[val];\n}\nfunction _createNode() {\n  return {\n    map: _weakMap ? new _weakMap() : null\n  };\n}","map":{"version":3,"names":["Stylesheet","_initializedStylesheetResets","_resetCounter","_emptyObject","empty","_dictionary","_weakMap","WeakMap","setMemoizeWeakMap","weakMap","resetMemoizations","memoize","_target","_key","descriptor","fn","memoizeFunction","value","bind","configurable","get","cb","maxCacheSize","ignoreNullOrUndefinedResult","stylesheet","getInstance","onReset","rootNode","cacheSize","localResetCounter","memoizedFunction","args","_i","arguments","length","currentNode","undefined","_createNode","i","arg","_normalizeArg","map","has","set","hasOwnProperty","apply","createMemoizer","getValue","cache","memoizedGetValue","input","val"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/src/memoize.ts"],"sourcesContent":["import { Stylesheet } from '@fluentui/merge-styles';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\ndeclare class WeakMap {\n  public get(key: any): any;\n  public set(key: any, value: any): void;\n  public has(key: any): boolean;\n}\n\nlet _initializedStylesheetResets = false;\nlet _resetCounter = 0;\nconst _emptyObject = { empty: true };\nconst _dictionary: any = {};\nlet _weakMap = typeof WeakMap === 'undefined' ? null : WeakMap;\n\ninterface IMemoizeNode {\n  map: WeakMap | null;\n  value?: any;\n}\n\n/**\n *  Test utility for providing a custom weakmap.\n *\n * @internal\n * */\nexport function setMemoizeWeakMap(weakMap: any): void {\n  _weakMap = weakMap;\n}\n\n/**\n * Reset memoizations.\n */\nexport function resetMemoizations(): void {\n  _resetCounter++;\n}\n\n/**\n * Memoize decorator to be used on class methods. WARNING: the `this` reference\n * will be inaccessible within a memoized method, given that a cached method's `this`\n * would not be instance-specific.\n *\n * @public\n */\nexport function memoize<T extends Function>(\n  _target: any,\n  _key: string,\n  descriptor: TypedPropertyDescriptor<T>,\n): {\n  configurable: boolean;\n  get(): T;\n} {\n  // We bind to \"null\" to prevent people from inadvertently pulling values from \"this\",\n  // rather than passing them in as input values which can be memoized.\n  let fn = memoizeFunction(descriptor.value && descriptor.value.bind(null));\n\n  return {\n    configurable: true,\n    get(): T {\n      return fn;\n    },\n  };\n}\n\n/**\n * Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result.\n * Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise\n * it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in\n * undefined for a value and relying on a default function will execute it the first time, but will not\n * re-evaluate subsequent times which may have been unexpected.\n *\n * By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is\n * unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard\n * by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter.\n *\n * @public\n * @param cb - The function to memoize.\n * @param maxCacheSize - Max results to cache. If the cache exceeds this value, it will reset on the next call.\n * @param ignoreNullOrUndefinedResult - Flag to decide whether to cache callback result if it is undefined/null.\n * If the flag is set to true, the callback result is recomputed every time till the callback result is\n * not undefined/null for the first time, and then the non-undefined/null version gets cached.\n * @returns A memoized version of the function.\n */\nexport function memoizeFunction<T extends (...args: any[]) => RetType, RetType>(\n  cb: T,\n  maxCacheSize: number = 100,\n  ignoreNullOrUndefinedResult: boolean = false,\n): T {\n  // Avoid breaking scenarios which don't have weak map.\n  if (!_weakMap) {\n    return cb;\n  }\n\n  if (!_initializedStylesheetResets) {\n    const stylesheet = Stylesheet.getInstance();\n\n    if (stylesheet && (stylesheet as { onReset?: unknown }).onReset) {\n      Stylesheet.getInstance().onReset(resetMemoizations);\n    }\n    _initializedStylesheetResets = true;\n  }\n\n  let rootNode: any;\n  let cacheSize = 0;\n  let localResetCounter = _resetCounter;\n\n  return function memoizedFunction(...args: any[]): RetType {\n    let currentNode: any = rootNode;\n\n    if (\n      rootNode === undefined ||\n      localResetCounter !== _resetCounter ||\n      (maxCacheSize > 0 && cacheSize > maxCacheSize)\n    ) {\n      rootNode = _createNode();\n      cacheSize = 0;\n      localResetCounter = _resetCounter;\n    }\n\n    currentNode = rootNode;\n\n    // Traverse the tree until we find the match.\n    for (let i = 0; i < args.length; i++) {\n      let arg = _normalizeArg(args[i]);\n\n      if (!currentNode.map.has(arg)) {\n        currentNode.map.set(arg, _createNode());\n      }\n\n      currentNode = currentNode.map.get(arg);\n    }\n\n    if (!currentNode.hasOwnProperty('value')) {\n      currentNode.value = cb(...args);\n      cacheSize++;\n    }\n\n    if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === undefined)) {\n      currentNode.value = cb(...args);\n    }\n\n    return currentNode.value;\n  } as any;\n}\n\n/**\n * Creates a memoizer for a single-value function, backed by a WeakMap.\n * With a WeakMap, the memoized values are only kept as long as the source objects,\n * ensuring that there is no memory leak.\n *\n * This function assumes that the input values passed to the wrapped function will be\n * `function` or `object` types. To memoize functions which accept other inputs, use\n * `memoizeFunction`, which memoizes against arbitrary inputs using a lookup cache.\n *\n * @public\n */\nexport function createMemoizer<F extends (input: any) => any>(getValue: F): F {\n  if (!_weakMap) {\n    // Without a `WeakMap` implementation, memoization is not possible.\n    return getValue;\n  }\n\n  const cache = new _weakMap();\n\n  function memoizedGetValue(input: any): any {\n    if (!input || (typeof input !== 'function' && typeof input !== 'object')) {\n      // A WeakMap can only be used to test against reference values, i.e. 'function' and 'object'.\n      // All other inputs cannot be memoized against in this manner.\n      return getValue(input);\n    }\n\n    if (cache.has(input)) {\n      return cache.get(input)!;\n    }\n\n    const value = getValue(input);\n\n    cache.set(input, value);\n\n    return value;\n  }\n\n  return memoizedGetValue as F;\n}\n\nfunction _normalizeArg(val: null | undefined): { empty: boolean } | any;\nfunction _normalizeArg(val: object): any;\nfunction _normalizeArg(val: any): any {\n  if (!val) {\n    return _emptyObject;\n  } else if (typeof val === 'object' || typeof val === 'function') {\n    return val;\n  } else if (!_dictionary[val]) {\n    _dictionary[val] = { val };\n  }\n\n  return _dictionary[val];\n}\n\nfunction _createNode(): IMemoizeNode {\n  return {\n    map: _weakMap ? new _weakMap() : null,\n  };\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,wBAAwB;AAUnD,IAAIC,4BAA4B,GAAG,KAAK;AACxC,IAAIC,aAAa,GAAG,CAAC;AACrB,IAAMC,YAAY,GAAG;EAAEC,KAAK,EAAE;AAAI,CAAE;AACpC,IAAMC,WAAW,GAAQ,EAAE;AAC3B,IAAIC,QAAQ,GAAG,OAAOC,OAAO,KAAK,WAAW,GAAG,IAAI,GAAGA,OAAO;AAO9D;;;;;AAKA,OAAM,SAAUC,iBAAiBA,CAACC,OAAY;EAC5CH,QAAQ,GAAGG,OAAO;AACpB;AAEA;;;AAGA,OAAM,SAAUC,iBAAiBA,CAAA;EAC/BR,aAAa,EAAE;AACjB;AAEA;;;;;;;AAOA,OAAM,SAAUS,OAAOA,CACrBC,OAAY,EACZC,IAAY,EACZC,UAAsC;EAKtC;EACA;EACA,IAAIC,EAAE,GAAGC,eAAe,CAACF,UAAU,CAACG,KAAK,IAAIH,UAAU,CAACG,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAEzE,OAAO;IACLC,YAAY,EAAE,IAAI;IAClBC,GAAG,EAAH,SAAAA,CAAA;MACE,OAAOL,EAAE;IACX;GACD;AACH;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,SAAUC,eAAeA,CAC7BK,EAAK,EACLC,YAA0B,EAC1BC,2BAA4C;EAD5C,IAAAD,YAAA;IAAAA,YAAA,MAA0B;EAAA;EAC1B,IAAAC,2BAAA;IAAAA,2BAAA,QAA4C;EAAA;EAE5C;EACA,IAAI,CAACjB,QAAQ,EAAE;IACb,OAAOe,EAAE;;EAGX,IAAI,CAACpB,4BAA4B,EAAE;IACjC,IAAMuB,UAAU,GAAGxB,UAAU,CAACyB,WAAW,EAAE;IAE3C,IAAID,UAAU,IAAKA,UAAoC,CAACE,OAAO,EAAE;MAC/D1B,UAAU,CAACyB,WAAW,EAAE,CAACC,OAAO,CAAChB,iBAAiB,CAAC;;IAErDT,4BAA4B,GAAG,IAAI;;EAGrC,IAAI0B,QAAa;EACjB,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,iBAAiB,GAAG3B,aAAa;EAErC,OAAO,SAAS4B,gBAAgBA,CAAA;IAAC,IAAAC,IAAA;SAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;MAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IAC/B,IAAIG,WAAW,GAAQR,QAAQ;IAE/B,IACEA,QAAQ,KAAKS,SAAS,IACtBP,iBAAiB,KAAK3B,aAAa,IAClCoB,YAAY,GAAG,CAAC,IAAIM,SAAS,GAAGN,YAAa,EAC9C;MACAK,QAAQ,GAAGU,WAAW,EAAE;MACxBT,SAAS,GAAG,CAAC;MACbC,iBAAiB,GAAG3B,aAAa;;IAGnCiC,WAAW,GAAGR,QAAQ;IAEtB;IACA,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,CAACG,MAAM,EAAEI,CAAC,EAAE,EAAE;MACpC,IAAIC,GAAG,GAAGC,aAAa,CAACT,IAAI,CAACO,CAAC,CAAC,CAAC;MAEhC,IAAI,CAACH,WAAW,CAACM,GAAG,CAACC,GAAG,CAACH,GAAG,CAAC,EAAE;QAC7BJ,WAAW,CAACM,GAAG,CAACE,GAAG,CAACJ,GAAG,EAAEF,WAAW,EAAE,CAAC;;MAGzCF,WAAW,GAAGA,WAAW,CAACM,GAAG,CAACrB,GAAG,CAACmB,GAAG,CAAC;;IAGxC,IAAI,CAACJ,WAAW,CAACS,cAAc,CAAC,OAAO,CAAC,EAAE;MACxCT,WAAW,CAAClB,KAAK,GAAGI,EAAE,CAAAwB,KAAA,SAAId,IAAI,CAAC;MAC/BH,SAAS,EAAE;;IAGb,IAAIL,2BAA2B,KAAKY,WAAW,CAAClB,KAAK,KAAK,IAAI,IAAIkB,WAAW,CAAClB,KAAK,KAAKmB,SAAS,CAAC,EAAE;MAClGD,WAAW,CAAClB,KAAK,GAAGI,EAAE,CAAAwB,KAAA,SAAId,IAAI,CAAC;;IAGjC,OAAOI,WAAW,CAAClB,KAAK;EAC1B,CAAQ;AACV;AAEA;;;;;;;;;;;AAWA,OAAM,SAAU6B,cAAcA,CAAgCC,QAAW;EACvE,IAAI,CAACzC,QAAQ,EAAE;IACb;IACA,OAAOyC,QAAQ;;EAGjB,IAAMC,KAAK,GAAG,IAAI1C,QAAQ,EAAE;EAE5B,SAAS2C,gBAAgBA,CAACC,KAAU;IAClC,IAAI,CAACA,KAAK,IAAK,OAAOA,KAAK,KAAK,UAAU,IAAI,OAAOA,KAAK,KAAK,QAAS,EAAE;MACxE;MACA;MACA,OAAOH,QAAQ,CAACG,KAAK,CAAC;;IAGxB,IAAIF,KAAK,CAACN,GAAG,CAACQ,KAAK,CAAC,EAAE;MACpB,OAAOF,KAAK,CAAC5B,GAAG,CAAC8B,KAAK,CAAE;;IAG1B,IAAMjC,KAAK,GAAG8B,QAAQ,CAACG,KAAK,CAAC;IAE7BF,KAAK,CAACL,GAAG,CAACO,KAAK,EAAEjC,KAAK,CAAC;IAEvB,OAAOA,KAAK;EACd;EAEA,OAAOgC,gBAAqB;AAC9B;AAIA,SAAST,aAAaA,CAACW,GAAQ;EAC7B,IAAI,CAACA,GAAG,EAAE;IACR,OAAOhD,YAAY;GACpB,MAAM,IAAI,OAAOgD,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,KAAK,UAAU,EAAE;IAC/D,OAAOA,GAAG;GACX,MAAM,IAAI,CAAC9C,WAAW,CAAC8C,GAAG,CAAC,EAAE;IAC5B9C,WAAW,CAAC8C,GAAG,CAAC,GAAG;MAAEA,GAAG,EAAAA;IAAA,CAAE;;EAG5B,OAAO9C,WAAW,CAAC8C,GAAG,CAAC;AACzB;AAEA,SAASd,WAAWA,CAAA;EAClB,OAAO;IACLI,GAAG,EAAEnC,QAAQ,GAAG,IAAIA,QAAQ,EAAE,GAAG;GAClC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}