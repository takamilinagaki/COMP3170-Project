{"ast":null,"code":"import { Customizations, mergeSettings } from '@fluentui/utilities';\n/**\n * @internal\n * This function is still in experimental phase in support of Foundation experimental development.\n * Its API signature and existence are subject to change.\n *\n * Modify context to activate the specified scheme or theme. For schemes, look in context (if available) and fall back\n * to global Customizations. If both scheme and theme are specified, scheme will be looked up in theme. In this case,\n * scheme must be present in theme arg, otherwise new context will default to theme arg (there is no fallback to\n * settings to look up scheme.)\n *\n * @param context - Context in which to get schemed customizations.\n * @param scheme - Scheme to get customizations for from theme arg (if supplied) OR from context and global settings.\n * @param theme - Theme to merge into context.\n * @returns modified schemed context if scheme is valid and not already applied, unmodified context otherwise.\n */\nexport function getThemedContext(context, scheme, theme) {\n  var newContext = context;\n  var newSettings;\n  // Only fall back to context and customizations when theme arg is not provided.\n  var schemeSource = theme || Customizations.getSettings(['theme'], undefined, context.customizations).theme;\n  if (theme) {\n    newSettings = {\n      theme: theme\n    };\n  }\n  var schemeTheme = scheme && schemeSource && schemeSource.schemes && schemeSource.schemes[scheme];\n  // These first two checks are logically redundant but TS doesn't infer schemeSource.schemes is defined\n  // when schemeTheme is defined.\n  if (schemeSource && schemeTheme && schemeSource !== schemeTheme) {\n    newSettings = {\n      theme: schemeTheme\n    };\n    newSettings.theme.schemes = schemeSource.schemes;\n  }\n  if (newSettings) {\n    newContext = {\n      customizations: {\n        settings: mergeSettings(context.customizations.settings, newSettings),\n        scopedSettings: context.customizations.scopedSettings\n      }\n    };\n  }\n  return newContext;\n}","map":{"version":3,"names":["Customizations","mergeSettings","getThemedContext","context","scheme","theme","newContext","newSettings","schemeSource","getSettings","undefined","customizations","schemeTheme","schemes","settings","scopedSettings"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/style-utilities/lib/src/styles/scheme.ts"],"sourcesContent":["import { Customizations, mergeSettings } from '@fluentui/utilities';\nimport type { ICustomizerContext } from '@fluentui/utilities';\nimport type { ISchemeNames, ITheme } from '../interfaces/index';\n\n/**\n * @internal\n * This function is still in experimental phase in support of Foundation experimental development.\n * Its API signature and existence are subject to change.\n *\n * Modify context to activate the specified scheme or theme. For schemes, look in context (if available) and fall back\n * to global Customizations. If both scheme and theme are specified, scheme will be looked up in theme. In this case,\n * scheme must be present in theme arg, otherwise new context will default to theme arg (there is no fallback to\n * settings to look up scheme.)\n *\n * @param context - Context in which to get schemed customizations.\n * @param scheme - Scheme to get customizations for from theme arg (if supplied) OR from context and global settings.\n * @param theme - Theme to merge into context.\n * @returns modified schemed context if scheme is valid and not already applied, unmodified context otherwise.\n */\nexport function getThemedContext(\n  context: ICustomizerContext,\n  scheme?: ISchemeNames,\n  theme?: ITheme,\n): ICustomizerContext {\n  let newContext: ICustomizerContext = context;\n  let newSettings;\n\n  // Only fall back to context and customizations when theme arg is not provided.\n  let schemeSource = theme || Customizations.getSettings(['theme'], undefined, context.customizations).theme;\n\n  if (theme) {\n    newSettings = { theme };\n  }\n\n  const schemeTheme: ITheme | undefined =\n    scheme && schemeSource && schemeSource.schemes && schemeSource.schemes[scheme];\n\n  // These first two checks are logically redundant but TS doesn't infer schemeSource.schemes is defined\n  // when schemeTheme is defined.\n  if (schemeSource && schemeTheme && schemeSource !== schemeTheme) {\n    newSettings = { theme: schemeTheme };\n    newSettings.theme.schemes = schemeSource.schemes;\n  }\n\n  if (newSettings) {\n    newContext = {\n      customizations: {\n        settings: mergeSettings(context.customizations.settings, newSettings),\n        scopedSettings: context.customizations.scopedSettings,\n      },\n    };\n  }\n\n  return newContext;\n}\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,aAAa,QAAQ,qBAAqB;AAInE;;;;;;;;;;;;;;;AAeA,OAAM,SAAUC,gBAAgBA,CAC9BC,OAA2B,EAC3BC,MAAqB,EACrBC,KAAc;EAEd,IAAIC,UAAU,GAAuBH,OAAO;EAC5C,IAAII,WAAW;EAEf;EACA,IAAIC,YAAY,GAAGH,KAAK,IAAIL,cAAc,CAACS,WAAW,CAAC,CAAC,OAAO,CAAC,EAAEC,SAAS,EAAEP,OAAO,CAACQ,cAAc,CAAC,CAACN,KAAK;EAE1G,IAAIA,KAAK,EAAE;IACTE,WAAW,GAAG;MAAEF,KAAK,EAAAA;IAAA,CAAE;;EAGzB,IAAMO,WAAW,GACfR,MAAM,IAAII,YAAY,IAAIA,YAAY,CAACK,OAAO,IAAIL,YAAY,CAACK,OAAO,CAACT,MAAM,CAAC;EAEhF;EACA;EACA,IAAII,YAAY,IAAII,WAAW,IAAIJ,YAAY,KAAKI,WAAW,EAAE;IAC/DL,WAAW,GAAG;MAAEF,KAAK,EAAEO;IAAW,CAAE;IACpCL,WAAW,CAACF,KAAK,CAACQ,OAAO,GAAGL,YAAY,CAACK,OAAO;;EAGlD,IAAIN,WAAW,EAAE;IACfD,UAAU,GAAG;MACXK,cAAc,EAAE;QACdG,QAAQ,EAAEb,aAAa,CAACE,OAAO,CAACQ,cAAc,CAACG,QAAQ,EAAEP,WAAW,CAAC;QACrEQ,cAAc,EAAEZ,OAAO,CAACQ,cAAc,CAACI;;KAE1C;;EAGH,OAAOT,UAAU;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}