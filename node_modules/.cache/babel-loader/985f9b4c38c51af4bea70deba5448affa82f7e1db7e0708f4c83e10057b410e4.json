{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { concatStyleSetsWithProps } from '@fluentui/merge-styles';\nimport { useCustomizationSettings } from './customizations/useCustomizationSettings';\nvar DefaultFields = ['theme', 'styles'];\nexport function styled(Component, baseStyles, getProps, customizable, pure) {\n  customizable = customizable || {\n    scope: '',\n    fields: undefined\n  };\n  var scope = customizable.scope,\n    _a = customizable.fields,\n    fields = _a === void 0 ? DefaultFields : _a;\n  var Wrapped = React.forwardRef(function (props, forwardedRef) {\n    var styles = React.useRef();\n    var settings = useCustomizationSettings(fields, scope);\n    var customizedStyles = settings.styles,\n      dir = settings.dir,\n      rest = __rest(settings, [\"styles\", \"dir\"]);\n    var additionalProps = getProps ? getProps(props) : undefined;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var cache = styles.current && styles.current.__cachedInputs__ || [];\n    var propStyles = props.styles;\n    if (!styles.current || customizedStyles !== cache[1] || propStyles !== cache[2]) {\n      // Using styled components as the Component arg will result in nested styling arrays.\n      // The function can be cached and in order to prevent the props from being retained within it's closure\n      // we pass in just the styles and not the entire props\n      var concatenatedStyles = function (styleProps) {\n        return concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, propStyles);\n      };\n      // The __cachedInputs__ array is attached to the function and consumed by the\n      // classNamesFunction as a list of keys to include for memoizing classnames.\n      concatenatedStyles.__cachedInputs__ = [baseStyles, customizedStyles, propStyles];\n      concatenatedStyles.__noStyleOverride__ = !customizedStyles && !propStyles;\n      styles.current = concatenatedStyles;\n    }\n    return React.createElement(Component, __assign({\n      ref: forwardedRef\n    }, rest, additionalProps, props, {\n      styles: styles.current\n    }));\n  });\n  // Function.prototype.name is an ES6 feature, so the cast to any is required until we're\n  // able to drop IE 11 support and compile with ES6 libs\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Wrapped.displayName = \"Styled\".concat(Component.displayName || Component.name);\n  // This preserves backwards compatibility.\n  var pureComponent = pure ? React.memo(Wrapped) : Wrapped;\n  // Check if the wrapper has a displayName after it has been memoized. Then assign it to the pure component.\n  if (Wrapped.displayName) {\n    pureComponent.displayName = Wrapped.displayName;\n  }\n  return pureComponent;\n}","map":{"version":3,"names":["React","concatStyleSetsWithProps","useCustomizationSettings","DefaultFields","styled","Component","baseStyles","getProps","customizable","pure","scope","fields","undefined","_a","Wrapped","forwardRef","props","forwardedRef","styles","useRef","settings","customizedStyles","dir","rest","__rest","additionalProps","cache","current","__cachedInputs__","propStyles","concatenatedStyles","styleProps","__noStyleOverride__","createElement","__assign","ref","displayName","concat","name","pureComponent","memo"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/src/styled.tsx"],"sourcesContent":["import * as React from 'react';\nimport { concatStyleSetsWithProps } from '@fluentui/merge-styles';\nimport { useCustomizationSettings } from './customizations/useCustomizationSettings';\nimport type { IStyleSet, IStyleFunctionOrObject } from '@fluentui/merge-styles';\n\nexport interface IPropsWithStyles<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>> {\n  styles?: IStyleFunctionOrObject<TStyleProps, TStyleSet>;\n}\n\nexport interface ICustomizableProps {\n  /**\n   * Name of scope, which can be targeted using the Customizer.\n   */\n  scope: string;\n\n  /**\n   * List of fields which can be customized.\n   * @defaultvalue [ 'theme', 'styles' ]\n   */\n  fields?: string[];\n}\n\nconst DefaultFields = ['theme', 'styles'];\n\nexport type StyleFunction<TStyleProps, TStyleSet> = IStyleFunctionOrObject<TStyleProps, TStyleSet> & {\n  /** Cache for all style functions. */\n  __cachedInputs__: (IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined)[];\n\n  /** True if no styles prop or styles from Customizer is passed to wrapped component. */\n  __noStyleOverride__: boolean;\n};\n\n/**\n * The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve\n * getStyles functional props, and mix customized props passed in using concatStyleSets.\n *\n * @example\n * ```tsx\n * export const Toggle = styled(\n *   ToggleBase,\n *   props => ({ root: { background: 'red' }})\n * );\n * ```\n * @param Component - The unstyled base component to render, which receives styles.\n * @param baseStyles - The styles which should be curried with the component.\n * @param getProps - A helper which provides default props.\n * @param customizable - An object which defines which props can be customized using the Customizer.\n * @param pure - A boolean indicating if the component should avoid re-rendering when props haven't changed.\n * Note that pure should not be used on components which allow children, or take in complex objects or\n * arrays as props which could mutate on every render.\n */\nexport function styled<\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet>,\n  TStyleProps,\n  TStyleSet extends IStyleSet<TStyleSet>,\n>(\n  Component: React.ComponentClass<TComponentProps> | React.FunctionComponent<TComponentProps>,\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\n  customizable?: ICustomizableProps,\n  pure?: boolean,\n): React.FunctionComponent<TComponentProps>;\nexport function styled<\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet> & React.RefAttributes<TRef>,\n  TStyleProps,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TRef = unknown,\n>(\n  Component: React.ComponentClass<TComponentProps> | React.FunctionComponent<TComponentProps>,\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\n  customizable?: ICustomizableProps,\n  pure?: boolean,\n): React.ForwardRefExoticComponent<React.PropsWithoutRef<TComponentProps> & React.RefAttributes<TRef>>;\nexport function styled<\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet> & React.RefAttributes<TRef>,\n  TStyleProps,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TRef = unknown,\n>(\n  Component: React.ComponentClass<TComponentProps> | React.FunctionComponent<TComponentProps>,\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\n  customizable?: ICustomizableProps,\n  pure?: boolean,\n) {\n  customizable = customizable || { scope: '', fields: undefined };\n\n  const { scope, fields = DefaultFields } = customizable;\n\n  const Wrapped = React.forwardRef((props: TComponentProps, forwardedRef: React.Ref<TRef>) => {\n    const styles = React.useRef<StyleFunction<TStyleProps, TStyleSet>>();\n\n    const settings = useCustomizationSettings(fields, scope);\n    const { styles: customizedStyles, dir, ...rest } = settings;\n    const additionalProps = getProps ? getProps(props) : undefined;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const cache = (styles.current && (styles.current as any).__cachedInputs__) || [];\n    const propStyles = props.styles;\n    if (!styles.current || customizedStyles !== cache[1] || propStyles !== cache[2]) {\n      // Using styled components as the Component arg will result in nested styling arrays.\n      // The function can be cached and in order to prevent the props from being retained within it's closure\n      // we pass in just the styles and not the entire props\n      const concatenatedStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> = (styleProps: TStyleProps) =>\n        concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, propStyles);\n\n      // The __cachedInputs__ array is attached to the function and consumed by the\n      // classNamesFunction as a list of keys to include for memoizing classnames.\n      (concatenatedStyles as StyleFunction<TStyleProps, TStyleSet>).__cachedInputs__ = [\n        baseStyles,\n        customizedStyles,\n        propStyles,\n      ];\n\n      (concatenatedStyles as StyleFunction<TStyleProps, TStyleSet>).__noStyleOverride__ =\n        !customizedStyles && !propStyles;\n\n      styles.current = concatenatedStyles as StyleFunction<TStyleProps, TStyleSet>;\n    }\n\n    return <Component ref={forwardedRef} {...rest} {...additionalProps} {...props} styles={styles.current} />;\n  });\n  // Function.prototype.name is an ES6 feature, so the cast to any is required until we're\n  // able to drop IE 11 support and compile with ES6 libs\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Wrapped.displayName = `Styled${Component.displayName || (Component as any).name}`;\n\n  // This preserves backwards compatibility.\n  const pureComponent = pure ? React.memo(Wrapped) : Wrapped;\n  // Check if the wrapper has a displayName after it has been memoized. Then assign it to the pure component.\n  if (Wrapped.displayName) {\n    pureComponent.displayName = Wrapped.displayName;\n  }\n\n  return pureComponent;\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,wBAAwB,QAAQ,wBAAwB;AACjE,SAASC,wBAAwB,QAAQ,2CAA2C;AAoBpF,IAAMC,aAAa,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC;AAoDzC,OAAM,SAAUC,MAAMA,CAMpBC,SAA2F,EAC3FC,UAA0D,EAC1DC,QAA+D,EAC/DC,YAAiC,EACjCC,IAAc;EAEdD,YAAY,GAAGA,YAAY,IAAI;IAAEE,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAEC;EAAS,CAAE;EAEvD,IAAAF,KAAK,GAA6BF,YAAY,CAAAE,KAAzC;IAAEG,EAAA,GAA2BL,YAAY,CAAAG,MAAjB;IAAtBA,MAAM,GAAAE,EAAA,cAAGV,aAAa,GAAAU,EAAA;EAErC,IAAMC,OAAO,GAAGd,KAAK,CAACe,UAAU,CAAC,UAACC,KAAsB,EAAEC,YAA6B;IACrF,IAAMC,MAAM,GAAGlB,KAAK,CAACmB,MAAM,EAAyC;IAEpE,IAAMC,QAAQ,GAAGlB,wBAAwB,CAACS,MAAM,EAAED,KAAK,CAAC;IAChD,IAAQW,gBAAgB,GAAmBD,QAAQ,CAAAF,MAA3B;MAAEI,GAAG,GAAcF,QAAQ,CAAAE,GAAtB;MAAKC,IAAI,GAAAC,MAAA,CAAKJ,QAAQ,EAArD,iBAA0C,CAAF;IAC9C,IAAMK,eAAe,GAAGlB,QAAQ,GAAGA,QAAQ,CAACS,KAAK,CAAC,GAAGJ,SAAS;IAE9D;IACA,IAAMc,KAAK,GAAIR,MAAM,CAACS,OAAO,IAAKT,MAAM,CAACS,OAAe,CAACC,gBAAgB,IAAK,EAAE;IAChF,IAAMC,UAAU,GAAGb,KAAK,CAACE,MAAM;IAC/B,IAAI,CAACA,MAAM,CAACS,OAAO,IAAIN,gBAAgB,KAAKK,KAAK,CAAC,CAAC,CAAC,IAAIG,UAAU,KAAKH,KAAK,CAAC,CAAC,CAAC,EAAE;MAC/E;MACA;MACA;MACA,IAAMI,kBAAkB,GAAmD,SAAAA,CAACC,UAAuB;QACjG,OAAA9B,wBAAwB,CAAC8B,UAAU,EAAEzB,UAAU,EAAEe,gBAAgB,EAAEQ,UAAU,CAAC;MAA9E,CAA8E;MAEhF;MACA;MACCC,kBAA4D,CAACF,gBAAgB,GAAG,CAC/EtB,UAAU,EACVe,gBAAgB,EAChBQ,UAAU,CACX;MAEAC,kBAA4D,CAACE,mBAAmB,GAC/E,CAACX,gBAAgB,IAAI,CAACQ,UAAU;MAElCX,MAAM,CAACS,OAAO,GAAGG,kBAA2D;;IAG9E,OAAO9B,KAAA,CAAAiC,aAAA,CAAC5B,SAAS,EAAA6B,QAAA;MAACC,GAAG,EAAElB;IAAY,GAAMM,IAAI,EAAME,eAAe,EAAMT,KAAK;MAAEE,MAAM,EAAEA,MAAM,CAACS;IAAO,GAAI;EAC3G,CAAC,CAAC;EACF;EACA;EACA;EACAb,OAAO,CAACsB,WAAW,GAAG,SAAAC,MAAA,CAAShC,SAAS,CAAC+B,WAAW,IAAK/B,SAAiB,CAACiC,IAAI,CAAE;EAEjF;EACA,IAAMC,aAAa,GAAG9B,IAAI,GAAGT,KAAK,CAACwC,IAAI,CAAC1B,OAAO,CAAC,GAAGA,OAAO;EAC1D;EACA,IAAIA,OAAO,CAACsB,WAAW,EAAE;IACvBG,aAAa,CAACH,WAAW,GAAGtB,OAAO,CAACsB,WAAW;;EAGjD,OAAOG,aAAa;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}