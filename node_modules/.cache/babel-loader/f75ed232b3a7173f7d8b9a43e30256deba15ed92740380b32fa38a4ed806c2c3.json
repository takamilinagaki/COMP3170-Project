{"ast":null,"code":"import { concatStyleSets, HighContrastSelector } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport { getStyles as getBaseButtonStyles } from '../BaseButton.styles';\nimport { getStyles as getSplitButtonStyles } from '../SplitButton/SplitButton.styles';\nexport var getStyles = memoizeFunction(function (theme, customStyles) {\n  var _a;\n  var baseButtonStyles = getBaseButtonStyles(theme);\n  var splitButtonStyles = getSplitButtonStyles(theme);\n  var palette = theme.palette,\n    semanticColors = theme.semanticColors;\n  var iconButtonStyles = {\n    root: {\n      padding: '0 4px',\n      width: '32px',\n      height: '32px',\n      backgroundColor: 'transparent',\n      border: 'none',\n      color: semanticColors.link\n    },\n    rootHovered: {\n      color: palette.themeDarkAlt,\n      backgroundColor: palette.neutralLighter,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        borderColor: 'Highlight',\n        color: 'Highlight'\n      }, _a)\n    },\n    rootHasMenu: {\n      width: 'auto'\n    },\n    rootPressed: {\n      color: palette.themeDark,\n      backgroundColor: palette.neutralLight\n    },\n    rootExpanded: {\n      color: palette.themeDark,\n      backgroundColor: palette.neutralLight\n    },\n    rootChecked: {\n      color: palette.themeDark,\n      backgroundColor: palette.neutralLight\n    },\n    rootCheckedHovered: {\n      color: palette.themeDark,\n      backgroundColor: palette.neutralQuaternaryAlt\n    },\n    rootDisabled: {\n      color: palette.neutralTertiaryAlt\n    }\n  };\n  return concatStyleSets(baseButtonStyles, iconButtonStyles, splitButtonStyles, customStyles);\n});","map":{"version":3,"names":["concatStyleSets","HighContrastSelector","memoizeFunction","getStyles","getBaseButtonStyles","getSplitButtonStyles","theme","customStyles","baseButtonStyles","splitButtonStyles","palette","semanticColors","iconButtonStyles","root","padding","width","height","backgroundColor","border","color","link","rootHovered","themeDarkAlt","neutralLighter","selectors","_a","borderColor","rootHasMenu","rootPressed","themeDark","neutralLight","rootExpanded","rootChecked","rootCheckedHovered","neutralQuaternaryAlt","rootDisabled","neutralTertiaryAlt"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/Button/src/components/Button/IconButton/IconButton.styles.ts"],"sourcesContent":["import { concatStyleSets, HighContrastSelector } from '../../../Styling';\nimport { memoizeFunction } from '../../../Utilities';\nimport { getStyles as getBaseButtonStyles } from '../BaseButton.styles';\nimport { getStyles as getSplitButtonStyles } from '../SplitButton/SplitButton.styles';\nimport type { IButtonStyles } from '../Button.types';\nimport type { ITheme } from '../../../Styling';\n\nexport const getStyles = memoizeFunction((theme: ITheme, customStyles?: IButtonStyles): IButtonStyles => {\n  const baseButtonStyles: IButtonStyles = getBaseButtonStyles(theme);\n  const splitButtonStyles: IButtonStyles = getSplitButtonStyles(theme);\n  const { palette, semanticColors } = theme;\n  const iconButtonStyles: IButtonStyles = {\n    root: {\n      padding: '0 4px',\n      width: '32px',\n      height: '32px',\n      backgroundColor: 'transparent',\n      border: 'none',\n      color: semanticColors.link,\n    },\n\n    rootHovered: {\n      color: palette.themeDarkAlt,\n      backgroundColor: palette.neutralLighter,\n      selectors: {\n        [HighContrastSelector]: {\n          borderColor: 'Highlight',\n          color: 'Highlight',\n        },\n      },\n    },\n\n    rootHasMenu: {\n      width: 'auto',\n    },\n\n    rootPressed: {\n      color: palette.themeDark,\n      backgroundColor: palette.neutralLight,\n    },\n\n    rootExpanded: {\n      color: palette.themeDark,\n      backgroundColor: palette.neutralLight,\n    },\n\n    rootChecked: {\n      color: palette.themeDark,\n      backgroundColor: palette.neutralLight,\n    },\n\n    rootCheckedHovered: {\n      color: palette.themeDark,\n      backgroundColor: palette.neutralQuaternaryAlt,\n    },\n\n    rootDisabled: {\n      color: palette.neutralTertiaryAlt,\n    },\n  };\n\n  return concatStyleSets(baseButtonStyles, iconButtonStyles, splitButtonStyles, customStyles)!;\n});\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,oBAAoB,QAAQ,kBAAkB;AACxE,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,SAAS,IAAIC,mBAAmB,QAAQ,sBAAsB;AACvE,SAASD,SAAS,IAAIE,oBAAoB,QAAQ,mCAAmC;AAIrF,OAAO,IAAMF,SAAS,GAAGD,eAAe,CAAC,UAACI,KAAa,EAAEC,YAA4B;;EACnF,IAAMC,gBAAgB,GAAkBJ,mBAAmB,CAACE,KAAK,CAAC;EAClE,IAAMG,iBAAiB,GAAkBJ,oBAAoB,CAACC,KAAK,CAAC;EAC5D,IAAAI,OAAO,GAAqBJ,KAAK,CAAAI,OAA1B;IAAEC,cAAc,GAAKL,KAAK,CAAAK,cAAV;EAC/B,IAAMC,gBAAgB,GAAkB;IACtCC,IAAI,EAAE;MACJC,OAAO,EAAE,OAAO;MAChBC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,MAAM;MACdC,eAAe,EAAE,aAAa;MAC9BC,MAAM,EAAE,MAAM;MACdC,KAAK,EAAER,cAAc,CAACS;KACvB;IAEDC,WAAW,EAAE;MACXF,KAAK,EAAET,OAAO,CAACY,YAAY;MAC3BL,eAAe,EAAEP,OAAO,CAACa,cAAc;MACvCC,SAAS,GAAAC,EAAA,OACPA,EAAA,CAACxB,oBAAoB,IAAG;QACtByB,WAAW,EAAE,WAAW;QACxBP,KAAK,EAAE;OACR,E;KAEJ;IAEDQ,WAAW,EAAE;MACXZ,KAAK,EAAE;KACR;IAEDa,WAAW,EAAE;MACXT,KAAK,EAAET,OAAO,CAACmB,SAAS;MACxBZ,eAAe,EAAEP,OAAO,CAACoB;KAC1B;IAEDC,YAAY,EAAE;MACZZ,KAAK,EAAET,OAAO,CAACmB,SAAS;MACxBZ,eAAe,EAAEP,OAAO,CAACoB;KAC1B;IAEDE,WAAW,EAAE;MACXb,KAAK,EAAET,OAAO,CAACmB,SAAS;MACxBZ,eAAe,EAAEP,OAAO,CAACoB;KAC1B;IAEDG,kBAAkB,EAAE;MAClBd,KAAK,EAAET,OAAO,CAACmB,SAAS;MACxBZ,eAAe,EAAEP,OAAO,CAACwB;KAC1B;IAEDC,YAAY,EAAE;MACZhB,KAAK,EAAET,OAAO,CAAC0B;;GAElB;EAED,OAAOpC,eAAe,CAACQ,gBAAgB,EAAEI,gBAAgB,EAAEH,iBAAiB,EAAEF,YAAY,CAAE;AAC9F,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}