{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, css, getId, EventGroup } from '../../Utilities';\nimport { SELECTION_CHANGE } from '../../Selection';\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\nimport { List } from '../../List';\nvar DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\nvar GroupedListSection = /** @class */function (_super) {\n  __extends(GroupedListSection, _super);\n  function GroupedListSection(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    _this._list = React.createRef();\n    _this._subGroupRefs = {};\n    _this._droppingClassName = '';\n    _this._onRenderGroupHeader = function (props) {\n      return React.createElement(GroupHeader, __assign({}, props));\n    };\n    _this._onRenderGroupShowAll = function (props) {\n      return React.createElement(GroupShowAll, __assign({}, props));\n    };\n    _this._onRenderGroupFooter = function (props) {\n      return React.createElement(GroupFooter, __assign({}, props));\n    };\n    _this._renderSubGroup = function (subGroup, subGroupIndex) {\n      var _a = _this.props,\n        dragDropEvents = _a.dragDropEvents,\n        dragDropHelper = _a.dragDropHelper,\n        eventsToRegister = _a.eventsToRegister,\n        getGroupItemLimit = _a.getGroupItemLimit,\n        groupNestingDepth = _a.groupNestingDepth,\n        groupProps = _a.groupProps,\n        items = _a.items,\n        headerProps = _a.headerProps,\n        showAllProps = _a.showAllProps,\n        footerProps = _a.footerProps,\n        listProps = _a.listProps,\n        onRenderCell = _a.onRenderCell,\n        selection = _a.selection,\n        selectionMode = _a.selectionMode,\n        viewport = _a.viewport,\n        onRenderGroupHeader = _a.onRenderGroupHeader,\n        onRenderGroupShowAll = _a.onRenderGroupShowAll,\n        onRenderGroupFooter = _a.onRenderGroupFooter,\n        onShouldVirtualize = _a.onShouldVirtualize,\n        group = _a.group,\n        compact = _a.compact;\n      var nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n      return !subGroup || subGroup.count > 0 || groupProps && groupProps.showEmptyGroups ? React.createElement(GroupedListSection, {\n        ref: function (ref) {\n          return _this._subGroupRefs['subGroup_' + subGroupIndex] = ref;\n        },\n        key: _this._getGroupKey(subGroup, subGroupIndex),\n        dragDropEvents: dragDropEvents,\n        dragDropHelper: dragDropHelper,\n        eventsToRegister: eventsToRegister,\n        footerProps: footerProps,\n        getGroupItemLimit: getGroupItemLimit,\n        group: subGroup,\n        groupIndex: subGroupIndex,\n        groupNestingDepth: nestingDepth,\n        groupProps: groupProps,\n        headerProps: headerProps,\n        items: items,\n        listProps: listProps,\n        onRenderCell: onRenderCell,\n        selection: selection,\n        selectionMode: selectionMode,\n        showAllProps: showAllProps,\n        viewport: viewport,\n        onRenderGroupHeader: onRenderGroupHeader,\n        onRenderGroupShowAll: onRenderGroupShowAll,\n        onRenderGroupFooter: onRenderGroupFooter,\n        onShouldVirtualize: onShouldVirtualize,\n        groups: group ? group.children : [],\n        compact: compact\n      }) : null;\n    };\n    /**\n     * collect all the data we need to enable drag/drop for a group\n     */\n    _this._getGroupDragDropOptions = function () {\n      var _a = _this.props,\n        group = _a.group,\n        groupIndex = _a.groupIndex,\n        dragDropEvents = _a.dragDropEvents,\n        eventsToRegister = _a.eventsToRegister;\n      var options = {\n        eventMap: eventsToRegister,\n        selectionIndex: -1,\n        context: {\n          data: group,\n          index: groupIndex,\n          isGroup: true\n        },\n        updateDropState: _this._updateDroppingState,\n        canDrag: dragDropEvents.canDrag,\n        canDrop: dragDropEvents.canDrop,\n        onDrop: dragDropEvents.onDrop,\n        onDragStart: dragDropEvents.onDragStart,\n        onDragEnter: dragDropEvents.onDragEnter,\n        onDragLeave: dragDropEvents.onDragLeave,\n        onDragEnd: dragDropEvents.onDragEnd,\n        onDragOver: dragDropEvents.onDragOver\n      };\n      return options;\n    };\n    /**\n     * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n     *\n     * @param newValue - new isDropping state value\n     * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n     */\n    _this._updateDroppingState = function (newIsDropping, event) {\n      var isDropping = _this.state.isDropping;\n      var _a = _this.props,\n        dragDropEvents = _a.dragDropEvents,\n        group = _a.group;\n      if (isDropping !== newIsDropping) {\n        if (isDropping) {\n          if (dragDropEvents && dragDropEvents.onDragLeave) {\n            dragDropEvents.onDragLeave(group, event);\n          }\n        } else {\n          if (dragDropEvents && dragDropEvents.onDragEnter) {\n            _this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n          }\n        }\n        _this.setState({\n          isDropping: newIsDropping\n        });\n      }\n    };\n    var selection = props.selection,\n      group = props.group;\n    initializeComponentRef(_this);\n    _this._id = getId('GroupedListSection');\n    _this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false\n    };\n    _this._events = new EventGroup(_this);\n    return _this;\n  }\n  GroupedListSection.prototype.componentDidMount = function () {\n    var _a = this.props,\n      dragDropHelper = _a.dragDropHelper,\n      selection = _a.selection;\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\n    }\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  };\n  GroupedListSection.prototype.componentWillUnmount = function () {\n    this._events.dispose();\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  };\n  GroupedListSection.prototype.componentDidUpdate = function (previousProps) {\n    if (this.props.group !== previousProps.group || this.props.groupIndex !== previousProps.groupIndex || this.props.dragDropHelper !== previousProps.dragDropHelper) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\n      }\n    }\n  };\n  GroupedListSection.prototype.render = function () {\n    var _a = this.props,\n      getGroupItemLimit = _a.getGroupItemLimit,\n      group = _a.group,\n      groupIndex = _a.groupIndex,\n      headerProps = _a.headerProps,\n      showAllProps = _a.showAllProps,\n      footerProps = _a.footerProps,\n      viewport = _a.viewport,\n      selectionMode = _a.selectionMode,\n      _b = _a.onRenderGroupHeader,\n      onRenderGroupHeader = _b === void 0 ? this._onRenderGroupHeader : _b,\n      _c = _a.onRenderGroupShowAll,\n      onRenderGroupShowAll = _c === void 0 ? this._onRenderGroupShowAll : _c,\n      _d = _a.onRenderGroupFooter,\n      onRenderGroupFooter = _d === void 0 ? this._onRenderGroupFooter : _d,\n      onShouldVirtualize = _a.onShouldVirtualize,\n      groupedListClassNames = _a.groupedListClassNames,\n      groups = _a.groups,\n      compact = _a.compact,\n      _e = _a.listProps,\n      listProps = _e === void 0 ? {} : _e;\n    var isSelected = this.state.isSelected;\n    var renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    var isShowAllVisible = group && !group.children && !group.isCollapsed && !group.isShowingAll && (group.count > renderCount || group.hasMoreData);\n    var hasNestedGroups = group && group.children && group.children.length > 0;\n    var version = listProps.version;\n    var dividerProps = {\n      group: group,\n      groupIndex: groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected: isSelected,\n      selected: isSelected,\n      viewport: viewport,\n      selectionMode: selectionMode,\n      groups: groups,\n      compact: compact\n    };\n    var ariaControlsProps = {\n      groupedListId: this._id,\n      ariaLevel: (group === null || group === void 0 ? void 0 : group.level) ? group.level + 1 : 1,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined\n    };\n    var groupHeaderProps = __assign(__assign(__assign({}, headerProps), dividerProps), ariaControlsProps);\n    var groupShowAllProps = __assign(__assign({}, showAllProps), dividerProps);\n    var groupFooterProps = __assign(__assign({}, footerProps), dividerProps);\n    var isDraggable = !!this.props.dragDropHelper && this._getGroupDragDropOptions().canDrag(group) && !!this.props.dragDropEvents.canDragGroups;\n    return React.createElement(\"div\", __assign({\n      ref: this._root\n    }, isDraggable && {\n      draggable: true\n    }, {\n      className: css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName()),\n      role: \"presentation\"\n    }), onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader), group && group.isCollapsed ? null : hasNestedGroups ? React.createElement(List, {\n      role: \"presentation\",\n      ref: this._list,\n      items: group ? group.children : [],\n      onRenderCell: this._renderSubGroup,\n      getItemCountForPage: this._returnOne,\n      onShouldVirtualize: onShouldVirtualize,\n      version: version,\n      id: this._id\n    }) : this._onRenderGroup(renderCount), group && group.isCollapsed ? null : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll), onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter));\n  };\n  GroupedListSection.prototype.forceUpdate = function () {\n    _super.prototype.forceUpdate.call(this);\n    this.forceListUpdate();\n  };\n  GroupedListSection.prototype.forceListUpdate = function () {\n    var group = this.props.group;\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n      if (group && group.children && group.children.length > 0) {\n        var subGroupCount = group.children.length;\n        for (var i = 0; i < subGroupCount; i++) {\n          var subGroup = this._list.current.pageRefs['subGroup_' + String(i)];\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      var subGroup = this._subGroupRefs['subGroup_' + String(0)];\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  };\n  GroupedListSection.prototype._onSelectionChange = function () {\n    var _a = this.props,\n      group = _a.group,\n      selection = _a.selection;\n    if (selection && group) {\n      var isSelected = selection.isRangeSelected(group.startIndex, group.count);\n      if (isSelected !== this.state.isSelected) {\n        this.setState({\n          isSelected: isSelected\n        });\n      }\n    }\n  };\n  GroupedListSection.prototype._onRenderGroupCell = function (onRenderCell, groupNestingDepth, group) {\n    return function (item, itemIndex) {\n      return onRenderCell(groupNestingDepth, item, itemIndex, group);\n    };\n  };\n  GroupedListSection.prototype._onRenderGroup = function (renderCount) {\n    var _a = this.props,\n      group = _a.group,\n      items = _a.items,\n      onRenderCell = _a.onRenderCell,\n      listProps = _a.listProps,\n      groupNestingDepth = _a.groupNestingDepth,\n      onShouldVirtualize = _a.onShouldVirtualize,\n      groupProps = _a.groupProps;\n    var count = group && !group.isShowingAll ? group.count : items.length;\n    var startIndex = group ? group.startIndex : 0;\n    return React.createElement(List, __assign({\n      role: groupProps && groupProps.role ? groupProps.role : 'rowgroup',\n      \"aria-label\": group === null || group === void 0 ? void 0 : group.name,\n      items: items,\n      onRenderCell: this._onRenderGroupCell(onRenderCell, groupNestingDepth, group),\n      ref: this._list,\n      renderCount: Math.min(count, renderCount),\n      startIndex: startIndex,\n      onShouldVirtualize: onShouldVirtualize,\n      id: this._id\n    }, listProps));\n  };\n  GroupedListSection.prototype._returnOne = function () {\n    return 1;\n  };\n  GroupedListSection.prototype._getGroupKey = function (group, index) {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  };\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  GroupedListSection.prototype._getDroppingClassName = function () {\n    var isDropping = this.state.isDropping;\n    var _a = this.props,\n      group = _a.group,\n      groupedListClassNames = _a.groupedListClassNames;\n    isDropping = !!(group && isDropping);\n    return css(isDropping && this._droppingClassName, isDropping && DEFAULT_DROPPING_CSS_CLASS, isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping);\n  };\n  return GroupedListSection;\n}(React.Component);\nexport { GroupedListSection };","map":{"version":3,"names":["React","initializeComponentRef","css","getId","EventGroup","SELECTION_CHANGE","GroupHeader","GroupShowAll","GroupFooter","List","DEFAULT_DROPPING_CSS_CLASS","GroupedListSection","_super","__extends","props","_this","call","_root","createRef","_list","_subGroupRefs","_droppingClassName","_onRenderGroupHeader","createElement","__assign","_onRenderGroupShowAll","_onRenderGroupFooter","_renderSubGroup","subGroup","subGroupIndex","_a","dragDropEvents","dragDropHelper","eventsToRegister","getGroupItemLimit","groupNestingDepth","groupProps","items","headerProps","showAllProps","footerProps","listProps","onRenderCell","selection","selectionMode","viewport","onRenderGroupHeader","onRenderGroupShowAll","onRenderGroupFooter","onShouldVirtualize","group","compact","nestingDepth","level","count","showEmptyGroups","ref","key","_getGroupKey","groupIndex","groups","children","_getGroupDragDropOptions","options","eventMap","selectionIndex","context","data","index","isGroup","updateDropState","_updateDroppingState","canDrag","canDrop","onDrop","onDragStart","onDragEnter","onDragLeave","onDragEnd","onDragOver","newIsDropping","event","isDropping","state","setState","_id","isSelected","isRangeSelected","startIndex","_events","prototype","componentDidMount","current","_dragDropSubscription","subscribe","on","_onSelectionChange","componentWillUnmount","dispose","componentDidUpdate","previousProps","render","_b","_c","_d","groupedListClassNames","_e","renderCount","Infinity","isShowAllVisible","isCollapsed","isShowingAll","hasMoreData","hasNestedGroups","length","version","dividerProps","groupLevel","selected","ariaControlsProps","groupedListId","ariaLevel","ariaSetSize","undefined","ariaPosInSet","groupHeaderProps","groupShowAllProps","groupFooterProps","isDraggable","canDragGroups","draggable","className","_getDroppingClassName","role","getItemCountForPage","_returnOne","id","_onRenderGroup","forceUpdate","forceListUpdate","subGroupCount","i","pageRefs","String","_onRenderGroupCell","item","itemIndex","name","Math","min","groupIsDropping","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/GroupedList/GroupedListSection.tsx"],"sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, css, getId, EventGroup } from '../../Utilities';\n\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List } from '../../List';\nimport type { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport type { IGroupHeaderProps } from './GroupHeader.types';\nimport type { IGroupFooterProps } from './GroupFooter.types';\nimport type { IGroupShowAllProps } from './GroupShowAll.types';\nimport type { IDragDropContext, IDragDropEvents, IDragDropHelper, IDragDropOptions } from '../../DragDrop';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IRenderFunction, IDisposable } from '../../Utilities';\nimport type { ISelection } from '../../Selection';\nimport type { IListProps } from '../../List';\nimport type { IViewport } from '../../utilities/decorators/withViewport';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _subGroupRefs: Record<string, GroupedListSection | null> = {};\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription?: IDisposable;\n  private _droppingClassName: string = '';\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getGroupDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getGroupDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact,\n      listProps = {},\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group &&\n      !group.children &&\n      !group.isCollapsed &&\n      !group.isShowingAll &&\n      (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const { version } = listProps;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      selected: isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id,\n      ariaLevel: group?.level ? group.level + 1 : 1,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    const isDraggable: boolean =\n      !!this.props.dragDropHelper &&\n      this._getGroupDragDropOptions().canDrag!(group) &&\n      !!this.props.dragDropEvents!.canDragGroups;\n\n    return (\n      <div\n        ref={this._root}\n        {...(isDraggable && { draggable: true })}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group ? group.children : []}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed\n          ? null\n          : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.pageRefs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      const subGroup = this._subGroupRefs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    if (selection && group) {\n      const isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({ isSelected });\n      }\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined,\n    group: IGroup | undefined,\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex, group);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize, groupProps } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role={groupProps && groupProps.role ? groupProps.role : 'rowgroup'}\n        aria-label={group?.name}\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth, group)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact,\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={ref => (this._subGroupRefs['subGroup_' + subGroupIndex] = ref)}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group ? group.children : []}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      updateDropState: this._updateDroppingState,\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDrop: dragDropEvents!.onDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      onDragEnter: dragDropEvents!.onDragEnter,\n      onDragLeave: dragDropEvents!.onDragLeave,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, group } = this.props;\n\n    if (isDropping !== newIsDropping) {\n      if (isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(group, event);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n        }\n      }\n\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(\n      isDropping && this._droppingClassName,\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\n      isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping,\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}