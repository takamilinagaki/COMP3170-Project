{"ast":null,"code":"/**\n * Format a date object to a localized time string using the browser's default locale\n * @param date - Input date to format\n * @param showSeconds - Whether to show seconds in the formatted string\n * @param useHour12 - Whether to use 12-hour time\n */\nexport var formatTimeString = function (date, showSeconds, useHour12) {\n  var localeTimeString = date.toLocaleTimeString([], {\n    hour: 'numeric',\n    minute: '2-digit',\n    second: showSeconds ? '2-digit' : undefined,\n    hour12: useHour12\n  });\n  if (!useHour12 && localeTimeString.slice(0, 2) === '24') {\n    localeTimeString = '00' + localeTimeString.slice(2);\n  }\n  return localeTimeString;\n};","map":{"version":3,"names":["formatTimeString","date","showSeconds","useHour12","localeTimeString","toLocaleTimeString","hour","minute","second","undefined","hour12","slice"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/date-time-utilities/lib/src/timeFormatting/index.ts"],"sourcesContent":["/**\n * Format a date object to a localized time string using the browser's default locale\n * @param date - Input date to format\n * @param showSeconds - Whether to show seconds in the formatted string\n * @param useHour12 - Whether to use 12-hour time\n */\nexport const formatTimeString = (date: Date, showSeconds?: boolean, useHour12?: boolean): string => {\n  let localeTimeString = date.toLocaleTimeString([], {\n    hour: 'numeric',\n    minute: '2-digit',\n    second: showSeconds ? '2-digit' : undefined,\n    hour12: useHour12,\n  });\n\n  if (!useHour12 && localeTimeString.slice(0, 2) === '24') {\n    localeTimeString = '00' + localeTimeString.slice(2);\n  }\n\n  return localeTimeString;\n};\n"],"mappings":"AAAA;;;;;;AAMA,OAAO,IAAMA,gBAAgB,GAAG,SAAAA,CAACC,IAAU,EAAEC,WAAqB,EAAEC,SAAmB;EACrF,IAAIC,gBAAgB,GAAGH,IAAI,CAACI,kBAAkB,CAAC,EAAE,EAAE;IACjDC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAEN,WAAW,GAAG,SAAS,GAAGO,SAAS;IAC3CC,MAAM,EAAEP;GACT,CAAC;EAEF,IAAI,CAACA,SAAS,IAAIC,gBAAgB,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;IACvDP,gBAAgB,GAAG,IAAI,GAAGA,gBAAgB,CAACO,KAAK,CAAC,CAAC,CAAC;;EAGrD,OAAOP,gBAAgB;AACzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}