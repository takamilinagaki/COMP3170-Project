{"ast":null,"code":"import { elementContainsAttribute } from './dom/elementContainsAttribute';\nimport { elementContains } from './dom/elementContains';\nimport { getParent } from './dom/getParent';\nimport { getWindow } from './dom/getWindow';\nimport { getDocument } from './dom/getDocument';\nvar IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nvar IS_VISIBLE_ATTRIBUTE = 'data-is-visible';\nvar FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nvar FOCUSZONE_SUB_ATTRIBUTE = 'data-is-sub-focuszone';\n/**\n * Gets the first focusable element.\n *\n * @public\n */\nexport function getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones) {\n  return getNextElement(rootElement, currentElement, true /*checkNode*/, false /*suppressParentTraversal*/, false /*suppressChildTraversal*/, includeElementsInFocusZones);\n}\n/**\n * Gets the last focusable element.\n *\n * @public\n */\nexport function getLastFocusable(rootElement, currentElement, includeElementsInFocusZones) {\n  return getPreviousElement(rootElement, currentElement, true /*checkNode*/, false /*suppressParentTraversal*/, true /*traverseChildren*/, includeElementsInFocusZones);\n}\n/**\n * Gets the first tabbable element. (The difference between focusable and tabbable is that tabbable elements are\n * focusable elements that also have tabIndex != -1.)\n * @param rootElement - The parent element to search beneath.\n * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,\n * and iteration continues forward.  Typical use passes rootElement.firstChild.\n * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.\n * @param checkNode - Include currentElement in search when true. Defaults to true.\n * @public\n */\nexport function getFirstTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode) {\n  if (checkNode === void 0) {\n    checkNode = true;\n  }\n  return getNextElement(rootElement, currentElement, checkNode, false /*suppressParentTraversal*/, false /*suppressChildTraversal*/, includeElementsInFocusZones, false /*allowFocusRoot*/, true /*tabbable*/);\n}\n/**\n * Gets the last tabbable element. (The difference between focusable and tabbable is that tabbable elements are\n * focusable elements that also have tabIndex != -1.)\n * @param rootElement - The parent element to search beneath.\n * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,\n * and iteration continues in reverse.  Typical use passes rootElement.lastChild.\n * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.\n * @param checkNode - Include currentElement in search when true. Defaults to true.\n * @public\n */\nexport function getLastTabbable(rootElement, currentElement, includeElementsInFocusZones, checkNode) {\n  if (checkNode === void 0) {\n    checkNode = true;\n  }\n  return getPreviousElement(rootElement, currentElement, checkNode, false /*suppressParentTraversal*/, true /*traverseChildren*/, includeElementsInFocusZones, false /*allowFocusRoot*/, true /*tabbable*/);\n}\n/**\n * Attempts to focus the first focusable element that is a child or child's child of the rootElement.\n *\n * @public\n * @param rootElement - Element to start the search for a focusable child.\n * @param bypassHiddenElements - If true, focus will be not be set on hidden elements.\n * @returns True if focus was set, false if it was not.\n */\nexport function focusFirstChild(rootElement, bypassHiddenElements) {\n  var element = getNextElement(rootElement, rootElement, true, false, false, true, undefined, undefined, bypassHiddenElements);\n  if (element) {\n    focusAsync(element);\n    return true;\n  }\n  return false;\n}\n/**\n * Traverse to find the previous element.\n * If tabbable is true, the element must have tabIndex != -1.\n *\n * @public\n */\nexport function getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren, includeElementsInFocusZones, allowFocusRoot, tabbable) {\n  if (!currentElement || !allowFocusRoot && currentElement === rootElement) {\n    return null;\n  }\n  var isCurrentElementVisible = isElementVisible(currentElement);\n  // Check its children.\n  if (traverseChildren && isCurrentElementVisible && (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {\n    var childMatch = getPreviousElement(rootElement, currentElement.lastElementChild, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n    if (childMatch) {\n      if (tabbable && isElementTabbable(childMatch, true) || !tabbable) {\n        return childMatch;\n      }\n      var childMatchSiblingMatch = getPreviousElement(rootElement, childMatch.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n      if (childMatchSiblingMatch) {\n        return childMatchSiblingMatch;\n      }\n      var childMatchParent = childMatch.parentElement;\n      // At this point if we have not found any potential matches\n      // start looking at the rest of the subtree under the currentParent.\n      // NOTE: We do not want to recurse here because doing so could\n      // cause elements to get skipped.\n      while (childMatchParent && childMatchParent !== currentElement) {\n        var childMatchParentMatch = getPreviousElement(rootElement, childMatchParent.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n        if (childMatchParentMatch) {\n          return childMatchParentMatch;\n        }\n        childMatchParent = childMatchParent.parentElement;\n      }\n    }\n  }\n  // Check the current node, if it's not the first traversal.\n  if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {\n    return currentElement;\n  }\n  // Check its previous sibling.\n  var siblingMatch = getPreviousElement(rootElement, currentElement.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\n  if (siblingMatch) {\n    return siblingMatch;\n  }\n  // Check its parent.\n  if (!suppressParentTraversal) {\n    return getPreviousElement(rootElement, currentElement.parentElement, true, false, false, includeElementsInFocusZones, allowFocusRoot, tabbable);\n  }\n  return null;\n}\n/**\n * Traverse to find the next focusable element.\n * If tabbable is true, the element must have tabIndex != -1.\n *\n * @public\n * @param checkNode - Include currentElement in search when true.\n */\nexport function getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements) {\n  if (!currentElement || currentElement === rootElement && suppressChildTraversal && !allowFocusRoot) {\n    return null;\n  }\n  var checkElementVisibility = bypassHiddenElements ? isElementVisibleAndNotHidden : isElementVisible;\n  var isCurrentElementVisible = checkElementVisibility(currentElement);\n  // Check the current node, if it's not the first traversal.\n  if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {\n    return currentElement;\n  }\n  // Check its children.\n  if (!suppressChildTraversal && isCurrentElementVisible && (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {\n    var childMatch = getNextElement(rootElement, currentElement.firstElementChild, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);\n    if (childMatch) {\n      return childMatch;\n    }\n  }\n  if (currentElement === rootElement) {\n    return null;\n  }\n  // Check its sibling.\n  var siblingMatch = getNextElement(rootElement, currentElement.nextElementSibling, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);\n  if (siblingMatch) {\n    return siblingMatch;\n  }\n  if (!suppressParentTraversal) {\n    return getNextElement(rootElement, currentElement.parentElement, false, false, true, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);\n  }\n  return null;\n}\n/**\n * Determines if an element is visible.\n *\n * @public\n */\nexport function isElementVisible(element) {\n  // If the element is not valid, return false.\n  if (!element || !element.getAttribute) {\n    return false;\n  }\n  var visibilityAttribute = element.getAttribute(IS_VISIBLE_ATTRIBUTE);\n  // If the element is explicitly marked with the visibility attribute, return that value as boolean.\n  if (visibilityAttribute !== null && visibilityAttribute !== undefined) {\n    return visibilityAttribute === 'true';\n  }\n  // Fallback to other methods of determining actual visibility.\n  return element.offsetHeight !== 0 || element.offsetParent !== null ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  element.isVisible === true; // used as a workaround for testing.\n}\n/**\n * Determines if an element is visible and not hidden\n * @param element - Element to check\n * @returns Returns true if the given element is visible and not hidden\n *\n * @public\n */\nexport function isElementVisibleAndNotHidden(element) {\n  return !!element && isElementVisible(element) && !element.hidden && window.getComputedStyle(element).visibility !== 'hidden';\n}\n/**\n * Determines if an element can receive focus programmatically or via a mouse click.\n * If checkTabIndex is true, additionally checks to ensure the element can be focused with the tab key,\n * meaning tabIndex != -1.\n *\n * @public\n */\nexport function isElementTabbable(element, checkTabIndex) {\n  // If this element is null or is disabled, it is not considered tabbable.\n  if (!element || element.disabled) {\n    return false;\n  }\n  var tabIndex = 0;\n  var tabIndexAttributeValue = null;\n  if (element && element.getAttribute) {\n    tabIndexAttributeValue = element.getAttribute('tabIndex');\n    if (tabIndexAttributeValue) {\n      tabIndex = parseInt(tabIndexAttributeValue, 10);\n    }\n  }\n  var isFocusableAttribute = element.getAttribute ? element.getAttribute(IS_FOCUSABLE_ATTRIBUTE) : null;\n  var isTabIndexSet = tabIndexAttributeValue !== null && tabIndex >= 0;\n  var result = !!element && isFocusableAttribute !== 'false' && (element.tagName === 'A' || element.tagName === 'BUTTON' || element.tagName === 'INPUT' || element.tagName === 'TEXTAREA' || element.tagName === 'SELECT' || isFocusableAttribute === 'true' || isTabIndexSet);\n  return checkTabIndex ? tabIndex !== -1 && result : result;\n}\n/**\n * Determines if a given element is a focus zone.\n *\n * @public\n */\nexport function isElementFocusZone(element) {\n  return !!(element && element.getAttribute && !!element.getAttribute(FOCUSZONE_ID_ATTRIBUTE));\n}\n/**\n * Determines if a given element is a focus sub zone.\n *\n * @public\n */\nexport function isElementFocusSubZone(element) {\n  return !!(element && element.getAttribute && element.getAttribute(FOCUSZONE_SUB_ATTRIBUTE) === 'true');\n}\n/**\n * Determines if an element, or any of its children, contain focus.\n *\n * @public\n */\nexport function doesElementContainFocus(element) {\n  var document = getDocument(element);\n  var currentActiveElement = document && document.activeElement;\n  if (currentActiveElement && elementContains(element, currentActiveElement)) {\n    return true;\n  }\n  return false;\n}\n/**\n * Determines if an, or any of its ancestors, sepcificies that it doesn't want focus to wrap\n * @param element - element to start searching from\n * @param noWrapDataAttribute - the no wrap data attribute to match (either)\n * @returns true if focus should wrap, false otherwise\n */\nexport function shouldWrapFocus(element, noWrapDataAttribute) {\n  return elementContainsAttribute(element, noWrapDataAttribute) === 'true' ? false : true;\n}\nvar targetToFocusOnNextRepaint = undefined;\n/**\n * Sets focus to an element asynchronously. The focus will be set at the next browser repaint,\n * meaning it won't cause any extra recalculations. If more than one focusAsync is called during one frame,\n * only the latest called focusAsync element will actually be focused\n * @param element - The element to focus\n */\nexport function focusAsync(element) {\n  if (element) {\n    // An element was already queued to be focused, so replace that one with the new element\n    if (targetToFocusOnNextRepaint) {\n      targetToFocusOnNextRepaint = element;\n      return;\n    }\n    targetToFocusOnNextRepaint = element;\n    var win = getWindow(element);\n    if (win) {\n      // element.focus() is a no-op if the element is no longer in the DOM, meaning this is always safe\n      win.requestAnimationFrame(function () {\n        targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus();\n        // We are done focusing for this frame, so reset the queued focus element\n        targetToFocusOnNextRepaint = undefined;\n      });\n    }\n  }\n}\n/**\n * Finds the closest focusable element via an index path from a parent. See\n * `getElementIndexPath` for getting an index path from an element to a child.\n */\nexport function getFocusableByIndexPath(parent, path) {\n  var element = parent;\n  for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n    var index = path_1[_i];\n    var nextChild = element.children[Math.min(index, element.children.length - 1)];\n    if (!nextChild) {\n      break;\n    }\n    element = nextChild;\n  }\n  element = isElementTabbable(element) && isElementVisible(element) ? element : getNextElement(parent, element, true) || getPreviousElement(parent, element);\n  return element;\n}\n/**\n * Finds the element index path from a parent element to a child element.\n *\n * If you had this node structure: \"A has children [B, C] and C has child D\",\n * the index path from A to D would be [1, 0], or `parent.chidren[1].children[0]`.\n */\nexport function getElementIndexPath(fromElement, toElement) {\n  var path = [];\n  while (toElement && fromElement && toElement !== fromElement) {\n    var parent_1 = getParent(toElement, true);\n    if (parent_1 === null) {\n      return [];\n    }\n    path.unshift(Array.prototype.indexOf.call(parent_1.children, toElement));\n    toElement = parent_1;\n  }\n  return path;\n}","map":{"version":3,"names":["elementContainsAttribute","elementContains","getParent","getWindow","getDocument","IS_FOCUSABLE_ATTRIBUTE","IS_VISIBLE_ATTRIBUTE","FOCUSZONE_ID_ATTRIBUTE","FOCUSZONE_SUB_ATTRIBUTE","getFirstFocusable","rootElement","currentElement","includeElementsInFocusZones","getNextElement","getLastFocusable","getPreviousElement","getFirstTabbable","checkNode","getLastTabbable","focusFirstChild","bypassHiddenElements","element","undefined","focusAsync","suppressParentTraversal","traverseChildren","allowFocusRoot","tabbable","isCurrentElementVisible","isElementVisible","isElementFocusZone","isElementFocusSubZone","childMatch","lastElementChild","isElementTabbable","childMatchSiblingMatch","previousElementSibling","childMatchParent","parentElement","childMatchParentMatch","siblingMatch","suppressChildTraversal","checkElementVisibility","isElementVisibleAndNotHidden","firstElementChild","nextElementSibling","getAttribute","visibilityAttribute","offsetHeight","offsetParent","isVisible","hidden","window","getComputedStyle","visibility","checkTabIndex","disabled","tabIndex","tabIndexAttributeValue","parseInt","isFocusableAttribute","isTabIndexSet","result","tagName","doesElementContainFocus","document","currentActiveElement","activeElement","shouldWrapFocus","noWrapDataAttribute","targetToFocusOnNextRepaint","win","requestAnimationFrame","focus","getFocusableByIndexPath","parent","path","_i","path_1","length","index","nextChild","children","Math","min","getElementIndexPath","fromElement","toElement","parent_1","unshift","Array","prototype","indexOf","call"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/src/focus.ts"],"sourcesContent":["import { elementContainsAttribute } from './dom/elementContainsAttribute';\nimport { elementContains } from './dom/elementContains';\nimport { getParent } from './dom/getParent';\nimport { getWindow } from './dom/getWindow';\nimport { getDocument } from './dom/getDocument';\n\nconst IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\nconst IS_VISIBLE_ATTRIBUTE = 'data-is-visible';\nconst FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\nconst FOCUSZONE_SUB_ATTRIBUTE = 'data-is-sub-focuszone';\n\n/**\n * Gets the first focusable element.\n *\n * @public\n */\nexport function getFirstFocusable(\n  rootElement: HTMLElement,\n  currentElement: HTMLElement,\n  includeElementsInFocusZones?: boolean,\n): HTMLElement | null {\n  return getNextElement(\n    rootElement,\n    currentElement,\n    true /*checkNode*/,\n    false /*suppressParentTraversal*/,\n    false /*suppressChildTraversal*/,\n    includeElementsInFocusZones,\n  );\n}\n\n/**\n * Gets the last focusable element.\n *\n * @public\n */\nexport function getLastFocusable(\n  rootElement: HTMLElement,\n  currentElement: HTMLElement,\n  includeElementsInFocusZones?: boolean,\n): HTMLElement | null {\n  return getPreviousElement(\n    rootElement,\n    currentElement,\n    true /*checkNode*/,\n    false /*suppressParentTraversal*/,\n    true /*traverseChildren*/,\n    includeElementsInFocusZones,\n  );\n}\n\n/**\n * Gets the first tabbable element. (The difference between focusable and tabbable is that tabbable elements are\n * focusable elements that also have tabIndex != -1.)\n * @param rootElement - The parent element to search beneath.\n * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,\n * and iteration continues forward.  Typical use passes rootElement.firstChild.\n * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.\n * @param checkNode - Include currentElement in search when true. Defaults to true.\n * @public\n */\nexport function getFirstTabbable(\n  rootElement: HTMLElement,\n  currentElement: HTMLElement,\n  includeElementsInFocusZones?: boolean,\n  checkNode: boolean = true,\n): HTMLElement | null {\n  return getNextElement(\n    rootElement,\n    currentElement,\n    checkNode,\n    false /*suppressParentTraversal*/,\n    false /*suppressChildTraversal*/,\n    includeElementsInFocusZones,\n    false /*allowFocusRoot*/,\n    true /*tabbable*/,\n  );\n}\n\n/**\n * Gets the last tabbable element. (The difference between focusable and tabbable is that tabbable elements are\n * focusable elements that also have tabIndex != -1.)\n * @param rootElement - The parent element to search beneath.\n * @param currentElement - The descendant of rootElement to start the search at.  This element is the first one checked,\n * and iteration continues in reverse.  Typical use passes rootElement.lastChild.\n * @param includeElementsInFocusZones - true if traversal should go into FocusZone descendants.\n * @param checkNode - Include currentElement in search when true. Defaults to true.\n * @public\n */\nexport function getLastTabbable(\n  rootElement: HTMLElement,\n  currentElement: HTMLElement,\n  includeElementsInFocusZones?: boolean,\n  checkNode: boolean = true,\n): HTMLElement | null {\n  return getPreviousElement(\n    rootElement,\n    currentElement,\n    checkNode,\n    false /*suppressParentTraversal*/,\n    true /*traverseChildren*/,\n    includeElementsInFocusZones,\n    false /*allowFocusRoot*/,\n    true /*tabbable*/,\n  );\n}\n\n/**\n * Attempts to focus the first focusable element that is a child or child's child of the rootElement.\n *\n * @public\n * @param rootElement - Element to start the search for a focusable child.\n * @param bypassHiddenElements - If true, focus will be not be set on hidden elements.\n * @returns True if focus was set, false if it was not.\n */\nexport function focusFirstChild(rootElement: HTMLElement, bypassHiddenElements?: boolean): boolean {\n  let element: HTMLElement | null = getNextElement(\n    rootElement,\n    rootElement,\n    true,\n    false,\n    false,\n    true,\n    undefined,\n    undefined,\n    bypassHiddenElements,\n  );\n\n  if (element) {\n    focusAsync(element);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Traverse to find the previous element.\n * If tabbable is true, the element must have tabIndex != -1.\n *\n * @public\n */\nexport function getPreviousElement(\n  rootElement: HTMLElement,\n  currentElement: HTMLElement | null,\n  checkNode?: boolean,\n  suppressParentTraversal?: boolean,\n  traverseChildren?: boolean,\n  includeElementsInFocusZones?: boolean,\n  allowFocusRoot?: boolean,\n  tabbable?: boolean,\n): HTMLElement | null {\n  if (!currentElement || (!allowFocusRoot && currentElement === rootElement)) {\n    return null;\n  }\n\n  let isCurrentElementVisible = isElementVisible(currentElement);\n\n  // Check its children.\n  if (\n    traverseChildren &&\n    isCurrentElementVisible &&\n    (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))\n  ) {\n    const childMatch = getPreviousElement(\n      rootElement,\n      currentElement.lastElementChild as HTMLElement,\n      true,\n      true,\n      true,\n      includeElementsInFocusZones,\n      allowFocusRoot,\n      tabbable,\n    );\n\n    if (childMatch) {\n      if ((tabbable && isElementTabbable(childMatch, true)) || !tabbable) {\n        return childMatch;\n      }\n\n      const childMatchSiblingMatch = getPreviousElement(\n        rootElement,\n        childMatch.previousElementSibling as HTMLElement,\n        true,\n        true,\n        true,\n        includeElementsInFocusZones,\n        allowFocusRoot,\n        tabbable,\n      );\n      if (childMatchSiblingMatch) {\n        return childMatchSiblingMatch;\n      }\n\n      let childMatchParent = childMatch.parentElement;\n\n      // At this point if we have not found any potential matches\n      // start looking at the rest of the subtree under the currentParent.\n      // NOTE: We do not want to recurse here because doing so could\n      // cause elements to get skipped.\n      while (childMatchParent && childMatchParent !== currentElement) {\n        const childMatchParentMatch = getPreviousElement(\n          rootElement,\n          childMatchParent.previousElementSibling as HTMLElement,\n          true,\n          true,\n          true,\n          includeElementsInFocusZones,\n          allowFocusRoot,\n          tabbable,\n        );\n\n        if (childMatchParentMatch) {\n          return childMatchParentMatch;\n        }\n\n        childMatchParent = childMatchParent.parentElement;\n      }\n    }\n  }\n\n  // Check the current node, if it's not the first traversal.\n  if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {\n    return currentElement;\n  }\n\n  // Check its previous sibling.\n  const siblingMatch = getPreviousElement(\n    rootElement,\n    currentElement.previousElementSibling as HTMLElement,\n    true,\n    true,\n    true,\n    includeElementsInFocusZones,\n    allowFocusRoot,\n    tabbable,\n  );\n\n  if (siblingMatch) {\n    return siblingMatch;\n  }\n\n  // Check its parent.\n  if (!suppressParentTraversal) {\n    return getPreviousElement(\n      rootElement,\n      currentElement.parentElement,\n      true,\n      false,\n      false,\n      includeElementsInFocusZones,\n      allowFocusRoot,\n      tabbable,\n    );\n  }\n\n  return null;\n}\n\n/**\n * Traverse to find the next focusable element.\n * If tabbable is true, the element must have tabIndex != -1.\n *\n * @public\n * @param checkNode - Include currentElement in search when true.\n */\nexport function getNextElement(\n  rootElement: HTMLElement,\n  currentElement: HTMLElement | null,\n  checkNode?: boolean,\n  suppressParentTraversal?: boolean,\n  suppressChildTraversal?: boolean,\n  includeElementsInFocusZones?: boolean,\n  allowFocusRoot?: boolean,\n  tabbable?: boolean,\n  bypassHiddenElements?: boolean,\n): HTMLElement | null {\n  if (!currentElement || (currentElement === rootElement && suppressChildTraversal && !allowFocusRoot)) {\n    return null;\n  }\n\n  const checkElementVisibility = bypassHiddenElements ? isElementVisibleAndNotHidden : isElementVisible;\n\n  let isCurrentElementVisible = checkElementVisibility(currentElement);\n\n  // Check the current node, if it's not the first traversal.\n  if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {\n    return currentElement;\n  }\n\n  // Check its children.\n  if (\n    !suppressChildTraversal &&\n    isCurrentElementVisible &&\n    (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))\n  ) {\n    const childMatch = getNextElement(\n      rootElement,\n      currentElement.firstElementChild as HTMLElement,\n      true,\n      true,\n      false,\n      includeElementsInFocusZones,\n      allowFocusRoot,\n      tabbable,\n      bypassHiddenElements,\n    );\n\n    if (childMatch) {\n      return childMatch;\n    }\n  }\n\n  if (currentElement === rootElement) {\n    return null;\n  }\n\n  // Check its sibling.\n  const siblingMatch = getNextElement(\n    rootElement,\n    currentElement.nextElementSibling as HTMLElement,\n    true,\n    true,\n    false,\n    includeElementsInFocusZones,\n    allowFocusRoot,\n    tabbable,\n    bypassHiddenElements,\n  );\n\n  if (siblingMatch) {\n    return siblingMatch;\n  }\n\n  if (!suppressParentTraversal) {\n    return getNextElement(\n      rootElement,\n      currentElement.parentElement,\n      false,\n      false,\n      true,\n      includeElementsInFocusZones,\n      allowFocusRoot,\n      tabbable,\n      bypassHiddenElements,\n    );\n  }\n\n  return null;\n}\n\n/**\n * Determines if an element is visible.\n *\n * @public\n */\nexport function isElementVisible(element: HTMLElement | undefined | null): boolean {\n  // If the element is not valid, return false.\n  if (!element || !element.getAttribute) {\n    return false;\n  }\n\n  const visibilityAttribute = element.getAttribute(IS_VISIBLE_ATTRIBUTE);\n\n  // If the element is explicitly marked with the visibility attribute, return that value as boolean.\n  if (visibilityAttribute !== null && visibilityAttribute !== undefined) {\n    return visibilityAttribute === 'true';\n  }\n\n  // Fallback to other methods of determining actual visibility.\n  return (\n    element.offsetHeight !== 0 ||\n    element.offsetParent !== null ||\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (element as any).isVisible === true\n  ); // used as a workaround for testing.\n}\n\n/**\n * Determines if an element is visible and not hidden\n * @param element - Element to check\n * @returns Returns true if the given element is visible and not hidden\n *\n * @public\n */\nexport function isElementVisibleAndNotHidden(element: HTMLElement | undefined | null): boolean {\n  return (\n    !!element &&\n    isElementVisible(element) &&\n    !element.hidden &&\n    window.getComputedStyle(element).visibility !== 'hidden'\n  );\n}\n\n/**\n * Determines if an element can receive focus programmatically or via a mouse click.\n * If checkTabIndex is true, additionally checks to ensure the element can be focused with the tab key,\n * meaning tabIndex != -1.\n *\n * @public\n */\nexport function isElementTabbable(element: HTMLElement, checkTabIndex?: boolean): boolean {\n  // If this element is null or is disabled, it is not considered tabbable.\n  if (!element || (element as HTMLButtonElement).disabled) {\n    return false;\n  }\n\n  let tabIndex = 0;\n  let tabIndexAttributeValue = null;\n\n  if (element && element.getAttribute) {\n    tabIndexAttributeValue = element.getAttribute('tabIndex');\n\n    if (tabIndexAttributeValue) {\n      tabIndex = parseInt(tabIndexAttributeValue, 10);\n    }\n  }\n\n  let isFocusableAttribute = element.getAttribute ? element.getAttribute(IS_FOCUSABLE_ATTRIBUTE) : null;\n  let isTabIndexSet = tabIndexAttributeValue !== null && tabIndex >= 0;\n\n  const result =\n    !!element &&\n    isFocusableAttribute !== 'false' &&\n    (element.tagName === 'A' ||\n      element.tagName === 'BUTTON' ||\n      element.tagName === 'INPUT' ||\n      element.tagName === 'TEXTAREA' ||\n      element.tagName === 'SELECT' ||\n      isFocusableAttribute === 'true' ||\n      isTabIndexSet);\n\n  return checkTabIndex ? tabIndex !== -1 && result : result;\n}\n\n/**\n * Determines if a given element is a focus zone.\n *\n * @public\n */\nexport function isElementFocusZone(element?: HTMLElement): boolean {\n  return !!(element && element.getAttribute && !!element.getAttribute(FOCUSZONE_ID_ATTRIBUTE));\n}\n\n/**\n * Determines if a given element is a focus sub zone.\n *\n * @public\n */\nexport function isElementFocusSubZone(element?: HTMLElement): boolean {\n  return !!(element && element.getAttribute && element.getAttribute(FOCUSZONE_SUB_ATTRIBUTE) === 'true');\n}\n\n/**\n * Determines if an element, or any of its children, contain focus.\n *\n * @public\n */\nexport function doesElementContainFocus(element: HTMLElement): boolean {\n  let document = getDocument(element);\n  let currentActiveElement: HTMLElement | undefined = document && (document.activeElement as HTMLElement);\n  if (currentActiveElement && elementContains(element, currentActiveElement)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Determines if an, or any of its ancestors, sepcificies that it doesn't want focus to wrap\n * @param element - element to start searching from\n * @param noWrapDataAttribute - the no wrap data attribute to match (either)\n * @returns true if focus should wrap, false otherwise\n */\nexport function shouldWrapFocus(\n  element: HTMLElement,\n  noWrapDataAttribute: 'data-no-vertical-wrap' | 'data-no-horizontal-wrap',\n): boolean {\n  return elementContainsAttribute(element, noWrapDataAttribute) === 'true' ? false : true;\n}\n\nlet targetToFocusOnNextRepaint: HTMLElement | { focus: () => void } | null | undefined = undefined;\n\n/**\n * Sets focus to an element asynchronously. The focus will be set at the next browser repaint,\n * meaning it won't cause any extra recalculations. If more than one focusAsync is called during one frame,\n * only the latest called focusAsync element will actually be focused\n * @param element - The element to focus\n */\nexport function focusAsync(element: HTMLElement | { focus: () => void } | undefined | null): void {\n  if (element) {\n    // An element was already queued to be focused, so replace that one with the new element\n    if (targetToFocusOnNextRepaint) {\n      targetToFocusOnNextRepaint = element;\n      return;\n    }\n\n    targetToFocusOnNextRepaint = element;\n\n    const win = getWindow(element as Element);\n\n    if (win) {\n      // element.focus() is a no-op if the element is no longer in the DOM, meaning this is always safe\n      win.requestAnimationFrame(() => {\n        targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus();\n\n        // We are done focusing for this frame, so reset the queued focus element\n        targetToFocusOnNextRepaint = undefined;\n      });\n    }\n  }\n}\n\n/**\n * Finds the closest focusable element via an index path from a parent. See\n * `getElementIndexPath` for getting an index path from an element to a child.\n */\nexport function getFocusableByIndexPath(parent: HTMLElement, path: number[]): HTMLElement | undefined {\n  let element = parent;\n\n  for (const index of path) {\n    const nextChild = element.children[Math.min(index, element.children.length - 1)] as HTMLElement;\n\n    if (!nextChild) {\n      break;\n    }\n    element = nextChild;\n  }\n\n  element =\n    isElementTabbable(element) && isElementVisible(element)\n      ? element\n      : getNextElement(parent, element, true) || getPreviousElement(parent, element)!;\n\n  return element as HTMLElement;\n}\n\n/**\n * Finds the element index path from a parent element to a child element.\n *\n * If you had this node structure: \"A has children [B, C] and C has child D\",\n * the index path from A to D would be [1, 0], or `parent.chidren[1].children[0]`.\n */\nexport function getElementIndexPath(fromElement: HTMLElement, toElement: HTMLElement): number[] {\n  const path: number[] = [];\n\n  while (toElement && fromElement && toElement !== fromElement) {\n    const parent = getParent(toElement, true);\n\n    if (parent === null) {\n      return [];\n    }\n\n    path.unshift(Array.prototype.indexOf.call(parent.children, toElement));\n    toElement = parent;\n  }\n\n  return path;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}