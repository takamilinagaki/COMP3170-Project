{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\n// Store the theming state in __themeState__ global scope for reuse in the case of duplicate\n// load-themed-styles hosted on the page.\nvar _root = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any\n// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).\nvar _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;\nvar _themeState = initializeThemeState();\n/**\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\n */\nvar _themeTokenRegex = /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\nvar now = function () {\n  return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n};\nfunction measure(func) {\n  var start = now();\n  func();\n  var end = now();\n  _themeState.perf.duration += end - start;\n}\n/**\n * initialize global state object\n */\nfunction initializeThemeState() {\n  var state = _root.__themeState__ || {\n    theme: undefined,\n    lastStyleElement: undefined,\n    registeredStyles: []\n  };\n  if (!state.runState) {\n    state = __assign(__assign({}, state), {\n      perf: {\n        count: 0,\n        duration: 0\n      },\n      runState: {\n        flushTimer: 0,\n        mode: 0 /* Mode.sync */,\n        buffer: []\n      }\n    });\n  }\n  if (!state.registeredThemableStyles) {\n    state = __assign(__assign({}, state), {\n      registeredThemableStyles: []\n    });\n  }\n  _root.__themeState__ = state;\n  return state;\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\n * event is fired.\n * @param {string | ThemableArray} styles Themable style text to register.\n * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.\n */\nexport function loadStyles(styles, loadAsync) {\n  if (loadAsync === void 0) {\n    loadAsync = false;\n  }\n  measure(function () {\n    var styleParts = Array.isArray(styles) ? styles : splitStyles(styles);\n    var _a = _themeState.runState,\n      mode = _a.mode,\n      buffer = _a.buffer,\n      flushTimer = _a.flushTimer;\n    if (loadAsync || mode === 1 /* Mode.async */) {\n      buffer.push(styleParts);\n      if (!flushTimer) {\n        _themeState.runState.flushTimer = asyncLoadStyles();\n      }\n    } else {\n      applyThemableStyles(styleParts);\n    }\n  });\n}\n/**\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\n * a loadStyles callback that gets called when styles are loaded or reloaded\n */\nexport function configureLoadStyles(loadStylesFn) {\n  _themeState.loadStyles = loadStylesFn;\n}\n/**\n * Configure run mode of load-themable-styles\n * @param mode load-themable-styles run mode, async or sync\n */\nexport function configureRunMode(mode) {\n  _themeState.runState.mode = mode;\n}\n/**\n * external code can call flush to synchronously force processing of currently buffered styles\n */\nexport function flush() {\n  measure(function () {\n    var styleArrays = _themeState.runState.buffer.slice();\n    _themeState.runState.buffer = [];\n    var mergedStyleArray = [].concat.apply([], styleArrays);\n    if (mergedStyleArray.length > 0) {\n      applyThemableStyles(mergedStyleArray);\n    }\n  });\n}\n/**\n * register async loadStyles\n */\nfunction asyncLoadStyles() {\n  return setTimeout(function () {\n    _themeState.runState.flushTimer = 0;\n    flush();\n  }, 0);\n}\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\n * is fired.\n * @param {string} styleText Style to register.\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\n */\nfunction applyThemableStyles(stylesArray, styleRecord) {\n  if (_themeState.loadStyles) {\n    _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);\n  } else {\n    registerStyles(stylesArray);\n  }\n}\n/**\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\n * replaced.\n * @param {theme} theme JSON object of theme tokens to values.\n */\nexport function loadTheme(theme) {\n  _themeState.theme = theme;\n  // reload styles.\n  reloadStyles();\n}\n/**\n * Clear already registered style elements and style records in theme_State object\n * @param option - specify which group of registered styles should be cleared.\n * Default to be both themable and non-themable styles will be cleared\n */\nexport function clearStyles(option) {\n  if (option === void 0) {\n    option = 3 /* ClearStyleOptions.all */;\n  }\n  if (option === 3 /* ClearStyleOptions.all */ || option === 2 /* ClearStyleOptions.onlyNonThemable */) {\n    clearStylesInternal(_themeState.registeredStyles);\n    _themeState.registeredStyles = [];\n  }\n  if (option === 3 /* ClearStyleOptions.all */ || option === 1 /* ClearStyleOptions.onlyThemable */) {\n    clearStylesInternal(_themeState.registeredThemableStyles);\n    _themeState.registeredThemableStyles = [];\n  }\n}\nfunction clearStylesInternal(records) {\n  records.forEach(function (styleRecord) {\n    var styleElement = styleRecord && styleRecord.styleElement;\n    if (styleElement && styleElement.parentElement) {\n      styleElement.parentElement.removeChild(styleElement);\n    }\n  });\n}\n/**\n * Reloads styles.\n */\nfunction reloadStyles() {\n  if (_themeState.theme) {\n    var themableStyles = [];\n    for (var _i = 0, _a = _themeState.registeredThemableStyles; _i < _a.length; _i++) {\n      var styleRecord = _a[_i];\n      themableStyles.push(styleRecord.themableStyle);\n    }\n    if (themableStyles.length > 0) {\n      clearStyles(1 /* ClearStyleOptions.onlyThemable */);\n      applyThemableStyles([].concat.apply([], themableStyles));\n    }\n  }\n}\n/**\n * Find theme tokens and replaces them with provided theme values.\n * @param {string} styles Tokenized styles to fix.\n */\nexport function detokenize(styles) {\n  if (styles) {\n    styles = resolveThemableArray(splitStyles(styles)).styleString;\n  }\n  return styles;\n}\n/**\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\n */\nfunction resolveThemableArray(splitStyleArray) {\n  var theme = _themeState.theme;\n  var themable = false;\n  // Resolve the array of theming instructions to an array of strings.\n  // Then join the array to produce the final CSS string.\n  var resolvedArray = (splitStyleArray || []).map(function (currentValue) {\n    var themeSlot = currentValue.theme;\n    if (themeSlot) {\n      themable = true;\n      // A theming annotation. Resolve it.\n      var themedValue = theme ? theme[themeSlot] : undefined;\n      var defaultValue = currentValue.defaultValue || 'inherit';\n      // Warn to console if we hit an unthemed value even when themes are provided, but only if \"DEBUG\" is true.\n      // Allow the themedValue to be undefined to explicitly request the default value.\n      if (theme && !themedValue && console && !(themeSlot in theme) && typeof DEBUG !== 'undefined' && DEBUG) {\n        console.warn(\"Theming value not provided for \\\"\".concat(themeSlot, \"\\\". Falling back to \\\"\").concat(defaultValue, \"\\\".\"));\n      }\n      return themedValue || defaultValue;\n    } else {\n      // A non-themable string. Preserve it.\n      return currentValue.rawString;\n    }\n  });\n  return {\n    styleString: resolvedArray.join(''),\n    themable: themable\n  };\n}\n/**\n * Split tokenized CSS into an array of strings and theme specification objects\n * @param {string} styles Tokenized styles to split.\n */\nexport function splitStyles(styles) {\n  var result = [];\n  if (styles) {\n    var pos = 0; // Current position in styles.\n    var tokenMatch = void 0;\n    while (tokenMatch = _themeTokenRegex.exec(styles)) {\n      var matchIndex = tokenMatch.index;\n      if (matchIndex > pos) {\n        result.push({\n          rawString: styles.substring(pos, matchIndex)\n        });\n      }\n      result.push({\n        theme: tokenMatch[1],\n        defaultValue: tokenMatch[2] // May be undefined\n      });\n      // index of the first character after the current match\n      pos = _themeTokenRegex.lastIndex;\n    }\n    // Push the rest of the string after the last match.\n    result.push({\n      rawString: styles.substring(pos)\n    });\n  }\n  return result;\n}\n/**\n * Registers a set of style text. If it is registered too early, we will register it when the\n * window.load event is fired.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\nfunction registerStyles(styleArray) {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  var head = document.getElementsByTagName('head')[0];\n  var styleElement = document.createElement('style');\n  var _a = resolveThemableArray(styleArray),\n    styleString = _a.styleString,\n    themable = _a.themable;\n  styleElement.setAttribute('data-load-themed-styles', 'true');\n  if (_styleNonce) {\n    styleElement.setAttribute('nonce', _styleNonce);\n  }\n  styleElement.appendChild(document.createTextNode(styleString));\n  _themeState.perf.count++;\n  head.appendChild(styleElement);\n  var ev = document.createEvent('HTMLEvents');\n  ev.initEvent('styleinsert', true /* bubbleEvent */, false /* cancelable */);\n  ev.args = {\n    newStyle: styleElement\n  };\n  document.dispatchEvent(ev);\n  var record = {\n    styleElement: styleElement,\n    themableStyle: styleArray\n  };\n  if (themable) {\n    _themeState.registeredThemableStyles.push(record);\n  } else {\n    _themeState.registeredStyles.push(record);\n  }\n}","map":{"version":3,"names":["_root","window","global","_styleNonce","CSPSettings","nonce","_themeState","initializeThemeState","_themeTokenRegex","now","performance","Date","measure","func","start","end","perf","duration","state","__themeState__","theme","undefined","lastStyleElement","registeredStyles","runState","__assign","count","flushTimer","mode","buffer","registeredThemableStyles","loadStyles","styles","loadAsync","styleParts","Array","isArray","splitStyles","_a","push","asyncLoadStyles","applyThemableStyles","configureLoadStyles","loadStylesFn","configureRunMode","flush","styleArrays","slice","mergedStyleArray","concat","apply","length","setTimeout","stylesArray","styleRecord","resolveThemableArray","styleString","registerStyles","loadTheme","reloadStyles","clearStyles","option","clearStylesInternal","records","forEach","styleElement","parentElement","removeChild","themableStyles","_i","themableStyle","detokenize","splitStyleArray","themable","resolvedArray","map","currentValue","themeSlot","themedValue","defaultValue","console","DEBUG","warn","rawString","join","result","pos","tokenMatch","exec","matchIndex","index","substring","lastIndex","styleArray","document","head","getElementsByTagName","createElement","setAttribute","appendChild","createTextNode","ev","createEvent","initEvent","args","newStyle","dispatchEvent","record"],"sources":["/Users/jerrywuyongon/node_modules/@microsoft/load-themed-styles/src/index.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n/**\n * An IThemingInstruction can specify a rawString to be preserved or a theme slot and a default value\n * to use if that slot is not specified by the theme.\n */\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n// Declaring a global here in case that the execution environment is Node.js (without importing the\n// entire node.js d.ts for now)\ndeclare let global: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n\nexport interface IThemingInstruction {\n  theme?: string;\n  defaultValue?: string;\n  rawString?: string;\n}\n\nexport type ThemableArray = IThemingInstruction[];\n\nexport interface ITheme {\n  [key: string]: string;\n}\n\ninterface IStyleSheet {\n  cssText: string;\n}\n\ninterface IExtendedHtmlStyleElement extends HTMLStyleElement {\n  styleSheet: IStyleSheet;\n}\n\n/**\n * Performance Measurement of loading styles\n */\ninterface IMeasurement {\n  /**\n   * Count of style element injected, which is the slow operation in IE\n   */\n  count: number;\n  /**\n   * Total duration of all loadStyles exections\n   */\n  duration: number;\n}\n\ninterface IRunState {\n  mode: Mode;\n  buffer: ThemableArray[];\n  flushTimer: number;\n}\n\ninterface IThemeState {\n  theme: ITheme | undefined;\n  lastStyleElement: IExtendedHtmlStyleElement;\n  registeredStyles: IStyleRecord[]; // records of already registered non-themable styles\n  registeredThemableStyles: IStyleRecord[]; // records of already registered themable styles\n  loadStyles: ((processedStyles: string, rawStyles?: string | ThemableArray) => void) | undefined;\n  perf: IMeasurement;\n  runState: IRunState;\n}\n\ninterface IStyleRecord {\n  styleElement: Element;\n  themableStyle: ThemableArray;\n}\n\ninterface ICustomEvent<T> extends Event {\n  args?: T;\n}\n\n/**\n * object returned from resolveThemableArray function\n */\ninterface IThemableArrayResolveResult {\n  /** this string is the processed styles in string */\n  styleString: string;\n\n  /** this boolean indicates if this style array is themable */\n  themable: boolean;\n}\n\n/**\n * In sync mode, styles are registered as style elements synchronously with loadStyles() call.\n * In async mode, styles are buffered and registered as batch in async timer for performance purpose.\n */\nexport const enum Mode {\n  sync,\n  async\n}\n\n/**\n * Themable styles and non-themable styles are tracked separately\n * Specify ClearStyleOptions when calling clearStyles API to specify which group of registered styles should be cleared.\n */\nexport const enum ClearStyleOptions {\n  /** only themable styles will be cleared */\n  onlyThemable = 1,\n  /** only non-themable styles will be cleared */\n  onlyNonThemable = 2,\n  /** both themable and non-themable styles will be cleared */\n  all = 3\n}\n\n// Store the theming state in __themeState__ global scope for reuse in the case of duplicate\n// load-themed-styles hosted on the page.\nconst _root: any = typeof window === 'undefined' ? global : window; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n// Nonce string to inject into script tag if one provided. This is used in CSP (Content Security Policy).\nconst _styleNonce: string = _root && _root.CSPSettings && _root.CSPSettings.nonce;\n\nconst _themeState: IThemeState = initializeThemeState();\n\n/**\n * Matches theming tokens. For example, \"[theme: themeSlotName, default: #FFF]\" (including the quotes).\n */\nconst _themeTokenRegex: RegExp =\n  /[\\'\\\"]\\[theme:\\s*(\\w+)\\s*(?:\\,\\s*default:\\s*([\\\\\"\\']?[\\.\\,\\(\\)\\#\\-\\s\\w]*[\\.\\,\\(\\)\\#\\-\\w][\\\"\\']?))?\\s*\\][\\'\\\"]/g;\n\nconst now: () => number = () =>\n  typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n\nfunction measure(func: () => void): void {\n  const start: number = now();\n  func();\n  const end: number = now();\n  _themeState.perf.duration += end - start;\n}\n\n/**\n * initialize global state object\n */\nfunction initializeThemeState(): IThemeState {\n  let state: IThemeState = _root.__themeState__ || {\n    theme: undefined,\n    lastStyleElement: undefined,\n    registeredStyles: []\n  };\n\n  if (!state.runState) {\n    state = {\n      ...state,\n      perf: {\n        count: 0,\n        duration: 0\n      },\n      runState: {\n        flushTimer: 0,\n        mode: Mode.sync,\n        buffer: []\n      }\n    };\n  }\n  if (!state.registeredThemableStyles) {\n    state = {\n      ...state,\n      registeredThemableStyles: []\n    };\n  }\n  _root.__themeState__ = state;\n  return state;\n}\n\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load\n * event is fired.\n * @param {string | ThemableArray} styles Themable style text to register.\n * @param {boolean} loadAsync When true, always load styles in async mode, irrespective of current sync mode.\n */\nexport function loadStyles(styles: string | ThemableArray, loadAsync: boolean = false): void {\n  measure(() => {\n    const styleParts: ThemableArray = Array.isArray(styles) ? styles : splitStyles(styles);\n    const { mode, buffer, flushTimer } = _themeState.runState;\n    if (loadAsync || mode === Mode.async) {\n      buffer.push(styleParts);\n      if (!flushTimer) {\n        _themeState.runState.flushTimer = asyncLoadStyles();\n      }\n    } else {\n      applyThemableStyles(styleParts);\n    }\n  });\n}\n\n/**\n * Allows for customizable loadStyles logic. e.g. for server side rendering application\n * @param {(processedStyles: string, rawStyles?: string | ThemableArray) => void}\n * a loadStyles callback that gets called when styles are loaded or reloaded\n */\nexport function configureLoadStyles(\n  loadStylesFn: ((processedStyles: string, rawStyles?: string | ThemableArray) => void) | undefined\n): void {\n  _themeState.loadStyles = loadStylesFn;\n}\n\n/**\n * Configure run mode of load-themable-styles\n * @param mode load-themable-styles run mode, async or sync\n */\nexport function configureRunMode(mode: Mode): void {\n  _themeState.runState.mode = mode;\n}\n\n/**\n * external code can call flush to synchronously force processing of currently buffered styles\n */\nexport function flush(): void {\n  measure(() => {\n    const styleArrays: ThemableArray[] = _themeState.runState.buffer.slice();\n    _themeState.runState.buffer = [];\n    const mergedStyleArray: ThemableArray = ([] as ThemableArray).concat.apply([], styleArrays);\n    if (mergedStyleArray.length > 0) {\n      applyThemableStyles(mergedStyleArray);\n    }\n  });\n}\n\n/**\n * register async loadStyles\n */\nfunction asyncLoadStyles(): number {\n  return setTimeout(() => {\n    _themeState.runState.flushTimer = 0;\n    flush();\n  }, 0);\n}\n\n/**\n * Loads a set of style text. If it is registered too early, we will register it when the window.load event\n * is fired.\n * @param {string} styleText Style to register.\n * @param {IStyleRecord} styleRecord Existing style record to re-apply.\n */\nfunction applyThemableStyles(stylesArray: ThemableArray, styleRecord?: IStyleRecord): void {\n  if (_themeState.loadStyles) {\n    _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);\n  } else {\n    registerStyles(stylesArray);\n  }\n}\n\n/**\n * Registers a set theme tokens to find and replace. If styles were already registered, they will be\n * replaced.\n * @param {theme} theme JSON object of theme tokens to values.\n */\nexport function loadTheme(theme: ITheme | undefined): void {\n  _themeState.theme = theme;\n\n  // reload styles.\n  reloadStyles();\n}\n\n/**\n * Clear already registered style elements and style records in theme_State object\n * @param option - specify which group of registered styles should be cleared.\n * Default to be both themable and non-themable styles will be cleared\n */\nexport function clearStyles(option: ClearStyleOptions = ClearStyleOptions.all): void {\n  if (option === ClearStyleOptions.all || option === ClearStyleOptions.onlyNonThemable) {\n    clearStylesInternal(_themeState.registeredStyles);\n    _themeState.registeredStyles = [];\n  }\n  if (option === ClearStyleOptions.all || option === ClearStyleOptions.onlyThemable) {\n    clearStylesInternal(_themeState.registeredThemableStyles);\n    _themeState.registeredThemableStyles = [];\n  }\n}\n\nfunction clearStylesInternal(records: IStyleRecord[]): void {\n  records.forEach((styleRecord: IStyleRecord) => {\n    const styleElement: HTMLStyleElement = styleRecord && (styleRecord.styleElement as HTMLStyleElement);\n    if (styleElement && styleElement.parentElement) {\n      styleElement.parentElement.removeChild(styleElement);\n    }\n  });\n}\n\n/**\n * Reloads styles.\n */\nfunction reloadStyles(): void {\n  if (_themeState.theme) {\n    const themableStyles: ThemableArray[] = [];\n    for (const styleRecord of _themeState.registeredThemableStyles) {\n      themableStyles.push(styleRecord.themableStyle);\n    }\n    if (themableStyles.length > 0) {\n      clearStyles(ClearStyleOptions.onlyThemable);\n      applyThemableStyles(([] as ThemableArray).concat.apply([], themableStyles));\n    }\n  }\n}\n\n/**\n * Find theme tokens and replaces them with provided theme values.\n * @param {string} styles Tokenized styles to fix.\n */\nexport function detokenize(styles: string | undefined): string | undefined {\n  if (styles) {\n    styles = resolveThemableArray(splitStyles(styles)).styleString;\n  }\n\n  return styles;\n}\n\n/**\n * Resolves ThemingInstruction objects in an array and joins the result into a string.\n * @param {ThemableArray} splitStyleArray ThemableArray to resolve and join.\n */\nfunction resolveThemableArray(splitStyleArray: ThemableArray): IThemableArrayResolveResult {\n  const { theme }: IThemeState = _themeState;\n  let themable: boolean = false;\n  // Resolve the array of theming instructions to an array of strings.\n  // Then join the array to produce the final CSS string.\n  const resolvedArray: (string | undefined)[] = (splitStyleArray || []).map(\n    (currentValue: IThemingInstruction) => {\n      const themeSlot: string | undefined = currentValue.theme;\n      if (themeSlot) {\n        themable = true;\n        // A theming annotation. Resolve it.\n        const themedValue: string | undefined = theme ? theme[themeSlot] : undefined;\n        const defaultValue: string = currentValue.defaultValue || 'inherit';\n\n        // Warn to console if we hit an unthemed value even when themes are provided, but only if \"DEBUG\" is true.\n        // Allow the themedValue to be undefined to explicitly request the default value.\n        if (\n          theme &&\n          !themedValue &&\n          console &&\n          !(themeSlot in theme) &&\n          typeof DEBUG !== 'undefined' &&\n          DEBUG\n        ) {\n          console.warn(`Theming value not provided for \"${themeSlot}\". Falling back to \"${defaultValue}\".`);\n        }\n\n        return themedValue || defaultValue;\n      } else {\n        // A non-themable string. Preserve it.\n        return currentValue.rawString;\n      }\n    }\n  );\n\n  return {\n    styleString: resolvedArray.join(''),\n    themable: themable\n  };\n}\n\n/**\n * Split tokenized CSS into an array of strings and theme specification objects\n * @param {string} styles Tokenized styles to split.\n */\nexport function splitStyles(styles: string): ThemableArray {\n  const result: ThemableArray = [];\n  if (styles) {\n    let pos: number = 0; // Current position in styles.\n    let tokenMatch: RegExpExecArray | null;\n    while ((tokenMatch = _themeTokenRegex.exec(styles))) {\n      const matchIndex: number = tokenMatch.index;\n      if (matchIndex > pos) {\n        result.push({\n          rawString: styles.substring(pos, matchIndex)\n        });\n      }\n\n      result.push({\n        theme: tokenMatch[1],\n        defaultValue: tokenMatch[2] // May be undefined\n      });\n\n      // index of the first character after the current match\n      pos = _themeTokenRegex.lastIndex;\n    }\n\n    // Push the rest of the string after the last match.\n    result.push({\n      rawString: styles.substring(pos)\n    });\n  }\n\n  return result;\n}\n\n/**\n * Registers a set of style text. If it is registered too early, we will register it when the\n * window.load event is fired.\n * @param {ThemableArray} styleArray Array of IThemingInstruction objects to register.\n * @param {IStyleRecord} styleRecord May specify a style Element to update.\n */\nfunction registerStyles(styleArray: ThemableArray): void {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\n  const styleElement: HTMLStyleElement = document.createElement('style');\n  const { styleString, themable } = resolveThemableArray(styleArray);\n\n  styleElement.setAttribute('data-load-themed-styles', 'true');\n  if (_styleNonce) {\n    styleElement.setAttribute('nonce', _styleNonce);\n  }\n  styleElement.appendChild(document.createTextNode(styleString));\n  _themeState.perf.count++;\n  head.appendChild(styleElement);\n\n  const ev: ICustomEvent<{ newStyle: HTMLStyleElement }> = document.createEvent('HTMLEvents');\n  ev.initEvent('styleinsert', true /* bubbleEvent */, false /* cancelable */);\n  ev.args = {\n    newStyle: styleElement\n  };\n  document.dispatchEvent(ev);\n\n  const record: IStyleRecord = {\n    styleElement: styleElement,\n    themableStyle: styleArray\n  };\n\n  if (themable) {\n    _themeState.registeredThemableStyles.push(record);\n  } else {\n    _themeState.registeredStyles.push(record);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}