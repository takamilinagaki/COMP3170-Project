{"ast":null,"code":"var _a;\nvar LEFT = 'left';\nvar RIGHT = 'right';\nvar NO_FLIP = '@noflip';\nvar NAME_REPLACEMENTS = (_a = {}, _a[LEFT] = RIGHT, _a[RIGHT] = LEFT, _a);\nvar VALUE_REPLACEMENTS = {\n  'w-resize': 'e-resize',\n  'sw-resize': 'se-resize',\n  'nw-resize': 'ne-resize'\n};\n/**\n * RTLifies the rulePair in the array at the current index. This mutates the array for performance\n * reasons.\n */\nexport function rtlifyRules(options, rulePairs, index) {\n  if (options.rtl) {\n    var name_1 = rulePairs[index];\n    if (!name_1) {\n      return;\n    }\n    var value = rulePairs[index + 1];\n    if (typeof value === 'string' && value.indexOf(NO_FLIP) >= 0) {\n      rulePairs[index + 1] = value.replace(/\\s*(?:\\/\\*\\s*)?\\@noflip\\b(?:\\s*\\*\\/)?\\s*?/g, '');\n    } else if (name_1.indexOf(LEFT) >= 0) {\n      rulePairs[index] = name_1.replace(LEFT, RIGHT);\n    } else if (name_1.indexOf(RIGHT) >= 0) {\n      rulePairs[index] = name_1.replace(RIGHT, LEFT);\n    } else if (String(value).indexOf(LEFT) >= 0) {\n      rulePairs[index + 1] = value.replace(LEFT, RIGHT);\n    } else if (String(value).indexOf(RIGHT) >= 0) {\n      rulePairs[index + 1] = value.replace(RIGHT, LEFT);\n    } else if (NAME_REPLACEMENTS[name_1]) {\n      rulePairs[index] = NAME_REPLACEMENTS[name_1];\n    } else if (VALUE_REPLACEMENTS[value]) {\n      rulePairs[index + 1] = VALUE_REPLACEMENTS[value];\n    } else {\n      switch (name_1) {\n        case 'margin':\n        case 'padding':\n          rulePairs[index + 1] = flipQuad(value);\n          break;\n        case 'box-shadow':\n          rulePairs[index + 1] = negateNum(value, 0);\n          break;\n      }\n    }\n  }\n}\n/**\n * Given a string value in a space delimited format (e.g. \"1 2 3 4\"), negates a particular value.\n */\nfunction negateNum(value, partIndex) {\n  var parts = value.split(' ');\n  var numberVal = parseInt(parts[partIndex], 10);\n  parts[0] = parts[0].replace(String(numberVal), String(numberVal * -1));\n  return parts.join(' ');\n}\n/**\n * Given a string quad, flips the left and right values.\n */\nfunction flipQuad(value) {\n  if (typeof value === 'string') {\n    var parts = value.split(' ');\n    if (parts.length === 4) {\n      return \"\".concat(parts[0], \" \").concat(parts[3], \" \").concat(parts[2], \" \").concat(parts[1]);\n    }\n  }\n  return value;\n}","map":{"version":3,"names":["LEFT","RIGHT","NO_FLIP","NAME_REPLACEMENTS","_a","VALUE_REPLACEMENTS","rtlifyRules","options","rulePairs","index","rtl","name_1","value","indexOf","replace","String","flipQuad","negateNum","partIndex","parts","split","numberVal","parseInt","join","length","concat"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/merge-styles/lib/src/transforms/rtlifyRules.ts"],"sourcesContent":["import { IStyleOptions } from '../IStyleOptions';\n\nconst LEFT = 'left';\nconst RIGHT = 'right';\nconst NO_FLIP = '@noflip';\nconst NAME_REPLACEMENTS: { [key: string]: string } = {\n  [LEFT]: RIGHT,\n  [RIGHT]: LEFT,\n};\nconst VALUE_REPLACEMENTS: { [key: string]: string } = {\n  'w-resize': 'e-resize',\n  'sw-resize': 'se-resize',\n  'nw-resize': 'ne-resize',\n};\n\n/**\n * RTLifies the rulePair in the array at the current index. This mutates the array for performance\n * reasons.\n */\nexport function rtlifyRules(options: IStyleOptions, rulePairs: (string | number)[], index: number): void {\n  if (options.rtl) {\n    const name = rulePairs[index] as string;\n\n    if (!name) {\n      return;\n    }\n\n    const value = rulePairs[index + 1] as string;\n\n    if (typeof value === 'string' && value.indexOf(NO_FLIP) >= 0) {\n      rulePairs[index + 1] = value.replace(/\\s*(?:\\/\\*\\s*)?\\@noflip\\b(?:\\s*\\*\\/)?\\s*?/g, '');\n    } else if (name.indexOf(LEFT) >= 0) {\n      rulePairs[index] = name.replace(LEFT, RIGHT);\n    } else if (name.indexOf(RIGHT) >= 0) {\n      rulePairs[index] = name.replace(RIGHT, LEFT);\n    } else if (String(value).indexOf(LEFT) >= 0) {\n      rulePairs[index + 1] = value.replace(LEFT, RIGHT);\n    } else if (String(value).indexOf(RIGHT) >= 0) {\n      rulePairs[index + 1] = value.replace(RIGHT, LEFT);\n    } else if (NAME_REPLACEMENTS[name]) {\n      rulePairs[index] = NAME_REPLACEMENTS[name];\n    } else if (VALUE_REPLACEMENTS[value]) {\n      rulePairs[index + 1] = VALUE_REPLACEMENTS[value];\n    } else {\n      switch (name) {\n        case 'margin':\n        case 'padding':\n          rulePairs[index + 1] = flipQuad(value);\n          break;\n        case 'box-shadow':\n          rulePairs[index + 1] = negateNum(value, 0);\n          break;\n      }\n    }\n  }\n}\n\n/**\n * Given a string value in a space delimited format (e.g. \"1 2 3 4\"), negates a particular value.\n */\nfunction negateNum(value: string, partIndex: number): string {\n  const parts = value.split(' ');\n  const numberVal = parseInt(parts[partIndex], 10);\n\n  parts[0] = parts[0].replace(String(numberVal), String(numberVal * -1));\n\n  return parts.join(' ');\n}\n\n/**\n * Given a string quad, flips the left and right values.\n */\nfunction flipQuad(value: string): string {\n  if (typeof value === 'string') {\n    const parts = value.split(' ');\n\n    if (parts.length === 4) {\n      return `${parts[0]} ${parts[3]} ${parts[2]} ${parts[1]}`;\n    }\n  }\n\n  return value;\n}\n"],"mappings":";AAEA,IAAMA,IAAI,GAAG,MAAM;AACnB,IAAMC,KAAK,GAAG,OAAO;AACrB,IAAMC,OAAO,GAAG,SAAS;AACzB,IAAMC,iBAAiB,IAAAC,EAAA,OACrBA,EAAA,CAACJ,IAAI,IAAGC,KAAK,EACbG,EAAA,CAACH,KAAK,IAAGD,IAAI,E,GACd;AACD,IAAMK,kBAAkB,GAA8B;EACpD,UAAU,EAAE,UAAU;EACtB,WAAW,EAAE,WAAW;EACxB,WAAW,EAAE;CACd;AAED;;;;AAIA,OAAM,SAAUC,WAAWA,CAACC,OAAsB,EAAEC,SAA8B,EAAEC,KAAa;EAC/F,IAAIF,OAAO,CAACG,GAAG,EAAE;IACf,IAAMC,MAAI,GAAGH,SAAS,CAACC,KAAK,CAAW;IAEvC,IAAI,CAACE,MAAI,EAAE;MACT;;IAGF,IAAMC,KAAK,GAAGJ,SAAS,CAACC,KAAK,GAAG,CAAC,CAAW;IAE5C,IAAI,OAAOG,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,OAAO,CAACX,OAAO,CAAC,IAAI,CAAC,EAAE;MAC5DM,SAAS,CAACC,KAAK,GAAG,CAAC,CAAC,GAAGG,KAAK,CAACE,OAAO,CAAC,4CAA4C,EAAE,EAAE,CAAC;KACvF,MAAM,IAAIH,MAAI,CAACE,OAAO,CAACb,IAAI,CAAC,IAAI,CAAC,EAAE;MAClCQ,SAAS,CAACC,KAAK,CAAC,GAAGE,MAAI,CAACG,OAAO,CAACd,IAAI,EAAEC,KAAK,CAAC;KAC7C,MAAM,IAAIU,MAAI,CAACE,OAAO,CAACZ,KAAK,CAAC,IAAI,CAAC,EAAE;MACnCO,SAAS,CAACC,KAAK,CAAC,GAAGE,MAAI,CAACG,OAAO,CAACb,KAAK,EAAED,IAAI,CAAC;KAC7C,MAAM,IAAIe,MAAM,CAACH,KAAK,CAAC,CAACC,OAAO,CAACb,IAAI,CAAC,IAAI,CAAC,EAAE;MAC3CQ,SAAS,CAACC,KAAK,GAAG,CAAC,CAAC,GAAGG,KAAK,CAACE,OAAO,CAACd,IAAI,EAAEC,KAAK,CAAC;KAClD,MAAM,IAAIc,MAAM,CAACH,KAAK,CAAC,CAACC,OAAO,CAACZ,KAAK,CAAC,IAAI,CAAC,EAAE;MAC5CO,SAAS,CAACC,KAAK,GAAG,CAAC,CAAC,GAAGG,KAAK,CAACE,OAAO,CAACb,KAAK,EAAED,IAAI,CAAC;KAClD,MAAM,IAAIG,iBAAiB,CAACQ,MAAI,CAAC,EAAE;MAClCH,SAAS,CAACC,KAAK,CAAC,GAAGN,iBAAiB,CAACQ,MAAI,CAAC;KAC3C,MAAM,IAAIN,kBAAkB,CAACO,KAAK,CAAC,EAAE;MACpCJ,SAAS,CAACC,KAAK,GAAG,CAAC,CAAC,GAAGJ,kBAAkB,CAACO,KAAK,CAAC;KACjD,MAAM;MACL,QAAQD,MAAI;QACV,KAAK,QAAQ;QACb,KAAK,SAAS;UACZH,SAAS,CAACC,KAAK,GAAG,CAAC,CAAC,GAAGO,QAAQ,CAACJ,KAAK,CAAC;UACtC;QACF,KAAK,YAAY;UACfJ,SAAS,CAACC,KAAK,GAAG,CAAC,CAAC,GAAGQ,SAAS,CAACL,KAAK,EAAE,CAAC,CAAC;UAC1C;;;;AAIV;AAEA;;;AAGA,SAASK,SAASA,CAACL,KAAa,EAAEM,SAAiB;EACjD,IAAMC,KAAK,GAAGP,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC;EAC9B,IAAMC,SAAS,GAAGC,QAAQ,CAACH,KAAK,CAACD,SAAS,CAAC,EAAE,EAAE,CAAC;EAEhDC,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,CAACL,OAAO,CAACC,MAAM,CAACM,SAAS,CAAC,EAAEN,MAAM,CAACM,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;EAEtE,OAAOF,KAAK,CAACI,IAAI,CAAC,GAAG,CAAC;AACxB;AAEA;;;AAGA,SAASP,QAAQA,CAACJ,KAAa;EAC7B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,IAAMO,KAAK,GAAGP,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC;IAE9B,IAAID,KAAK,CAACK,MAAM,KAAK,CAAC,EAAE;MACtB,OAAO,GAAAC,MAAA,CAAGN,KAAK,CAAC,CAAC,CAAC,OAAAM,MAAA,CAAIN,KAAK,CAAC,CAAC,CAAC,OAAAM,MAAA,CAAIN,KAAK,CAAC,CAAC,CAAC,OAAAM,MAAA,CAAIN,KAAK,CAAC,CAAC,CAAC,CAAE;;;EAI5D,OAAOP,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}