{"ast":null,"code":"var _a, _b;\nimport { __assign } from \"tslib\";\nimport { FontWeights, concatStyleSets, getFocusStyle, HighContrastSelector, getPlaceholderStyles, hiddenContentStyle, getInputFocusStyle, getHighContrastNoAdjustStyle } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nvar ComboBoxHeight = 32;\nvar ComboBoxLineHeight = 30;\nvar ComboBoxCaretDownWidth = 32;\nvar ComboBoxOptionHeight = 36;\nvar getDisabledStyles = memoizeFunction(function (theme) {\n  var _a;\n  var semanticColors = theme.semanticColors;\n  return {\n    backgroundColor: semanticColors.disabledBackground,\n    color: semanticColors.disabledText,\n    cursor: 'default',\n    selectors: (_a = {\n      ':after': {\n        borderColor: semanticColors.disabledBackground\n      }\n    }, _a[HighContrastSelector] = {\n      color: 'GrayText',\n      selectors: {\n        ':after': {\n          borderColor: 'GrayText'\n        }\n      }\n    }, _a)\n  };\n});\nvar listOptionHighContrastStyles = {\n  selectors: (_a = {}, _a[HighContrastSelector] = __assign({\n    backgroundColor: 'Highlight',\n    borderColor: 'Highlight',\n    color: 'HighlightText'\n  }, getHighContrastNoAdjustStyle()), _a)\n};\nvar inputHighContrastStyles = {\n  selectors: (_b = {}, _b[HighContrastSelector] = __assign({\n    color: 'WindowText',\n    backgroundColor: 'Window'\n  }, getHighContrastNoAdjustStyle()), _b)\n};\nexport var getOptionStyles = memoizeFunction(function (theme, customStylesForAllOptions, customOptionStylesForCurrentOption, isPending, isHidden, isSelected) {\n  var _a;\n  var palette = theme.palette,\n    semanticColors = theme.semanticColors;\n  var option = {\n    textHoveredColor: semanticColors.menuItemTextHovered,\n    textSelectedColor: palette.neutralDark,\n    textDisabledColor: semanticColors.disabledText,\n    backgroundHoveredColor: semanticColors.menuItemBackgroundHovered,\n    backgroundPressedColor: semanticColors.menuItemBackgroundPressed\n  };\n  var optionStyles = {\n    root: [theme.fonts.medium, {\n      backgroundColor: isPending ? option.backgroundHoveredColor : 'transparent',\n      boxSizing: 'border-box',\n      cursor: 'pointer',\n      display: isHidden ? 'none' : 'block',\n      width: '100%',\n      height: 'auto',\n      minHeight: ComboBoxOptionHeight,\n      lineHeight: '20px',\n      padding: '0 8px',\n      position: 'relative',\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderColor: 'transparent',\n      borderRadius: 0,\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      textAlign: 'left',\n      selectors: __assign(__assign((_a = {}, _a[HighContrastSelector] = {\n        border: 'none',\n        borderColor: 'Background'\n      }, _a), !isHidden && {\n        '&.ms-Checkbox': {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }), {\n        '&.ms-Button--command:hover:active': {\n          backgroundColor: option.backgroundPressedColor\n        },\n        '.ms-Checkbox-label': {\n          width: '100%'\n        }\n      })\n    }, isSelected ? [{\n      backgroundColor: 'transparent',\n      color: option.textSelectedColor,\n      selectors: {\n        ':hover': [{\n          backgroundColor: option.backgroundHoveredColor\n        }, listOptionHighContrastStyles]\n      }\n    }, getFocusStyle(theme, {\n      inset: -1,\n      isFocusedOnly: false\n    }), listOptionHighContrastStyles] : []],\n    rootHovered: {\n      backgroundColor: option.backgroundHoveredColor,\n      color: option.textHoveredColor\n    },\n    rootFocused: {\n      backgroundColor: option.backgroundHoveredColor\n    },\n    rootDisabled: {\n      color: option.textDisabledColor,\n      cursor: 'default'\n    },\n    optionText: {\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      minWidth: '0px',\n      maxWidth: '100%',\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      display: 'inline-block'\n    },\n    optionTextWrapper: {\n      maxWidth: '100%',\n      display: 'flex',\n      alignItems: 'center'\n    }\n  };\n  return concatStyleSets(optionStyles, customStylesForAllOptions, customOptionStylesForCurrentOption);\n});\nexport var getCaretDownButtonStyles = memoizeFunction(function (theme, customStyles) {\n  var _a, _b;\n  var semanticColors = theme.semanticColors,\n    fonts = theme.fonts;\n  var caret = {\n    buttonTextColor: semanticColors.bodySubtext,\n    buttonTextHoveredCheckedColor: semanticColors.buttonTextChecked,\n    buttonBackgroundHoveredColor: semanticColors.listItemBackgroundHovered,\n    buttonBackgroundCheckedColor: semanticColors.listItemBackgroundChecked,\n    buttonBackgroundCheckedHoveredColor: semanticColors.listItemBackgroundCheckedHovered\n  };\n  var buttonHighContrastStyles = {\n    selectors: (_a = {}, _a[HighContrastSelector] = __assign({\n      backgroundColor: 'Highlight',\n      borderColor: 'Highlight',\n      color: 'HighlightText'\n    }, getHighContrastNoAdjustStyle()), _a)\n  };\n  var styles = {\n    root: {\n      color: caret.buttonTextColor,\n      fontSize: fonts.small.fontSize,\n      position: 'absolute',\n      top: 0,\n      height: '100%',\n      lineHeight: ComboBoxLineHeight,\n      width: ComboBoxCaretDownWidth,\n      textAlign: 'center',\n      cursor: 'default',\n      selectors: (_b = {}, _b[HighContrastSelector] = __assign({\n        backgroundColor: 'ButtonFace',\n        borderColor: 'ButtonText',\n        color: 'ButtonText'\n      }, getHighContrastNoAdjustStyle()), _b)\n    },\n    icon: {\n      fontSize: fonts.small.fontSize\n    },\n    rootHovered: [{\n      backgroundColor: caret.buttonBackgroundHoveredColor,\n      color: caret.buttonTextHoveredCheckedColor,\n      cursor: 'pointer'\n    }, buttonHighContrastStyles],\n    rootPressed: [{\n      backgroundColor: caret.buttonBackgroundCheckedColor,\n      color: caret.buttonTextHoveredCheckedColor\n    }, buttonHighContrastStyles],\n    rootChecked: [{\n      backgroundColor: caret.buttonBackgroundCheckedColor,\n      color: caret.buttonTextHoveredCheckedColor\n    }, buttonHighContrastStyles],\n    rootCheckedHovered: [{\n      backgroundColor: caret.buttonBackgroundCheckedHoveredColor,\n      color: caret.buttonTextHoveredCheckedColor\n    }, buttonHighContrastStyles],\n    rootDisabled: [getDisabledStyles(theme), {\n      position: 'absolute'\n    }]\n  };\n  return concatStyleSets(styles, customStyles);\n});\nexport var getStyles = memoizeFunction(function (theme, customStyles, comboBoxOptionWidth) {\n  var _a, _b, _c, _d, _e, _f;\n  var semanticColors = theme.semanticColors,\n    fonts = theme.fonts,\n    effects = theme.effects;\n  var root = {\n    textColor: semanticColors.inputText,\n    borderColor: semanticColors.inputBorder,\n    borderHoveredColor: semanticColors.inputBorderHovered,\n    borderPressedColor: semanticColors.inputFocusBorderAlt,\n    borderFocusedColor: semanticColors.inputFocusBorderAlt,\n    backgroundColor: semanticColors.inputBackground,\n    erroredColor: semanticColors.errorText\n  };\n  var option = {\n    headerTextColor: semanticColors.menuHeader,\n    dividerBorderColor: semanticColors.bodyDivider\n  };\n  // placeholder style variables\n  var placeholderHighContrastStyles = {\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  };\n  var placeholderStyles = [{\n    color: semanticColors.inputPlaceholderText\n  }, placeholderHighContrastStyles];\n  var placeholderStylesHovered = [{\n    color: semanticColors.inputTextHovered\n  }, placeholderHighContrastStyles];\n  var disabledPlaceholderStyles = [{\n    color: semanticColors.disabledText\n  }, placeholderHighContrastStyles];\n  var ComboBoxRootHighContrastFocused = __assign(__assign({\n    color: 'HighlightText',\n    backgroundColor: 'Window'\n  }, getHighContrastNoAdjustStyle()), {\n    selectors: {\n      ':after': {\n        borderColor: 'Highlight'\n      }\n    }\n  });\n  var focusBorderStyles = getInputFocusStyle(root.borderPressedColor, effects.roundedCorner2, 'border', 0);\n  var styles = {\n    container: {},\n    label: {},\n    labelDisabled: {},\n    root: [theme.fonts.medium, {\n      boxShadow: 'none',\n      marginLeft: '0',\n      paddingRight: ComboBoxCaretDownWidth,\n      paddingLeft: 9,\n      color: root.textColor,\n      position: 'relative',\n      outline: '0',\n      userSelect: 'none',\n      backgroundColor: root.backgroundColor,\n      cursor: 'text',\n      display: 'block',\n      height: ComboBoxHeight,\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      boxSizing: 'border-box',\n      selectors: {\n        '.ms-Label': {\n          display: 'inline-block',\n          marginBottom: '8px'\n        },\n        '&.is-open': {\n          selectors: (_b = {}, _b[HighContrastSelector] = ComboBoxRootHighContrastFocused, _b)\n        },\n        // setting border using pseudo-element here in order to\n        // prevent chevron button to overlap ComboBox border under certain resolutions\n        ':after': {\n          pointerEvents: 'none',\n          content: \"''\",\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          bottom: 0,\n          right: 0,\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: root.borderColor,\n          borderRadius: effects.roundedCorner2\n        }\n      }\n    }],\n    rootHovered: {\n      selectors: (_c = {\n        ':after': {\n          borderColor: root.borderHoveredColor\n        },\n        '.ms-ComboBox-Input': [{\n          color: semanticColors.inputTextHovered\n        }, getPlaceholderStyles(placeholderStylesHovered), inputHighContrastStyles]\n      }, _c[HighContrastSelector] = __assign(__assign({\n        color: 'HighlightText',\n        backgroundColor: 'Window'\n      }, getHighContrastNoAdjustStyle()), {\n        selectors: {\n          ':after': {\n            borderColor: 'Highlight'\n          }\n        }\n      }), _c)\n    },\n    rootPressed: [{\n      position: 'relative',\n      selectors: (_d = {}, _d[HighContrastSelector] = ComboBoxRootHighContrastFocused, _d)\n    }],\n    rootFocused: [{\n      selectors: (_e = {\n        '.ms-ComboBox-Input': [{\n          color: semanticColors.inputTextHovered\n        }, inputHighContrastStyles]\n      }, _e[HighContrastSelector] = ComboBoxRootHighContrastFocused, _e)\n    }, focusBorderStyles],\n    rootDisabled: getDisabledStyles(theme),\n    rootError: {\n      selectors: {\n        ':after': {\n          borderColor: root.erroredColor\n        },\n        ':hover:after': {\n          borderColor: semanticColors.inputBorderHovered\n        }\n      }\n    },\n    rootDisallowFreeForm: {},\n    input: [getPlaceholderStyles(placeholderStyles), {\n      backgroundColor: root.backgroundColor,\n      color: root.textColor,\n      boxSizing: 'border-box',\n      width: '100%',\n      height: '100%',\n      borderStyle: 'none',\n      outline: 'none',\n      font: 'inherit',\n      textOverflow: 'ellipsis',\n      padding: '0',\n      selectors: {\n        '::-ms-clear': {\n          display: 'none'\n        }\n      }\n    }, inputHighContrastStyles],\n    inputDisabled: [getDisabledStyles(theme), getPlaceholderStyles(disabledPlaceholderStyles)],\n    errorMessage: [theme.fonts.small, {\n      color: root.erroredColor,\n      marginTop: '5px'\n    }],\n    callout: {\n      boxShadow: effects.elevation8\n    },\n    optionsContainerWrapper: {\n      width: comboBoxOptionWidth\n    },\n    optionsContainer: {\n      display: 'block'\n    },\n    screenReaderText: hiddenContentStyle,\n    header: [fonts.medium, {\n      fontWeight: FontWeights.semibold,\n      color: option.headerTextColor,\n      backgroundColor: 'none',\n      borderStyle: 'none',\n      height: ComboBoxOptionHeight,\n      lineHeight: ComboBoxOptionHeight,\n      cursor: 'default',\n      padding: '0 8px',\n      userSelect: 'none',\n      textAlign: 'left',\n      selectors: (_f = {}, _f[HighContrastSelector] = __assign({\n        color: 'GrayText'\n      }, getHighContrastNoAdjustStyle()), _f)\n    }],\n    divider: {\n      height: 1,\n      backgroundColor: option.dividerBorderColor\n    }\n  };\n  return concatStyleSets(styles, customStyles);\n});","map":{"version":3,"names":["FontWeights","concatStyleSets","getFocusStyle","HighContrastSelector","getPlaceholderStyles","hiddenContentStyle","getInputFocusStyle","getHighContrastNoAdjustStyle","memoizeFunction","ComboBoxHeight","ComboBoxLineHeight","ComboBoxCaretDownWidth","ComboBoxOptionHeight","getDisabledStyles","theme","semanticColors","backgroundColor","disabledBackground","color","disabledText","cursor","selectors","_a","borderColor","listOptionHighContrastStyles","__assign","inputHighContrastStyles","_b","getOptionStyles","customStylesForAllOptions","customOptionStylesForCurrentOption","isPending","isHidden","isSelected","palette","option","textHoveredColor","menuItemTextHovered","textSelectedColor","neutralDark","textDisabledColor","backgroundHoveredColor","menuItemBackgroundHovered","backgroundPressedColor","menuItemBackgroundPressed","optionStyles","root","fonts","medium","boxSizing","display","width","height","minHeight","lineHeight","padding","position","borderWidth","borderStyle","borderRadius","wordWrap","overflowWrap","textAlign","border","alignItems","inset","isFocusedOnly","rootHovered","rootFocused","rootDisabled","optionText","overflow","whiteSpace","textOverflow","minWidth","maxWidth","optionTextWrapper","getCaretDownButtonStyles","customStyles","caret","buttonTextColor","bodySubtext","buttonTextHoveredCheckedColor","buttonTextChecked","buttonBackgroundHoveredColor","listItemBackgroundHovered","buttonBackgroundCheckedColor","listItemBackgroundChecked","buttonBackgroundCheckedHoveredColor","listItemBackgroundCheckedHovered","buttonHighContrastStyles","styles","fontSize","small","top","icon","rootPressed","rootChecked","rootCheckedHovered","getStyles","comboBoxOptionWidth","effects","textColor","inputText","inputBorder","borderHoveredColor","inputBorderHovered","borderPressedColor","inputFocusBorderAlt","borderFocusedColor","inputBackground","erroredColor","errorText","headerTextColor","menuHeader","dividerBorderColor","bodyDivider","placeholderHighContrastStyles","placeholderStyles","inputPlaceholderText","placeholderStylesHovered","inputTextHovered","disabledPlaceholderStyles","ComboBoxRootHighContrastFocused","focusBorderStyles","roundedCorner2","container","label","labelDisabled","boxShadow","marginLeft","paddingRight","paddingLeft","outline","userSelect","marginBottom","pointerEvents","content","left","bottom","right","_c","_d","_e","rootError","rootDisallowFreeForm","input","font","inputDisabled","errorMessage","marginTop","callout","elevation8","optionsContainerWrapper","optionsContainer","screenReaderText","header","fontWeight","semibold","_f","divider"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/ComboBox/ComboBox.styles.ts"],"sourcesContent":["import {\n  FontWeights,\n  concatStyleSets,\n  getFocusStyle,\n  HighContrastSelector,\n  getPlaceholderStyles,\n  hiddenContentStyle,\n  getInputFocusStyle,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nimport type { IRawStyle, ITheme, IStyle } from '../../Styling';\nimport type { IComboBoxOptionStyles, IComboBoxStyles } from './ComboBox.types';\nimport type { IButtonStyles } from '../../Button';\n\nconst ComboBoxHeight = 32;\nconst ComboBoxLineHeight = 30;\nconst ComboBoxCaretDownWidth = 32;\nconst ComboBoxOptionHeight = 36;\n\nconst getDisabledStyles = memoizeFunction((theme: ITheme): IRawStyle => {\n  const { semanticColors } = theme;\n\n  return {\n    backgroundColor: semanticColors.disabledBackground,\n    color: semanticColors.disabledText,\n    cursor: 'default',\n    selectors: {\n      ':after': {\n        borderColor: semanticColors.disabledBackground,\n      },\n      [HighContrastSelector]: {\n        color: 'GrayText',\n        selectors: {\n          ':after': {\n            borderColor: 'GrayText',\n          },\n        },\n      },\n    },\n  };\n});\n\nconst listOptionHighContrastStyles: IRawStyle = {\n  selectors: {\n    [HighContrastSelector]: {\n      backgroundColor: 'Highlight',\n      borderColor: 'Highlight',\n      color: 'HighlightText',\n      ...getHighContrastNoAdjustStyle(),\n    },\n  },\n};\n\nconst inputHighContrastStyles: IRawStyle = {\n  selectors: {\n    [HighContrastSelector]: {\n      color: 'WindowText',\n      backgroundColor: 'Window',\n      ...getHighContrastNoAdjustStyle(),\n    },\n  },\n};\n\nexport const getOptionStyles = memoizeFunction(\n  (\n    theme: ITheme,\n    customStylesForAllOptions?: Partial<IComboBoxOptionStyles>,\n    customOptionStylesForCurrentOption?: Partial<IComboBoxOptionStyles>,\n    isPending?: boolean,\n    isHidden?: boolean,\n    isSelected?: boolean,\n  ): Partial<IComboBoxOptionStyles> => {\n    const { palette, semanticColors } = theme;\n\n    const option = {\n      textHoveredColor: semanticColors.menuItemTextHovered,\n      textSelectedColor: palette.neutralDark,\n      textDisabledColor: semanticColors.disabledText,\n      backgroundHoveredColor: semanticColors.menuItemBackgroundHovered,\n      backgroundPressedColor: semanticColors.menuItemBackgroundPressed,\n    };\n\n    const optionStyles: IComboBoxOptionStyles = {\n      root: [\n        theme.fonts.medium,\n        {\n          backgroundColor: isPending ? option.backgroundHoveredColor : 'transparent',\n          boxSizing: 'border-box',\n          cursor: 'pointer',\n          display: isHidden ? 'none' : 'block',\n          width: '100%',\n          height: 'auto',\n          minHeight: ComboBoxOptionHeight,\n          lineHeight: '20px',\n          padding: '0 8px',\n          position: 'relative',\n          borderWidth: '1px',\n          borderStyle: 'solid',\n          borderColor: 'transparent',\n          borderRadius: 0,\n          wordWrap: 'break-word',\n          overflowWrap: 'break-word',\n          textAlign: 'left',\n          selectors: {\n            [HighContrastSelector]: {\n              border: 'none',\n              borderColor: 'Background',\n            },\n            ...(!isHidden && {\n              '&.ms-Checkbox': {\n                display: 'flex',\n                alignItems: 'center',\n              },\n            }),\n            '&.ms-Button--command:hover:active': {\n              backgroundColor: option.backgroundPressedColor,\n            },\n            '.ms-Checkbox-label': {\n              width: '100%',\n            },\n          },\n        },\n        isSelected\n          ? [\n              {\n                backgroundColor: 'transparent',\n                color: option.textSelectedColor,\n                selectors: {\n                  ':hover': [\n                    {\n                      backgroundColor: option.backgroundHoveredColor,\n                    },\n                    listOptionHighContrastStyles,\n                  ],\n                },\n              },\n              getFocusStyle(theme, { inset: -1, isFocusedOnly: false }),\n              listOptionHighContrastStyles,\n            ]\n          : [],\n      ],\n      rootHovered: {\n        backgroundColor: option.backgroundHoveredColor,\n        color: option.textHoveredColor,\n      },\n      rootFocused: {\n        backgroundColor: option.backgroundHoveredColor,\n      },\n      rootDisabled: {\n        color: option.textDisabledColor,\n        cursor: 'default',\n      },\n      optionText: {\n        overflow: 'hidden',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        minWidth: '0px',\n        maxWidth: '100%',\n        wordWrap: 'break-word',\n        overflowWrap: 'break-word',\n        display: 'inline-block',\n      },\n      optionTextWrapper: {\n        maxWidth: '100%',\n        display: 'flex',\n        alignItems: 'center',\n      },\n    };\n\n    return concatStyleSets(optionStyles, customStylesForAllOptions, customOptionStylesForCurrentOption);\n  },\n);\n\nexport const getCaretDownButtonStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: Partial<IButtonStyles>): IButtonStyles => {\n    const { semanticColors, fonts } = theme;\n\n    const caret = {\n      buttonTextColor: semanticColors.bodySubtext,\n      buttonTextHoveredCheckedColor: semanticColors.buttonTextChecked,\n      buttonBackgroundHoveredColor: semanticColors.listItemBackgroundHovered,\n      buttonBackgroundCheckedColor: semanticColors.listItemBackgroundChecked,\n      buttonBackgroundCheckedHoveredColor: semanticColors.listItemBackgroundCheckedHovered,\n    };\n\n    const buttonHighContrastStyles: IStyle = {\n      selectors: {\n        [HighContrastSelector]: {\n          backgroundColor: 'Highlight',\n          borderColor: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    };\n\n    const styles: IButtonStyles = {\n      root: {\n        color: caret.buttonTextColor,\n        fontSize: fonts.small.fontSize,\n        position: 'absolute',\n        top: 0,\n        height: '100%',\n        lineHeight: ComboBoxLineHeight,\n        width: ComboBoxCaretDownWidth,\n        textAlign: 'center',\n        cursor: 'default',\n        selectors: {\n          [HighContrastSelector]: {\n            backgroundColor: 'ButtonFace',\n            borderColor: 'ButtonText',\n            color: 'ButtonText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      icon: {\n        fontSize: fonts.small.fontSize,\n      },\n      rootHovered: [\n        {\n          backgroundColor: caret.buttonBackgroundHoveredColor,\n          color: caret.buttonTextHoveredCheckedColor,\n          cursor: 'pointer',\n        },\n        buttonHighContrastStyles,\n      ],\n      rootPressed: [\n        {\n          backgroundColor: caret.buttonBackgroundCheckedColor,\n          color: caret.buttonTextHoveredCheckedColor,\n        },\n        buttonHighContrastStyles,\n      ],\n      rootChecked: [\n        {\n          backgroundColor: caret.buttonBackgroundCheckedColor,\n          color: caret.buttonTextHoveredCheckedColor,\n        },\n        buttonHighContrastStyles,\n      ],\n      rootCheckedHovered: [\n        {\n          backgroundColor: caret.buttonBackgroundCheckedHoveredColor,\n          color: caret.buttonTextHoveredCheckedColor,\n        },\n        buttonHighContrastStyles,\n      ],\n      rootDisabled: [\n        getDisabledStyles(theme),\n        {\n          position: 'absolute',\n        },\n      ],\n    };\n    return concatStyleSets(styles, customStyles);\n  },\n);\n\nexport const getStyles = memoizeFunction(\n  (theme: ITheme, customStyles?: Partial<IComboBoxStyles>, comboBoxOptionWidth?: string): Partial<IComboBoxStyles> => {\n    const { semanticColors, fonts, effects } = theme;\n\n    const root = {\n      textColor: semanticColors.inputText,\n      borderColor: semanticColors.inputBorder,\n      borderHoveredColor: semanticColors.inputBorderHovered,\n      borderPressedColor: semanticColors.inputFocusBorderAlt,\n      borderFocusedColor: semanticColors.inputFocusBorderAlt,\n      backgroundColor: semanticColors.inputBackground,\n      erroredColor: semanticColors.errorText,\n    };\n\n    const option = {\n      headerTextColor: semanticColors.menuHeader,\n      dividerBorderColor: semanticColors.bodyDivider,\n    };\n\n    // placeholder style variables\n    const placeholderHighContrastStyles: IRawStyle = {\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    };\n    const placeholderStyles: IStyle = [\n      {\n        color: semanticColors.inputPlaceholderText,\n      },\n      placeholderHighContrastStyles,\n    ];\n    const placeholderStylesHovered: IStyle = [\n      {\n        color: semanticColors.inputTextHovered,\n      },\n      placeholderHighContrastStyles,\n    ];\n    const disabledPlaceholderStyles: IStyle = [\n      {\n        color: semanticColors.disabledText,\n      },\n      placeholderHighContrastStyles,\n    ];\n\n    const ComboBoxRootHighContrastFocused = {\n      color: 'HighlightText',\n      backgroundColor: 'Window',\n      ...getHighContrastNoAdjustStyle(),\n      selectors: {\n        ':after': {\n          borderColor: 'Highlight',\n        },\n      },\n    };\n\n    const focusBorderStyles: IStyle = getInputFocusStyle(root.borderPressedColor, effects.roundedCorner2, 'border', 0);\n\n    const styles: IComboBoxStyles = {\n      container: {},\n      label: {},\n      labelDisabled: {},\n      root: [\n        theme.fonts.medium,\n        {\n          boxShadow: 'none',\n          marginLeft: '0',\n          paddingRight: ComboBoxCaretDownWidth,\n          paddingLeft: 9,\n          color: root.textColor,\n          position: 'relative',\n          outline: '0',\n          userSelect: 'none',\n          backgroundColor: root.backgroundColor,\n          cursor: 'text',\n          display: 'block',\n          height: ComboBoxHeight,\n          whiteSpace: 'nowrap',\n          textOverflow: 'ellipsis',\n          boxSizing: 'border-box', // Border-box matches Dropdown and TextField\n          selectors: {\n            '.ms-Label': {\n              display: 'inline-block',\n              marginBottom: '8px',\n            },\n            '&.is-open': {\n              selectors: {\n                [HighContrastSelector]: ComboBoxRootHighContrastFocused,\n              },\n            },\n            // setting border using pseudo-element here in order to\n            // prevent chevron button to overlap ComboBox border under certain resolutions\n            ':after': {\n              pointerEvents: 'none',\n              content: \"''\",\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              bottom: 0,\n              right: 0,\n              borderWidth: '1px',\n              borderStyle: 'solid',\n              borderColor: root.borderColor,\n              borderRadius: effects.roundedCorner2,\n            },\n          },\n        },\n      ],\n\n      rootHovered: {\n        selectors: {\n          ':after': {\n            borderColor: root.borderHoveredColor,\n          },\n          '.ms-ComboBox-Input': [\n            {\n              color: semanticColors.inputTextHovered,\n            },\n            getPlaceholderStyles(placeholderStylesHovered),\n            inputHighContrastStyles,\n          ],\n          [HighContrastSelector]: {\n            color: 'HighlightText',\n            backgroundColor: 'Window',\n            ...getHighContrastNoAdjustStyle(),\n            selectors: {\n              ':after': {\n                borderColor: 'Highlight',\n              },\n            },\n          },\n        },\n      },\n\n      rootPressed: [\n        {\n          position: 'relative',\n          selectors: {\n            [HighContrastSelector]: ComboBoxRootHighContrastFocused,\n          },\n        },\n      ],\n\n      rootFocused: [\n        {\n          selectors: {\n            '.ms-ComboBox-Input': [\n              {\n                color: semanticColors.inputTextHovered,\n              },\n              inputHighContrastStyles,\n            ],\n            [HighContrastSelector]: ComboBoxRootHighContrastFocused,\n          },\n        },\n        focusBorderStyles,\n      ],\n\n      rootDisabled: getDisabledStyles(theme),\n\n      rootError: {\n        selectors: {\n          ':after': {\n            borderColor: root.erroredColor,\n          },\n          ':hover:after': {\n            borderColor: semanticColors.inputBorderHovered,\n          },\n        },\n      },\n\n      rootDisallowFreeForm: {},\n\n      input: [\n        getPlaceholderStyles(placeholderStyles),\n        {\n          backgroundColor: root.backgroundColor,\n          color: root.textColor,\n          boxSizing: 'border-box',\n          width: '100%',\n          height: '100%',\n          borderStyle: 'none',\n          outline: 'none',\n          font: 'inherit',\n          textOverflow: 'ellipsis',\n          padding: '0',\n          selectors: {\n            '::-ms-clear': {\n              display: 'none',\n            },\n          },\n        },\n        inputHighContrastStyles,\n      ],\n\n      inputDisabled: [getDisabledStyles(theme), getPlaceholderStyles(disabledPlaceholderStyles)],\n      errorMessage: [\n        theme.fonts.small,\n        {\n          color: root.erroredColor,\n          marginTop: '5px',\n        },\n      ],\n\n      callout: {\n        boxShadow: effects.elevation8,\n      },\n\n      optionsContainerWrapper: {\n        width: comboBoxOptionWidth,\n      },\n\n      optionsContainer: {\n        display: 'block',\n      },\n      screenReaderText: hiddenContentStyle,\n\n      header: [\n        fonts.medium,\n        {\n          fontWeight: FontWeights.semibold,\n          color: option.headerTextColor,\n          backgroundColor: 'none',\n          borderStyle: 'none',\n          height: ComboBoxOptionHeight,\n          lineHeight: ComboBoxOptionHeight,\n          cursor: 'default',\n          padding: '0 8px',\n          userSelect: 'none',\n          textAlign: 'left',\n          selectors: {\n            [HighContrastSelector]: {\n              color: 'GrayText',\n              ...getHighContrastNoAdjustStyle(),\n            },\n          },\n        },\n      ],\n\n      divider: {\n        height: 1,\n        backgroundColor: option.dividerBorderColor,\n      },\n    };\n\n    return concatStyleSets(styles, customStyles);\n  },\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}