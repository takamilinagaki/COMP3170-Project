{"ast":null,"code":"// Technically this should be shades and tints, but for simplicity we'll call everything a shade.\n/*\n * This utility module is used with theming. Given a color to shade, whether the theme is inverted\n * (i.e. is a dark color), and the desired shade enum, this will return an appropriate shade of that color.\n */\nimport { MAX_COLOR_RGB } from './consts';\nimport { assign } from '../../Utilities';\nimport { clamp } from './clamp';\nimport { getColorFromRGBA } from './getColorFromRGBA';\nimport { hsv2hsl } from './hsv2hsl';\nimport { hsv2rgb } from './hsv2rgb';\n// Soften: to get closer to the background color's luminance\n// (softening with a white background would be lightening, with black it'd be darkening)\n// Strongen: opposite of soften\n// Luminance multiplier constants for generating shades of a given color\nvar WhiteShadeTableBG = [0.027, 0.043, 0.082, 0.145, 0.184, 0.216, 0.349, 0.537]; // white bg\nvar BlackTintTableBG = [0.537, 0.45, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043]; // black bg\nvar WhiteShadeTable = [0.537, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043, 0.027]; // white fg\nvar BlackTintTable = [0.537, 0.45, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043]; // black fg\nvar LumTintTable = [0.88, 0.77, 0.66, 0.55, 0.44, 0.33, 0.22, 0.11]; // light (strongen all)\nvar LumShadeTable = [0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88]; // dark (soften all)\nvar ColorTintTable = [0.96, 0.84, 0.7, 0.4, 0.12]; // default soften\nvar ColorShadeTable = [0.1, 0.24, 0.44]; // default strongen\n// If the given shade's luminance is below/above these values, we'll swap to using the White/Black tables above\nvar LowLuminanceThreshold = 0.2;\nvar HighLuminanceThreshold = 0.8;\n/** Shades of a given color, from softest to strongest. */\nexport var Shade;\n(function (Shade) {\n  Shade[Shade[\"Unshaded\"] = 0] = \"Unshaded\";\n  Shade[Shade[\"Shade1\"] = 1] = \"Shade1\";\n  Shade[Shade[\"Shade2\"] = 2] = \"Shade2\";\n  Shade[Shade[\"Shade3\"] = 3] = \"Shade3\";\n  Shade[Shade[\"Shade4\"] = 4] = \"Shade4\";\n  Shade[Shade[\"Shade5\"] = 5] = \"Shade5\";\n  Shade[Shade[\"Shade6\"] = 6] = \"Shade6\";\n  Shade[Shade[\"Shade7\"] = 7] = \"Shade7\";\n  Shade[Shade[\"Shade8\"] = 8] = \"Shade8\";\n  // remember to update isValidShade()!\n})(Shade || (Shade = {}));\n/**\n * Returns true if the argument is a valid Shade value\n * @param shade - The Shade value to validate.\n */\nexport function isValidShade(shade) {\n  return typeof shade === 'number' && shade >= Shade.Unshaded && shade <= Shade.Shade8;\n}\nfunction _isBlack(color) {\n  return color.r === 0 && color.g === 0 && color.b === 0;\n}\nfunction _isWhite(color) {\n  return color.r === MAX_COLOR_RGB && color.g === MAX_COLOR_RGB && color.b === MAX_COLOR_RGB;\n}\nfunction _darken(hsv, factor) {\n  return {\n    h: hsv.h,\n    s: hsv.s,\n    v: clamp(hsv.v - hsv.v * factor, 100, 0)\n  };\n}\nfunction _lighten(hsv, factor) {\n  return {\n    h: hsv.h,\n    s: clamp(hsv.s - hsv.s * factor, 100, 0),\n    v: clamp(hsv.v + (100 - hsv.v) * factor, 100, 0)\n  };\n}\nexport function isDark(color) {\n  return hsv2hsl(color.h, color.s, color.v).l < 50;\n}\n/**\n * Given a color and a shade specification, generates the requested shade of the color.\n * Logic:\n * if white\n *  darken via tables defined above\n * if black\n *  lighten\n * if light\n *  strongen\n * if dark\n *  soften\n * else default\n *  soften or strongen depending on shade#\n * @param color - The base color whose shade is to be computed\n * @param shade - The shade of the base color to compute\n * @param isInverted - Default false. Whether the given theme is inverted (reverse strongen/soften logic)\n */\nexport function getShade(color, shade, isInverted) {\n  if (isInverted === void 0) {\n    isInverted = false;\n  }\n  if (!color) {\n    return null;\n  }\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\n    return color;\n  }\n  var hsl = hsv2hsl(color.h, color.s, color.v);\n  var hsv = {\n    h: color.h,\n    s: color.s,\n    v: color.v\n  };\n  var tableIndex = shade - 1;\n  var _soften = _lighten;\n  var _strongen = _darken;\n  if (isInverted) {\n    _soften = _darken;\n    _strongen = _lighten;\n  }\n  if (_isWhite(color)) {\n    // white\n    hsv = _darken(hsv, WhiteShadeTable[tableIndex]);\n  } else if (_isBlack(color)) {\n    // black\n    hsv = _lighten(hsv, BlackTintTable[tableIndex]);\n  } else if (hsl.l / 100 > HighLuminanceThreshold) {\n    // light\n    hsv = _strongen(hsv, LumShadeTable[tableIndex]);\n  } else if (hsl.l / 100 < LowLuminanceThreshold) {\n    // dark\n    hsv = _soften(hsv, LumTintTable[tableIndex]);\n  } else {\n    // default\n    if (tableIndex < ColorTintTable.length) {\n      hsv = _soften(hsv, ColorTintTable[tableIndex]);\n    } else {\n      hsv = _strongen(hsv, ColorShadeTable[tableIndex - ColorTintTable.length]);\n    }\n  }\n  return getColorFromRGBA(assign(hsv2rgb(hsv.h, hsv.s, hsv.v), {\n    a: color.a\n  }));\n}\n// Background shades/tints are generated differently. The provided color will be guaranteed\n//   to be the darkest or lightest one. If it is <50% luminance, it will always be the darkest,\n//   otherwise it will always be the lightest.\nexport function getBackgroundShade(color, shade, isInverted) {\n  if (isInverted === void 0) {\n    isInverted = false;\n  }\n  if (!color) {\n    return null;\n  }\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\n    return color;\n  }\n  var hsv = {\n    h: color.h,\n    s: color.s,\n    v: color.v\n  };\n  var tableIndex = shade - 1;\n  if (!isInverted) {\n    // lightish\n    hsv = _darken(hsv, WhiteShadeTableBG[tableIndex]);\n  } else {\n    // default: if (hsl.l / 100 < .5) { // darkish\n    hsv = _lighten(hsv, BlackTintTableBG[BlackTintTable.length - 1 - tableIndex]);\n  }\n  return getColorFromRGBA(assign(hsv2rgb(hsv.h, hsv.s, hsv.v), {\n    a: color.a\n  }));\n}\n/* Calculates the contrast ratio between two colors. Used for verifying\n * color pairs meet minimum accessibility requirements.\n * See: https://www.w3.org/TR/WCAG20/ section 1.4.3\n */\nexport function getContrastRatio(color1, color2) {\n  // Formula defined by: http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html#contrast-ratiodef\n  // relative luminance: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n  /* calculate the intermediate value needed to calculating relative luminance */\n  function _getThing(x) {\n    if (x <= 0.03928) {\n      return x / 12.92;\n    } else {\n      return Math.pow((x + 0.055) / 1.055, 2.4);\n    }\n  }\n  var r1 = _getThing(color1.r / MAX_COLOR_RGB);\n  var g1 = _getThing(color1.g / MAX_COLOR_RGB);\n  var b1 = _getThing(color1.b / MAX_COLOR_RGB);\n  var L1 = 0.2126 * r1 + 0.7152 * g1 + 0.0722 * b1; // relative luminance of first color\n  L1 += 0.05;\n  var r2 = _getThing(color2.r / MAX_COLOR_RGB);\n  var g2 = _getThing(color2.g / MAX_COLOR_RGB);\n  var b2 = _getThing(color2.b / MAX_COLOR_RGB);\n  var L2 = 0.2126 * r2 + 0.7152 * g2 + 0.0722 * b2; // relative luminance of second color\n  L2 += 0.05;\n  // return the lighter color divided by darker\n  return L1 / L2 > 1 ? L1 / L2 : L2 / L1;\n}","map":{"version":3,"names":["MAX_COLOR_RGB","assign","clamp","getColorFromRGBA","hsv2hsl","hsv2rgb","WhiteShadeTableBG","BlackTintTableBG","WhiteShadeTable","BlackTintTable","LumTintTable","LumShadeTable","ColorTintTable","ColorShadeTable","LowLuminanceThreshold","HighLuminanceThreshold","Shade","isValidShade","shade","Unshaded","Shade8","_isBlack","color","r","g","b","_isWhite","_darken","hsv","factor","h","s","v","_lighten","isDark","l","getShade","isInverted","hsl","tableIndex","_soften","_strongen","length","a","getBackgroundShade","getContrastRatio","color1","color2","_getThing","x","Math","pow","r1","g1","b1","L1","r2","g2","b2","L2"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/color/shades.ts"],"sourcesContent":["// Technically this should be shades and tints, but for simplicity we'll call everything a shade.\n/*\n * This utility module is used with theming. Given a color to shade, whether the theme is inverted\n * (i.e. is a dark color), and the desired shade enum, this will return an appropriate shade of that color.\n */\nimport { MAX_COLOR_RGB } from './consts';\nimport { assign } from '../../Utilities';\nimport { clamp } from './clamp';\nimport { getColorFromRGBA } from './getColorFromRGBA';\nimport { hsv2hsl } from './hsv2hsl';\nimport { hsv2rgb } from './hsv2rgb';\nimport type { IHSV, IColor } from './interfaces';\n\n// Soften: to get closer to the background color's luminance\n// (softening with a white background would be lightening, with black it'd be darkening)\n// Strongen: opposite of soften\n\n// Luminance multiplier constants for generating shades of a given color\nconst WhiteShadeTableBG = [0.027, 0.043, 0.082, 0.145, 0.184, 0.216, 0.349, 0.537]; // white bg\nconst BlackTintTableBG = [0.537, 0.45, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043]; // black bg\nconst WhiteShadeTable = [0.537, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043, 0.027]; // white fg\nconst BlackTintTable = [0.537, 0.45, 0.349, 0.216, 0.184, 0.145, 0.082, 0.043]; // black fg\nconst LumTintTable = [0.88, 0.77, 0.66, 0.55, 0.44, 0.33, 0.22, 0.11]; // light (strongen all)\nconst LumShadeTable = [0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88]; // dark (soften all)\nconst ColorTintTable = [0.96, 0.84, 0.7, 0.4, 0.12]; // default soften\nconst ColorShadeTable = [0.1, 0.24, 0.44]; // default strongen\n\n// If the given shade's luminance is below/above these values, we'll swap to using the White/Black tables above\nconst LowLuminanceThreshold = 0.2;\nconst HighLuminanceThreshold = 0.8;\n\n/** Shades of a given color, from softest to strongest. */\nexport enum Shade {\n  Unshaded = 0,\n  Shade1 = 1,\n  Shade2 = 2,\n  Shade3 = 3,\n  Shade4 = 4,\n  Shade5 = 5,\n  Shade6 = 6,\n  Shade7 = 7,\n  Shade8 = 8,\n  // remember to update isValidShade()!\n}\n\n/**\n * Returns true if the argument is a valid Shade value\n * @param shade - The Shade value to validate.\n */\nexport function isValidShade(shade?: Shade): boolean {\n  return typeof shade === 'number' && shade >= Shade.Unshaded && shade <= Shade.Shade8;\n}\n\nfunction _isBlack(color: IColor): boolean {\n  return color.r === 0 && color.g === 0 && color.b === 0;\n}\n\nfunction _isWhite(color: IColor): boolean {\n  return color.r === MAX_COLOR_RGB && color.g === MAX_COLOR_RGB && color.b === MAX_COLOR_RGB;\n}\n\nfunction _darken(hsv: IHSV, factor: number): IHSV {\n  return {\n    h: hsv.h,\n    s: hsv.s,\n    v: clamp(hsv.v - hsv.v * factor, 100, 0),\n  };\n}\n\nfunction _lighten(hsv: IHSV, factor: number): IHSV {\n  return {\n    h: hsv.h,\n    s: clamp(hsv.s - hsv.s * factor, 100, 0),\n    v: clamp(hsv.v + (100 - hsv.v) * factor, 100, 0),\n  };\n}\n\nexport function isDark(color: IColor): boolean {\n  return hsv2hsl(color.h, color.s, color.v).l < 50;\n}\n\n/**\n * Given a color and a shade specification, generates the requested shade of the color.\n * Logic:\n * if white\n *  darken via tables defined above\n * if black\n *  lighten\n * if light\n *  strongen\n * if dark\n *  soften\n * else default\n *  soften or strongen depending on shade#\n * @param color - The base color whose shade is to be computed\n * @param shade - The shade of the base color to compute\n * @param isInverted - Default false. Whether the given theme is inverted (reverse strongen/soften logic)\n */\nexport function getShade(color: IColor, shade: Shade, isInverted: boolean = false): IColor | null {\n  if (!color) {\n    return null;\n  }\n\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\n    return color;\n  }\n\n  const hsl = hsv2hsl(color.h, color.s, color.v);\n  let hsv = { h: color.h, s: color.s, v: color.v };\n  const tableIndex = shade - 1;\n  let _soften = _lighten;\n  let _strongen = _darken;\n  if (isInverted) {\n    _soften = _darken;\n    _strongen = _lighten;\n  }\n  if (_isWhite(color)) {\n    // white\n    hsv = _darken(hsv, WhiteShadeTable[tableIndex]);\n  } else if (_isBlack(color)) {\n    // black\n    hsv = _lighten(hsv, BlackTintTable[tableIndex]);\n  } else if (hsl.l / 100 > HighLuminanceThreshold) {\n    // light\n    hsv = _strongen(hsv, LumShadeTable[tableIndex]);\n  } else if (hsl.l / 100 < LowLuminanceThreshold) {\n    // dark\n    hsv = _soften(hsv, LumTintTable[tableIndex]);\n  } else {\n    // default\n    if (tableIndex < ColorTintTable.length) {\n      hsv = _soften(hsv, ColorTintTable[tableIndex]);\n    } else {\n      hsv = _strongen(hsv, ColorShadeTable[tableIndex - ColorTintTable.length]);\n    }\n  }\n\n  return getColorFromRGBA(assign(hsv2rgb(hsv.h, hsv.s, hsv.v), { a: color.a }));\n}\n\n// Background shades/tints are generated differently. The provided color will be guaranteed\n//   to be the darkest or lightest one. If it is <50% luminance, it will always be the darkest,\n//   otherwise it will always be the lightest.\nexport function getBackgroundShade(color: IColor, shade: Shade, isInverted: boolean = false): IColor | null {\n  if (!color) {\n    return null;\n  }\n\n  if (shade === Shade.Unshaded || !isValidShade(shade)) {\n    return color;\n  }\n\n  let hsv = { h: color.h, s: color.s, v: color.v };\n  const tableIndex = shade - 1;\n  if (!isInverted) {\n    // lightish\n    hsv = _darken(hsv, WhiteShadeTableBG[tableIndex]);\n  } else {\n    // default: if (hsl.l / 100 < .5) { // darkish\n    hsv = _lighten(hsv, BlackTintTableBG[BlackTintTable.length - 1 - tableIndex]);\n  }\n\n  return getColorFromRGBA(assign(hsv2rgb(hsv.h, hsv.s, hsv.v), { a: color.a }));\n}\n\n/* Calculates the contrast ratio between two colors. Used for verifying\n * color pairs meet minimum accessibility requirements.\n * See: https://www.w3.org/TR/WCAG20/ section 1.4.3\n */\nexport function getContrastRatio(color1: IColor, color2: IColor): number {\n  // Formula defined by: http://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html#contrast-ratiodef\n  // relative luminance: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n\n  /* calculate the intermediate value needed to calculating relative luminance */\n  function _getThing(x: number): number {\n    if (x <= 0.03928) {\n      return x / 12.92;\n    } else {\n      return Math.pow((x + 0.055) / 1.055, 2.4);\n    }\n  }\n\n  const r1 = _getThing(color1.r / MAX_COLOR_RGB);\n  const g1 = _getThing(color1.g / MAX_COLOR_RGB);\n  const b1 = _getThing(color1.b / MAX_COLOR_RGB);\n  let L1 = 0.2126 * r1 + 0.7152 * g1 + 0.0722 * b1; // relative luminance of first color\n  L1 += 0.05;\n\n  const r2 = _getThing(color2.r / MAX_COLOR_RGB);\n  const g2 = _getThing(color2.g / MAX_COLOR_RGB);\n  const b2 = _getThing(color2.b / MAX_COLOR_RGB);\n  let L2 = 0.2126 * r2 + 0.7152 * g2 + 0.0722 * b2; // relative luminance of second color\n  L2 += 0.05;\n\n  // return the lighter color divided by darker\n  return L1 / L2 > 1 ? L1 / L2 : L2 / L1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}