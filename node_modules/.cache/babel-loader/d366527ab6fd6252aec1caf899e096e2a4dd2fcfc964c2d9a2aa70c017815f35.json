{"ast":null,"code":"import { getDocument } from '@fluentui/utilities';\nimport * as React from 'react';\nimport { useWindow } from '@fluentui/react-window-provider';\n/**\n * Hook to calculate and cache the target element specified by the given target attribute,\n * as well as the target element's (or host element's) parent window\n * @param target- Target selector passed to the component as a property, describing the element that\n * the callout should target\n * @param hostElement- The callout's host element, used for determining the parent window.\n */\nexport function useTarget(target, hostElement) {\n  var previousTargetProp = React.useRef();\n  var targetRef = React.useRef(null);\n  /**\n   * Stores an instance of Window, used to check\n   * for server side rendering and if focus was lost.\n   */\n  var targetWindow = useWindow();\n  // If the target element changed, find the new one. If we are tracking\n  // target with class name, always find element because we do not know if\n  // fabric has rendered a new element and disposed the old element.\n  if (!target || target !== previousTargetProp.current || typeof target === 'string') {\n    var currentElement = hostElement === null || hostElement === void 0 ? void 0 : hostElement.current;\n    if (target) {\n      if (typeof target === 'string') {\n        var currentDoc = getDocument(currentElement);\n        targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;\n      } else if ('stopPropagation' in target) {\n        targetRef.current = target;\n      } else if ('getBoundingClientRect' in target) {\n        targetRef.current = target;\n      } else if ('current' in target) {\n        targetRef.current = target.current;\n      } else {\n        targetRef.current = target;\n      }\n    }\n    previousTargetProp.current = target;\n  }\n  return [targetRef, targetWindow];\n}","map":{"version":3,"names":["getDocument","React","useWindow","useTarget","target","hostElement","previousTargetProp","useRef","targetRef","targetWindow","current","currentElement","currentDoc","querySelector"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react-hooks/src/useTarget.ts"],"sourcesContent":["import { getDocument, Rectangle } from '@fluentui/utilities';\nimport * as React from 'react';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport type { Point } from '@fluentui/utilities';\n\nexport type Target = Element | string | MouseEvent | Point | Rectangle | null | React.RefObject<Element>;\n\n/**\n * Hook to calculate and cache the target element specified by the given target attribute,\n * as well as the target element's (or host element's) parent window\n * @param target- Target selector passed to the component as a property, describing the element that\n * the callout should target\n * @param hostElement- The callout's host element, used for determining the parent window.\n */\nexport function useTarget<TElement extends HTMLElement = HTMLElement>(\n  target: Target | undefined,\n  hostElement?: React.RefObject<TElement | null>,\n): Readonly<[React.RefObject<Element | MouseEvent | Point | Rectangle | null>, Window | undefined]> {\n  const previousTargetProp = React.useRef<\n    Element | string | MouseEvent | Point | Rectangle | React.RefObject<Element> | null | undefined\n  >();\n\n  const targetRef = React.useRef<Element | MouseEvent | Point | Rectangle | null>(null);\n  /**\n   * Stores an instance of Window, used to check\n   * for server side rendering and if focus was lost.\n   */\n  const targetWindow = useWindow();\n\n  // If the target element changed, find the new one. If we are tracking\n  // target with class name, always find element because we do not know if\n  // fabric has rendered a new element and disposed the old element.\n  if (!target || target !== previousTargetProp.current || typeof target === 'string') {\n    const currentElement = hostElement?.current;\n    if (target) {\n      if (typeof target === 'string') {\n        const currentDoc: Document = getDocument(currentElement)!;\n        targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;\n      } else if ('stopPropagation' in target) {\n        targetRef.current = target;\n      } else if ('getBoundingClientRect' in target) {\n        targetRef.current = target;\n      } else if ('current' in target) {\n        targetRef.current = target.current;\n      } else {\n        targetRef.current = target;\n      }\n    }\n    previousTargetProp.current = target;\n  }\n\n  return [targetRef, targetWindow] as const;\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAmB,qBAAqB;AAC5D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,iCAAiC;AAK3D;;;;;;;AAOA,OAAM,SAAUC,SAASA,CACvBC,MAA0B,EAC1BC,WAA8C;EAE9C,IAAMC,kBAAkB,GAAGL,KAAK,CAACM,MAAM,EAEpC;EAEH,IAAMC,SAAS,GAAGP,KAAK,CAACM,MAAM,CAAkD,IAAI,CAAC;EACrF;;;;EAIA,IAAME,YAAY,GAAGP,SAAS,EAAE;EAEhC;EACA;EACA;EACA,IAAI,CAACE,MAAM,IAAIA,MAAM,KAAKE,kBAAkB,CAACI,OAAO,IAAI,OAAON,MAAM,KAAK,QAAQ,EAAE;IAClF,IAAMO,cAAc,GAAGN,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEK,OAAO;IAC3C,IAAIN,MAAM,EAAE;MACV,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QAC9B,IAAMQ,UAAU,GAAaZ,WAAW,CAACW,cAAc,CAAE;QACzDH,SAAS,CAACE,OAAO,GAAGE,UAAU,GAAGA,UAAU,CAACC,aAAa,CAACT,MAAM,CAAC,GAAG,IAAI;OACzE,MAAM,IAAI,iBAAiB,IAAIA,MAAM,EAAE;QACtCI,SAAS,CAACE,OAAO,GAAGN,MAAM;OAC3B,MAAM,IAAI,uBAAuB,IAAIA,MAAM,EAAE;QAC5CI,SAAS,CAACE,OAAO,GAAGN,MAAM;OAC3B,MAAM,IAAI,SAAS,IAAIA,MAAM,EAAE;QAC9BI,SAAS,CAACE,OAAO,GAAGN,MAAM,CAACM,OAAO;OACnC,MAAM;QACLF,SAAS,CAACE,OAAO,GAAGN,MAAM;;;IAG9BE,kBAAkB,CAACI,OAAO,GAAGN,MAAM;;EAGrC,OAAO,CAACI,SAAS,EAAEC,YAAY,CAAU;AAC3C"},"metadata":{},"sourceType":"module","externalDependencies":[]}