{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Icon } from '../../Icon';\nimport { Image } from '../../Image';\nimport { Link } from '../../Link';\nimport { classNamesFunction, css, initializeComponentRef } from '../../Utilities';\nvar DEFAULT_DISPLAY_COUNT = 3;\nvar getClassNames = classNamesFunction();\n/**\n * {@docCategory DocumentCard}\n */\nvar DocumentCardPreviewBase = /** @class */function (_super) {\n  __extends(DocumentCardPreviewBase, _super);\n  function DocumentCardPreviewBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._renderPreviewList = function (previewImages) {\n      var _a = _this.props,\n        getOverflowDocumentCountText = _a.getOverflowDocumentCountText,\n        _b = _a.maxDisplayCount,\n        maxDisplayCount = _b === void 0 ? DEFAULT_DISPLAY_COUNT : _b;\n      // Determine how many documents we won't be showing\n      var overflowDocumentCount = previewImages.length - maxDisplayCount;\n      // Determine the overflow text that will be rendered after the preview list.\n      var overflowText = overflowDocumentCount ? getOverflowDocumentCountText ? getOverflowDocumentCountText(overflowDocumentCount) : '+' + overflowDocumentCount : null;\n      // Create list items for the documents to be shown\n      var fileListItems = previewImages.slice(0, maxDisplayCount).map(function (file, fileIndex) {\n        return React.createElement(\"li\", {\n          key: fileIndex\n        }, React.createElement(Image, {\n          className: _this._classNames.fileListIcon,\n          src: file.iconSrc,\n          role: \"presentation\",\n          alt: \"\",\n          width: \"16px\",\n          height: \"16px\"\n        }), React.createElement(Link, __assign({\n          className: _this._classNames.fileListLink,\n          // eslint-disable-next-line deprecation/deprecation\n          href: file.url\n        }, file.linkProps), file.name));\n      });\n      return React.createElement(\"div\", null, React.createElement(\"ul\", {\n        className: _this._classNames.fileList\n      }, fileListItems), overflowText && React.createElement(\"span\", {\n        className: _this._classNames.fileListOverflowText\n      }, overflowText));\n    };\n    initializeComponentRef(_this);\n    return _this;\n  }\n  DocumentCardPreviewBase.prototype.render = function () {\n    var _a = this.props,\n      previewImages = _a.previewImages,\n      styles = _a.styles,\n      theme = _a.theme,\n      className = _a.className;\n    var style;\n    var preview;\n    var isFileList = previewImages.length > 1;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isFileList: isFileList\n    });\n    if (previewImages.length > 1) {\n      // Render a list of files\n      preview = this._renderPreviewList(previewImages);\n    } else if (previewImages.length === 1) {\n      // Render a single preview\n      preview = this._renderPreviewImage(previewImages[0]);\n      // Override the border color if an accent color was provided\n      /* eslint-disable deprecation/deprecation */\n      if (previewImages[0].accentColor) {\n        style = {\n          borderBottomColor: previewImages[0].accentColor\n        };\n      }\n      /* eslint-enable deprecation/deprecation */\n    }\n\n    return React.createElement(\"div\", {\n      className: this._classNames.root,\n      style: style\n    }, preview);\n  };\n  DocumentCardPreviewBase.prototype._renderPreviewImage = function (previewImage) {\n    var width = previewImage.width,\n      height = previewImage.height,\n      imageFit = previewImage.imageFit,\n      previewIconProps = previewImage.previewIconProps,\n      previewIconContainerClass = previewImage.previewIconContainerClass;\n    if (previewIconProps) {\n      return React.createElement(\"div\", {\n        className: css(this._classNames.previewIcon, previewIconContainerClass),\n        style: {\n          width: width,\n          height: height\n        }\n      }, React.createElement(Icon, __assign({}, previewIconProps)));\n    }\n    var image = React.createElement(Image, {\n      width: width,\n      height: height,\n      imageFit: imageFit,\n      src: previewImage.previewImageSrc,\n      role: \"presentation\",\n      alt: \"\"\n    });\n    var icon;\n    if (previewImage.iconSrc) {\n      icon = React.createElement(Image, {\n        className: this._classNames.icon,\n        src: previewImage.iconSrc,\n        role: \"presentation\",\n        alt: \"\"\n      });\n    }\n    return React.createElement(\"div\", null, image, icon);\n  };\n  return DocumentCardPreviewBase;\n}(React.Component);\nexport { DocumentCardPreviewBase };","map":{"version":3,"names":["React","Icon","Image","Link","classNamesFunction","css","initializeComponentRef","DEFAULT_DISPLAY_COUNT","getClassNames","DocumentCardPreviewBase","_super","__extends","props","_this","call","_renderPreviewList","previewImages","_a","getOverflowDocumentCountText","_b","maxDisplayCount","overflowDocumentCount","length","overflowText","fileListItems","slice","map","file","fileIndex","createElement","key","className","_classNames","fileListIcon","src","iconSrc","role","alt","width","height","__assign","fileListLink","href","url","linkProps","name","fileList","fileListOverflowText","prototype","render","styles","theme","style","preview","isFileList","_renderPreviewImage","accentColor","borderBottomColor","root","previewImage","imageFit","previewIconProps","previewIconContainerClass","previewIcon","image","previewImageSrc","icon","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/DocumentCard/DocumentCardPreview.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Icon } from '../../Icon';\nimport { Image } from '../../Image';\nimport { Link } from '../../Link';\nimport { classNamesFunction, css, initializeComponentRef } from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type {\n  IDocumentCardPreviewImage,\n  IDocumentCardPreviewProps,\n  IDocumentCardPreviewStyleProps,\n  IDocumentCardPreviewStyles,\n} from './DocumentCardPreview.types';\n\nconst DEFAULT_DISPLAY_COUNT = 3;\nconst getClassNames = classNamesFunction<IDocumentCardPreviewStyleProps, IDocumentCardPreviewStyles>();\n\n/**\n * {@docCategory DocumentCard}\n */\nexport class DocumentCardPreviewBase extends React.Component<IDocumentCardPreviewProps, any> {\n  private _classNames: IProcessedStyleSet<IDocumentCardPreviewStyles>;\n\n  constructor(props: IDocumentCardPreviewProps) {\n    super(props);\n\n    initializeComponentRef(this);\n  }\n\n  public render(): JSX.Element {\n    const { previewImages, styles, theme, className } = this.props;\n    let style: React.CSSProperties | undefined;\n    let preview: React.ReactNode;\n    const isFileList = previewImages.length > 1;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      isFileList,\n    });\n\n    if (previewImages.length > 1) {\n      // Render a list of files\n      preview = this._renderPreviewList(previewImages);\n    } else if (previewImages.length === 1) {\n      // Render a single preview\n      preview = this._renderPreviewImage(previewImages[0]);\n\n      // Override the border color if an accent color was provided\n      /* eslint-disable deprecation/deprecation */\n      if (previewImages[0].accentColor) {\n        style = {\n          borderBottomColor: previewImages[0].accentColor,\n        };\n      }\n      /* eslint-enable deprecation/deprecation */\n    }\n\n    return (\n      <div className={this._classNames.root} style={style}>\n        {preview}\n      </div>\n    );\n  }\n\n  private _renderPreviewImage(\n    previewImage: IDocumentCardPreviewImage,\n  ): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> {\n    const { width, height, imageFit, previewIconProps, previewIconContainerClass } = previewImage;\n\n    if (previewIconProps) {\n      return (\n        <div className={css(this._classNames.previewIcon, previewIconContainerClass)} style={{ width, height }}>\n          <Icon {...previewIconProps} />\n        </div>\n      );\n    }\n\n    const image = (\n      <Image\n        width={width}\n        height={height}\n        imageFit={imageFit}\n        src={previewImage.previewImageSrc}\n        role=\"presentation\"\n        alt=\"\"\n      />\n    );\n\n    let icon;\n    if (previewImage.iconSrc) {\n      icon = <Image className={this._classNames.icon} src={previewImage.iconSrc} role=\"presentation\" alt=\"\" />;\n    }\n\n    return (\n      <div>\n        {image}\n        {icon}\n      </div>\n    );\n  }\n\n  private _renderPreviewList = (\n    previewImages: IDocumentCardPreviewImage[],\n  ): React.ReactElement<React.HTMLAttributes<HTMLDivElement>> => {\n    const { getOverflowDocumentCountText, maxDisplayCount = DEFAULT_DISPLAY_COUNT } = this.props;\n\n    // Determine how many documents we won't be showing\n    const overflowDocumentCount = previewImages.length - maxDisplayCount;\n\n    // Determine the overflow text that will be rendered after the preview list.\n    const overflowText = overflowDocumentCount\n      ? getOverflowDocumentCountText\n        ? getOverflowDocumentCountText(overflowDocumentCount)\n        : '+' + overflowDocumentCount\n      : null;\n\n    // Create list items for the documents to be shown\n    const fileListItems = previewImages.slice(0, maxDisplayCount).map((file, fileIndex) => (\n      <li key={fileIndex}>\n        <Image\n          className={this._classNames.fileListIcon}\n          src={file.iconSrc}\n          role=\"presentation\"\n          alt=\"\"\n          width=\"16px\"\n          height=\"16px\"\n        />\n        <Link\n          className={this._classNames.fileListLink}\n          // eslint-disable-next-line deprecation/deprecation\n          href={file.url}\n          {...file.linkProps}\n        >\n          {file.name}\n        </Link>\n      </li>\n    ));\n\n    return (\n      <div>\n        <ul className={this._classNames.fileList}>{fileListItems}</ul>\n        {overflowText && <span className={this._classNames.fileListOverflowText}>{overflowText}</span>}\n      </div>\n    );\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}