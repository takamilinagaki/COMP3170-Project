{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../Color';\nimport { ButtonGridCell } from '../../utilities/ButtonGrid/ButtonGridCell';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nvar getClassNames = classNamesFunction();\n/** Validate if the cell's color is white or not to apply whiteCell style */\nvar isWhiteCell = function (inputColor) {\n  var currentColor = getColorFromString(inputColor);\n  return (currentColor === null || currentColor === void 0 ? void 0 : currentColor.hex) === 'ffffff';\n};\nvar getColorPickerGridCellButtonClassNames = memoizeFunction(function (theme, className, variantClassName, iconClassName, menuIconClassName, disabled, checked, expanded, isSplit) {\n  var styles = getActionButtonStyles(theme);\n  return mergeStyleSets({\n    root: ['ms-Button', styles.root, variantClassName, className, checked && ['is-checked', styles.rootChecked], disabled && ['is-disabled', styles.rootDisabled], !disabled && !checked && {\n      selectors: {\n        ':hover': styles.rootHovered,\n        ':focus': styles.rootFocused,\n        ':active': styles.rootPressed\n      }\n    }, disabled && checked && [styles.rootCheckedDisabled], !disabled && checked && {\n      selectors: {\n        ':hover': styles.rootCheckedHovered,\n        ':active': styles.rootCheckedPressed\n      }\n    }],\n    flexContainer: ['ms-Button-flexContainer', styles.flexContainer]\n  });\n});\nexport var ColorPickerGridCellBase = function (props) {\n  var item = props.item,\n    // eslint-disable-next-line deprecation/deprecation\n    _a = props.idPrefix,\n    // eslint-disable-next-line deprecation/deprecation\n    idPrefix = _a === void 0 ? props.id : _a,\n    isRadio = props.isRadio,\n    _b = props.selected,\n    selected = _b === void 0 ? false : _b,\n    _c = props.disabled,\n    disabled = _c === void 0 ? false : _c,\n    styles = props.styles,\n    _d = props.circle,\n    circle = _d === void 0 ? true : _d,\n    color = props.color,\n    onClick = props.onClick,\n    onHover = props.onHover,\n    onFocus = props.onFocus,\n    onMouseEnter = props.onMouseEnter,\n    onMouseMove = props.onMouseMove,\n    onMouseLeave = props.onMouseLeave,\n    onWheel = props.onWheel,\n    onKeyDown = props.onKeyDown,\n    height = props.height,\n    width = props.width,\n    borderWidth = props.borderWidth;\n  var classNames = getClassNames(styles, {\n    theme: props.theme,\n    disabled: disabled,\n    selected: selected,\n    circle: circle,\n    isWhite: isWhiteCell(color),\n    height: height,\n    width: width,\n    borderWidth: borderWidth\n  });\n  // Render the core of a color cell\n  var renderColorOption = function (colorOption) {\n    var _a;\n    var svgClassName = classNames.svg;\n    // Build an SVG for the cell with the given shape and color properties\n    // Include role=\"img\" and aria-label here for better virtual cursor accessibility,\n    // and for a VoiceOver bug where it skips grid cells that lack inner content\n    return React.createElement(\"svg\", {\n      className: svgClassName,\n      role: \"img\",\n      \"aria-label\": colorOption.label,\n      viewBox: \"0 0 20 20\",\n      fill: (_a = getColorFromString(colorOption.color)) === null || _a === void 0 ? void 0 : _a.str\n    }, circle ? React.createElement(\"circle\", {\n      cx: \"50%\",\n      cy: \"50%\",\n      r: \"50%\"\n    }) : React.createElement(\"rect\", {\n      width: \"100%\",\n      height: \"100%\"\n    }));\n  };\n  var onRenderItem = function (option) {\n    var _a = props.onRenderColorCellContent,\n      onRenderColorCellContent = _a === void 0 ? renderColorOption : _a;\n    return onRenderColorCellContent(option, renderColorOption);\n  };\n  var cellSemantics = isRadio ? {\n    role: 'radio',\n    'aria-checked': selected,\n    selected: undefined\n  } : {\n    role: 'gridcell',\n    selected: selected\n  };\n  return React.createElement(ButtonGridCell, __assign({\n    item: item,\n    id: \"\".concat(idPrefix, \"-\").concat(item.id, \"-\").concat(item.index),\n    key: item.id,\n    disabled: disabled\n  }, cellSemantics, {\n    // eslint-disable-next-line react/jsx-no-bind\n    onRenderItem: onRenderItem,\n    onClick: onClick,\n    onHover: onHover,\n    onFocus: onFocus,\n    label: item.label,\n    className: classNames.colorCell,\n    getClassNames: getColorPickerGridCellButtonClassNames,\n    index: item.index,\n    onMouseEnter: onMouseEnter,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    onWheel: onWheel,\n    onKeyDown: onKeyDown\n  }));\n};","map":{"version":3,"names":["React","mergeStyleSets","classNamesFunction","memoizeFunction","getColorFromString","ButtonGridCell","getStyles","getActionButtonStyles","getClassNames","isWhiteCell","inputColor","currentColor","hex","getColorPickerGridCellButtonClassNames","theme","className","variantClassName","iconClassName","menuIconClassName","disabled","checked","expanded","isSplit","styles","root","rootChecked","rootDisabled","selectors","rootHovered","rootFocused","rootPressed","rootCheckedDisabled","rootCheckedHovered","rootCheckedPressed","flexContainer","ColorPickerGridCellBase","props","item","_a","idPrefix","id","isRadio","_b","selected","_c","_d","circle","color","onClick","onHover","onFocus","onMouseEnter","onMouseMove","onMouseLeave","onWheel","onKeyDown","height","width","borderWidth","classNames","isWhite","renderColorOption","colorOption","svgClassName","svg","createElement","role","label","viewBox","fill","str","cx","cy","r","onRenderItem","option","onRenderColorCellContent","cellSemantics","undefined","__assign","concat","index","key","colorCell"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/SwatchColorPicker/ColorPickerGridCell.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { mergeStyleSets } from '../../Styling';\nimport { classNamesFunction, memoizeFunction } from '../../Utilities';\nimport { getColorFromString } from '../../Color';\nimport { ButtonGridCell } from '../../utilities/ButtonGrid/ButtonGridCell';\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\nimport type { ITheme, IProcessedStyleSet } from '../../Styling';\nimport type { IButtonClassNames } from '../Button/BaseButton.classNames';\nimport type {\n  IColorCellProps,\n  IColorPickerGridCellProps,\n  IColorPickerGridCellStyleProps,\n  IColorPickerGridCellStyles,\n} from './ColorPickerGridCell.types';\n\nconst getClassNames = classNamesFunction<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>();\n\n/** Validate if the cell's color is white or not to apply whiteCell style */\nconst isWhiteCell = (inputColor: string): boolean => {\n  const currentColor = getColorFromString(inputColor!);\n  return currentColor?.hex === 'ffffff';\n};\n\nconst getColorPickerGridCellButtonClassNames = memoizeFunction(\n  (\n    theme: ITheme,\n    className: string,\n    variantClassName: string,\n    iconClassName: string | undefined,\n    menuIconClassName: string | undefined,\n    disabled: boolean,\n    checked: boolean,\n    expanded: boolean,\n    isSplit: boolean | undefined,\n  ): IButtonClassNames => {\n    const styles = getActionButtonStyles(theme);\n    return mergeStyleSets({\n      root: [\n        'ms-Button',\n        styles.root,\n        variantClassName,\n        className,\n        checked && ['is-checked', styles.rootChecked],\n        disabled && ['is-disabled', styles.rootDisabled],\n        !disabled &&\n          !checked && {\n            selectors: {\n              ':hover': styles.rootHovered,\n              ':focus': styles.rootFocused,\n              ':active': styles.rootPressed,\n            },\n          },\n        disabled && checked && [styles.rootCheckedDisabled],\n        !disabled &&\n          checked && {\n            selectors: {\n              ':hover': styles.rootCheckedHovered,\n              ':active': styles.rootCheckedPressed,\n            },\n          },\n      ],\n      flexContainer: ['ms-Button-flexContainer', styles.flexContainer],\n    });\n  },\n);\n\nexport const ColorPickerGridCellBase: React.FunctionComponent<IColorPickerGridCellProps> = props => {\n  const {\n    item,\n    // eslint-disable-next-line deprecation/deprecation\n    idPrefix = props.id,\n    isRadio,\n    selected = false,\n    disabled = false,\n    styles,\n    circle = true,\n    color,\n    onClick,\n    onHover,\n    onFocus,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onWheel,\n    onKeyDown,\n    height,\n    width,\n    borderWidth,\n  } = props;\n\n  const classNames: IProcessedStyleSet<IColorPickerGridCellStyles> = getClassNames(styles!, {\n    theme: props.theme!,\n    disabled,\n    selected,\n    circle,\n    isWhite: isWhiteCell(color!),\n    height,\n    width,\n    borderWidth,\n  });\n\n  // Render the core of a color cell\n  const renderColorOption = (colorOption: IColorCellProps): JSX.Element => {\n    const svgClassName = classNames.svg;\n\n    // Build an SVG for the cell with the given shape and color properties\n    // Include role=\"img\" and aria-label here for better virtual cursor accessibility,\n    // and for a VoiceOver bug where it skips grid cells that lack inner content\n    return (\n      <svg\n        className={svgClassName}\n        role=\"img\"\n        aria-label={colorOption.label}\n        viewBox=\"0 0 20 20\"\n        fill={getColorFromString(colorOption.color as string)?.str}\n      >\n        {circle ? <circle cx=\"50%\" cy=\"50%\" r=\"50%\" /> : <rect width=\"100%\" height=\"100%\" />}\n      </svg>\n    );\n  };\n\n  const onRenderItem = (option: IColorCellProps): JSX.Element => {\n    const { onRenderColorCellContent = renderColorOption } = props;\n    return onRenderColorCellContent(option, renderColorOption) as JSX.Element;\n  };\n\n  const cellSemantics = isRadio\n    ? {\n        role: 'radio',\n        'aria-checked': selected,\n        selected: undefined,\n      }\n    : {\n        role: 'gridcell',\n        selected,\n      };\n\n  return (\n    <ButtonGridCell\n      item={item}\n      id={`${idPrefix}-${item.id}-${item.index}`}\n      key={item.id}\n      disabled={disabled}\n      {...cellSemantics}\n      // eslint-disable-next-line react/jsx-no-bind\n      onRenderItem={onRenderItem}\n      onClick={onClick}\n      onHover={onHover}\n      onFocus={onFocus}\n      label={item.label}\n      className={classNames.colorCell}\n      getClassNames={getColorPickerGridCellButtonClassNames}\n      index={item.index}\n      onMouseEnter={onMouseEnter}\n      onMouseMove={onMouseMove}\n      onMouseLeave={onMouseLeave}\n      onWheel={onWheel}\n      onKeyDown={onKeyDown}\n    />\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}