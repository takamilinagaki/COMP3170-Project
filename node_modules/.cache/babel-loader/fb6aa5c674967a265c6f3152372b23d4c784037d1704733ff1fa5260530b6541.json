{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, css } from '../../../Utilities';\nimport { SuggestionsItem } from '../../../Pickers';\nimport * as stylesImport from './SuggestionsCore.scss';\nvar styles = stylesImport;\n/**\n * Class when used with SuggestionsStore, renders a basic suggestions control\n */\nvar SuggestionsCore = /** @class */function (_super) {\n  __extends(SuggestionsCore, _super);\n  function SuggestionsCore(suggestionsProps) {\n    var _this = _super.call(this, suggestionsProps) || this;\n    _this._selectedElement = React.createRef();\n    _this.SuggestionsItemOfProperType = SuggestionsItem;\n    _this._onClickTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        _this.props.onSuggestionClick(ev, item, index);\n      };\n    };\n    _this._onRemoveTypedSuggestionsItem = function (item, index) {\n      return function (ev) {\n        var onSuggestionRemove = _this.props.onSuggestionRemove;\n        onSuggestionRemove(ev, item, index);\n        ev.stopPropagation();\n      };\n    };\n    initializeComponentRef(_this);\n    _this.currentIndex = -1;\n    return _this;\n  }\n  /**\n   * Increments the selected suggestion index\n   */\n  SuggestionsCore.prototype.nextSuggestion = function () {\n    var suggestions = this.props.suggestions;\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      } else if (this.currentIndex < suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Decrements the selected suggestion index\n   */\n  SuggestionsCore.prototype.previousSuggestion = function () {\n    var suggestions = this.props.suggestions;\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      } else if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === 0) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      }\n    }\n    return false;\n  };\n  Object.defineProperty(SuggestionsCore.prototype, \"selectedElement\", {\n    get: function () {\n      return this._selectedElement.current || undefined;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  SuggestionsCore.prototype.getCurrentItem = function () {\n    return this.props.suggestions[this.currentIndex];\n  };\n  SuggestionsCore.prototype.getSuggestionAtIndex = function (index) {\n    return this.props.suggestions[index];\n  };\n  SuggestionsCore.prototype.hasSuggestionSelected = function () {\n    return this.currentIndex !== -1 && this.currentIndex < this.props.suggestions.length;\n  };\n  SuggestionsCore.prototype.removeSuggestion = function (index) {\n    this.props.suggestions.splice(index, 1);\n  };\n  SuggestionsCore.prototype.deselectAllSuggestions = function () {\n    if (this.currentIndex > -1 && this.props.suggestions[this.currentIndex]) {\n      this.props.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n      this.forceUpdate();\n    }\n  };\n  SuggestionsCore.prototype.setSelectedSuggestion = function (index) {\n    var suggestions = this.props.suggestions;\n    if (index > suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion.selected = false;\n      this.currentSuggestion = suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1 && suggestions[this.currentIndex]) {\n        suggestions[this.currentIndex].selected = false;\n      }\n      suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = suggestions[index];\n    }\n    this.forceUpdate();\n  };\n  SuggestionsCore.prototype.componentDidUpdate = function () {\n    this.scrollSelected();\n  };\n  SuggestionsCore.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      onRenderSuggestion = _a.onRenderSuggestion,\n      suggestionsItemClassName = _a.suggestionsItemClassName,\n      resultsMaximumNumber = _a.resultsMaximumNumber,\n      showRemoveButtons = _a.showRemoveButtons,\n      suggestionsContainerAriaLabel = _a.suggestionsContainerAriaLabel;\n    var TypedSuggestionsItem = this.SuggestionsItemOfProperType;\n    var suggestions = this.props.suggestions;\n    if (resultsMaximumNumber) {\n      suggestions = suggestions.slice(0, resultsMaximumNumber);\n    }\n    return React.createElement(\"div\", {\n      className: css('ms-Suggestions-container', styles.suggestionsContainer),\n      id: \"suggestion-list\",\n      role: \"listbox\",\n      \"aria-label\": suggestionsContainerAriaLabel\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(\"div\", {\n        ref: suggestion.selected || index === _this.currentIndex ? _this._selectedElement : undefined,\n        key: suggestion.item.key ? suggestion.item.key : index,\n        id: 'sug-' + index\n      }, React.createElement(TypedSuggestionsItem, {\n        id: 'sug-item' + index,\n        suggestionModel: suggestion,\n        RenderSuggestion: onRenderSuggestion,\n        onClick: _this._onClickTypedSuggestionsItem(suggestion.item, index),\n        className: suggestionsItemClassName,\n        showRemoveButton: showRemoveButtons,\n        onRemoveItem: _this._onRemoveTypedSuggestionsItem(suggestion.item, index),\n        isSelectedOverride: index === _this.currentIndex\n      }));\n    }));\n  };\n  // TODO get the element to scroll into view properly regardless of direction.\n  SuggestionsCore.prototype.scrollSelected = function () {\n    var _a;\n    if (((_a = this._selectedElement.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView) !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  };\n  return SuggestionsCore;\n}(React.Component);\nexport { SuggestionsCore };","map":{"version":3,"names":["React","initializeComponentRef","css","SuggestionsItem","stylesImport","styles","SuggestionsCore","_super","__extends","suggestionsProps","_this","call","_selectedElement","createRef","SuggestionsItemOfProperType","_onClickTypedSuggestionsItem","item","index","ev","props","onSuggestionClick","_onRemoveTypedSuggestionsItem","onSuggestionRemove","stopPropagation","currentIndex","prototype","nextSuggestion","suggestions","length","setSelectedSuggestion","shouldLoopSelection","previousSuggestion","Object","defineProperty","get","current","undefined","getCurrentItem","getSuggestionAtIndex","hasSuggestionSelected","removeSuggestion","splice","deselectAllSuggestions","selected","forceUpdate","currentSuggestion","componentDidUpdate","scrollSelected","render","_a","onRenderSuggestion","suggestionsItemClassName","resultsMaximumNumber","showRemoveButtons","suggestionsContainerAriaLabel","TypedSuggestionsItem","slice","createElement","className","suggestionsContainer","id","role","map","suggestion","ref","key","suggestionModel","RenderSuggestion","onClick","showRemoveButton","onRemoveItem","isSelectedOverride","scrollIntoView","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/FloatingPicker/src/components/FloatingPicker/Suggestions/SuggestionsCore.tsx"],"sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef, css } from '../../../Utilities';\nimport { SuggestionsItem } from '../../../Pickers';\nimport * as stylesImport from './SuggestionsCore.scss';\nimport type { ISuggestionItemProps, ISuggestionModel } from '../../../Pickers';\nimport type { ISuggestionsCoreProps } from './Suggestions.types';\n\nconst styles: any = stylesImport;\n\n/**\n * Class when used with SuggestionsStore, renders a basic suggestions control\n */\nexport class SuggestionsCore<T> extends React.Component<ISuggestionsCoreProps<T>, {}> {\n  public currentIndex: number;\n  public currentSuggestion: ISuggestionModel<T> | undefined;\n  protected _selectedElement = React.createRef<HTMLDivElement>();\n  private SuggestionsItemOfProperType: new (props: ISuggestionItemProps<T>) => SuggestionsItem<T> = SuggestionsItem;\n\n  constructor(suggestionsProps: ISuggestionsCoreProps<T>) {\n    super(suggestionsProps);\n\n    initializeComponentRef(this);\n    this.currentIndex = -1;\n  }\n\n  /**\n   * Increments the selected suggestion index\n   */\n  public nextSuggestion(): boolean {\n    const { suggestions } = this.props;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      } else if (this.currentIndex < suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrements the selected suggestion index\n   */\n  public previousSuggestion(): boolean {\n    const { suggestions } = this.props;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      } else if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === 0) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public get selectedElement(): HTMLDivElement | undefined {\n    return this._selectedElement.current || undefined;\n  }\n\n  public getCurrentItem(): ISuggestionModel<T> {\n    return this.props.suggestions[this.currentIndex];\n  }\n\n  public getSuggestionAtIndex(index: number): ISuggestionModel<T> {\n    return this.props.suggestions[index];\n  }\n\n  public hasSuggestionSelected(): boolean {\n    return this.currentIndex !== -1 && this.currentIndex < this.props.suggestions.length;\n  }\n\n  public removeSuggestion(index: number): void {\n    this.props.suggestions.splice(index, 1);\n  }\n\n  public deselectAllSuggestions(): void {\n    if (this.currentIndex > -1 && this.props.suggestions[this.currentIndex]) {\n      this.props.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n      this.forceUpdate();\n    }\n  }\n\n  public setSelectedSuggestion(index: number): void {\n    const { suggestions } = this.props;\n\n    if (index > suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion!.selected = false;\n      this.currentSuggestion = suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1 && suggestions[this.currentIndex]) {\n        suggestions[this.currentIndex].selected = false;\n      }\n      suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = suggestions[index];\n    }\n\n    this.forceUpdate();\n  }\n\n  public componentDidUpdate(): void {\n    this.scrollSelected();\n  }\n\n  public render(): JSX.Element {\n    const {\n      onRenderSuggestion,\n      suggestionsItemClassName,\n      resultsMaximumNumber,\n      showRemoveButtons,\n      suggestionsContainerAriaLabel,\n    } = this.props;\n    const TypedSuggestionsItem = this.SuggestionsItemOfProperType;\n    let { suggestions } = this.props;\n\n    if (resultsMaximumNumber) {\n      suggestions = suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    return (\n      <div\n        className={css('ms-Suggestions-container', styles.suggestionsContainer)}\n        id=\"suggestion-list\"\n        role=\"listbox\"\n        aria-label={suggestionsContainerAriaLabel}\n      >\n        {suggestions.map((suggestion: ISuggestionModel<T>, index: number) => (\n          <div\n            ref={suggestion.selected || index === this.currentIndex ? this._selectedElement : undefined}\n            key={(suggestion.item as any).key ? (suggestion.item as any).key : index}\n            id={'sug-' + index}\n          >\n            <TypedSuggestionsItem\n              id={'sug-item' + index}\n              suggestionModel={suggestion}\n              RenderSuggestion={onRenderSuggestion as any}\n              onClick={this._onClickTypedSuggestionsItem(suggestion.item, index)}\n              className={suggestionsItemClassName}\n              showRemoveButton={showRemoveButtons}\n              onRemoveItem={this._onRemoveTypedSuggestionsItem(suggestion.item, index)}\n              isSelectedOverride={index === this.currentIndex}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  // TODO get the element to scroll into view properly regardless of direction.\n  public scrollSelected(): void {\n    if (this._selectedElement.current?.scrollIntoView !== undefined) {\n      this._selectedElement.current.scrollIntoView(false);\n    }\n  }\n\n  private _onClickTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      this.props.onSuggestionClick(ev, item, index);\n    };\n  };\n\n  private _onRemoveTypedSuggestionsItem = (item: T, index: number): ((ev: React.MouseEvent<HTMLElement>) => void) => {\n    return (ev: React.MouseEvent<HTMLElement>): void => {\n      const onSuggestionRemove = this.props.onSuggestionRemove!;\n      onSuggestionRemove(ev, item, index);\n      ev.stopPropagation();\n    };\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}