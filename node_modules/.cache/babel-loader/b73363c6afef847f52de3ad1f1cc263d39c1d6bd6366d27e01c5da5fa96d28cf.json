{"ast":null,"code":"import { PersonaInitialsColor } from './Persona.types';\n/**\n * Following colors are considered reserved and can only be set with overrides, so they are excluded from this set:\n * - `gray` and `black` can result in offensive persona coins with some initials combinations\n * - `red` often has a special meaning\n * - `transparent` is not intended to be used with typical initials due to accessibility issues;\n *   its primary use is for Facepile overflow buttons.\n */\nvar COLOR_SWATCHES_LOOKUP = [PersonaInitialsColor.lightBlue, PersonaInitialsColor.blue, PersonaInitialsColor.darkBlue, PersonaInitialsColor.teal, PersonaInitialsColor.green, PersonaInitialsColor.darkGreen, PersonaInitialsColor.lightPink, PersonaInitialsColor.pink, PersonaInitialsColor.magenta, PersonaInitialsColor.purple, PersonaInitialsColor.orange, PersonaInitialsColor.lightRed, PersonaInitialsColor.darkRed, PersonaInitialsColor.violet, PersonaInitialsColor.gold, PersonaInitialsColor.burgundy, PersonaInitialsColor.warmGray, PersonaInitialsColor.cyan, PersonaInitialsColor.rust, PersonaInitialsColor.coolGray];\nvar COLOR_SWATCHES_NUM_ENTRIES = COLOR_SWATCHES_LOOKUP.length;\nfunction getInitialsColorFromName(displayName) {\n  var color = PersonaInitialsColor.blue;\n  if (!displayName) {\n    return color;\n  }\n  var hashCode = 0;\n  for (var iLen = displayName.length - 1; iLen >= 0; iLen--) {\n    var ch = displayName.charCodeAt(iLen);\n    var shift = iLen % 8;\n    // eslint-disable-next-line no-bitwise\n    hashCode ^= (ch << shift) + (ch >> 8 - shift);\n  }\n  color = COLOR_SWATCHES_LOOKUP[hashCode % COLOR_SWATCHES_NUM_ENTRIES];\n  return color;\n}\nfunction personaInitialsColorToHexCode(personaInitialsColor) {\n  switch (personaInitialsColor) {\n    case PersonaInitialsColor.lightBlue:\n      return '#4F6BED';\n    case PersonaInitialsColor.blue:\n      return '#0078D4';\n    case PersonaInitialsColor.darkBlue:\n      return '#004E8C';\n    case PersonaInitialsColor.teal:\n      return '#038387';\n    case PersonaInitialsColor.lightGreen:\n    case PersonaInitialsColor.green:\n      return '#498205';\n    case PersonaInitialsColor.darkGreen:\n      return '#0B6A0B';\n    case PersonaInitialsColor.lightPink:\n      return '#C239B3';\n    case PersonaInitialsColor.pink:\n      return '#E3008C';\n    case PersonaInitialsColor.magenta:\n      return '#881798';\n    case PersonaInitialsColor.purple:\n      return '#5C2E91';\n    case PersonaInitialsColor.orange:\n      return '#CA5010';\n    // eslint-disable-next-line deprecation/deprecation\n    case PersonaInitialsColor.red:\n      return '#EE1111';\n    case PersonaInitialsColor.lightRed:\n      return '#D13438';\n    case PersonaInitialsColor.darkRed:\n      return '#A4262C';\n    case PersonaInitialsColor.transparent:\n      return 'transparent';\n    case PersonaInitialsColor.violet:\n      return '#8764B8';\n    case PersonaInitialsColor.gold:\n      return '#986F0B';\n    case PersonaInitialsColor.burgundy:\n      return '#750B1C';\n    case PersonaInitialsColor.warmGray:\n      return '#7A7574';\n    case PersonaInitialsColor.cyan:\n      return '#005B70';\n    case PersonaInitialsColor.rust:\n      return '#8E562E';\n    case PersonaInitialsColor.coolGray:\n      return '#69797E';\n    // eslint-disable-next-line deprecation/deprecation\n    case PersonaInitialsColor.black:\n      return '#1D1D1D';\n    case PersonaInitialsColor.gray:\n      return '#393939';\n  }\n}\n/** @deprecated Use `getPersonaInitialsColor` */\nexport function initialsColorPropToColorCode(props) {\n  return getPersonaInitialsColor(props);\n}\n/**\n * Gets the hex color string (prefixed with #) for the given persona props.\n * This is the logic used internally by the Persona control.\n * @param props - Current persona props\n * @returns Hex color string prefixed with #\n */\nexport function getPersonaInitialsColor(props) {\n  // eslint-disable-next-line deprecation/deprecation\n  var primaryText = props.primaryText,\n    text = props.text;\n  var initialsColor = props.initialsColor;\n  var initialsColorCode;\n  if (typeof initialsColor === 'string') {\n    initialsColorCode = initialsColor;\n  } else {\n    initialsColor = initialsColor !== undefined ? initialsColor : getInitialsColorFromName(text || primaryText);\n    initialsColorCode = personaInitialsColorToHexCode(initialsColor);\n  }\n  return initialsColorCode;\n}","map":{"version":3,"names":["PersonaInitialsColor","COLOR_SWATCHES_LOOKUP","lightBlue","blue","darkBlue","teal","green","darkGreen","lightPink","pink","magenta","purple","orange","lightRed","darkRed","violet","gold","burgundy","warmGray","cyan","rust","coolGray","COLOR_SWATCHES_NUM_ENTRIES","length","getInitialsColorFromName","displayName","color","hashCode","iLen","ch","charCodeAt","shift","personaInitialsColorToHexCode","personaInitialsColor","lightGreen","red","transparent","black","gray","initialsColorPropToColorCode","props","getPersonaInitialsColor","primaryText","text","initialsColor","initialsColorCode","undefined"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/Persona/PersonaInitialsColor.ts"],"sourcesContent":["import { PersonaInitialsColor } from './Persona.types';\nimport type { IPersonaProps } from './Persona.types';\n\n/**\n * Following colors are considered reserved and can only be set with overrides, so they are excluded from this set:\n * - `gray` and `black` can result in offensive persona coins with some initials combinations\n * - `red` often has a special meaning\n * - `transparent` is not intended to be used with typical initials due to accessibility issues;\n *   its primary use is for Facepile overflow buttons.\n */\nconst COLOR_SWATCHES_LOOKUP: PersonaInitialsColor[] = [\n  PersonaInitialsColor.lightBlue,\n  PersonaInitialsColor.blue,\n  PersonaInitialsColor.darkBlue,\n  PersonaInitialsColor.teal,\n  PersonaInitialsColor.green,\n  PersonaInitialsColor.darkGreen,\n  PersonaInitialsColor.lightPink,\n  PersonaInitialsColor.pink,\n  PersonaInitialsColor.magenta,\n  PersonaInitialsColor.purple,\n  PersonaInitialsColor.orange,\n  PersonaInitialsColor.lightRed,\n  PersonaInitialsColor.darkRed,\n  PersonaInitialsColor.violet,\n  PersonaInitialsColor.gold,\n  PersonaInitialsColor.burgundy,\n  PersonaInitialsColor.warmGray,\n  PersonaInitialsColor.cyan,\n  PersonaInitialsColor.rust,\n  PersonaInitialsColor.coolGray,\n];\n\nconst COLOR_SWATCHES_NUM_ENTRIES = COLOR_SWATCHES_LOOKUP.length;\n\nfunction getInitialsColorFromName(displayName: string | undefined): PersonaInitialsColor {\n  let color = PersonaInitialsColor.blue;\n  if (!displayName) {\n    return color;\n  }\n\n  let hashCode = 0;\n  for (let iLen: number = displayName.length - 1; iLen >= 0; iLen--) {\n    const ch: number = displayName.charCodeAt(iLen);\n    const shift: number = iLen % 8;\n    // eslint-disable-next-line no-bitwise\n    hashCode ^= (ch << shift) + (ch >> (8 - shift));\n  }\n\n  color = COLOR_SWATCHES_LOOKUP[hashCode % COLOR_SWATCHES_NUM_ENTRIES];\n\n  return color;\n}\n\nfunction personaInitialsColorToHexCode(personaInitialsColor: PersonaInitialsColor): string {\n  switch (personaInitialsColor) {\n    case PersonaInitialsColor.lightBlue:\n      return '#4F6BED';\n    case PersonaInitialsColor.blue:\n      return '#0078D4';\n    case PersonaInitialsColor.darkBlue:\n      return '#004E8C';\n    case PersonaInitialsColor.teal:\n      return '#038387';\n    case PersonaInitialsColor.lightGreen:\n    case PersonaInitialsColor.green:\n      return '#498205';\n    case PersonaInitialsColor.darkGreen:\n      return '#0B6A0B';\n    case PersonaInitialsColor.lightPink:\n      return '#C239B3';\n    case PersonaInitialsColor.pink:\n      return '#E3008C';\n    case PersonaInitialsColor.magenta:\n      return '#881798';\n    case PersonaInitialsColor.purple:\n      return '#5C2E91';\n    case PersonaInitialsColor.orange:\n      return '#CA5010';\n    // eslint-disable-next-line deprecation/deprecation\n    case PersonaInitialsColor.red:\n      return '#EE1111';\n    case PersonaInitialsColor.lightRed:\n      return '#D13438';\n    case PersonaInitialsColor.darkRed:\n      return '#A4262C';\n    case PersonaInitialsColor.transparent:\n      return 'transparent';\n    case PersonaInitialsColor.violet:\n      return '#8764B8';\n    case PersonaInitialsColor.gold:\n      return '#986F0B';\n    case PersonaInitialsColor.burgundy:\n      return '#750B1C';\n    case PersonaInitialsColor.warmGray:\n      return '#7A7574';\n    case PersonaInitialsColor.cyan:\n      return '#005B70';\n    case PersonaInitialsColor.rust:\n      return '#8E562E';\n    case PersonaInitialsColor.coolGray:\n      return '#69797E';\n    // eslint-disable-next-line deprecation/deprecation\n    case PersonaInitialsColor.black:\n      return '#1D1D1D';\n    case PersonaInitialsColor.gray:\n      return '#393939';\n  }\n}\n\n/** @deprecated Use `getPersonaInitialsColor` */\nexport function initialsColorPropToColorCode(props: IPersonaProps): string {\n  return getPersonaInitialsColor(props);\n}\n\n/**\n * Gets the hex color string (prefixed with #) for the given persona props.\n * This is the logic used internally by the Persona control.\n * @param props - Current persona props\n * @returns Hex color string prefixed with #\n */\nexport function getPersonaInitialsColor(props: Pick<IPersonaProps, 'primaryText' | 'text' | 'initialsColor'>): string {\n  // eslint-disable-next-line deprecation/deprecation\n  const { primaryText, text } = props;\n  let { initialsColor } = props;\n  let initialsColorCode: string;\n  if (typeof initialsColor === 'string') {\n    initialsColorCode = initialsColor;\n  } else {\n    initialsColor = initialsColor !== undefined ? initialsColor : getInitialsColorFromName(text || primaryText);\n    initialsColorCode = personaInitialsColorToHexCode(initialsColor);\n  }\n\n  return initialsColorCode;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}