{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { _rgbaOrHexString } from './_rgbaOrHexString';\nimport { MAX_COLOR_ALPHA } from './consts';\n/**\n * Gets a color with the given transparency value and the same other components as `color`.\n * Does not modify the original color.\n */\nexport function updateT(color, t) {\n  var a = MAX_COLOR_ALPHA - t;\n  return __assign(__assign({}, color), {\n    t: t,\n    a: a,\n    str: _rgbaOrHexString(color.r, color.g, color.b, a, color.hex)\n  });\n}","map":{"version":3,"names":["_rgbaOrHexString","MAX_COLOR_ALPHA","updateT","color","t","a","__assign","str","r","g","b","hex"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/color/updateT.ts"],"sourcesContent":["import { _rgbaOrHexString } from './_rgbaOrHexString';\nimport { MAX_COLOR_ALPHA } from './consts';\nimport type { IColor } from './interfaces';\n\n/**\n * Gets a color with the given transparency value and the same other components as `color`.\n * Does not modify the original color.\n */\nexport function updateT(color: IColor, t: number): IColor {\n  const a = MAX_COLOR_ALPHA - t;\n  return {\n    ...color,\n    t,\n    a,\n    str: _rgbaOrHexString(color.r, color.g, color.b, a, color.hex),\n  };\n}\n"],"mappings":";AAAA,SAASA,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,eAAe,QAAQ,UAAU;AAG1C;;;;AAIA,OAAM,SAAUC,OAAOA,CAACC,KAAa,EAAEC,CAAS;EAC9C,IAAMC,CAAC,GAAGJ,eAAe,GAAGG,CAAC;EAC7B,OAAAE,QAAA,CAAAA,QAAA,KACKH,KAAK;IACRC,CAAC,EAAAA,CAAA;IACDC,CAAC,EAAAA,CAAA;IACDE,GAAG,EAAEP,gBAAgB,CAACG,KAAK,CAACK,CAAC,EAAEL,KAAK,CAACM,CAAC,EAAEN,KAAK,CAACO,CAAC,EAAEL,CAAC,EAAEF,KAAK,CAACQ,GAAG;EAAC;AAElE"},"metadata":{},"sourceType":"module","externalDependencies":[]}