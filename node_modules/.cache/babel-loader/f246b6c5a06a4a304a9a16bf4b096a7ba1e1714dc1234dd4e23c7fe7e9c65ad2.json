{"ast":null,"code":"import { warn } from './warn';\n/**\n * Warns when two props which are mutually exclusive are both being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\n */\nexport function warnMutuallyExclusive(componentName, props, exclusiveMap) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var propName in exclusiveMap) {\n      if (props && props[propName] !== undefined) {\n        var propInExclusiveMapValue = exclusiveMap[propName];\n        if (propInExclusiveMapValue && props[propInExclusiveMapValue] !== undefined) {\n          warn(\"\".concat(componentName, \" property '\").concat(propName, \"' is mutually exclusive with '\").concat(exclusiveMap[propName], \"'. \") + \"Use one or the other.\");\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["warn","warnMutuallyExclusive","componentName","props","exclusiveMap","process","env","NODE_ENV","propName","undefined","propInExclusiveMapValue","concat"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/lib/src/warn/warnMutuallyExclusive.ts"],"sourcesContent":["import { warn } from './warn';\nimport type { ISettingsMap } from './warn';\n\n/**\n * Warns when two props which are mutually exclusive are both being used.\n *\n * @public\n * @param componentName - The name of the component being used.\n * @param props - The props passed into the component.\n * @param exclusiveMap - A map where the key is a parameter, and the value is the other parameter.\n */\nexport function warnMutuallyExclusive<P>(componentName: string, props: P, exclusiveMap: ISettingsMap<P>): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const propName in exclusiveMap) {\n      if (props && props[propName] !== undefined) {\n        let propInExclusiveMapValue = exclusiveMap[propName];\n        if (propInExclusiveMapValue && props[propInExclusiveMapValue as keyof P] !== undefined) {\n          warn(\n            `${componentName} property '${propName}' is mutually exclusive with '${exclusiveMap[propName]}'. ` +\n              `Use one or the other.`,\n          );\n        }\n      }\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,QAAQ;AAG7B;;;;;;;;AAQA,OAAM,SAAUC,qBAAqBA,CAAIC,aAAqB,EAAEC,KAAQ,EAAEC,YAA6B;EACrG,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,KAAK,IAAMC,QAAQ,IAAIJ,YAAY,EAAE;MACnC,IAAID,KAAK,IAAIA,KAAK,CAACK,QAAQ,CAAC,KAAKC,SAAS,EAAE;QAC1C,IAAIC,uBAAuB,GAAGN,YAAY,CAACI,QAAQ,CAAC;QACpD,IAAIE,uBAAuB,IAAIP,KAAK,CAACO,uBAAkC,CAAC,KAAKD,SAAS,EAAE;UACtFT,IAAI,CACF,GAAAW,MAAA,CAAGT,aAAa,iBAAAS,MAAA,CAAcH,QAAQ,oCAAAG,MAAA,CAAiCP,YAAY,CAACI,QAAQ,CAAC,QAAK,GAChG,uBAAuB,CAC1B;;;;;AAKX"},"metadata":{},"sourceType":"module","externalDependencies":[]}