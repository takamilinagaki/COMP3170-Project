{"ast":null,"code":"import { MAX_COLOR_RGB } from './consts';\n/** Converts HSV components to an RGB color. Does not set the alpha value. */\nexport function hsv2rgb(h, s, v) {\n  s = s / 100;\n  v = v / 100;\n  var rgb = [];\n  var c = v * s;\n  var hh = h / 60;\n  var x = c * (1 - Math.abs(hh % 2 - 1));\n  var m = v - c;\n  switch (Math.floor(hh)) {\n    case 0:\n      rgb = [c, x, 0];\n      break;\n    case 1:\n      rgb = [x, c, 0];\n      break;\n    case 2:\n      rgb = [0, c, x];\n      break;\n    case 3:\n      rgb = [0, x, c];\n      break;\n    case 4:\n      rgb = [x, 0, c];\n      break;\n    case 5:\n      rgb = [c, 0, x];\n      break;\n  }\n  return {\n    r: Math.round(MAX_COLOR_RGB * (rgb[0] + m)),\n    g: Math.round(MAX_COLOR_RGB * (rgb[1] + m)),\n    b: Math.round(MAX_COLOR_RGB * (rgb[2] + m))\n  };\n}","map":{"version":3,"names":["MAX_COLOR_RGB","hsv2rgb","h","s","v","rgb","c","hh","x","Math","abs","m","floor","r","round","g","b"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/color/hsv2rgb.ts"],"sourcesContent":["import { MAX_COLOR_RGB } from './consts';\nimport type { IRGB } from './interfaces';\n\n/** Converts HSV components to an RGB color. Does not set the alpha value. */\nexport function hsv2rgb(h: number, s: number, v: number): IRGB {\n  s = s / 100;\n  v = v / 100;\n\n  let rgb: number[] = [];\n\n  const c = v * s;\n  const hh = h / 60;\n  const x = c * (1 - Math.abs((hh % 2) - 1));\n  const m = v - c;\n\n  switch (Math.floor(hh)) {\n    case 0:\n      rgb = [c, x, 0];\n      break;\n\n    case 1:\n      rgb = [x, c, 0];\n      break;\n\n    case 2:\n      rgb = [0, c, x];\n      break;\n\n    case 3:\n      rgb = [0, x, c];\n      break;\n\n    case 4:\n      rgb = [x, 0, c];\n      break;\n\n    case 5:\n      rgb = [c, 0, x];\n      break;\n  }\n\n  return {\n    r: Math.round(MAX_COLOR_RGB * (rgb[0] + m)),\n    g: Math.round(MAX_COLOR_RGB * (rgb[1] + m)),\n    b: Math.round(MAX_COLOR_RGB * (rgb[2] + m)),\n  };\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,UAAU;AAGxC;AACA,OAAM,SAAUC,OAAOA,CAACC,CAAS,EAAEC,CAAS,EAAEC,CAAS;EACrDD,CAAC,GAAGA,CAAC,GAAG,GAAG;EACXC,CAAC,GAAGA,CAAC,GAAG,GAAG;EAEX,IAAIC,GAAG,GAAa,EAAE;EAEtB,IAAMC,CAAC,GAAGF,CAAC,GAAGD,CAAC;EACf,IAAMI,EAAE,GAAGL,CAAC,GAAG,EAAE;EACjB,IAAMM,CAAC,GAAGF,CAAC,IAAI,CAAC,GAAGG,IAAI,CAACC,GAAG,CAAEH,EAAE,GAAG,CAAC,GAAI,CAAC,CAAC,CAAC;EAC1C,IAAMI,CAAC,GAAGP,CAAC,GAAGE,CAAC;EAEf,QAAQG,IAAI,CAACG,KAAK,CAACL,EAAE,CAAC;IACpB,KAAK,CAAC;MACJF,GAAG,GAAG,CAACC,CAAC,EAAEE,CAAC,EAAE,CAAC,CAAC;MACf;IAEF,KAAK,CAAC;MACJH,GAAG,GAAG,CAACG,CAAC,EAAEF,CAAC,EAAE,CAAC,CAAC;MACf;IAEF,KAAK,CAAC;MACJD,GAAG,GAAG,CAAC,CAAC,EAAEC,CAAC,EAAEE,CAAC,CAAC;MACf;IAEF,KAAK,CAAC;MACJH,GAAG,GAAG,CAAC,CAAC,EAAEG,CAAC,EAAEF,CAAC,CAAC;MACf;IAEF,KAAK,CAAC;MACJD,GAAG,GAAG,CAACG,CAAC,EAAE,CAAC,EAAEF,CAAC,CAAC;MACf;IAEF,KAAK,CAAC;MACJD,GAAG,GAAG,CAACC,CAAC,EAAE,CAAC,EAAEE,CAAC,CAAC;MACf;;EAGJ,OAAO;IACLK,CAAC,EAAEJ,IAAI,CAACK,KAAK,CAACd,aAAa,IAAIK,GAAG,CAAC,CAAC,CAAC,GAAGM,CAAC,CAAC,CAAC;IAC3CI,CAAC,EAAEN,IAAI,CAACK,KAAK,CAACd,aAAa,IAAIK,GAAG,CAAC,CAAC,CAAC,GAAGM,CAAC,CAAC,CAAC;IAC3CK,CAAC,EAAEP,IAAI,CAACK,KAAK,CAACd,aAAa,IAAIK,GAAG,CAAC,CAAC,CAAC,GAAGM,CAAC,CAAC;GAC3C;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}