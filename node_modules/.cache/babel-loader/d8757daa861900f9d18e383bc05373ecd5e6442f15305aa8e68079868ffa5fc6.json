{"ast":null,"code":"import { __spreadArray } from \"tslib\";\n/**\n * Takes an array of groups and returns a count of the groups and all descendant groups.\n * @param groups - The array of groups to count.\n */\nexport var GetGroupCount = function (groups) {\n  var total = 0;\n  if (groups) {\n    var remainingGroups = __spreadArray([], groups, true);\n    var currentGroup = void 0;\n    while (remainingGroups && remainingGroups.length > 0) {\n      ++total;\n      currentGroup = remainingGroups.pop();\n      if (currentGroup && currentGroup.children) {\n        remainingGroups.push.apply(remainingGroups, currentGroup.children);\n      }\n    }\n  }\n  return total;\n};","map":{"version":3,"names":["GetGroupCount","groups","total","remainingGroups","__spreadArray","currentGroup","length","pop","children","push","apply"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/groupedList/GroupedListUtility.tsx"],"sourcesContent":["import type { IGroup } from '../../components/GroupedList/GroupedList.types';\n\n/**\n * Takes an array of groups and returns a count of the groups and all descendant groups.\n * @param groups - The array of groups to count.\n */\nexport const GetGroupCount = (groups: IGroup[] | undefined): number => {\n  let total = 0;\n\n  if (groups) {\n    const remainingGroups = [...groups];\n    let currentGroup: IGroup;\n\n    while (remainingGroups && remainingGroups.length > 0) {\n      ++total;\n\n      currentGroup = remainingGroups.pop() as IGroup;\n\n      if (currentGroup && currentGroup.children) {\n        remainingGroups.push(...currentGroup.children);\n      }\n    }\n  }\n\n  return total;\n};\n"],"mappings":";AAEA;;;;AAIA,OAAO,IAAMA,aAAa,GAAG,SAAAA,CAACC,MAA4B;EACxD,IAAIC,KAAK,GAAG,CAAC;EAEb,IAAID,MAAM,EAAE;IACV,IAAME,eAAe,GAAAC,aAAA,KAAOH,MAAM,OAAC;IACnC,IAAII,YAAY,SAAQ;IAExB,OAAOF,eAAe,IAAIA,eAAe,CAACG,MAAM,GAAG,CAAC,EAAE;MACpD,EAAEJ,KAAK;MAEPG,YAAY,GAAGF,eAAe,CAACI,GAAG,EAAY;MAE9C,IAAIF,YAAY,IAAIA,YAAY,CAACG,QAAQ,EAAE;QACzCL,eAAe,CAACM,IAAI,CAAAC,KAAA,CAApBP,eAAe,EAASE,YAAY,CAACG,QAAQ;;;;EAKnD,OAAON,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}