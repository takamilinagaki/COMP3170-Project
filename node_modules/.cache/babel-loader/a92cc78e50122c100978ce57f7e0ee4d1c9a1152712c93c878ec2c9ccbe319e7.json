{"ast":null,"code":"/**\n * Split a string into tokens separated by whitespace, except all text within parentheses\n * is treated as a single token (whitespace is ignored within parentheses).\n *\n * Unlike String.split(' '), multiple consecutive space characters are collapsed and\n * removed from the returned array (including leading and trailing spaces).\n *\n * For example:\n * `tokenizeWithParentheses(\"3px calc(var(--x) / 2) 9px    0 \")`\n *   => `[\"3px\", \"calc(var(--x) / 2)\", \"9px\", \"0\"]`\n *\n * @returns The array of tokens. Returns an empty array if the string was empty or contained only whitespace.\n */\nexport function tokenizeWithParentheses(value) {\n  var parts = [];\n  var partStart = 0;\n  var parens = 0;\n  for (var i = 0; i < value.length; i++) {\n    switch (value[i]) {\n      case '(':\n        parens++;\n        break;\n      case ')':\n        if (parens) {\n          parens--;\n        }\n        break;\n      case '\\t':\n      case ' ':\n        if (!parens) {\n          // Add the new part if it's not an empty string\n          if (i > partStart) {\n            parts.push(value.substring(partStart, i));\n          }\n          partStart = i + 1;\n        }\n        break;\n    }\n  }\n  // Add the last part\n  if (partStart < value.length) {\n    parts.push(value.substring(partStart));\n  }\n  return parts;\n}","map":{"version":3,"names":["tokenizeWithParentheses","value","parts","partStart","parens","i","length","push","substring"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/merge-styles/src/tokenizeWithParentheses.ts"],"sourcesContent":["/**\n * Split a string into tokens separated by whitespace, except all text within parentheses\n * is treated as a single token (whitespace is ignored within parentheses).\n *\n * Unlike String.split(' '), multiple consecutive space characters are collapsed and\n * removed from the returned array (including leading and trailing spaces).\n *\n * For example:\n * `tokenizeWithParentheses(\"3px calc(var(--x) / 2) 9px    0 \")`\n *   => `[\"3px\", \"calc(var(--x) / 2)\", \"9px\", \"0\"]`\n *\n * @returns The array of tokens. Returns an empty array if the string was empty or contained only whitespace.\n */\nexport function tokenizeWithParentheses(value: string): string[] {\n  const parts = [];\n  let partStart = 0;\n  let parens = 0;\n\n  for (let i = 0; i < value.length; i++) {\n    switch (value[i]) {\n      case '(':\n        parens++;\n        break;\n      case ')':\n        if (parens) {\n          parens--;\n        }\n        break;\n      case '\\t':\n      case ' ':\n        if (!parens) {\n          // Add the new part if it's not an empty string\n          if (i > partStart) {\n            parts.push(value.substring(partStart, i));\n          }\n          partStart = i + 1;\n        }\n        break;\n    }\n  }\n\n  // Add the last part\n  if (partStart < value.length) {\n    parts.push(value.substring(partStart));\n  }\n\n  return parts;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;AAaA,OAAM,SAAUA,uBAAuBA,CAACC,KAAa;EACnD,IAAMC,KAAK,GAAG,EAAE;EAChB,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,MAAM,GAAG,CAAC;EAEd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,QAAQJ,KAAK,CAACI,CAAC,CAAC;MACd,KAAK,GAAG;QACND,MAAM,EAAE;QACR;MACF,KAAK,GAAG;QACN,IAAIA,MAAM,EAAE;UACVA,MAAM,EAAE;;QAEV;MACF,KAAK,IAAI;MACT,KAAK,GAAG;QACN,IAAI,CAACA,MAAM,EAAE;UACX;UACA,IAAIC,CAAC,GAAGF,SAAS,EAAE;YACjBD,KAAK,CAACK,IAAI,CAACN,KAAK,CAACO,SAAS,CAACL,SAAS,EAAEE,CAAC,CAAC,CAAC;;UAE3CF,SAAS,GAAGE,CAAC,GAAG,CAAC;;QAEnB;;;EAIN;EACA,IAAIF,SAAS,GAAGF,KAAK,CAACK,MAAM,EAAE;IAC5BJ,KAAK,CAACK,IAAI,CAACN,KAAK,CAACO,SAAS,CAACL,SAAS,CAAC,CAAC;;EAGxC,OAAOD,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}