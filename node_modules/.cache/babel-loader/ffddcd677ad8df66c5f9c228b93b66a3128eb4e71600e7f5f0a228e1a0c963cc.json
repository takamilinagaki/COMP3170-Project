{"ast":null,"code":"import { IsFocusVisibleClassName } from '../../Utilities';\nimport { HighContrastSelector, getFocusStyle } from '../../Styling';\n// Size breakpoint when the default border width changes from 2px to 4px.\nvar CELL_BORDER_BREAKPOINT = 24;\nvar LARGE_BORDER = 4;\nvar SMALL_BORDER = 2;\nvar DIVIDING_PADDING = 2;\nvar DEFAULT_CELL_SIZE = 20;\nvar cellHighContrastFocus = {\n  left: -2,\n  top: -2,\n  bottom: -2,\n  right: -2,\n  border: 'none',\n  outlineColor: 'ButtonText'\n};\nexport var getStyles = function (props) {\n  var _a, _b, _c, _d, _e;\n  var theme = props.theme,\n    disabled = props.disabled,\n    selected = props.selected,\n    circle = props.circle,\n    isWhite = props.isWhite,\n    _f = props.height,\n    height = _f === void 0 ? DEFAULT_CELL_SIZE : _f,\n    _g = props.width,\n    width = _g === void 0 ? DEFAULT_CELL_SIZE : _g,\n    borderWidth = props.borderWidth;\n  var semanticColors = theme.semanticColors,\n    palette = theme.palette;\n  var buttonBorderHovered = palette.neutralLighter;\n  var buttonBorderChecked = palette.neutralLight;\n  var buttonBorderCheckedHovered = palette.neutralSecondary;\n  var buttonBorderIsWhite = palette.neutralTertiary;\n  // If user provided a value, use it. If not, then we decide depending on the 24px size breakpoint.\n  var calculatedBorderWidth = borderWidth ? borderWidth : width < CELL_BORDER_BREAKPOINT ? SMALL_BORDER : LARGE_BORDER;\n  return {\n    // this is a button that wraps the color\n    colorCell: [getFocusStyle(theme, {\n      inset: -1,\n      position: 'relative',\n      highContrastStyle: cellHighContrastFocus\n    }), {\n      backgroundColor: semanticColors.bodyBackground,\n      padding: 0,\n      position: 'relative',\n      boxSizing: 'border-box',\n      display: 'inline-block',\n      cursor: 'pointer',\n      userSelect: 'none',\n      borderRadius: 0,\n      border: 'none',\n      height: height,\n      width: width,\n      verticalAlign: 'top'\n    }, !circle && {\n      selectors: (_a = {}, _a[\".\".concat(IsFocusVisibleClassName, \" &:focus::after\")] = {\n        // -1px so that we don't increase visually the size of the cell.\n        outlineOffset: \"\".concat(calculatedBorderWidth - 1, \"px\")\n      }, _a)\n    },\n    // In focus state for circle we want a round border which is not possible with outline.\n    circle && {\n      borderRadius: '50%',\n      selectors: (_b = {}, _b[\".\".concat(IsFocusVisibleClassName, \" &:focus::after\")] = {\n        outline: 'none',\n        borderColor: semanticColors.focusBorder,\n        borderRadius: '50%',\n        left: -calculatedBorderWidth,\n        right: -calculatedBorderWidth,\n        top: -calculatedBorderWidth,\n        bottom: -calculatedBorderWidth,\n        selectors: (_c = {}, _c[HighContrastSelector] = {\n          outline: \"1px solid ButtonText\"\n        }, _c)\n      }, _b)\n    }, selected && {\n      padding: DIVIDING_PADDING,\n      border: \"\".concat(calculatedBorderWidth, \"px solid \").concat(buttonBorderChecked),\n      selectors: (_d = {}, _d['&:hover::before'] = {\n        content: '\"\"',\n        height: height,\n        width: width,\n        position: 'absolute',\n        top: -calculatedBorderWidth,\n        left: -calculatedBorderWidth,\n        borderRadius: circle ? '50%' : 'default',\n        boxShadow: \"inset 0 0 0 1px \".concat(buttonBorderCheckedHovered)\n      }, _d)\n    }, !selected && {\n      selectors: (_e = {}, _e['&:hover, &:active, &:focus'] = {\n        backgroundColor: semanticColors.bodyBackground,\n        padding: DIVIDING_PADDING,\n        border: \"\".concat(calculatedBorderWidth, \"px solid \").concat(buttonBorderHovered)\n      }, _e['&:focus'] = {\n        borderColor: semanticColors.bodyBackground,\n        padding: 0,\n        selectors: {\n          ':hover': {\n            borderColor: theme.palette.neutralLight,\n            padding: DIVIDING_PADDING\n          }\n        }\n      }, _e)\n    }, disabled && {\n      color: semanticColors.disabledBodyText,\n      pointerEvents: 'none',\n      opacity: 0.3\n    }, isWhite && !selected && {\n      // fake a border for white\n      backgroundColor: buttonBorderIsWhite,\n      padding: 1\n    }],\n    // the <svg> that holds the color\n    svg: [{\n      width: '100%',\n      height: '100%'\n    }, circle && {\n      borderRadius: '50%'\n    }]\n  };\n};","map":{"version":3,"names":["IsFocusVisibleClassName","HighContrastSelector","getFocusStyle","CELL_BORDER_BREAKPOINT","LARGE_BORDER","SMALL_BORDER","DIVIDING_PADDING","DEFAULT_CELL_SIZE","cellHighContrastFocus","left","top","bottom","right","border","outlineColor","getStyles","props","theme","disabled","selected","circle","isWhite","_f","height","_g","width","borderWidth","semanticColors","palette","buttonBorderHovered","neutralLighter","buttonBorderChecked","neutralLight","buttonBorderCheckedHovered","neutralSecondary","buttonBorderIsWhite","neutralTertiary","calculatedBorderWidth","colorCell","inset","position","highContrastStyle","backgroundColor","bodyBackground","padding","boxSizing","display","cursor","userSelect","borderRadius","verticalAlign","selectors","_a","concat","outlineOffset","_b","outline","borderColor","focusBorder","_c","_d","content","boxShadow","_e","color","disabledBodyText","pointerEvents","opacity","svg"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/SwatchColorPicker/ColorPickerGridCell.styles.ts"],"sourcesContent":["import { IsFocusVisibleClassName } from '../../Utilities';\nimport { HighContrastSelector, getFocusStyle } from '../../Styling';\nimport type { IColorPickerGridCellStyleProps, IColorPickerGridCellStyles } from './ColorPickerGridCell.types';\n\n// Size breakpoint when the default border width changes from 2px to 4px.\nconst CELL_BORDER_BREAKPOINT = 24;\nconst LARGE_BORDER = 4;\nconst SMALL_BORDER = 2;\nconst DIVIDING_PADDING = 2;\nconst DEFAULT_CELL_SIZE = 20;\n\nconst cellHighContrastFocus = {\n  left: -2,\n  top: -2,\n  bottom: -2,\n  right: -2,\n  border: 'none',\n  outlineColor: 'ButtonText',\n};\n\nexport const getStyles = (props: IColorPickerGridCellStyleProps): IColorPickerGridCellStyles => {\n  const {\n    theme,\n    disabled,\n    selected,\n    circle,\n    isWhite,\n    height = DEFAULT_CELL_SIZE,\n    width = DEFAULT_CELL_SIZE,\n    borderWidth,\n  } = props;\n  const { semanticColors, palette } = theme;\n\n  const buttonBorderHovered = palette.neutralLighter;\n  const buttonBorderChecked = palette.neutralLight;\n  const buttonBorderCheckedHovered = palette.neutralSecondary;\n  const buttonBorderIsWhite = palette.neutralTertiary;\n\n  // If user provided a value, use it. If not, then we decide depending on the 24px size breakpoint.\n  const calculatedBorderWidth = borderWidth\n    ? borderWidth\n    : width < CELL_BORDER_BREAKPOINT\n    ? SMALL_BORDER\n    : LARGE_BORDER;\n\n  return {\n    // this is a button that wraps the color\n    colorCell: [\n      getFocusStyle(theme, { inset: -1, position: 'relative', highContrastStyle: cellHighContrastFocus }),\n      {\n        backgroundColor: semanticColors.bodyBackground,\n        padding: 0,\n        position: 'relative',\n        boxSizing: 'border-box',\n        display: 'inline-block',\n        cursor: 'pointer',\n        userSelect: 'none',\n        borderRadius: 0,\n        border: 'none',\n        height,\n        width,\n        verticalAlign: 'top',\n      },\n      !circle && {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\n            // -1px so that we don't increase visually the size of the cell.\n            outlineOffset: `${calculatedBorderWidth - 1}px`,\n          },\n        },\n      },\n      // In focus state for circle we want a round border which is not possible with outline.\n      circle && {\n        borderRadius: '50%',\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus::after`]: {\n            outline: 'none',\n            borderColor: semanticColors.focusBorder,\n            borderRadius: '50%',\n            left: -calculatedBorderWidth,\n            right: -calculatedBorderWidth,\n            top: -calculatedBorderWidth,\n            bottom: -calculatedBorderWidth,\n            selectors: {\n              [HighContrastSelector]: {\n                outline: `1px solid ButtonText`,\n              },\n            },\n          },\n        },\n      },\n      selected && {\n        padding: DIVIDING_PADDING,\n        border: `${calculatedBorderWidth}px solid ${buttonBorderChecked}`,\n        selectors: {\n          ['&:hover::before']: {\n            content: '\"\"',\n            height,\n            width,\n            position: 'absolute',\n            top: -calculatedBorderWidth,\n            left: -calculatedBorderWidth,\n            borderRadius: circle ? '50%' : 'default',\n            boxShadow: `inset 0 0 0 1px ${buttonBorderCheckedHovered}`,\n          },\n        },\n      },\n      !selected && {\n        selectors: {\n          ['&:hover, &:active, &:focus']: {\n            backgroundColor: semanticColors.bodyBackground, // overwrite white's override\n            padding: DIVIDING_PADDING,\n            border: `${calculatedBorderWidth}px solid ${buttonBorderHovered}`,\n          },\n          ['&:focus']: {\n            borderColor: semanticColors.bodyBackground,\n            padding: 0,\n            selectors: {\n              ':hover': {\n                borderColor: theme.palette.neutralLight,\n                padding: DIVIDING_PADDING,\n              },\n            },\n          },\n        },\n      },\n      disabled && {\n        color: semanticColors.disabledBodyText,\n        pointerEvents: 'none',\n        opacity: 0.3,\n      },\n      isWhite &&\n        !selected && {\n          // fake a border for white\n          backgroundColor: buttonBorderIsWhite,\n          padding: 1,\n        },\n    ],\n    // the <svg> that holds the color\n    svg: [\n      {\n        width: '100%',\n        height: '100%',\n      },\n      circle && {\n        borderRadius: '50%',\n      },\n    ],\n  };\n};\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,iBAAiB;AACzD,SAASC,oBAAoB,EAAEC,aAAa,QAAQ,eAAe;AAGnE;AACA,IAAMC,sBAAsB,GAAG,EAAE;AACjC,IAAMC,YAAY,GAAG,CAAC;AACtB,IAAMC,YAAY,GAAG,CAAC;AACtB,IAAMC,gBAAgB,GAAG,CAAC;AAC1B,IAAMC,iBAAiB,GAAG,EAAE;AAE5B,IAAMC,qBAAqB,GAAG;EAC5BC,IAAI,EAAE,CAAC,CAAC;EACRC,GAAG,EAAE,CAAC,CAAC;EACPC,MAAM,EAAE,CAAC,CAAC;EACVC,KAAK,EAAE,CAAC,CAAC;EACTC,MAAM,EAAE,MAAM;EACdC,YAAY,EAAE;CACf;AAED,OAAO,IAAMC,SAAS,GAAG,SAAAA,CAACC,KAAqC;;EAE3D,IAAAC,KAAK,GAQHD,KAAK,CAAAC,KARF;IACLC,QAAQ,GAONF,KAAK,CAAAE,QAPC;IACRC,QAAQ,GAMNH,KAAK,CAAAG,QANC;IACRC,MAAM,GAKJJ,KAAK,CAAAI,MALD;IACNC,OAAO,GAILL,KAAK,CAAAK,OAJA;IACPC,EAAA,GAGEN,KAAK,CAAAO,MAHmB;IAA1BA,MAAM,GAAAD,EAAA,cAAGf,iBAAiB,GAAAe,EAAA;IAC1BE,EAAA,GAEER,KAAK,CAAAS,KAFkB;IAAzBA,KAAK,GAAAD,EAAA,cAAGjB,iBAAiB,GAAAiB,EAAA;IACzBE,WAAW,GACTV,KAAK,CAAAU,WADI;EAEL,IAAAC,cAAc,GAAcV,KAAK,CAAAU,cAAnB;IAAEC,OAAO,GAAKX,KAAK,CAAAW,OAAV;EAE/B,IAAMC,mBAAmB,GAAGD,OAAO,CAACE,cAAc;EAClD,IAAMC,mBAAmB,GAAGH,OAAO,CAACI,YAAY;EAChD,IAAMC,0BAA0B,GAAGL,OAAO,CAACM,gBAAgB;EAC3D,IAAMC,mBAAmB,GAAGP,OAAO,CAACQ,eAAe;EAEnD;EACA,IAAMC,qBAAqB,GAAGX,WAAW,GACrCA,WAAW,GACXD,KAAK,GAAGtB,sBAAsB,GAC9BE,YAAY,GACZD,YAAY;EAEhB,OAAO;IACL;IACAkC,SAAS,EAAE,CACTpC,aAAa,CAACe,KAAK,EAAE;MAAEsB,KAAK,EAAE,CAAC,CAAC;MAAEC,QAAQ,EAAE,UAAU;MAAEC,iBAAiB,EAAEjC;IAAqB,CAAE,CAAC,EACnG;MACEkC,eAAe,EAAEf,cAAc,CAACgB,cAAc;MAC9CC,OAAO,EAAE,CAAC;MACVJ,QAAQ,EAAE,UAAU;MACpBK,SAAS,EAAE,YAAY;MACvBC,OAAO,EAAE,cAAc;MACvBC,MAAM,EAAE,SAAS;MACjBC,UAAU,EAAE,MAAM;MAClBC,YAAY,EAAE,CAAC;MACfpC,MAAM,EAAE,MAAM;MACdU,MAAM,EAAAA,MAAA;MACNE,KAAK,EAAAA,KAAA;MACLyB,aAAa,EAAE;KAChB,EACD,CAAC9B,MAAM,IAAI;MACT+B,SAAS,GAAAC,EAAA,OACPA,EAAA,CAAC,IAAAC,MAAA,CAAIrD,uBAAuB,oBAAiB,IAAG;QAC9C;QACAsD,aAAa,EAAE,GAAAD,MAAA,CAAGhB,qBAAqB,GAAG,CAAC;OAC5C,E;KAEJ;IACD;IACAjB,MAAM,IAAI;MACR6B,YAAY,EAAE,KAAK;MACnBE,SAAS,GAAAI,EAAA,OACPA,EAAA,CAAC,IAAAF,MAAA,CAAIrD,uBAAuB,oBAAiB,IAAG;QAC9CwD,OAAO,EAAE,MAAM;QACfC,WAAW,EAAE9B,cAAc,CAAC+B,WAAW;QACvCT,YAAY,EAAE,KAAK;QACnBxC,IAAI,EAAE,CAAC4B,qBAAqB;QAC5BzB,KAAK,EAAE,CAACyB,qBAAqB;QAC7B3B,GAAG,EAAE,CAAC2B,qBAAqB;QAC3B1B,MAAM,EAAE,CAAC0B,qBAAqB;QAC9Bc,SAAS,GAAAQ,EAAA,OACPA,EAAA,CAAC1D,oBAAoB,IAAG;UACtBuD,OAAO,EAAE;SACV,E;OAEJ,E;KAEJ,EACDrC,QAAQ,IAAI;MACVyB,OAAO,EAAEtC,gBAAgB;MACzBO,MAAM,EAAE,GAAAwC,MAAA,CAAGhB,qBAAqB,eAAAgB,MAAA,CAAYtB,mBAAmB,CAAE;MACjEoB,SAAS,GAAAS,EAAA,OACPA,EAAA,CAAC,iBAAiB,IAAG;QACnBC,OAAO,EAAE,IAAI;QACbtC,MAAM,EAAAA,MAAA;QACNE,KAAK,EAAAA,KAAA;QACLe,QAAQ,EAAE,UAAU;QACpB9B,GAAG,EAAE,CAAC2B,qBAAqB;QAC3B5B,IAAI,EAAE,CAAC4B,qBAAqB;QAC5BY,YAAY,EAAE7B,MAAM,GAAG,KAAK,GAAG,SAAS;QACxC0C,SAAS,EAAE,mBAAAT,MAAA,CAAmBpB,0BAA0B;OACzD,E;KAEJ,EACD,CAACd,QAAQ,IAAI;MACXgC,SAAS,GAAAY,EAAA,OACPA,EAAA,CAAC,4BAA4B,IAAG;QAC9BrB,eAAe,EAAEf,cAAc,CAACgB,cAAc;QAC9CC,OAAO,EAAEtC,gBAAgB;QACzBO,MAAM,EAAE,GAAAwC,MAAA,CAAGhB,qBAAqB,eAAAgB,MAAA,CAAYxB,mBAAmB;OAChE,EACDkC,EAAA,CAAC,SAAS,IAAG;QACXN,WAAW,EAAE9B,cAAc,CAACgB,cAAc;QAC1CC,OAAO,EAAE,CAAC;QACVO,SAAS,EAAE;UACT,QAAQ,EAAE;YACRM,WAAW,EAAExC,KAAK,CAACW,OAAO,CAACI,YAAY;YACvCY,OAAO,EAAEtC;;;OAGd,E;KAEJ,EACDY,QAAQ,IAAI;MACV8C,KAAK,EAAErC,cAAc,CAACsC,gBAAgB;MACtCC,aAAa,EAAE,MAAM;MACrBC,OAAO,EAAE;KACV,EACD9C,OAAO,IACL,CAACF,QAAQ,IAAI;MACX;MACAuB,eAAe,EAAEP,mBAAmB;MACpCS,OAAO,EAAE;KACV,CACJ;IACD;IACAwB,GAAG,EAAE,CACH;MACE3C,KAAK,EAAE,MAAM;MACbF,MAAM,EAAE;KACT,EACDH,MAAM,IAAI;MACR6B,YAAY,EAAE;KACf;GAEJ;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}