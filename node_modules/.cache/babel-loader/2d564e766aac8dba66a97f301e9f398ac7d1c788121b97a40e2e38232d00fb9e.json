{"ast":null,"code":"import { mergeCssSets, Stylesheet } from '@fluentui/merge-styles';\nimport { getRTL } from './rtl';\nimport { getWindow } from './dom';\nvar MAX_CACHE_COUNT = 50;\nvar DEFAULT_SPECIFICITY_MULTIPLIER = 5;\nvar _memoizedClassNames = 0;\nvar stylesheet = Stylesheet.getInstance();\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(function () {\n    return _memoizedClassNames++;\n  });\n}\n// Note that because of the caching nature within the classNames memoization,\n// I've disabled this rule to simply be able to work with any types.\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// This represents a prop we attach to each Map to indicate the cached return value\n// associated with the graph node.\nvar retVal = '__retval__';\n/**\n * Creates a getClassNames function which calls getStyles given the props, and injects them\n * into mergeStyleSets.\n *\n * Note that the props you pass in on every render should be in the same order and\n * immutable (numbers, strings, and booleans). This will allow the results to be memoized. Violating\n * these will cause extra recalcs to occur.\n */\nexport function classNamesFunction(options) {\n  // We build a trie where each node is a Map. The map entry key represents an argument\n  // value, and the entry value is another node (Map). Each node has a `__retval__`\n  // property which is used to hold the cached response.\n  if (options === void 0) {\n    options = {};\n  }\n  // To derive the response, we can simply ensure the arguments are added or already\n  // exist in the trie. At the last node, if there is a `__retval__` we return that. Otherwise\n  // we call the `getStyles` api to evaluate, cache on the property, and return that.\n  var map = new Map();\n  var styleCalcCount = 0;\n  var getClassNamesCount = 0;\n  var currentMemoizedClassNames = _memoizedClassNames;\n  var getClassNames = function (styleFunctionOrObject, styleProps) {\n    var _a;\n    if (styleProps === void 0) {\n      styleProps = {};\n    }\n    // If useStaticStyles is true, styleFunctionOrObject returns slot to classname mappings.\n    // If there is also no style overrides, we can skip merge styles completely and\n    // simply return the result from the style funcion.\n    if (options.useStaticStyles && typeof styleFunctionOrObject === 'function' && styleFunctionOrObject.__noStyleOverride__) {\n      return styleFunctionOrObject(styleProps);\n    }\n    getClassNamesCount++;\n    var current = map;\n    var theme = styleProps.theme;\n    var rtl = theme && theme.rtl !== undefined ? theme.rtl : getRTL();\n    var disableCaching = options.disableCaching;\n    // On reset of our stylesheet, reset memoized cache.\n    if (currentMemoizedClassNames !== _memoizedClassNames) {\n      currentMemoizedClassNames = _memoizedClassNames;\n      map = new Map();\n      styleCalcCount = 0;\n    }\n    if (!options.disableCaching) {\n      current = _traverseMap(map, styleFunctionOrObject);\n      current = _traverseMap(current, styleProps);\n    }\n    if (disableCaching || !current[retVal]) {\n      if (styleFunctionOrObject === undefined) {\n        current[retVal] = {};\n      } else {\n        current[retVal] = mergeCssSets([typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps) : styleFunctionOrObject], {\n          rtl: !!rtl,\n          specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : undefined\n        });\n      }\n      if (!disableCaching) {\n        styleCalcCount++;\n      }\n    }\n    if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {\n      var win = getWindow();\n      if ((_a = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _a === void 0 ? void 0 : _a.enableClassNameCacheFullWarning) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Styles are being recalculated too frequently. Cache miss rate is \".concat(styleCalcCount, \"/\").concat(getClassNamesCount, \".\"));\n        // eslint-disable-next-line no-console\n        console.trace();\n      }\n      map.clear();\n      styleCalcCount = 0;\n      // Mutate the options passed in, that's all we can do.\n      options.disableCaching = true;\n    }\n    // Note: the retVal is an attached property on the Map; not a key in the Map. We use this attached property to\n    // cache the return value for this branch of the graph.\n    return current[retVal];\n  };\n  return getClassNames;\n}\nfunction _traverseEdge(current, value) {\n  value = _normalizeValue(value);\n  if (!current.has(value)) {\n    current.set(value, new Map());\n  }\n  return current.get(value);\n}\nfunction _traverseMap(current, inputs) {\n  if (typeof inputs === 'function') {\n    var cachedInputsFromStyled = inputs.__cachedInputs__;\n    if (cachedInputsFromStyled) {\n      // The styled helper will generate the styles function and will attach the cached\n      // inputs (consisting of the default styles, customzied styles, and user provided styles.)\n      // These should be used as cache keys for deriving the memoized value.\n      for (var _i = 0, _a = inputs.__cachedInputs__; _i < _a.length; _i++) {\n        var input = _a[_i];\n        current = _traverseEdge(current, input);\n      }\n    } else {\n      current = _traverseEdge(current, inputs);\n    }\n  } else if (typeof inputs === 'object') {\n    for (var propName in inputs) {\n      if (inputs.hasOwnProperty(propName)) {\n        current = _traverseEdge(current, inputs[propName]);\n      }\n    }\n  }\n  return current;\n}\nfunction _normalizeValue(value) {\n  switch (value) {\n    case undefined:\n      return '__undefined__';\n    case null:\n      return '__null__';\n    default:\n      return value;\n  }\n}","map":{"version":3,"names":["mergeCssSets","Stylesheet","getRTL","getWindow","MAX_CACHE_COUNT","DEFAULT_SPECIFICITY_MULTIPLIER","_memoizedClassNames","stylesheet","getInstance","onReset","retVal","classNamesFunction","options","map","Map","styleCalcCount","getClassNamesCount","currentMemoizedClassNames","getClassNames","styleFunctionOrObject","styleProps","useStaticStyles","__noStyleOverride__","current","theme","rtl","undefined","disableCaching","_traverseMap","specificityMultiplier","cacheSize","win","_a","FabricConfig","enableClassNameCacheFullWarning","console","warn","concat","trace","clear","_traverseEdge","value","_normalizeValue","has","set","get","inputs","cachedInputsFromStyled","__cachedInputs__","_i","length","input","propName","hasOwnProperty"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/src/classNamesFunction.ts"],"sourcesContent":["import { mergeCssSets, Stylesheet } from '@fluentui/merge-styles';\nimport { getRTL } from './rtl';\nimport { getWindow } from './dom';\nimport type { IStyleSet, IProcessedStyleSet, IStyleFunctionOrObject } from '@fluentui/merge-styles';\nimport type { StyleFunction } from './styled';\n\nconst MAX_CACHE_COUNT = 50;\nconst DEFAULT_SPECIFICITY_MULTIPLIER = 5;\n\nlet _memoizedClassNames = 0;\n\nconst stylesheet = Stylesheet.getInstance();\n\nif (stylesheet && stylesheet.onReset) {\n  stylesheet.onReset(() => _memoizedClassNames++);\n}\n\n// Note that because of the caching nature within the classNames memoization,\n// I've disabled this rule to simply be able to work with any types.\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// This represents a prop we attach to each Map to indicate the cached return value\n// associated with the graph node.\nconst retVal = '__retval__';\n\ninterface IRecursiveMemoNode extends Map<any, IRecursiveMemoNode> {\n  [retVal]?: string;\n}\n\ntype AppWindow = (Window & { FabricConfig?: { enableClassNameCacheFullWarning?: boolean } }) | undefined;\n\nexport interface IClassNamesFunctionOptions {\n  /**\n   * Disables class caching for scenarios where styleProp parts mutate frequently.\n   */\n  disableCaching?: boolean;\n\n  /**\n   * Size of the cache. It overwrites default cache size when defined.\n   */\n  cacheSize?: number;\n\n  /**\n   * Set to true if component base styles are implemented in scss instead of css-in-js.\n   */\n  useStaticStyles?: boolean;\n}\n\n/**\n * Creates a getClassNames function which calls getStyles given the props, and injects them\n * into mergeStyleSets.\n *\n * Note that the props you pass in on every render should be in the same order and\n * immutable (numbers, strings, and booleans). This will allow the results to be memoized. Violating\n * these will cause extra recalcs to occur.\n */\nexport function classNamesFunction<TStyleProps extends {}, TStyleSet extends IStyleSet<TStyleSet>>(\n  options: IClassNamesFunctionOptions = {},\n): (\n  getStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined,\n  styleProps?: TStyleProps,\n) => IProcessedStyleSet<TStyleSet> {\n  // We build a trie where each node is a Map. The map entry key represents an argument\n  // value, and the entry value is another node (Map). Each node has a `__retval__`\n  // property which is used to hold the cached response.\n\n  // To derive the response, we can simply ensure the arguments are added or already\n  // exist in the trie. At the last node, if there is a `__retval__` we return that. Otherwise\n  // we call the `getStyles` api to evaluate, cache on the property, and return that.\n  let map: IRecursiveMemoNode = new Map();\n  let styleCalcCount = 0;\n  let getClassNamesCount = 0;\n  let currentMemoizedClassNames = _memoizedClassNames;\n\n  const getClassNames = (\n    styleFunctionOrObject: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined,\n    styleProps: TStyleProps = {} as TStyleProps,\n  ): IProcessedStyleSet<TStyleSet> => {\n    // If useStaticStyles is true, styleFunctionOrObject returns slot to classname mappings.\n    // If there is also no style overrides, we can skip merge styles completely and\n    // simply return the result from the style funcion.\n    if (\n      options.useStaticStyles &&\n      typeof styleFunctionOrObject === 'function' &&\n      (styleFunctionOrObject as StyleFunction<TStyleProps, TStyleSet>).__noStyleOverride__\n    ) {\n      return styleFunctionOrObject(styleProps) as IProcessedStyleSet<TStyleSet>;\n    }\n\n    getClassNamesCount++;\n    let current: Map<any, any> = map;\n    const { theme } = styleProps as any;\n    const rtl = theme && theme.rtl !== undefined ? theme.rtl : getRTL();\n\n    const disableCaching = options.disableCaching;\n\n    // On reset of our stylesheet, reset memoized cache.\n    if (currentMemoizedClassNames !== _memoizedClassNames) {\n      currentMemoizedClassNames = _memoizedClassNames;\n      map = new Map();\n      styleCalcCount = 0;\n    }\n\n    if (!options.disableCaching) {\n      current = _traverseMap(map, styleFunctionOrObject as any);\n      current = _traverseMap(current, styleProps);\n    }\n\n    if (disableCaching || !(current as any)[retVal]) {\n      if (styleFunctionOrObject === undefined) {\n        (current as any)[retVal] = {} as IProcessedStyleSet<TStyleSet>;\n      } else {\n        (current as any)[retVal] = mergeCssSets(\n          [\n            (typeof styleFunctionOrObject === 'function'\n              ? styleFunctionOrObject(styleProps)\n              : styleFunctionOrObject) as IStyleSet<TStyleSet>,\n          ],\n          { rtl: !!rtl, specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : undefined },\n        );\n      }\n\n      if (!disableCaching) {\n        styleCalcCount++;\n      }\n    }\n\n    if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {\n      const win = getWindow() as AppWindow;\n      if (win?.FabricConfig?.enableClassNameCacheFullWarning) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Styles are being recalculated too frequently. Cache miss rate is ${styleCalcCount}/${getClassNamesCount}.`,\n        );\n        // eslint-disable-next-line no-console\n        console.trace();\n      }\n\n      map.clear();\n      styleCalcCount = 0;\n\n      // Mutate the options passed in, that's all we can do.\n      options.disableCaching = true;\n    }\n\n    // Note: the retVal is an attached property on the Map; not a key in the Map. We use this attached property to\n    // cache the return value for this branch of the graph.\n    return (current as any)[retVal];\n  };\n\n  return getClassNames;\n}\n\nfunction _traverseEdge(current: Map<any, any>, value: any): Map<any, any> {\n  value = _normalizeValue(value);\n\n  if (!current.has(value)) {\n    current.set(value, new Map<any, any>());\n  }\n\n  return current.get(value);\n}\n\nfunction _traverseMap(current: Map<any, any>, inputs: any[] | Object): Map<any, any> {\n  if (typeof inputs === 'function') {\n    const cachedInputsFromStyled = (inputs as StyleFunction<any, any>).__cachedInputs__;\n    if (cachedInputsFromStyled) {\n      // The styled helper will generate the styles function and will attach the cached\n      // inputs (consisting of the default styles, customzied styles, and user provided styles.)\n      // These should be used as cache keys for deriving the memoized value.\n      for (const input of (inputs as any).__cachedInputs__) {\n        current = _traverseEdge(current, input);\n      }\n    } else {\n      current = _traverseEdge(current, inputs);\n    }\n  } else if (typeof inputs === 'object') {\n    for (const propName in inputs) {\n      if (inputs.hasOwnProperty(propName)) {\n        current = _traverseEdge(current, (inputs as any)[propName]);\n      }\n    }\n  }\n\n  return current;\n}\n\nfunction _normalizeValue(value: any): string {\n  switch (value) {\n    case undefined:\n      return '__undefined__';\n    case null:\n      return '__null__';\n    default:\n      return value;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}