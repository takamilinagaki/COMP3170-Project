{"ast":null,"code":"/**\n * {@docCategory HoverCard}\n */\nexport var ExpandingCardMode;\n(function (ExpandingCardMode) {\n  /**\n   * To have top compact card only\n   */\n  ExpandingCardMode[ExpandingCardMode[\"compact\"] = 0] = \"compact\";\n  /**\n   * To have both top compact and bottom expanded card\n   */\n  ExpandingCardMode[ExpandingCardMode[\"expanded\"] = 1] = \"expanded\";\n})(ExpandingCardMode || (ExpandingCardMode = {}));","map":{"version":3,"names":["ExpandingCardMode"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/HoverCard/ExpandingCard.types.ts"],"sourcesContent":["import type { IBaseCardProps, IBaseCardStyles, IBaseCardStyleProps } from './BaseCard.types';\nimport type { IRenderFunction } from '../../Utilities';\nimport type { IStyle } from '../../Styling';\n\n/**\n * {@docCategory HoverCard}\n */\nexport interface IExpandingCard {}\n\n/**\n * ExpandingCard component props.\n * {@docCategory HoverCard}\n */\nexport interface IExpandingCardProps\n  extends IBaseCardProps<IExpandingCard, IExpandingCardStyles, IExpandingCardStyleProps> {\n  /**\n   * Height of compact card\n   * @defaultvalue 156\n   */\n  compactCardHeight?: number;\n\n  /**\n   * Height of expanded card\n   * @defaultvalue 384\n   */\n  expandedCardHeight?: number;\n\n  /**\n   * Use to open the card in expanded format and not wait for the delay\n   * @defaultvalue ExpandingCardMode.compact\n   */\n  mode?: ExpandingCardMode;\n\n  /**\n   *  Render function to populate compact content area\n   */\n  onRenderCompactCard?: IRenderFunction<any>;\n\n  /**\n   *  Render function to populate expanded content area\n   */\n  onRenderExpandedCard?: IRenderFunction<any>;\n}\n\n/**\n * {@docCategory HoverCard}\n */\nexport enum ExpandingCardMode {\n  /**\n   * To have top compact card only\n   */\n  compact = 0,\n\n  /**\n   * To have both top compact and bottom expanded card\n   */\n  expanded = 1,\n}\n\n/**\n * {@docCategory HoverCard}\n */\nexport interface IExpandingCardStyleProps extends IBaseCardStyleProps {\n  /**\n   * Height of the compact section of the card.\n   */\n  compactCardHeight?: number;\n\n  /**\n   * Boolean flag that expanded card is in Expanded.mode === expanded && first frame was rendered.\n   */\n  expandedCardFirstFrameRendered?: boolean;\n\n  /**\n   * Height of the expanded section of the card.\n   */\n  expandedCardHeight?: number;\n\n  /**\n   * Whether the content of the expanded card overflows vertically.\n   */\n  needsScroll?: boolean;\n}\n\n/**\n * {@docCategory HoverCard}\n */\nexport interface IExpandingCardStyles extends IBaseCardStyles {\n  /**\n   * Style for the main card element.\n   */\n  compactCard?: IStyle;\n\n  /**\n   * Base Style for the expanded card content.\n   */\n  expandedCard?: IStyle;\n\n  /**\n   * Style for the expanded card scroll content.\n   */\n  expandedCardScroll?: IStyle;\n}\n"],"mappings":"AA4CA;;;AAGA,WAAYA,iBAUX;AAVD,WAAYA,iBAAiB;EAC3B;;;EAGAA,iBAAA,CAAAA,iBAAA,4BAAW;EAEX;;;EAGAA,iBAAA,CAAAA,iBAAA,8BAAY;AACd,CAAC,EAVWA,iBAAiB,KAAjBA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}