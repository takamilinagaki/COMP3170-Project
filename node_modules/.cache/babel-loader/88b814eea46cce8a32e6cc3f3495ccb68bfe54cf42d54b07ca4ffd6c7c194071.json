{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { hoistMethods, unhoistMethods } from '../../Utilities';\nvar BaseDecorator = /** @class */function (_super) {\n  __extends(BaseDecorator, _super);\n  function BaseDecorator(props) {\n    var _this = _super.call(this, props) || this;\n    _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n    return _this;\n  }\n  /**\n   * Updates the ref to the component composed by the decorator, which will also take care of hoisting\n   * (and unhoisting as appropriate) methods from said component.\n   *\n   * Pass this method as the argument to the 'ref' property of the composed component.\n   */\n  BaseDecorator.prototype._updateComposedComponentRef = function (composedComponentInstance) {\n    this._composedComponentInstance = composedComponentInstance;\n    if (composedComponentInstance) {\n      this._hoisted = hoistMethods(this, composedComponentInstance);\n    } else if (this._hoisted) {\n      unhoistMethods(this, this._hoisted);\n    }\n  };\n  return BaseDecorator;\n}(React.Component);\nexport { BaseDecorator };","map":{"version":3,"names":["React","hoistMethods","unhoistMethods","BaseDecorator","_super","__extends","props","_this","call","_updateComposedComponentRef","bind","prototype","composedComponentInstance","_composedComponentInstance","_hoisted","Component"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/decorators/BaseDecorator.ts"],"sourcesContent":["import * as React from 'react';\nimport { hoistMethods, unhoistMethods } from '../../Utilities';\n\nexport class BaseDecorator<TProps, TState> extends React.Component<TProps, TState> {\n  protected _composedComponentInstance: React.Component<TProps, TState>;\n\n  private _hoisted: string[];\n\n  constructor(props: TProps) {\n    super(props);\n    this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n  }\n\n  /**\n   * Updates the ref to the component composed by the decorator, which will also take care of hoisting\n   * (and unhoisting as appropriate) methods from said component.\n   *\n   * Pass this method as the argument to the 'ref' property of the composed component.\n   */\n  protected _updateComposedComponentRef(composedComponentInstance: React.Component<TProps, TState>): void {\n    this._composedComponentInstance = composedComponentInstance;\n    if (composedComponentInstance) {\n      this._hoisted = hoistMethods(this, composedComponentInstance);\n    } else if (this._hoisted) {\n      unhoistMethods(this, this._hoisted);\n    }\n  }\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,EAAEC,cAAc,QAAQ,iBAAiB;AAE9D,IAAAC,aAAA,0BAAAC,MAAA;EAAmDC,SAAA,CAAAF,aAAA,EAAAC,MAAA;EAKjD,SAAAD,cAAYG,KAAa;IAAzB,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAMF,KAAK,CAAC;IACZC,KAAI,CAACE,2BAA2B,GAAGF,KAAI,CAACE,2BAA2B,CAACC,IAAI,CAACH,KAAI,CAAC;;EAChF;EAEA;;;;;;EAMUJ,aAAA,CAAAQ,SAAA,CAAAF,2BAA2B,GAArC,UAAsCG,yBAA0D;IAC9F,IAAI,CAACC,0BAA0B,GAAGD,yBAAyB;IAC3D,IAAIA,yBAAyB,EAAE;MAC7B,IAAI,CAACE,QAAQ,GAAGb,YAAY,CAAC,IAAI,EAAEW,yBAAyB,CAAC;KAC9D,MAAM,IAAI,IAAI,CAACE,QAAQ,EAAE;MACxBZ,cAAc,CAAC,IAAI,EAAE,IAAI,CAACY,QAAQ,CAAC;;EAEvC,CAAC;EACH,OAAAX,aAAC;AAAD,CAAC,CAxBkDH,KAAK,CAACe,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}