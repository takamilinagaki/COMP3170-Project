{"ast":null,"code":"import * as React from 'react';\n/**\n * Context for providing the window.\n */\n// eslint-disable-next-line @fluentui/no-context-default-value\nexport var WindowContext = React.createContext({\n  window: typeof window === 'object' ? window : undefined\n});\n/**\n * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.\n */\nexport var useWindow = function () {\n  return React.useContext(WindowContext).window;\n};\n/**\n * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.\n */\nexport var useDocument = function () {\n  var _a;\n  return (_a = React.useContext(WindowContext).window) === null || _a === void 0 ? void 0 : _a.document;\n};\n/**\n * Component to provide the window object contextually. This is useful when rendering content to an element\n * contained within a child window or iframe element, where event handlers and styling must be projected\n * to an alternative window or document.\n */\nexport var WindowProvider = function (props) {\n  return React.createElement(WindowContext.Provider, {\n    value: props\n  }, props.children);\n};","map":{"version":3,"names":["React","WindowContext","createContext","window","undefined","useWindow","useContext","useDocument","_a","document","WindowProvider","props","createElement","Provider","value","children"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react-window-provider/src/WindowProvider.tsx"],"sourcesContent":["import * as React from 'react';\n\n/**\n * Props for the WindowProvider component.\n */\nexport type WindowProviderProps = {\n  /**\n   * Provide the active window.\n   */\n  window: Window | undefined;\n  children?: React.ReactNode;\n};\n\n/**\n * Context for providing the window.\n */\n// eslint-disable-next-line @fluentui/no-context-default-value\nexport const WindowContext = React.createContext<WindowProviderProps>({\n  window: typeof window === 'object' ? window : undefined,\n});\n\n/**\n * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useWindow = (): Window | undefined => React.useContext(WindowContext).window;\n\n/**\n * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useDocument = (): Document | undefined => React.useContext(WindowContext).window?.document;\n\n/**\n * Component to provide the window object contextually. This is useful when rendering content to an element\n * contained within a child window or iframe element, where event handlers and styling must be projected\n * to an alternative window or document.\n */\nexport const WindowProvider: React.FunctionComponent<WindowProviderProps> = props => {\n  return <WindowContext.Provider value={props}>{props.children}</WindowContext.Provider>;\n};\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAa9B;;;AAGA;AACA,OAAO,IAAMC,aAAa,GAAGD,KAAK,CAACE,aAAa,CAAsB;EACpEC,MAAM,EAAE,OAAOA,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGC;CAC/C,CAAC;AAEF;;;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAAA,CAAA;EAA0B,OAAAL,KAAK,CAACM,UAAU,CAACL,aAAa,CAAC,CAACE,MAAM;AAAtC,CAAsC;AAEzF;;;AAGA,OAAO,IAAMI,WAAW,GAAG,SAAAA,CAAA;EAAA,IAAAC,EAAA;EAA4B,QAAAA,EAAA,GAAAR,KAAK,CAACM,UAAU,CAACL,aAAa,CAAC,CAACE,MAAM,cAAAK,EAAA,uBAAAA,EAAA,CAAEC,QAAQ;AAAA;AAEvG;;;;;AAKA,OAAO,IAAMC,cAAc,GAAiD,SAAAA,CAAAC,KAAK;EAC/E,OAAOX,KAAA,CAAAY,aAAA,CAACX,aAAa,CAACY,QAAQ;IAACC,KAAK,EAAEH;EAAK,GAAGA,KAAK,CAACI,QAAQ,CAA0B;AACxF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}