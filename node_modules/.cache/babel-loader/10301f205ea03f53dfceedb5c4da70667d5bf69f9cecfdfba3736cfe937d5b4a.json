{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\nexport var ResponsiveMode;\n(function (ResponsiveMode) {\n  /** Width \\<= 479px */\n  ResponsiveMode[ResponsiveMode[\"small\"] = 0] = \"small\";\n  /** Width \\> 479px and \\<= 639px */\n  ResponsiveMode[ResponsiveMode[\"medium\"] = 1] = \"medium\";\n  /** Width \\> 639px and \\<= 1023px */\n  ResponsiveMode[ResponsiveMode[\"large\"] = 2] = \"large\";\n  /** Width \\> 1023px and \\<= 1365px */\n  ResponsiveMode[ResponsiveMode[\"xLarge\"] = 3] = \"xLarge\";\n  /** Width \\> 1365px and \\<= 1919px */\n  ResponsiveMode[ResponsiveMode[\"xxLarge\"] = 4] = \"xxLarge\";\n  /** Width \\> 1919px */\n  ResponsiveMode[ResponsiveMode[\"xxxLarge\"] = 5] = \"xxxLarge\";\n  ResponsiveMode[ResponsiveMode[\"unknown\"] = 999] = \"unknown\";\n})(ResponsiveMode || (ResponsiveMode = {}));\nvar RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nvar _defaultMode;\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nvar _lastMode;\n/**\n * Allows a server rendered scenario to provide a **default** responsive mode.\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function setResponsiveMode(responsiveMode) {\n  _defaultMode = responsiveMode;\n}\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n *\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function initializeResponsiveMode(element) {\n  var currentWindow = getWindow(element);\n  if (currentWindow) {\n    getResponsiveMode(currentWindow);\n  }\n}\nexport function getInitialResponsiveMode() {\n  var _a;\n  return (_a = _defaultMode !== null && _defaultMode !== void 0 ? _defaultMode : _lastMode) !== null && _a !== void 0 ? _a : ResponsiveMode.large;\n}\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport function withResponsiveMode(ComposedComponent) {\n  var _a;\n  // eslint-disable-next-line deprecation/deprecation\n  var resultClass = (_a = /** @class */function (_super) {\n    __extends(WithResponsiveMode, _super);\n    function WithResponsiveMode(props) {\n      var _this = _super.call(this, props) || this;\n      _this._onResize = function () {\n        var responsiveMode = getResponsiveMode(_this.context.window);\n        if (responsiveMode !== _this.state.responsiveMode) {\n          _this.setState({\n            responsiveMode: responsiveMode\n          });\n        }\n      };\n      _this._events = new EventGroup(_this);\n      _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n      _this.state = {\n        responsiveMode: getInitialResponsiveMode()\n      };\n      return _this;\n    }\n    WithResponsiveMode.prototype.componentDidMount = function () {\n      this._events.on(this.context.window, 'resize', this._onResize);\n      this._onResize();\n    };\n    WithResponsiveMode.prototype.componentWillUnmount = function () {\n      this._events.dispose();\n    };\n    WithResponsiveMode.prototype.render = function () {\n      var responsiveMode = this.state.responsiveMode;\n      return responsiveMode === ResponsiveMode.unknown ? null : React.createElement(ComposedComponent, __assign({\n        ref: this._updateComposedComponentRef,\n        responsiveMode: responsiveMode\n      }, this.props));\n    };\n    return WithResponsiveMode;\n  }(BaseDecorator), _a.contextType = WindowContext, _a);\n  return hoistStatics(ComposedComponent, resultClass);\n}\nfunction getWidthOfCurrentWindow(currentWindow) {\n  try {\n    return currentWindow.document.documentElement.clientWidth;\n  } catch (e) {\n    return currentWindow.innerWidth;\n  }\n}\n/**\n * Hook to get the current responsive mode (window size category).\n * @param currentWindow - Use this window when determining the responsive mode.\n */\nexport function getResponsiveMode(currentWindow) {\n  var responsiveMode = ResponsiveMode.small;\n  if (currentWindow) {\n    try {\n      while (getWidthOfCurrentWindow(currentWindow) > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    }\n    // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error('Content was rendered in a server environment without providing a default responsive mode. ' + 'Call setResponsiveMode to define what the responsive mode is.');\n    }\n  }\n  return responsiveMode;\n}","map":{"version":3,"names":["React","BaseDecorator","getWindow","hoistStatics","EventGroup","WindowContext","ResponsiveMode","RESPONSIVE_MAX_CONSTRAINT","_defaultMode","_lastMode","setResponsiveMode","responsiveMode","initializeResponsiveMode","element","currentWindow","getResponsiveMode","getInitialResponsiveMode","_a","large","withResponsiveMode","ComposedComponent","resultClass","_super","__extends","WithResponsiveMode","props","_this","call","_onResize","context","window","state","setState","_events","_updateComposedComponentRef","bind","prototype","componentDidMount","on","componentWillUnmount","dispose","render","unknown","createElement","__assign","ref","contextType","getWidthOfCurrentWindow","document","documentElement","clientWidth","e","innerWidth","small","undefined","Error"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/utilities/src/utilities/decorators/withResponsiveMode.tsx"],"sourcesContent":["import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\n\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport interface IWithResponsiveModeState {\n  responsiveMode?: ResponsiveMode;\n}\n\nexport enum ResponsiveMode {\n  /** Width \\<= 479px */\n  small = 0,\n  /** Width \\> 479px and \\<= 639px */\n  medium = 1,\n  /** Width \\> 639px and \\<= 1023px */\n  large = 2,\n  /** Width \\> 1023px and \\<= 1365px */\n  xLarge = 3,\n  /** Width \\> 1365px and \\<= 1919px */\n  xxLarge = 4,\n  /** Width \\> 1919px */\n  xxxLarge = 5,\n  unknown = 999,\n}\n\nconst RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nlet _defaultMode: ResponsiveMode | undefined;\n\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nlet _lastMode: ResponsiveMode | undefined;\n\n/**\n * Allows a server rendered scenario to provide a **default** responsive mode.\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function setResponsiveMode(responsiveMode: ResponsiveMode | undefined): void {\n  _defaultMode = responsiveMode;\n}\n\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n *\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function initializeResponsiveMode(element?: HTMLElement): void {\n  const currentWindow = getWindow(element);\n\n  if (currentWindow) {\n    getResponsiveMode(currentWindow);\n  }\n}\n\nexport function getInitialResponsiveMode(): ResponsiveMode {\n  return _defaultMode ?? _lastMode ?? ResponsiveMode.large;\n}\n\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport function withResponsiveMode<TProps extends { responsiveMode?: ResponsiveMode }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  // eslint-disable-next-line deprecation/deprecation\n  const resultClass = class WithResponsiveMode extends BaseDecorator<TProps, IWithResponsiveModeState> {\n    public static contextType = WindowContext;\n    public context: React.ContextType<typeof WindowContext>;\n\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n      this._events = new EventGroup(this);\n      this._updateComposedComponentRef = this._updateComposedComponentRef.bind(this);\n\n      this.state = {\n        responsiveMode: getInitialResponsiveMode(),\n      };\n    }\n\n    public componentDidMount(): void {\n      this._events.on(this.context.window, 'resize', this._onResize);\n      this._onResize();\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n    }\n\n    public render(): JSX.Element | null {\n      const { responsiveMode } = this.state;\n\n      return responsiveMode === ResponsiveMode.unknown ? null : (\n        <ComposedComponent\n          ref={this._updateComposedComponentRef}\n          responsiveMode={responsiveMode}\n          {...(this.props as any)}\n        />\n      );\n    }\n\n    private _onResize = () => {\n      const responsiveMode = getResponsiveMode(this.context.window);\n\n      if (responsiveMode !== this.state.responsiveMode) {\n        this.setState({\n          responsiveMode,\n        });\n      }\n    };\n  };\n  return hoistStatics(ComposedComponent, resultClass);\n}\n\nfunction getWidthOfCurrentWindow(currentWindow: Window): number {\n  try {\n    return currentWindow.document.documentElement.clientWidth;\n  } catch (e) {\n    return currentWindow.innerWidth;\n  }\n}\n\n/**\n * Hook to get the current responsive mode (window size category).\n * @param currentWindow - Use this window when determining the responsive mode.\n */\nexport function getResponsiveMode(currentWindow: Window | undefined): ResponsiveMode {\n  let responsiveMode = ResponsiveMode.small;\n\n  if (currentWindow) {\n    try {\n      while (getWidthOfCurrentWindow(currentWindow) > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    }\n\n    // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error(\n        'Content was rendered in a server environment without providing a default responsive mode. ' +\n          'Call setResponsiveMode to define what the responsive mode is.',\n      );\n    }\n  }\n\n  return responsiveMode;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}