{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { isRestrictedDate } from './isRestrictedDate';\nimport { isAfterMaxDate } from './isAfterMaxDate';\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { compareDatePart, addDays } from '../dateMath/dateMath';\n/**\n * Returns closest available date given the restriction `options`, or undefined otherwise\n * @param options - list of search options\n */\nexport var findAvailableDate = function (options) {\n  var targetDate = options.targetDate,\n    initialDate = options.initialDate,\n    direction = options.direction,\n    restrictedDateOptions = __rest(options, [\"targetDate\", \"initialDate\", \"direction\"]);\n  var availableDate = targetDate;\n  // if the target date is available, return it immediately\n  if (!isRestrictedDate(targetDate, restrictedDateOptions)) {\n    return targetDate;\n  }\n  while (compareDatePart(initialDate, availableDate) !== 0 && isRestrictedDate(availableDate, restrictedDateOptions) && !isAfterMaxDate(availableDate, restrictedDateOptions) && !isBeforeMinDate(availableDate, restrictedDateOptions)) {\n    availableDate = addDays(availableDate, direction);\n  }\n  if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {\n    return availableDate;\n  }\n  return undefined;\n};","map":{"version":3,"names":["isRestrictedDate","isAfterMaxDate","isBeforeMinDate","compareDatePart","addDays","findAvailableDate","options","targetDate","initialDate","direction","restrictedDateOptions","__rest","availableDate","undefined"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/date-time-utilities/lib/src/dateGrid/findAvailableDate.ts"],"sourcesContent":["import { IAvailableDateOptions } from './dateGrid.types';\n\nimport { isRestrictedDate } from './isRestrictedDate';\n\nimport { isAfterMaxDate } from './isAfterMaxDate';\n\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { compareDatePart, addDays } from '../dateMath/dateMath';\n\n/**\n * Returns closest available date given the restriction `options`, or undefined otherwise\n * @param options - list of search options\n */\nexport const findAvailableDate = (options: IAvailableDateOptions): Date | undefined => {\n  const { targetDate, initialDate, direction, ...restrictedDateOptions } = options;\n  let availableDate = targetDate;\n  // if the target date is available, return it immediately\n  if (!isRestrictedDate(targetDate, restrictedDateOptions)) {\n    return targetDate;\n  }\n\n  while (\n    compareDatePart(initialDate, availableDate) !== 0 &&\n    isRestrictedDate(availableDate, restrictedDateOptions) &&\n    !isAfterMaxDate(availableDate, restrictedDateOptions) &&\n    !isBeforeMinDate(availableDate, restrictedDateOptions)\n  ) {\n    availableDate = addDays(availableDate, direction);\n  }\n\n  if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {\n    return availableDate;\n  }\n\n  return undefined;\n};\n"],"mappings":";AAEA,SAASA,gBAAgB,QAAQ,oBAAoB;AAErD,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,SAASC,eAAe,QAAQ,mBAAmB;AACnD,SAASC,eAAe,EAAEC,OAAO,QAAQ,sBAAsB;AAE/D;;;;AAIA,OAAO,IAAMC,iBAAiB,GAAG,SAAAA,CAACC,OAA8B;EACtD,IAAAC,UAAU,GAAuDD,OAAO,CAAAC,UAA9D;IAAEC,WAAW,GAA0CF,OAAO,CAAAE,WAAjD;IAAEC,SAAS,GAA+BH,OAAO,CAAAG,SAAtC;IAAKC,qBAAqB,GAAAC,MAAA,CAAKL,OAAO,EAA1E,0CAAgE,CAAF;EACpE,IAAIM,aAAa,GAAGL,UAAU;EAC9B;EACA,IAAI,CAACP,gBAAgB,CAACO,UAAU,EAAEG,qBAAqB,CAAC,EAAE;IACxD,OAAOH,UAAU;;EAGnB,OACEJ,eAAe,CAACK,WAAW,EAAEI,aAAa,CAAC,KAAK,CAAC,IACjDZ,gBAAgB,CAACY,aAAa,EAAEF,qBAAqB,CAAC,IACtD,CAACT,cAAc,CAACW,aAAa,EAAEF,qBAAqB,CAAC,IACrD,CAACR,eAAe,CAACU,aAAa,EAAEF,qBAAqB,CAAC,EACtD;IACAE,aAAa,GAAGR,OAAO,CAACQ,aAAa,EAAEH,SAAS,CAAC;;EAGnD,IAAIN,eAAe,CAACK,WAAW,EAAEI,aAAa,CAAC,KAAK,CAAC,IAAI,CAACZ,gBAAgB,CAACY,aAAa,EAAEF,qBAAqB,CAAC,EAAE;IAChH,OAAOE,aAAa;;EAGtB,OAAOC,SAAS;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}