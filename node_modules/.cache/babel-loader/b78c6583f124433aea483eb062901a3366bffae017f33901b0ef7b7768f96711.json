{"ast":null,"code":"import { on } from '@fluentui/utilities';\nimport * as React from 'react';\n/**\n * Hook to attach an event handler on mount and handle cleanup.\n * @param element - Element (or ref to an element) to attach the event handler to\n * @param eventName - The event to attach a handler for\n * @param callback - The handler for the event\n * @param useCapture - Whether or not to attach the handler for the capture phase\n */\nexport function useOnEvent(element, eventName, callback, useCapture) {\n  // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders\n  var callbackRef = React.useRef(callback);\n  callbackRef.current = callback;\n  React.useEffect(function () {\n    var actualElement = element && 'current' in element ? element.current : element;\n    if (!actualElement) {\n      return;\n    }\n    var dispose = on(actualElement, eventName, function (ev) {\n      return callbackRef.current(ev);\n    }, useCapture);\n    return dispose;\n  }, [element, eventName, useCapture]);\n}","map":{"version":3,"names":["on","React","useOnEvent","element","eventName","callback","useCapture","callbackRef","useRef","current","useEffect","actualElement","dispose","ev"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react-hooks/src/useOnEvent.ts"],"sourcesContent":["import { on } from '@fluentui/utilities';\nimport * as React from 'react';\n\n/**\n * Hook to attach an event handler on mount and handle cleanup.\n * @param element - Element (or ref to an element) to attach the event handler to\n * @param eventName - The event to attach a handler for\n * @param callback - The handler for the event\n * @param useCapture - Whether or not to attach the handler for the capture phase\n */\nexport function useOnEvent<TElement extends Element, TEvent extends Event>(\n  element: React.RefObject<TElement | undefined | null> | TElement | Window | Document | undefined | null,\n  eventName: string,\n  callback: (ev: TEvent) => void,\n  useCapture?: boolean,\n) {\n  // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders\n  const callbackRef = React.useRef(callback);\n  callbackRef.current = callback;\n\n  React.useEffect(() => {\n    const actualElement = element && 'current' in element ? element.current : element;\n    if (!actualElement) {\n      return;\n    }\n\n    const dispose = on(actualElement, eventName, (ev: TEvent) => callbackRef.current(ev), useCapture);\n    return dispose;\n  }, [element, eventName, useCapture]);\n}\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,qBAAqB;AACxC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B;;;;;;;AAOA,OAAM,SAAUC,UAAUA,CACxBC,OAAuG,EACvGC,SAAiB,EACjBC,QAA8B,EAC9BC,UAAoB;EAEpB;EACA,IAAMC,WAAW,GAAGN,KAAK,CAACO,MAAM,CAACH,QAAQ,CAAC;EAC1CE,WAAW,CAACE,OAAO,GAAGJ,QAAQ;EAE9BJ,KAAK,CAACS,SAAS,CAAC;IACd,IAAMC,aAAa,GAAGR,OAAO,IAAI,SAAS,IAAIA,OAAO,GAAGA,OAAO,CAACM,OAAO,GAAGN,OAAO;IACjF,IAAI,CAACQ,aAAa,EAAE;MAClB;;IAGF,IAAMC,OAAO,GAAGZ,EAAE,CAACW,aAAa,EAAEP,SAAS,EAAE,UAACS,EAAU;MAAK,OAAAN,WAAW,CAACE,OAAO,CAACI,EAAE,CAAC;IAAvB,CAAuB,EAAEP,UAAU,CAAC;IACjG,OAAOM,OAAO;EAChB,CAAC,EAAE,CAACT,OAAO,EAAEC,SAAS,EAAEE,UAAU,CAAC,CAAC;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}