{"ast":null,"code":"import { __assign, __extends, __rest, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef, getRTL, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nimport { composeRenderFunction } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar OVERFLOW_KEY = 'overflow';\nvar nullFunction = function () {\n  return null;\n};\nvar nonActionableItemProps = {\n  styles: function (props) {\n    var theme = props.theme;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText\n          }\n        }\n      }\n    };\n  }\n};\n/**\n * {@docCategory Breadcrumb}\n */\nvar BreadcrumbBase = /** @class */function (_super) {\n  __extends(BreadcrumbBase, _super);\n  function BreadcrumbBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._focusZone = React.createRef();\n    /**\n     * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n     */\n    _this._onReduceData = function (data) {\n      var renderedItems = data.renderedItems,\n        renderedOverflowItems = data.renderedOverflowItems;\n      var overflowIndex = data.props.overflowIndex;\n      var movedItem = renderedItems[overflowIndex];\n      if (!movedItem) {\n        return undefined;\n      }\n      renderedItems = __spreadArray([], renderedItems, true);\n      renderedItems.splice(overflowIndex, 1);\n      renderedOverflowItems = __spreadArray(__spreadArray([], renderedOverflowItems, true), [movedItem], false);\n      return __assign(__assign({}, data), {\n        renderedItems: renderedItems,\n        renderedOverflowItems: renderedOverflowItems\n      });\n    };\n    /**\n     * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n     * point.\n     */\n    _this._onGrowData = function (data) {\n      var renderedItems = data.renderedItems,\n        renderedOverflowItems = data.renderedOverflowItems;\n      var _a = data.props,\n        overflowIndex = _a.overflowIndex,\n        maxDisplayedItems = _a.maxDisplayedItems;\n      renderedOverflowItems = __spreadArray([], renderedOverflowItems, true);\n      var movedItem = renderedOverflowItems.pop();\n      if (!movedItem || renderedItems.length >= maxDisplayedItems) {\n        return undefined;\n      }\n      renderedItems = __spreadArray([], renderedItems, true);\n      renderedItems.splice(overflowIndex, 0, movedItem);\n      return __assign(__assign({}, data), {\n        renderedItems: renderedItems,\n        renderedOverflowItems: renderedOverflowItems\n      });\n    };\n    _this._onRenderBreadcrumb = function (data) {\n      var _a = data.props,\n        ariaLabel = _a.ariaLabel,\n        _b = _a.dividerAs,\n        DividerType = _b === void 0 ? Icon : _b,\n        onRenderItem = _a.onRenderItem,\n        overflowAriaLabel = _a.overflowAriaLabel,\n        overflowIndex = _a.overflowIndex,\n        onRenderOverflowIcon = _a.onRenderOverflowIcon,\n        overflowButtonAs = _a.overflowButtonAs;\n      var renderedOverflowItems = data.renderedOverflowItems,\n        renderedItems = data.renderedItems;\n      var contextualItems = renderedOverflowItems.map(function (item) {\n        var isActionable = !!(item.onClick || item.href);\n        return {\n          text: item.text,\n          name: item.text,\n          key: item.key,\n          onClick: item.onClick ? _this._onBreadcrumbClicked.bind(_this, item) : null,\n          href: item.href,\n          disabled: !isActionable,\n          itemProps: isActionable ? undefined : nonActionableItemProps\n        };\n      });\n      // Find index of last rendered item so the divider icon\n      // knows not to render on that item\n      var lastItemIndex = renderedItems.length - 1;\n      var hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n      var itemElements = renderedItems.map(function (item, index) {\n        var finalOnRenderItem = _this._onRenderItem;\n        if (item.onRender) {\n          finalOnRenderItem = composeRenderFunction(item.onRender, finalOnRenderItem);\n        }\n        if (onRenderItem) {\n          finalOnRenderItem = composeRenderFunction(onRenderItem, finalOnRenderItem);\n        }\n        return React.createElement(\"li\", {\n          className: _this._classNames.listItem,\n          key: item.key || String(index)\n        }, finalOnRenderItem(item), (index !== lastItemIndex || hasOverflowItems && index === overflowIndex - 1) && React.createElement(DividerType, {\n          className: _this._classNames.chevron,\n          iconName: getRTL(_this.props.theme) ? 'ChevronLeft' : 'ChevronRight',\n          item: item\n        }));\n      });\n      if (hasOverflowItems) {\n        var iconProps = !onRenderOverflowIcon ? {\n          iconName: 'More'\n        } : {};\n        var onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n        var OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton;\n        itemElements.splice(overflowIndex, 0, React.createElement(\"li\", {\n          className: _this._classNames.overflow,\n          key: OVERFLOW_KEY\n        }, React.createElement(OverflowButton, {\n          className: _this._classNames.overflowButton,\n          iconProps: iconProps,\n          role: \"button\",\n          \"aria-haspopup\": \"true\",\n          ariaLabel: overflowAriaLabel,\n          onRenderMenuIcon: onRenderMenuIcon,\n          menuProps: {\n            items: contextualItems,\n            directionalHint: DirectionalHint.bottomLeftEdge\n          }\n        }), overflowIndex !== lastItemIndex + 1 && React.createElement(DividerType, {\n          className: _this._classNames.chevron,\n          iconName: getRTL(_this.props.theme) ? 'ChevronLeft' : 'ChevronRight',\n          item: renderedOverflowItems[renderedOverflowItems.length - 1]\n        })));\n      }\n      var nativeProps = getNativeProps(_this.props, htmlElementProperties, ['className']);\n      return React.createElement(\"div\", __assign({\n        className: _this._classNames.root,\n        role: \"navigation\",\n        \"aria-label\": ariaLabel\n      }, nativeProps), React.createElement(FocusZone, __assign({\n        componentRef: _this._focusZone,\n        direction: FocusZoneDirection.horizontal\n      }, _this.props.focusZoneProps), React.createElement(\"ol\", {\n        className: _this._classNames.list\n      }, itemElements)));\n    };\n    _this._onRenderItem = function (item) {\n      if (!item) {\n        return null;\n      }\n      var as = item.as,\n        href = item.href,\n        onClick = item.onClick,\n        isCurrentItem = item.isCurrentItem,\n        text = item.text,\n        onRenderContent = item.onRenderContent,\n        additionalProps = __rest(item, [\"as\", \"href\", \"onClick\", \"isCurrentItem\", \"text\", \"onRenderContent\"]);\n      var finalOnRenderContent = defaultOnRenderCrumbContent;\n      if (onRenderContent) {\n        finalOnRenderContent = composeRenderFunction(onRenderContent, finalOnRenderContent);\n      }\n      if (_this.props.onRenderItemContent) {\n        finalOnRenderContent = composeRenderFunction(_this.props.onRenderItemContent, finalOnRenderContent);\n      }\n      if (onClick || href) {\n        return React.createElement(Link, __assign({}, additionalProps, {\n          as: as,\n          className: _this._classNames.itemLink,\n          href: href,\n          \"aria-current\": isCurrentItem ? 'page' : undefined,\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick: _this._onBreadcrumbClicked.bind(_this, item)\n        }), React.createElement(TooltipHost, __assign({\n          content: text,\n          overflowMode: TooltipOverflowMode.Parent\n        }, _this.props.tooltipHostProps), finalOnRenderContent(item)));\n      } else {\n        var Tag = as || 'span';\n        return React.createElement(Tag, __assign({}, additionalProps, {\n          className: _this._classNames.item\n        }), React.createElement(TooltipHost, __assign({\n          content: text,\n          overflowMode: TooltipOverflowMode.Parent\n        }, _this.props.tooltipHostProps), finalOnRenderContent(item)));\n      }\n    };\n    _this._onBreadcrumbClicked = function (item, ev) {\n      if (item.onClick) {\n        item.onClick(ev, item);\n      }\n    };\n    initializeComponentRef(_this);\n    _this._validateProps(props);\n    return _this;\n  }\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  BreadcrumbBase.prototype.focus = function () {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  };\n  BreadcrumbBase.prototype.render = function () {\n    this._validateProps(this.props);\n    var _a = this.props,\n      _b = _a.onReduceData,\n      onReduceData = _b === void 0 ? this._onReduceData : _b,\n      _c = _a.onGrowData,\n      onGrowData = _c === void 0 ? this._onGrowData : _c,\n      overflowIndex = _a.overflowIndex,\n      maxDisplayedItems = _a.maxDisplayedItems,\n      items = _a.items,\n      className = _a.className,\n      theme = _a.theme,\n      styles = _a.styles;\n    var renderedItems = __spreadArray([], items, true);\n    var renderedOverflowItems = renderedItems.splice(overflowIndex, renderedItems.length - maxDisplayedItems);\n    var breadcrumbData = {\n      props: this.props,\n      renderedItems: renderedItems,\n      renderedOverflowItems: renderedOverflowItems\n    };\n    this._classNames = getClassNames(styles, {\n      className: className,\n      theme: theme\n    });\n    return React.createElement(ResizeGroup, {\n      onRenderData: this._onRenderBreadcrumb,\n      onReduceData: onReduceData,\n      onGrowData: onGrowData,\n      data: breadcrumbData\n    });\n  };\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n  BreadcrumbBase.prototype._validateProps = function (props) {\n    var maxDisplayedItems = props.maxDisplayedItems,\n      overflowIndex = props.overflowIndex,\n      items = props.items;\n    if (overflowIndex < 0 || maxDisplayedItems > 1 && overflowIndex > maxDisplayedItems - 1 || items.length > 0 && overflowIndex > items.length - 1) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  };\n  BreadcrumbBase.defaultProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0\n  };\n  return BreadcrumbBase;\n}(React.Component);\nexport { BreadcrumbBase };\nfunction defaultOnRenderCrumbContent(item) {\n  return item ? React.createElement(React.Fragment, null, item.text) : null;\n}","map":{"version":3,"names":["React","initializeComponentRef","getRTL","classNamesFunction","getNativeProps","htmlElementProperties","FocusZone","FocusZoneDirection","Link","Icon","IconButton","DirectionalHint","ResizeGroup","TooltipHost","TooltipOverflowMode","composeRenderFunction","getClassNames","OVERFLOW_KEY","nullFunction","nonActionableItemProps","styles","props","theme","root","selectors","color","semanticColors","bodyText","BreadcrumbBase","_super","__extends","_this","call","_focusZone","createRef","_onReduceData","data","renderedItems","renderedOverflowItems","overflowIndex","movedItem","undefined","__spreadArray","splice","__assign","_onGrowData","_a","maxDisplayedItems","pop","length","_onRenderBreadcrumb","ariaLabel","_b","dividerAs","DividerType","onRenderItem","overflowAriaLabel","onRenderOverflowIcon","overflowButtonAs","contextualItems","map","item","isActionable","onClick","href","text","name","key","_onBreadcrumbClicked","bind","disabled","itemProps","lastItemIndex","hasOverflowItems","itemElements","index","finalOnRenderItem","_onRenderItem","onRender","createElement","className","_classNames","listItem","String","chevron","iconName","iconProps","onRenderMenuIcon","OverflowButton","overflow","overflowButton","role","menuProps","items","directionalHint","bottomLeftEdge","nativeProps","componentRef","direction","horizontal","focusZoneProps","list","as","isCurrentItem","onRenderContent","additionalProps","__rest","finalOnRenderContent","defaultOnRenderCrumbContent","onRenderItemContent","itemLink","content","overflowMode","Parent","tooltipHostProps","Tag","ev","_validateProps","prototype","focus","current","render","onReduceData","_c","onGrowData","breadcrumbData","onRenderData","Error","defaultProps","Component","Fragment"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/Breadcrumb/Breadcrumb.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  initializeComponentRef,\n  getRTL,\n  classNamesFunction,\n  getNativeProps,\n  htmlElementProperties,\n} from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Link } from '../../Link';\nimport { Icon } from '../../Icon';\nimport { IconButton } from '../../Button';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { ResizeGroup } from '../../ResizeGroup';\nimport { TooltipHost, TooltipOverflowMode } from '../../Tooltip';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { IContextualMenuItem, IContextualMenuItemProps } from '../../ContextualMenu';\nimport type {\n  IBreadcrumbProps,\n  IBreadcrumbItem,\n  IDividerAsProps,\n  IBreadcrumbData,\n  IBreadcrumbStyleProps,\n  IBreadcrumbStyles,\n} from './Breadcrumb.types';\nimport { composeRenderFunction } from '../../Utilities';\n\n/** @deprecated Use IBreadcrumbData */\nexport type IBreadCrumbData = IBreadcrumbData;\n\nconst getClassNames = classNamesFunction<IBreadcrumbStyleProps, IBreadcrumbStyles>();\n\nconst OVERFLOW_KEY = 'overflow';\nconst nullFunction = (): null => null;\n\nconst nonActionableItemProps: Partial<IContextualMenuItemProps> = {\n  styles: props => {\n    const { theme } = props;\n    return {\n      root: {\n        selectors: {\n          '&.is-disabled': {\n            color: theme.semanticColors.bodyText,\n          },\n        },\n      },\n    };\n  },\n};\n\n/**\n * {@docCategory Breadcrumb}\n */\nexport class BreadcrumbBase extends React.Component<IBreadcrumbProps, any> {\n  public static defaultProps: IBreadcrumbProps = {\n    items: [],\n    maxDisplayedItems: 999,\n    overflowIndex: 0,\n  };\n\n  private _classNames: IProcessedStyleSet<IBreadcrumbStyles>;\n  private _focusZone = React.createRef<FocusZone>();\n\n  constructor(props: IBreadcrumbProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._validateProps(props);\n  }\n\n  /**\n   * Sets focus to the first breadcrumb link.\n   */\n  public focus(): void {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  }\n\n  public render(): JSX.Element {\n    this._validateProps(this.props);\n\n    const {\n      onReduceData = this._onReduceData,\n      onGrowData = this._onGrowData,\n      overflowIndex,\n      maxDisplayedItems,\n      items,\n      className,\n      theme,\n      styles,\n    } = this.props;\n    const renderedItems = [...items];\n    const renderedOverflowItems = renderedItems.splice(overflowIndex!, renderedItems.length - maxDisplayedItems!);\n    const breadcrumbData: IBreadcrumbData = {\n      props: this.props,\n      renderedItems,\n      renderedOverflowItems,\n    };\n\n    this._classNames = getClassNames(styles, {\n      className,\n      theme: theme!,\n    });\n\n    return (\n      <ResizeGroup\n        onRenderData={this._onRenderBreadcrumb}\n        onReduceData={onReduceData}\n        onGrowData={onGrowData}\n        data={breadcrumbData}\n      />\n    );\n  }\n\n  /**\n   * Remove the first rendered item past the overlow point and put it and the end the overflow set.\n   */\n  private _onReduceData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex } = data.props;\n\n    const movedItem = renderedItems[overflowIndex!];\n\n    if (!movedItem) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 1);\n\n    renderedOverflowItems = [...renderedOverflowItems, movedItem];\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  /**\n   * Remove the last item of the overflow set and insert the item as the start of the rendered set past the overflow\n   * point.\n   */\n  private _onGrowData = (data: IBreadcrumbData): IBreadcrumbData | undefined => {\n    let { renderedItems, renderedOverflowItems } = data;\n    const { overflowIndex, maxDisplayedItems } = data.props;\n\n    renderedOverflowItems = [...renderedOverflowItems];\n    const movedItem = renderedOverflowItems.pop();\n\n    if (!movedItem || renderedItems.length >= maxDisplayedItems!) {\n      return undefined;\n    }\n\n    renderedItems = [...renderedItems];\n    renderedItems.splice(overflowIndex!, 0, movedItem);\n\n    return { ...data, renderedItems, renderedOverflowItems };\n  };\n\n  private _onRenderBreadcrumb = (data: IBreadcrumbData) => {\n    const {\n      ariaLabel,\n      dividerAs: DividerType = Icon as React.ElementType<IDividerAsProps>,\n      onRenderItem,\n      overflowAriaLabel,\n      overflowIndex,\n      onRenderOverflowIcon,\n      overflowButtonAs,\n    } = data.props;\n    const { renderedOverflowItems, renderedItems } = data;\n\n    const contextualItems = renderedOverflowItems.map((item): IContextualMenuItem => {\n      const isActionable = !!(item.onClick || item.href);\n      return {\n        text: item.text,\n        name: item.text,\n        key: item.key,\n        onClick: item.onClick ? this._onBreadcrumbClicked.bind(this, item) : null,\n        href: item.href,\n        disabled: !isActionable,\n        itemProps: isActionable ? undefined : nonActionableItemProps,\n      };\n    });\n\n    // Find index of last rendered item so the divider icon\n    // knows not to render on that item\n    const lastItemIndex = renderedItems.length - 1;\n    const hasOverflowItems = renderedOverflowItems && renderedOverflowItems.length !== 0;\n\n    const itemElements: JSX.Element[] = renderedItems.map((item, index) => {\n      let finalOnRenderItem = this._onRenderItem;\n\n      if (item.onRender) {\n        finalOnRenderItem = composeRenderFunction(item.onRender, finalOnRenderItem);\n      }\n\n      if (onRenderItem) {\n        finalOnRenderItem = composeRenderFunction(onRenderItem, finalOnRenderItem);\n      }\n\n      return (\n        <li className={this._classNames.listItem} key={item.key || String(index)}>\n          {finalOnRenderItem(item)}\n          {(index !== lastItemIndex || (hasOverflowItems && index === overflowIndex! - 1)) && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n              item={item}\n            />\n          )}\n        </li>\n      );\n    });\n\n    if (hasOverflowItems) {\n      const iconProps = !onRenderOverflowIcon ? { iconName: 'More' } : {};\n      const onRenderMenuIcon = onRenderOverflowIcon ? onRenderOverflowIcon : nullFunction;\n      const OverflowButton = overflowButtonAs ? overflowButtonAs : IconButton;\n\n      itemElements.splice(\n        overflowIndex!,\n        0,\n        <li className={this._classNames.overflow} key={OVERFLOW_KEY}>\n          <OverflowButton\n            className={this._classNames.overflowButton}\n            iconProps={iconProps}\n            role=\"button\"\n            aria-haspopup=\"true\"\n            ariaLabel={overflowAriaLabel}\n            onRenderMenuIcon={onRenderMenuIcon}\n            menuProps={{\n              items: contextualItems,\n              directionalHint: DirectionalHint.bottomLeftEdge,\n            }}\n          />\n          {overflowIndex !== lastItemIndex + 1 && (\n            <DividerType\n              className={this._classNames.chevron}\n              iconName={getRTL(this.props.theme) ? 'ChevronLeft' : 'ChevronRight'}\n              item={renderedOverflowItems[renderedOverflowItems.length - 1]}\n            />\n          )}\n        </li>,\n      );\n    }\n\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'className',\n    ]);\n\n    return (\n      <div className={this._classNames.root} role=\"navigation\" aria-label={ariaLabel} {...nativeProps}>\n        <FocusZone\n          componentRef={this._focusZone}\n          direction={FocusZoneDirection.horizontal}\n          {...this.props.focusZoneProps}\n        >\n          <ol className={this._classNames.list}>{itemElements}</ol>\n        </FocusZone>\n      </div>\n    );\n  };\n\n  private _onRenderItem = (item?: IBreadcrumbItem) => {\n    if (!item) {\n      return null;\n    }\n\n    const { as, href, onClick, isCurrentItem, text, onRenderContent, ...additionalProps } = item;\n\n    let finalOnRenderContent = defaultOnRenderCrumbContent;\n\n    if (onRenderContent) {\n      finalOnRenderContent = composeRenderFunction(onRenderContent, finalOnRenderContent);\n    }\n\n    if (this.props.onRenderItemContent) {\n      finalOnRenderContent = composeRenderFunction(this.props.onRenderItemContent, finalOnRenderContent);\n    }\n\n    if (onClick || href) {\n      return (\n        <Link\n          {...additionalProps}\n          as={as}\n          className={this._classNames.itemLink}\n          href={href}\n          aria-current={isCurrentItem ? 'page' : undefined}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={this._onBreadcrumbClicked.bind(this, item)}\n        >\n          <TooltipHost content={text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {finalOnRenderContent(item)}\n          </TooltipHost>\n        </Link>\n      );\n    } else {\n      const Tag = as || 'span';\n      return (\n        <Tag {...additionalProps} className={this._classNames.item}>\n          <TooltipHost content={text} overflowMode={TooltipOverflowMode.Parent} {...this.props.tooltipHostProps}>\n            {finalOnRenderContent(item)}\n          </TooltipHost>\n        </Tag>\n      );\n    }\n  };\n\n  private _onBreadcrumbClicked = (item: IBreadcrumbItem, ev: React.MouseEvent<HTMLElement>) => {\n    if (item.onClick) {\n      item.onClick(ev, item);\n    }\n  };\n\n  /**\n   * Validate incoming props\n   * @param props - Props to validate\n   */\n  private _validateProps(props: IBreadcrumbProps): void {\n    const { maxDisplayedItems, overflowIndex, items } = props;\n    if (\n      overflowIndex! < 0 ||\n      (maxDisplayedItems! > 1 && overflowIndex! > maxDisplayedItems! - 1) ||\n      (items.length > 0 && overflowIndex! > items.length - 1)\n    ) {\n      throw new Error('Breadcrumb: overflowIndex out of range');\n    }\n  }\n}\n\nfunction defaultOnRenderCrumbContent(item?: IBreadcrumbItem): JSX.Element | null {\n  return item ? <>{item.text}</> : null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}