{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport * as React from 'react';\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\nexport function useMergedRefs() {\n  var refs = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    refs[_i] = arguments[_i];\n  }\n  var mergedCallback = React.useCallback(function (value) {\n    // Update the \"current\" prop hanging on the function.\n    mergedCallback.current = value;\n    for (var _i = 0, refs_1 = refs; _i < refs_1.length; _i++) {\n      var ref = refs_1[_i];\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ref.current = value;\n      }\n    }\n  }, __spreadArray([], refs, true));\n  return mergedCallback;\n}","map":{"version":3,"names":["React","useMergedRefs","refs","_i","arguments","length","mergedCallback","useCallback","value","current","refs_1","ref","__spreadArray"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react-hooks/src/useMergedRefs.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * A Ref function which can be treated like a ref object in that it has an attached\n * current property, which will be updated as the ref is evaluated.\n */\nexport type RefObjectFunction<T> = React.RefObject<T> & ((value: T) => void);\n\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\nexport function useMergedRefs<T>(...refs: (React.Ref<T> | undefined)[]): RefObjectFunction<T> {\n  const mergedCallback: RefObjectFunction<T> = React.useCallback(\n    (value: T) => {\n      // Update the \"current\" prop hanging on the function.\n      (mergedCallback as unknown as React.MutableRefObject<T>).current = value;\n\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref) {\n          // work around the immutability of the React.Ref type\n          (ref as unknown as React.MutableRefObject<T>).current = value;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive\n    [...refs],\n  ) as unknown as RefObjectFunction<T>;\n\n  return mergedCallback;\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAQ9B;;;;;;AAMA,OAAM,SAAUC,aAAaA,CAAA;EAAI,IAAAC,IAAA;OAAA,IAAAC,EAAA,IAAqC,EAArCA,EAAA,GAAAC,SAAA,CAAAC,MAAqC,EAArCF,EAAA,EAAqC;IAArCD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EAC/B,IAAMG,cAAc,GAAyBN,KAAK,CAACO,WAAW,CAC5D,UAACC,KAAQ;IACP;IACCF,cAAuD,CAACG,OAAO,GAAGD,KAAK;IAExE,KAAkB,IAAAL,EAAA,IAAI,EAAJO,MAAA,GAAAR,IAAI,EAAJC,EAAA,GAAAO,MAAA,CAAAL,MAAI,EAAJF,EAAA,EAAI,EAAE;MAAnB,IAAMQ,GAAG,GAAAD,MAAA,CAAAP,EAAA;MACZ,IAAI,OAAOQ,GAAG,KAAK,UAAU,EAAE;QAC7BA,GAAG,CAACH,KAAK,CAAC;OACX,MAAM,IAAIG,GAAG,EAAE;QACd;QACCA,GAA4C,CAACF,OAAO,GAAGD,KAAK;;;EAGnE,CAAC,EAAAI,aAAA,KAEGV,IAAI,QAC0B;EAEpC,OAAOI,cAAc;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}