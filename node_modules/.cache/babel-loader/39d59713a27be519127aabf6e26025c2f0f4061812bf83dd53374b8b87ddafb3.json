{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Customizations, getWindow } from '@fluentui/utilities';\nimport { loadTheme as legacyLoadTheme } from '@microsoft/load-themed-styles';\nimport { createTheme } from '@fluentui/theme';\nexport { createTheme } from '@fluentui/theme';\nvar _theme = createTheme({});\nvar _onThemeChangeCallbacks = [];\nexport var ThemeSettingName = 'theme';\nexport function initializeThemeInCustomizations() {\n  var _a;\n  var _b, _c;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var win = getWindow();\n  if ((_b = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _b === void 0 ? void 0 : _b.legacyTheme) {\n    // does everything the `else` clause does and more, such as invoke legacy theming\n    loadTheme(win.FabricConfig.legacyTheme);\n  } else if (!Customizations.getSettings([ThemeSettingName]).theme) {\n    if ((_c = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _c === void 0 ? void 0 : _c.theme) {\n      _theme = createTheme(win.FabricConfig.theme);\n    }\n    // Set the default theme.\n    Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n  }\n}\ninitializeThemeInCustomizations();\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function getTheme(depComments) {\n  if (depComments === void 0) {\n    depComments = false;\n  }\n  if (depComments === true) {\n    _theme = createTheme({}, depComments);\n  }\n  return _theme;\n}\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\nexport function registerOnThemeChangeCallback(callback) {\n  if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n    _onThemeChangeCallbacks.push(callback);\n  }\n}\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\nexport function removeOnThemeChangeCallback(callback) {\n  var i = _onThemeChangeCallbacks.indexOf(callback);\n  if (i === -1) {\n    return;\n  }\n  _onThemeChangeCallbacks.splice(i, 1);\n}\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function loadTheme(theme, depComments) {\n  var _a;\n  if (depComments === void 0) {\n    depComments = false;\n  }\n  _theme = createTheme(theme, depComments);\n  // Invoke the legacy method of theming the page as well.\n  legacyLoadTheme(__assign(__assign(__assign(__assign({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));\n  Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n  _onThemeChangeCallbacks.forEach(function (callback) {\n    try {\n      callback(_theme);\n    } catch (e) {\n      // don't let a bad callback break everything else\n    }\n  });\n  return _theme;\n}\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\nfunction _loadFonts(theme) {\n  var lines = {};\n  for (var _i = 0, _a = Object.keys(theme.fonts); _i < _a.length; _i++) {\n    var fontName = _a[_i];\n    var font = theme.fonts[fontName];\n    for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {\n      var propName = _c[_b];\n      var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n      var value = font[propName];\n      if (propName === 'fontSize' && typeof value === 'number') {\n        // if it's a number, convert it to px by default like our theming system does\n        value = value + 'px';\n      }\n      lines[name_1] = value;\n    }\n  }\n  return lines;\n}","map":{"version":3,"names":["Customizations","getWindow","loadTheme","legacyLoadTheme","createTheme","_theme","_onThemeChangeCallbacks","ThemeSettingName","initializeThemeInCustomizations","win","_b","FabricConfig","legacyTheme","getSettings","theme","_c","applySettings","_a","getTheme","depComments","registerOnThemeChangeCallback","callback","indexOf","push","removeOnThemeChangeCallback","i","splice","__assign","palette","semanticColors","effects","_loadFonts","forEach","e","lines","_i","Object","keys","fonts","length","fontName","font","propName","name_1","charAt","toUpperCase","slice","value"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/style-utilities/lib/src/styles/theme.ts"],"sourcesContent":["import { Customizations, getWindow } from '@fluentui/utilities';\nimport { loadTheme as legacyLoadTheme } from '@microsoft/load-themed-styles';\nimport { createTheme } from '@fluentui/theme';\nimport type { ITheme, IPartialTheme, IFontStyles } from '../interfaces/index';\nimport type { IRawStyle } from '@fluentui/merge-styles';\n\nexport { createTheme } from '@fluentui/theme';\n\nlet _theme: ITheme = createTheme({});\nlet _onThemeChangeCallbacks: Array<(theme: ITheme) => void> = [];\n\nexport const ThemeSettingName = 'theme';\n\nexport function initializeThemeInCustomizations(): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const win: any = getWindow();\n\n  if (win?.FabricConfig?.legacyTheme) {\n    // does everything the `else` clause does and more, such as invoke legacy theming\n    loadTheme(win.FabricConfig.legacyTheme);\n  } else if (!Customizations.getSettings([ThemeSettingName]).theme) {\n    if (win?.FabricConfig?.theme) {\n      _theme = createTheme(win.FabricConfig.theme);\n    }\n\n    // Set the default theme.\n    Customizations.applySettings({ [ThemeSettingName]: _theme });\n  }\n}\n\ninitializeThemeInCustomizations();\n\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function getTheme(depComments: boolean = false): ITheme {\n  if (depComments === true) {\n    _theme = createTheme({}, depComments);\n  }\n  return _theme;\n}\n\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\nexport function registerOnThemeChangeCallback(callback: (theme: ITheme) => void): void {\n  if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n    _onThemeChangeCallbacks.push(callback);\n  }\n}\n\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\nexport function removeOnThemeChangeCallback(callback: (theme: ITheme) => void): void {\n  const i = _onThemeChangeCallbacks.indexOf(callback);\n  if (i === -1) {\n    return;\n  }\n\n  _onThemeChangeCallbacks.splice(i, 1);\n}\n\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function loadTheme(theme: IPartialTheme, depComments: boolean = false): ITheme {\n  _theme = createTheme(theme, depComments);\n\n  // Invoke the legacy method of theming the page as well.\n  legacyLoadTheme({ ..._theme.palette, ..._theme.semanticColors, ..._theme.effects, ..._loadFonts(_theme) });\n\n  Customizations.applySettings({ [ThemeSettingName]: _theme });\n\n  _onThemeChangeCallbacks.forEach((callback: (theme: ITheme) => void) => {\n    try {\n      callback(_theme);\n    } catch (e) {\n      // don't let a bad callback break everything else\n    }\n  });\n\n  return _theme;\n}\n\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\nfunction _loadFonts(theme: ITheme): { [name: string]: string } {\n  const lines: { [key: string]: string } = {};\n\n  for (const fontName of Object.keys(theme.fonts)) {\n    const font: IRawStyle = theme.fonts[fontName as keyof IFontStyles];\n\n    for (const propName of Object.keys(font)) {\n      const name: string = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n      let value = font[propName as keyof IRawStyle] as string;\n\n      if (propName === 'fontSize' && typeof value === 'number') {\n        // if it's a number, convert it to px by default like our theming system does\n        value = value + 'px';\n      }\n      lines[name] = value;\n    }\n  }\n  return lines;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}