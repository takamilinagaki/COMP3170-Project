{"ast":null,"code":"import { Async } from '@fluentui/utilities';\nimport * as React from 'react';\n/**\n * Hook to provide an Async instance that is automatically cleaned up on dismount.\n */\nexport function useAsync() {\n  var asyncRef = React.useRef();\n  if (!asyncRef.current) {\n    asyncRef.current = new Async();\n  }\n  React.useEffect(function () {\n    return function () {\n      var _a;\n      (_a = asyncRef.current) === null || _a === void 0 ? void 0 : _a.dispose();\n      asyncRef.current = undefined;\n    };\n  }, []);\n  return asyncRef.current;\n}","map":{"version":3,"names":["Async","React","useAsync","asyncRef","useRef","current","useEffect","_a","dispose","undefined"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react-hooks/src/useAsync.ts"],"sourcesContent":["import { Async } from '@fluentui/utilities';\nimport * as React from 'react';\n\n/**\n * Hook to provide an Async instance that is automatically cleaned up on dismount.\n */\nexport function useAsync() {\n  const asyncRef = React.useRef<Async>();\n  if (!asyncRef.current) {\n    asyncRef.current = new Async();\n  }\n  React.useEffect(() => {\n    return () => {\n      asyncRef.current?.dispose();\n      asyncRef.current = undefined;\n    };\n  }, []);\n  return asyncRef.current;\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,qBAAqB;AAC3C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B;;;AAGA,OAAM,SAAUC,QAAQA,CAAA;EACtB,IAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,EAAS;EACtC,IAAI,CAACD,QAAQ,CAACE,OAAO,EAAE;IACrBF,QAAQ,CAACE,OAAO,GAAG,IAAIL,KAAK,EAAE;;EAEhCC,KAAK,CAACK,SAAS,CAAC;IACd,OAAO;;MACL,CAAAC,EAAA,GAAAJ,QAAQ,CAACE,OAAO,cAAAE,EAAA,uBAAAA,EAAA,CAAEC,OAAO,EAAE;MAC3BL,QAAQ,CAACE,OAAO,GAAGI,SAAS;IAC9B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,OAAON,QAAQ,CAACE,OAAO;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}