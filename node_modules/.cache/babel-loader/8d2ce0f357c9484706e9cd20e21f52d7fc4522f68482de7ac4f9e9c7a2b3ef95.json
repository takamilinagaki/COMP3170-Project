{"ast":null,"code":"import { concatStyleSets } from './concatStyleSets';\nimport { extractStyleParts } from './extractStyleParts';\nimport { getStyleOptions } from './StyleOptionsState';\nimport { applyRegistration, styleToRegistration } from './styleToClassName';\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n */\nexport function mergeStyleSets() {\n  var styleSets = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    styleSets[_i] = arguments[_i];\n  }\n  return mergeCssSets(styleSets, getStyleOptions());\n}\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets(styleSets, options) {\n  var classNameSet = {\n    subComponentStyles: {}\n  };\n  var styleSet = styleSets[0];\n  if (!styleSet && styleSets.length <= 1) {\n    return {\n      subComponentStyles: {}\n    };\n  }\n  var concatenatedStyleSet = concatStyleSets.apply(void 0, styleSets);\n  var registrations = [];\n  for (var styleSetArea in concatenatedStyleSet) {\n    if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {\n      if (styleSetArea === 'subComponentStyles') {\n        classNameSet.subComponentStyles = concatenatedStyleSet.subComponentStyles || {};\n        continue;\n      }\n      var styles = concatenatedStyleSet[styleSetArea];\n      var _a = extractStyleParts(styles),\n        classes = _a.classes,\n        objects = _a.objects;\n      if (objects === null || objects === void 0 ? void 0 : objects.length) {\n        var registration = styleToRegistration(options || {}, {\n          displayName: styleSetArea\n        }, objects);\n        if (registration) {\n          registrations.push(registration);\n          // FIXME: classNameSet invalid types - exposed in TS 4.5 - cast needed\n          classNameSet[styleSetArea] = classes.concat([registration.className]).join(' ');\n        }\n      } else {\n        // FIXME: classNameSet invalid types - exposed in TS 4.5 - cast needed\n        classNameSet[styleSetArea] = classes.join(' ');\n      }\n    }\n  }\n  for (var _i = 0, registrations_1 = registrations; _i < registrations_1.length; _i++) {\n    var registration = registrations_1[_i];\n    if (registration) {\n      applyRegistration(registration, options === null || options === void 0 ? void 0 : options.specificityMultiplier);\n    }\n  }\n  return classNameSet;\n}","map":{"version":3,"names":["concatStyleSets","extractStyleParts","getStyleOptions","applyRegistration","styleToRegistration","mergeStyleSets","styleSets","_i","arguments","length","mergeCssSets","options","classNameSet","subComponentStyles","styleSet","concatenatedStyleSet","apply","registrations","styleSetArea","hasOwnProperty","styles","_a","classes","objects","registration","displayName","push","concat","className","join","registrations_1","specificityMultiplier"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/merge-styles/src/mergeStyleSets.ts"],"sourcesContent":["import { concatStyleSets } from './concatStyleSets';\nimport { extractStyleParts } from './extractStyleParts';\nimport { IStyle } from './IStyle';\nimport { IStyleOptions } from './IStyleOptions';\nimport { IConcatenatedStyleSet, IProcessedStyleSet, IStyleSet } from './IStyleSet';\nimport { getStyleOptions } from './StyleOptionsState';\nimport { applyRegistration, styleToRegistration } from './styleToClassName';\nimport { ObjectOnly } from './ObjectOnly';\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSet - The first style set to be merged and reigstered.\n */\nexport function mergeStyleSets<TStyleSet>(\n  styleSet: TStyleSet | false | null | undefined,\n): IProcessedStyleSet<ObjectOnly<TStyleSet>>;\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSet1 - The first style set to be merged.\n * @param styleSet2 - The second style set to be merged.\n */\nexport function mergeStyleSets<TStyleSet1, TStyleSet2>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n): IProcessedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2>>;\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSet1 - The first style set to be merged.\n * @param styleSet2 - The second style set to be merged.\n * @param styleSet3 - The third style set to be merged.\n */\nexport function mergeStyleSets<TStyleSet1, TStyleSet2, TStyleSet3>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n  styleSet3: TStyleSet3 | false | null | undefined,\n): IProcessedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3>>;\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSet1 - The first style set to be merged.\n * @param styleSet2 - The second style set to be merged.\n * @param styleSet3 - The third style set to be merged.\n * @param styleSet4 - The fourth style set to be merged.\n */\nexport function mergeStyleSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n  styleSet3: TStyleSet3 | false | null | undefined,\n  styleSet4: TStyleSet4 | false | null | undefined,\n): IProcessedStyleSet<\n  ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3> & ObjectOnly<TStyleSet4>\n>;\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n */\nexport function mergeStyleSets(...styleSets: Array<IStyleSet | undefined | false | null>): IProcessedStyleSet<any>;\n\n/**\n * Takes in one or more style set objects, each consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeStyles` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n */\nexport function mergeStyleSets(...styleSets: Array<IStyleSet | undefined | false | null>): IProcessedStyleSet<any> {\n  return mergeCssSets(styleSets as any, getStyleOptions());\n}\n\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets<TStyleSet>(\n  styleSets: [TStyleSet | false | null | undefined],\n  options?: IStyleOptions,\n): IProcessedStyleSet<TStyleSet>;\n\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets<TStyleSet1, TStyleSet2>(\n  styleSets: [TStyleSet1 | false | null | undefined, TStyleSet2 | false | null | undefined],\n  options?: IStyleOptions,\n): IProcessedStyleSet<TStyleSet1 & TStyleSet2>;\n\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets<TStyleSet1, TStyleSet2, TStyleSet3>(\n  styleSets: [\n    TStyleSet1 | false | null | undefined,\n    TStyleSet2 | false | null | undefined,\n    TStyleSet3 | false | null | undefined,\n  ],\n  options?: IStyleOptions,\n): IProcessedStyleSet<TStyleSet1 & TStyleSet2 & TStyleSet3>;\n\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4>(\n  styleSets: [\n    TStyleSet1 | false | null | undefined,\n    TStyleSet2 | false | null | undefined,\n    TStyleSet3 | false | null | undefined,\n    TStyleSet4 | false | null | undefined,\n  ],\n  options?: IStyleOptions,\n): IProcessedStyleSet<\n  ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3> & ObjectOnly<TStyleSet4>\n>;\n\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures we maintain the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets<TStyleSet>(\n  styleSet: [TStyleSet | false | null | undefined],\n  options?: IStyleOptions,\n): IProcessedStyleSet<TStyleSet>;\n\n/**\n * Takes in one or more style set objects, each1consisting of a set of areas,\n * each which will produce a class name. Using this is analogous to calling\n * `mergeCss` for each property in the object, but ensures the\n * set ordering when multiple style sets are merged.\n *\n * @param styleSets - One or more style sets to be merged.\n * @param options - (optional) Options to use when creating rules.\n */\nexport function mergeCssSets(\n  styleSets: Array<IStyleSet | undefined | false | null>,\n  options?: IStyleOptions,\n): IProcessedStyleSet<any> {\n  const classNameSet: IProcessedStyleSet<any> = { subComponentStyles: {} };\n\n  const styleSet = styleSets[0];\n\n  if (!styleSet && styleSets.length <= 1) {\n    return { subComponentStyles: {} } as any;\n  }\n\n  const concatenatedStyleSet = concatStyleSets(...styleSets);\n\n  const registrations = [];\n\n  for (const styleSetArea in concatenatedStyleSet) {\n    if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {\n      if (styleSetArea === 'subComponentStyles') {\n        classNameSet.subComponentStyles = (concatenatedStyleSet as IConcatenatedStyleSet<any>).subComponentStyles || {};\n        continue;\n      }\n\n      const styles: IStyle = (concatenatedStyleSet as any)[styleSetArea];\n\n      const { classes, objects } = extractStyleParts(styles);\n\n      if (objects?.length) {\n        const registration = styleToRegistration(options || {}, { displayName: styleSetArea }, objects);\n\n        if (registration) {\n          registrations.push(registration);\n          // FIXME: classNameSet invalid types - exposed in TS 4.5 - cast needed\n          (classNameSet as Record<string, any>)[styleSetArea] = classes.concat([registration.className]).join(' ');\n        }\n      } else {\n        // FIXME: classNameSet invalid types - exposed in TS 4.5 - cast needed\n        (classNameSet as Record<string, any>)[styleSetArea] = classes.join(' ');\n      }\n    }\n  }\n\n  for (const registration of registrations) {\n    if (registration) {\n      applyRegistration(registration, options?.specificityMultiplier);\n    }\n  }\n\n  return classNameSet as any;\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,mBAAmB;AACnD,SAASC,iBAAiB,QAAQ,qBAAqB;AAIvD,SAASC,eAAe,QAAQ,qBAAqB;AACrD,SAASC,iBAAiB,EAAEC,mBAAmB,QAAQ,oBAAoB;AA2E3E;;;;;;;;AAQA,OAAM,SAAUC,cAAcA,CAAA;EAAC,IAAAC,SAAA;OAAA,IAAAC,EAAA,IAAyD,EAAzDA,EAAA,GAAAC,SAAA,CAAAC,MAAyD,EAAzDF,EAAA,EAAyD;IAAzDD,SAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EAC7B,OAAOG,YAAY,CAACJ,SAAgB,EAAEJ,eAAe,EAAE,CAAC;AAC1D;AAmFA;;;;;;;;;AASA,OAAM,SAAUQ,YAAYA,CAC1BJ,SAAsD,EACtDK,OAAuB;EAEvB,IAAMC,YAAY,GAA4B;IAAEC,kBAAkB,EAAE;EAAE,CAAE;EAExE,IAAMC,QAAQ,GAAGR,SAAS,CAAC,CAAC,CAAC;EAE7B,IAAI,CAACQ,QAAQ,IAAIR,SAAS,CAACG,MAAM,IAAI,CAAC,EAAE;IACtC,OAAO;MAAEI,kBAAkB,EAAE;IAAE,CAAS;;EAG1C,IAAME,oBAAoB,GAAGf,eAAe,CAAAgB,KAAA,SAAIV,SAAS,CAAC;EAE1D,IAAMW,aAAa,GAAG,EAAE;EAExB,KAAK,IAAMC,YAAY,IAAIH,oBAAoB,EAAE;IAC/C,IAAIA,oBAAoB,CAACI,cAAc,CAACD,YAAY,CAAC,EAAE;MACrD,IAAIA,YAAY,KAAK,oBAAoB,EAAE;QACzCN,YAAY,CAACC,kBAAkB,GAAIE,oBAAmD,CAACF,kBAAkB,IAAI,EAAE;QAC/G;;MAGF,IAAMO,MAAM,GAAYL,oBAA4B,CAACG,YAAY,CAAC;MAE5D,IAAAG,EAAA,GAAuBpB,iBAAiB,CAACmB,MAAM,CAAC;QAA9CE,OAAO,GAAAD,EAAA,CAAAC,OAAA;QAAEC,OAAO,GAAAF,EAAA,CAAAE,OAA8B;MAEtD,IAAIA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEd,MAAM,EAAE;QACnB,IAAMe,YAAY,GAAGpB,mBAAmB,CAACO,OAAO,IAAI,EAAE,EAAE;UAAEc,WAAW,EAAEP;QAAY,CAAE,EAAEK,OAAO,CAAC;QAE/F,IAAIC,YAAY,EAAE;UAChBP,aAAa,CAACS,IAAI,CAACF,YAAY,CAAC;UAChC;UACCZ,YAAoC,CAACM,YAAY,CAAC,GAAGI,OAAO,CAACK,MAAM,CAAC,CAACH,YAAY,CAACI,SAAS,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;;OAE3G,MAAM;QACL;QACCjB,YAAoC,CAACM,YAAY,CAAC,GAAGI,OAAO,CAACO,IAAI,CAAC,GAAG,CAAC;;;;EAK7E,KAA2B,IAAAtB,EAAA,IAAa,EAAbuB,eAAA,GAAAb,aAAa,EAAbV,EAAA,GAAAuB,eAAA,CAAArB,MAAa,EAAbF,EAAA,EAAa,EAAE;IAArC,IAAMiB,YAAY,GAAAM,eAAA,CAAAvB,EAAA;IACrB,IAAIiB,YAAY,EAAE;MAChBrB,iBAAiB,CAACqB,YAAY,EAAEb,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEoB,qBAAqB,CAAC;;;EAInE,OAAOnB,YAAmB;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}