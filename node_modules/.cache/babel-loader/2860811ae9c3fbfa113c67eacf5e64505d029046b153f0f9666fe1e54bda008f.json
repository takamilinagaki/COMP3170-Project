{"ast":null,"code":"import { getWindow } from './dom/getWindow';\nimport { isDirectionalKeyCode } from './keyboard';\nimport { setFocusVisibility } from './setFocusVisibility';\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\n *    so it's safe to call this method multiple times.)\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param window - the window used to add the event listeners\n * @deprecated Use useFocusRects hook or FocusRects component instead.\n */\nexport function initializeFocusRects(window) {\n  var _a;\n  var win = window || getWindow();\n  if (!win || ((_a = win.FabricConfig) === null || _a === void 0 ? void 0 : _a.disableFocusRects) === true) {\n    return;\n  }\n  if (!win.__hasInitializeFocusRects__) {\n    win.__hasInitializeFocusRects__ = true;\n    win.addEventListener('mousedown', _onMouseDown, true);\n    win.addEventListener('pointerdown', _onPointerDown, true);\n    win.addEventListener('keydown', _onKeyDown, true);\n  }\n}\nfunction _onMouseDown(ev) {\n  setFocusVisibility(false, ev.target);\n}\nfunction _onPointerDown(ev) {\n  if (ev.pointerType !== 'mouse') {\n    setFocusVisibility(false, ev.target);\n  }\n}\nfunction _onKeyDown(ev) {\n  // eslint-disable-next-line deprecation/deprecation\n  isDirectionalKeyCode(ev.which) && setFocusVisibility(true, ev.target);\n}","map":{"version":3,"names":["getWindow","isDirectionalKeyCode","setFocusVisibility","initializeFocusRects","window","win","_a","FabricConfig","disableFocusRects","__hasInitializeFocusRects__","addEventListener","_onMouseDown","_onPointerDown","_onKeyDown","ev","target","pointerType","which"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/src/initializeFocusRects.ts"],"sourcesContent":["import { getWindow } from './dom/getWindow';\nimport { isDirectionalKeyCode } from './keyboard';\nimport { setFocusVisibility } from './setFocusVisibility';\n\ntype AppWindow =\n  | (Window & {\n      __hasInitializeFocusRects__: boolean;\n      FabricConfig?: { disableFocusRects?: boolean };\n    })\n  | undefined;\n\n/**\n * Initializes the logic which:\n *\n * 1. Subscribes keydown and mousedown events. (It will only do it once per window,\n *    so it's safe to call this method multiple times.)\n * 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname\n *    to the document body, removes the 'ms-Fabric-isFocusHidden' classname.\n * 3. When the user clicks a mouse button, adds the 'ms-Fabric-isFocusHidden' classname to the\n *    document body, removes the 'ms-Fabric--isFocusVisible' classname.\n *\n * This logic allows components on the page to conditionally render focus treatments based on\n * the existence of global classnames, which simplifies logic overall.\n *\n * @param window - the window used to add the event listeners\n * @deprecated Use useFocusRects hook or FocusRects component instead.\n */\nexport function initializeFocusRects(window?: Window): void {\n  const win = (window || getWindow()) as AppWindow;\n  if (!win || win.FabricConfig?.disableFocusRects === true) {\n    return;\n  }\n\n  if (!win.__hasInitializeFocusRects__) {\n    win.__hasInitializeFocusRects__ = true;\n    win.addEventListener('mousedown', _onMouseDown, true);\n    win.addEventListener('pointerdown', _onPointerDown, true);\n    win.addEventListener('keydown', _onKeyDown as () => void, true);\n  }\n}\n\nfunction _onMouseDown(ev: MouseEvent): void {\n  setFocusVisibility(false, ev.target as Element);\n}\n\nfunction _onPointerDown(ev: PointerEvent): void {\n  if (ev.pointerType !== 'mouse') {\n    setFocusVisibility(false, ev.target as Element);\n  }\n}\n\nfunction _onKeyDown(ev: KeyboardEvent): void {\n  // eslint-disable-next-line deprecation/deprecation\n  isDirectionalKeyCode(ev.which) && setFocusVisibility(true, ev.target as Element);\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,oBAAoB,QAAQ,YAAY;AACjD,SAASC,kBAAkB,QAAQ,sBAAsB;AASzD;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUC,oBAAoBA,CAACC,MAAe;;EAClD,IAAMC,GAAG,GAAID,MAAM,IAAIJ,SAAS,EAAgB;EAChD,IAAI,CAACK,GAAG,IAAI,EAAAC,EAAA,GAAAD,GAAG,CAACE,YAAY,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,iBAAiB,MAAK,IAAI,EAAE;IACxD;;EAGF,IAAI,CAACH,GAAG,CAACI,2BAA2B,EAAE;IACpCJ,GAAG,CAACI,2BAA2B,GAAG,IAAI;IACtCJ,GAAG,CAACK,gBAAgB,CAAC,WAAW,EAAEC,YAAY,EAAE,IAAI,CAAC;IACrDN,GAAG,CAACK,gBAAgB,CAAC,aAAa,EAAEE,cAAc,EAAE,IAAI,CAAC;IACzDP,GAAG,CAACK,gBAAgB,CAAC,SAAS,EAAEG,UAAwB,EAAE,IAAI,CAAC;;AAEnE;AAEA,SAASF,YAAYA,CAACG,EAAc;EAClCZ,kBAAkB,CAAC,KAAK,EAAEY,EAAE,CAACC,MAAiB,CAAC;AACjD;AAEA,SAASH,cAAcA,CAACE,EAAgB;EACtC,IAAIA,EAAE,CAACE,WAAW,KAAK,OAAO,EAAE;IAC9Bd,kBAAkB,CAAC,KAAK,EAAEY,EAAE,CAACC,MAAiB,CAAC;;AAEnD;AAEA,SAASF,UAAUA,CAACC,EAAiB;EACnC;EACAb,oBAAoB,CAACa,EAAE,CAACG,KAAK,CAAC,IAAIf,kBAAkB,CAAC,IAAI,EAAEY,EAAE,CAACC,MAAiB,CAAC;AAClF"},"metadata":{},"sourceType":"module","externalDependencies":[]}