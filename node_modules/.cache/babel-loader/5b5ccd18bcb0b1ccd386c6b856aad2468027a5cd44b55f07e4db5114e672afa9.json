{"ast":null,"code":"import { memoizeFunction } from '../../Utilities';\nimport { mergeStyles } from '../../Styling';\nexport var getClassNames = memoizeFunction(function (styles, className, isOpen, disabled, required, focused, allowFreeForm, hasErrorMessage) {\n  return {\n    container: mergeStyles('ms-ComboBox-container', className, styles.container),\n    label: mergeStyles(styles.label, disabled && styles.labelDisabled),\n    root: mergeStyles('ms-ComboBox', hasErrorMessage ? styles.rootError : isOpen && 'is-open', required && 'is-required', styles.root, !allowFreeForm && styles.rootDisallowFreeForm, hasErrorMessage && !focused ? styles.rootError : !disabled && focused && styles.rootFocused, !disabled && {\n      selectors: {\n        ':hover': hasErrorMessage ? styles.rootError : !isOpen && !focused && styles.rootHovered,\n        ':active': hasErrorMessage ? styles.rootError : styles.rootPressed,\n        ':focus': hasErrorMessage ? styles.rootError : styles.rootFocused\n      }\n    }, disabled && ['is-disabled', styles.rootDisabled]),\n    input: mergeStyles('ms-ComboBox-Input', styles.input, disabled && styles.inputDisabled),\n    errorMessage: mergeStyles(styles.errorMessage),\n    callout: mergeStyles('ms-ComboBox-callout', styles.callout),\n    optionsContainerWrapper: mergeStyles('ms-ComboBox-optionsContainerWrapper', styles.optionsContainerWrapper),\n    optionsContainer: mergeStyles('ms-ComboBox-optionsContainer', styles.optionsContainer),\n    header: mergeStyles('ms-ComboBox-header', styles.header),\n    divider: mergeStyles('ms-ComboBox-divider', styles.divider),\n    screenReaderText: mergeStyles(styles.screenReaderText)\n  };\n});\nexport var getComboBoxOptionClassNames = memoizeFunction(function (styles) {\n  return {\n    optionText: mergeStyles('ms-ComboBox-optionText', styles.optionText),\n    root: mergeStyles('ms-ComboBox-option', styles.root, {\n      selectors: {\n        ':hover': styles.rootHovered,\n        ':focus': styles.rootFocused,\n        ':active': styles.rootPressed\n      }\n    }),\n    optionTextWrapper: mergeStyles(styles.optionTextWrapper)\n  };\n});","map":{"version":3,"names":["memoizeFunction","mergeStyles","getClassNames","styles","className","isOpen","disabled","required","focused","allowFreeForm","hasErrorMessage","container","label","labelDisabled","root","rootError","rootDisallowFreeForm","rootFocused","selectors","rootHovered","rootPressed","rootDisabled","input","inputDisabled","errorMessage","callout","optionsContainerWrapper","optionsContainer","header","divider","screenReaderText","getComboBoxOptionClassNames","optionText","optionTextWrapper"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/react/lib/components/src/components/ComboBox/ComboBox.classNames.ts"],"sourcesContent":["import { memoizeFunction } from '../../Utilities';\nimport { mergeStyles } from '../../Styling';\nimport type { IComboBoxStyles, IComboBoxOptionStyles } from './ComboBox.types';\n\nexport interface IComboBoxClassNames {\n  container: string;\n  label: string;\n  root: string;\n  input: string;\n  errorMessage: string;\n  callout: string;\n  optionsContainer: string;\n  header: string;\n  divider: string;\n  optionsContainerWrapper: string;\n  screenReaderText: string;\n}\n\nexport interface IComboBoxOptionClassNames {\n  optionText: string;\n  root: string;\n  optionTextWrapper: string;\n}\n\nexport const getClassNames = memoizeFunction(\n  (\n    styles: Partial<IComboBoxStyles>,\n    className: string,\n    isOpen: boolean,\n    disabled: boolean,\n    required: boolean,\n    focused: boolean,\n    allowFreeForm: boolean,\n    hasErrorMessage: boolean,\n  ): IComboBoxClassNames => {\n    return {\n      container: mergeStyles('ms-ComboBox-container', className, styles.container),\n      label: mergeStyles(styles.label, disabled && styles.labelDisabled),\n      root: mergeStyles(\n        'ms-ComboBox',\n        hasErrorMessage ? styles.rootError : isOpen && 'is-open',\n        required && 'is-required',\n        styles.root,\n        !allowFreeForm && styles.rootDisallowFreeForm,\n        hasErrorMessage && !focused ? styles.rootError : !disabled && focused && styles.rootFocused,\n        !disabled && {\n          selectors: {\n            ':hover': hasErrorMessage ? styles.rootError : !isOpen && !focused && styles.rootHovered,\n            ':active': hasErrorMessage ? styles.rootError : styles.rootPressed,\n            ':focus': hasErrorMessage ? styles.rootError : styles.rootFocused,\n          },\n        },\n        disabled && ['is-disabled', styles.rootDisabled],\n      ),\n      input: mergeStyles('ms-ComboBox-Input', styles.input, disabled && styles.inputDisabled),\n      errorMessage: mergeStyles(styles.errorMessage),\n      callout: mergeStyles('ms-ComboBox-callout', styles.callout),\n      optionsContainerWrapper: mergeStyles('ms-ComboBox-optionsContainerWrapper', styles.optionsContainerWrapper),\n      optionsContainer: mergeStyles('ms-ComboBox-optionsContainer', styles.optionsContainer),\n      header: mergeStyles('ms-ComboBox-header', styles.header),\n      divider: mergeStyles('ms-ComboBox-divider', styles.divider),\n      screenReaderText: mergeStyles(styles.screenReaderText),\n    };\n  },\n);\n\nexport const getComboBoxOptionClassNames = memoizeFunction(\n  (styles: Partial<IComboBoxOptionStyles>): IComboBoxOptionClassNames => {\n    return {\n      optionText: mergeStyles('ms-ComboBox-optionText', styles.optionText),\n      root: mergeStyles('ms-ComboBox-option', styles.root, {\n        selectors: {\n          ':hover': styles.rootHovered,\n          ':focus': styles.rootFocused,\n          ':active': styles.rootPressed,\n        },\n      }),\n      optionTextWrapper: mergeStyles(styles.optionTextWrapper),\n    };\n  },\n);\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,iBAAiB;AACjD,SAASC,WAAW,QAAQ,eAAe;AAuB3C,OAAO,IAAMC,aAAa,GAAGF,eAAe,CAC1C,UACEG,MAAgC,EAChCC,SAAiB,EACjBC,MAAe,EACfC,QAAiB,EACjBC,QAAiB,EACjBC,OAAgB,EAChBC,aAAsB,EACtBC,eAAwB;EAExB,OAAO;IACLC,SAAS,EAAEV,WAAW,CAAC,uBAAuB,EAAEG,SAAS,EAAED,MAAM,CAACQ,SAAS,CAAC;IAC5EC,KAAK,EAAEX,WAAW,CAACE,MAAM,CAACS,KAAK,EAAEN,QAAQ,IAAIH,MAAM,CAACU,aAAa,CAAC;IAClEC,IAAI,EAAEb,WAAW,CACf,aAAa,EACbS,eAAe,GAAGP,MAAM,CAACY,SAAS,GAAGV,MAAM,IAAI,SAAS,EACxDE,QAAQ,IAAI,aAAa,EACzBJ,MAAM,CAACW,IAAI,EACX,CAACL,aAAa,IAAIN,MAAM,CAACa,oBAAoB,EAC7CN,eAAe,IAAI,CAACF,OAAO,GAAGL,MAAM,CAACY,SAAS,GAAG,CAACT,QAAQ,IAAIE,OAAO,IAAIL,MAAM,CAACc,WAAW,EAC3F,CAACX,QAAQ,IAAI;MACXY,SAAS,EAAE;QACT,QAAQ,EAAER,eAAe,GAAGP,MAAM,CAACY,SAAS,GAAG,CAACV,MAAM,IAAI,CAACG,OAAO,IAAIL,MAAM,CAACgB,WAAW;QACxF,SAAS,EAAET,eAAe,GAAGP,MAAM,CAACY,SAAS,GAAGZ,MAAM,CAACiB,WAAW;QAClE,QAAQ,EAAEV,eAAe,GAAGP,MAAM,CAACY,SAAS,GAAGZ,MAAM,CAACc;;KAEzD,EACDX,QAAQ,IAAI,CAAC,aAAa,EAAEH,MAAM,CAACkB,YAAY,CAAC,CACjD;IACDC,KAAK,EAAErB,WAAW,CAAC,mBAAmB,EAAEE,MAAM,CAACmB,KAAK,EAAEhB,QAAQ,IAAIH,MAAM,CAACoB,aAAa,CAAC;IACvFC,YAAY,EAAEvB,WAAW,CAACE,MAAM,CAACqB,YAAY,CAAC;IAC9CC,OAAO,EAAExB,WAAW,CAAC,qBAAqB,EAAEE,MAAM,CAACsB,OAAO,CAAC;IAC3DC,uBAAuB,EAAEzB,WAAW,CAAC,qCAAqC,EAAEE,MAAM,CAACuB,uBAAuB,CAAC;IAC3GC,gBAAgB,EAAE1B,WAAW,CAAC,8BAA8B,EAAEE,MAAM,CAACwB,gBAAgB,CAAC;IACtFC,MAAM,EAAE3B,WAAW,CAAC,oBAAoB,EAAEE,MAAM,CAACyB,MAAM,CAAC;IACxDC,OAAO,EAAE5B,WAAW,CAAC,qBAAqB,EAAEE,MAAM,CAAC0B,OAAO,CAAC;IAC3DC,gBAAgB,EAAE7B,WAAW,CAACE,MAAM,CAAC2B,gBAAgB;GACtD;AACH,CAAC,CACF;AAED,OAAO,IAAMC,2BAA2B,GAAG/B,eAAe,CACxD,UAACG,MAAsC;EACrC,OAAO;IACL6B,UAAU,EAAE/B,WAAW,CAAC,wBAAwB,EAAEE,MAAM,CAAC6B,UAAU,CAAC;IACpElB,IAAI,EAAEb,WAAW,CAAC,oBAAoB,EAAEE,MAAM,CAACW,IAAI,EAAE;MACnDI,SAAS,EAAE;QACT,QAAQ,EAAEf,MAAM,CAACgB,WAAW;QAC5B,QAAQ,EAAEhB,MAAM,CAACc,WAAW;QAC5B,SAAS,EAAEd,MAAM,CAACiB;;KAErB,CAAC;IACFa,iBAAiB,EAAEhC,WAAW,CAACE,MAAM,CAAC8B,iBAAiB;GACxD;AACH,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}