{"ast":null,"code":"var REACT_LIFECYCLE_EXCLUSIONS = ['setState', 'render', 'componentWillMount', 'UNSAFE_componentWillMount', 'componentDidMount', 'componentWillReceiveProps', 'UNSAFE_componentWillReceiveProps', 'shouldComponentUpdate', 'componentWillUpdate', 'getSnapshotBeforeUpdate', 'UNSAFE_componentWillUpdate', 'componentDidUpdate', 'componentWillUnmount'];\n/**\n * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.\n *\n * @public\n * @param destination - The instance of the object to hoist the methods onto.\n * @param source - The instance of the object where the methods are hoisted from.\n * @param exclusions - (Optional) What methods to exclude from being hoisted.\n * @returns An array of names of methods that were hoisted.\n */\nexport function hoistMethods(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndestination,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nsource, exclusions) {\n  if (exclusions === void 0) {\n    exclusions = REACT_LIFECYCLE_EXCLUSIONS;\n  }\n  var hoisted = [];\n  var _loop_1 = function (methodName) {\n    if (typeof source[methodName] === 'function' && destination[methodName] === undefined && (!exclusions || exclusions.indexOf(methodName) === -1)) {\n      hoisted.push(methodName);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      destination[methodName] = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        source[methodName].apply(source, args);\n      };\n    }\n  };\n  for (var methodName in source) {\n    _loop_1(methodName);\n  }\n  return hoisted;\n}\n/**\n * Provides a method for convenience to unhoist hoisted methods.\n *\n * @public\n * @param source - The source object upon which methods were hoisted.\n * @param methodNames - An array of method names to unhoist.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function unhoistMethods(source, methodNames) {\n  methodNames.forEach(function (methodName) {\n    return delete source[methodName];\n  });\n}","map":{"version":3,"names":["REACT_LIFECYCLE_EXCLUSIONS","hoistMethods","destination","source","exclusions","hoisted","methodName","undefined","indexOf","push","args","_i","arguments","length","apply","unhoistMethods","methodNames","forEach"],"sources":["/Users/jerrywuyongon/node_modules/@fluentui/utilities/src/hoist.ts"],"sourcesContent":["const REACT_LIFECYCLE_EXCLUSIONS = [\n  'setState',\n  'render',\n  'componentWillMount',\n  'UNSAFE_componentWillMount',\n  'componentDidMount',\n  'componentWillReceiveProps',\n  'UNSAFE_componentWillReceiveProps',\n  'shouldComponentUpdate',\n  'componentWillUpdate',\n  'getSnapshotBeforeUpdate',\n  'UNSAFE_componentWillUpdate',\n  'componentDidUpdate',\n  'componentWillUnmount',\n];\n\n/**\n * Allows you to hoist methods, except those in an exclusion set from a source object into a destination object.\n *\n * @public\n * @param destination - The instance of the object to hoist the methods onto.\n * @param source - The instance of the object where the methods are hoisted from.\n * @param exclusions - (Optional) What methods to exclude from being hoisted.\n * @returns An array of names of methods that were hoisted.\n */\nexport function hoistMethods(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  destination: any,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  source: any,\n  exclusions: string[] = REACT_LIFECYCLE_EXCLUSIONS,\n): string[] {\n  let hoisted: string[] = [];\n  for (let methodName in source) {\n    if (\n      typeof source[methodName] === 'function' &&\n      destination[methodName] === undefined &&\n      (!exclusions || exclusions.indexOf(methodName) === -1)\n    ) {\n      hoisted.push(methodName);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      destination[methodName] = function (...args: any[]): void {\n        source[methodName](...args);\n      };\n    }\n  }\n\n  return hoisted;\n}\n\n/**\n * Provides a method for convenience to unhoist hoisted methods.\n *\n * @public\n * @param source - The source object upon which methods were hoisted.\n * @param methodNames - An array of method names to unhoist.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function unhoistMethods(source: any, methodNames: string[]): void {\n  methodNames.forEach((methodName: string) => delete source[methodName]);\n}\n"],"mappings":"AAAA,IAAMA,0BAA0B,GAAG,CACjC,UAAU,EACV,QAAQ,EACR,oBAAoB,EACpB,2BAA2B,EAC3B,mBAAmB,EACnB,2BAA2B,EAC3B,kCAAkC,EAClC,uBAAuB,EACvB,qBAAqB,EACrB,yBAAyB,EACzB,4BAA4B,EAC5B,oBAAoB,EACpB,sBAAsB,CACvB;AAED;;;;;;;;;AASA,OAAM,SAAUC,YAAYA;AAC1B;AACAC,WAAgB;AAChB;AACAC,MAAW,EACXC,UAAiD;EAAjD,IAAAA,UAAA;IAAAA,UAAA,GAAAJ,0BAAiD;EAAA;EAEjD,IAAIK,OAAO,GAAa,EAAE;0BACjBC,UAAU;IACjB,IACE,OAAOH,MAAM,CAACG,UAAU,CAAC,KAAK,UAAU,IACxCJ,WAAW,CAACI,UAAU,CAAC,KAAKC,SAAS,KACpC,CAACH,UAAU,IAAIA,UAAU,CAACI,OAAO,CAACF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EACtD;MACAD,OAAO,CAACI,IAAI,CAACH,UAAU,CAAC;MACxB;MACAJ,WAAW,CAACI,UAAU,CAAC,GAAG;QAAU,IAAAI,IAAA;aAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;UAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;QAClCR,MAAM,CAACG,UAAU,CAAC,CAAAQ,KAAA,CAAlBX,MAAM,EAAgBO,IAAI;MAC5B,CAAC;;;EAVL,KAAK,IAAIJ,UAAU,IAAIH,MAAM;YAApBG,UAAU;;EAcnB,OAAOD,OAAO;AAChB;AAEA;;;;;;;AAOA;AACA,OAAM,SAAUU,cAAcA,CAACZ,MAAW,EAAEa,WAAqB;EAC/DA,WAAW,CAACC,OAAO,CAAC,UAACX,UAAkB;IAAK,cAAOH,MAAM,CAACG,UAAU,CAAC;EAAzB,CAAyB,CAAC;AACxE"},"metadata":{},"sourceType":"module","externalDependencies":[]}